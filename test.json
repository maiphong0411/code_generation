{
    "instruction": {
        "0": "Create a function to calculate the sum of a sequence of integers.",
        "1": "Generate a Python code for crawling a website for a specific type of data.",
        "2": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].",
        "3": "Generate a python script to perform this action.",
        "4": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3.",
        "5": "Write a Python code to get the third largest element in a given row.",
        "6": "Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.",
        "7": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.",
        "8": "What should this Python program do?",
        "9": "Create a Python program to sort and print out the elements of an array of integers.",
        "10": "Generate a Python program that adds two then doubles the result.",
        "11": "Write a python program to extract the non-vowel words in a sentence.",
        "12": "Write a Python program to calculate the average of a list of positive integers and output the result.",
        "13": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows.",
        "14": "Implement a decision-making algorithm for a rock-paper-scissors game using Python.",
        "15": "Collate a machine learning model in Python that distinguishes between cats and dogs.",
        "16": "Write a Python program to find all the numbers divisible by a certain number within a certain range.",
        "17": "Implement a Python function that will take two strings and return true if the first string contains the second.",
        "18": "Write an algorithm in Python 3 that calculates the factorial of a number.",
        "19": "Develop a Python function to predict the class labels of a given set of data.",
        "20": "Develop a Python program to generate random passwords that consist of 8 characters.",
        "21": "Generate a list using a while loop in Python and appends the current number to the list.",
        "22": "Write a Python program to query Twitter to get the most recent tweets from a user.",
        "23": "Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.",
        "24": "Create a way to encrypt a message using a key in Python.",
        "25": "Create a function in Python that takes two parameters and prints out the larger of them.",
        "26": "Rewrite the following Python code by introducing list comprehensions.",
        "27": "Develop an algorithm in Python to print Fibonacci series up to a given number.",
        "28": "Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle",
        "29": "Write a function in Python to calculate the sum of the digits in a given number.",
        "30": "Take the list of people below and create a Python dictionary with the names as keys and the ages as values.",
        "31": "Develop a Python program to clearly understand the concept of recursion.",
        "32": "Generate a random 6-digits number in Python.",
        "33": "Create a sorting algorithm in Python to sort strings by their length.",
        "34": "Write a Python function to get the maximum and minimum values in a given list.",
        "35": "Create a for loop in Python to iterate over a list of numbers and print only the even numbers.",
        "36": "Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?",
        "37": "Construct a neural network model in Python to classify the MNIST data set correctly.",
        "38": "Create a machine learning classifier in Python for categorizing user input.",
        "39": "Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.",
        "40": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "41": "Convert a given Python program to a C# program.",
        "42": "Rewrite the following code in a different programming language.",
        "43": "Create a TicTacToe game in Python.",
        "44": "Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.",
        "45": "Use the inputs provided, write Python code to check if two integers are equal.",
        "46": "Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.",
        "47": "Create a Python program to calculate the average of five numbers entered by a user.",
        "48": "Write a Python program to generate a Markov chain given a text input.",
        "49": "Write a Python program to determine if a number provided by the user is prime or not.",
        "50": "Write a Python program to calculate the difference between the lowest and highest value for an array of integers.",
        "51": "Rewrite the following code snippet to find prime numbers using Python.",
        "52": "Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.",
        "53": "Write a Python program to calculate the sum of all even numbers less than or equal to n.",
        "54": "Create a Python script to calculate the Fibonacci numbers up to a given number.",
        "55": "Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.",
        "56": "In Python, create a function to find the maximum value within a nested dictionary.",
        "57": "Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.",
        "58": "Generate a Python program to perform matrix multiplication on two given matrices.",
        "59": "Write a Python script to read an array from the user and then determine the mean and median of the array.",
        "60": "Create an algorithm in Python to check whether an array has even or odd number of elements.",
        "61": "Implement a Python function to calculate the Gini coefficient of a given dataset.",
        "62": "Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.",
        "63": "Write a function to generate a prime number sequence using Python.",
        "64": "Write a Python program that removes duplicates from a list.",
        "65": "Generate a Python script to sort the given list of words.",
        "66": "Generate a function for calculating the average of a list of numbers in Python.",
        "67": "Generate a Python program that compares two binary trees to check if they are similar.",
        "68": "Create a program for solving a quadratic equation in Python.",
        "69": "Construct a Python code for adding two matrices.",
        "70": "Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.",
        "71": "Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.",
        "72": "Develop a Python program to find the common elements in two lists.",
        "73": "Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.",
        "74": "Generate a Python program to convert a string to its lowercase version.",
        "75": "Can you generate a function in Python that shuffles a given list?",
        "76": "Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.",
        "77": "Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.",
        "78": "Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.",
        "79": "Write a python program to clean up a list of emails and put them into a new list.",
        "80": "Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.",
        "81": "Create a Python algorithm to classify positive and negative sentiment in tweets.",
        "82": "Parse the given URL and print out the protocol, domain name, and path using Python.",
        "83": "Write a recursive Python function to generate Fibonacci numbers.",
        "84": "Create a Kubernetes pod setup that publishes a tweet every 5 minutes.",
        "85": "Write a code to generate a two-dimensional array with zeros shapes in Python",
        "86": "Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.",
        "87": "Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".",
        "88": "Create a Python program to calculate the square root of a user-defined positive number.",
        "89": "Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.",
        "90": "Create a data visualization dashboard in Python using Matplotlib.",
        "91": "Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.",
        "92": "Create a Python algorithm to identify the longest word in a sentence.",
        "93": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius.",
        "94": "Generate a Python function that checks if a given number is an Armstrong number.",
        "95": "Write a code in Python to print the following pattern:",
        "96": "Program a web scraper in Python to extract the latest stock prices from specific websites.",
        "97": "The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.",
        "98": "Write a Python program to compute the sum of the values of a given dictionary",
        "99": "Create a REST API in Python that can be used to delete an item from a list.",
        "100": "Read a given list of strings and create a new list of all strings that are longer than 5 characters long.",
        "101": "Craft an algorithm in Python to move all zeroes in a list to the end of the list.",
        "102": "Create a Python program to implement the Fibonacci sequence.",
        "103": "Write a function in Python to print out an array backwards.",
        "104": "Create a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm.",
        "105": "Create a Python function named \"Transpile\" that takes in four arguments: \"src_dir\", \"dst_dir\", \"model_filename\", and \"params_filename\". Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the \"src_dir\", \"exe\", \"model_filename\", and \"params_filename\" arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to \"dst_dir\" using fluid.io.save_persistables() and the \"inference_transpiler_program\" and \"params_filename\" arguments. If \"dst_dir\" does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the \"Transpile\" function with the parsed arguments.",
        "106": "Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.",
        "107": "Design a positive feedback loop for the following python program.",
        "108": "Implement a function that prints out the numbers from 1 to 50 in python",
        "109": "Write a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address.",
        "110": "Create a Python class which represents a 3D Vector",
        "111": "Given two strings, write a Python program to find the total number of common characters present in both strings",
        "112": "Modify the following Python code to handle errors.",
        "113": "Analyze a given Python code and write a function that checks if a given number is prime.",
        "114": "Create a python program to filter out all the even numbers from a given list.",
        "115": "Implement a function in Python that takes a Huffman tree and drop all its leaf nodes.",
        "116": "Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content.",
        "117": "Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.",
        "118": "Write a Python program to calculate the compound interest.",
        "119": "Create a command-line application in Python that stores customer data and allows customer to query by customer name",
        "120": "Develop a program in Python to calculate the Fibonacci sequence.",
        "121": "Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.",
        "122": "Design an algorithm in Python to find the smallest number in a given list.",
        "123": "Generate a python program for printing a Pascal triangle.",
        "124": "Create a python script that filters out all negative numbers from the given matrix",
        "125": "Create a basic REST API using Python and Flask to list all the countries in the world.",
        "126": "Create a web scraper in Python that can extract hotel reviews from TripAdvisor.",
        "127": "Develop a machine learning model in Python to identify the author of a given article.",
        "128": "Write a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum.",
        "129": "Develop an algorithm to detect and fix Python syntax errors in a given code snippet.",
        "130": "Design a data structure in Python to store integer values.",
        "131": "Create an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.",
        "132": "Given a list of strings, write a Python function to remove all the whitespaces from each string.",
        "133": "Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm.",
        "134": "Create a system in Python for generating natural language responses.",
        "135": "Create a web scraper using Python that collects the title and content from the homepage of a given website.",
        "136": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.",
        "137": "Generate a Python program to clean a string of HTML tags.",
        "138": "Generate a Python function that takes an integer array as input and returns the number of unique elements in the array.",
        "139": "Create a Python program to scrape an online news website to get the headlines.",
        "140": "Edit the given Python program to print 'Happy Holidays' 10 times.",
        "141": "Combine 2 strings and reverse the result in Python.",
        "142": "Create a class to represent a bank account in Python.",
        "143": "Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.",
        "144": "Design a Python program to perform linear regression for predicting the numbers in a given dataset.",
        "145": "Create a Python object that contains two attributes, \"Name\" and \"Age\".",
        "146": "Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.",
        "147": "Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.",
        "148": "Create a Python script to filter out all the vowels from a string.",
        "149": "In Python, write a script to sort the list items in descending order.",
        "150": "Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.",
        "151": "Create an object-oriented structure to solve a maze by using python.",
        "152": "Compose a piece of code to print the length of a given string.",
        "153": "Compose a Python program to calculate the maximum possible revenue from the items with given weights and values.",
        "154": "Write a Python program to read in a tweet and remove all punctuation, special characters and stopwords.",
        "155": "Implement a web scraper in Python to extract the top ten trending YouTube videos.",
        "156": "Make a code in Python to find the mode of the given set of values.",
        "157": "Create a web API with Python and Flask to give the current date and time.",
        "158": "Create a Python function that takes a list containing fruit names and returns the most common fruit name.",
        "159": "Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.",
        "160": "Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.",
        "161": "Create a program in Python that takes a number from the user and prints all the divisors of the number.",
        "162": "Write a Python program to generate an HTML page containing a table with some employee data.",
        "163": "Create a Python function to select all rows from a table where the 'status' is 'approved'",
        "164": "Create a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number.",
        "165": "Generate a solution to translate a text from English to French using Python.",
        "166": "Create a function to generate a unique 6 digit number.",
        "167": "Write a Python program to generate 10 random numbers and put them in a list.",
        "168": "Write a Python program to replace all occurrences of a given string with an alternate string.",
        "169": "Generate a Python class for an online store item that includes fields for ID, name, price, and description.",
        "170": "Create a virtual assistant using Python and Dialogflow to answer a basic set of questions.",
        "171": "Create an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem.",
        "172": "Generate an api response in Python for the provided data.",
        "173": "Create a webscraper using Python\u2019s Selenium that retrieves data from an online store.",
        "174": "Develop a web scraper with Python BeautifulSoup to scrape data from an online web store.",
        "175": "Implement a basic algorithm in Python to calculate the nth Fibonacci number.",
        "176": "Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.",
        "177": "Generate a program in Python to evaluate the accuracy of a machine-learning model.",
        "178": "Write a Python program to replace all occurrences of a character in a string with the provided replacement character.",
        "179": "Create a python program to find the largest prime factor of a number.",
        "180": "Write a Python program to check if an element exists within a given list of integers.",
        "181": "Create a Python program that takes a sentence and converts it to Morse code.",
        "182": "Generate a python program to sort a list of numbers",
        "183": "Create a program in Python to remove all the occurrences of an item from a list.",
        "184": "Could you build a web scraper in Python that collects all the links from a website?",
        "185": "Generate a Python program to delete a given key from a dictionary.",
        "186": "Analyze the following Python function to detect any potential errors.",
        "187": "Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same.",
        "188": "Port a Java code snippet to Python 3.",
        "189": "Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.",
        "190": "Build a Python program that extracts all email addresses from a given string.",
        "191": "Create a Python code to generate a random string of length 8 made of uppercase letters and numbers.",
        "192": "This code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command \".\/rRNA_MT_count.py --gtf \/path\/to\/GTF\/file --htseq \/path\/to\/HTseq_counts\/file\". The script will extract all the identifiers of genes\/transcripts mapping to the rRNA and MT genes and store them in two arrays. Then, it will count reads matching the rRNA identifiers and write the output files. The summary output file will be named \"HTseq_counts_file_rRNAmtRNACounts.txt\".",
        "193": "Modify the following Python code to raise an exception if the input value is not an integer",
        "194": "Create a program in Python that extracts titles of all YouTube videos from a URL.",
        "195": "Write Python code to list the contents of a directory.",
        "196": "Create an AI-powered Python script to optimize any given code.",
        "197": "Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.",
        "198": "Create a neural network class in Python to model a linear regression function.",
        "199": "Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.",
        "200": "Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.",
        "201": "Write a Python script to identify the words that contain more than one vowel in a given sentence.",
        "202": "This code provides a Python API for KB SRU. To use it, you can create an instance of the \"sru\" class and call its \"search\" method, passing in a query string and optionally a collection name, start record number, maximum number of records to return, and record schema. The method will return a \"response\" object containing the results of the search. You can then use the various properties of the \"response\" object to extract specific information from the search results, such as titles, creators, and subjects.",
        "203": "Using numpy, create a Python code which would return an array with the running total of numbers in a given list.",
        "204": "Construct a neural network in Python that can perform basic regression.",
        "205": "Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings.",
        "206": "Create a web scraper using Python that retrieves the 10 most recent articles from a news website.",
        "207": "Create a Python program to convert HTML to plain text without using any libraries.",
        "208": "Write a python program to convert the given temperature from Celsius to Fahrenheit.",
        "209": "Create a lambda expression in Python to filter a list of integer greater than 50.",
        "210": "Create a Python program to evaluate and compare the performance of two different heuristics algorithms.",
        "211": "Generate a function in Python that takes in a dictionary (string \u2192 integer) and returns the sum of all values in the dictionary.",
        "212": "Write a Python script that filters a list of integers and returns only even numbers.",
        "213": "Generate a Python program that takes a sentence as input and prints out only the verbs.",
        "214": "Create an AI-based system in Python for predicting stock market movements.",
        "215": "Develop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON.",
        "216": "Generate a Python dictionary that contains the count of the characters in a given string.",
        "217": "Write a Python program to store and querying user data.",
        "218": "You are required to write a Python program to optimize an equation.",
        "219": "Generate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string.",
        "220": "Create a web scraper that extracts specific data from a given website.",
        "221": "Construct a script in Bash that can install a given software.",
        "222": "Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.",
        "223": "Create a Python script that adds two numbers together and prints the result.",
        "224": "Design an algorithm in Python to find the most common elements in an array of integers.",
        "225": "Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].",
        "226": "Create a Python script to analyze the sentiment of a text.",
        "227": "Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.",
        "228": "Generate a Python function to execute a valid insertion sort on a given list of integers.",
        "229": "Generate a program to sort a list of numbers using Insertion Sort algorithm in Python.",
        "230": "Create an Python function that takes a string containing a numerical expression and returns the result.",
        "231": "Given a json-formatted string, create a python program to parse it into a dict.",
        "232": "Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count.",
        "233": "Create a basic CRUD API for the BlogPost model with Python\/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post.",
        "234": "Write a Python program that calculates the distance between two points on a two-dimensional plane.",
        "235": "Create an AI-based chatbot in Python that can answer simple queries about a product or service.",
        "236": "Generate a python program to read the contents from a given URL",
        "237": "Code a function in Python that takes a list of integers (denoted by `lst`) and returns a list of booleans where each element of the output list is `True` if the corresponding element in the input list is a prime number, and `False` otherwise.",
        "238": "Generate a program in Python to output the top 3 numbers from an array of integers",
        "239": "Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.",
        "240": "Edit the following Python program to make a correct API request and parse the response.",
        "241": "Create a Python program that takes in text input from the user and searches a given list of strings to find any matches.",
        "242": "Generate a program in Python to convert all characters of a string in lowercase.",
        "243": "Edit the following Python program to use a dictionary instead of a list.",
        "244": "Construct a prime number sieve in Python which returns a list of all primes up to a given number.",
        "245": "Write a python code to print all prime numbers between 1 and a given number n.",
        "246": "Find the optimal solution to solve a knapsack problem using dynamic programming.",
        "247": "Using Python, create a function that calculates the objective function of a linear equation.",
        "248": "Implement an insertion sort algorithm in Python.",
        "249": "Write a python program to generate a random password given a set of letters, numbers, and characters.",
        "250": "Develop a Python module to generate random numbers.",
        "251": "How do we use recursion to solve a given problem in Python?",
        "252": "Create an application using Python and Flask to submit form data and store it in a database.",
        "253": "Optimize a Python program that processes a 2d array and stores the transpose output in a new array.",
        "254": "Generate a Python script that takes any number of integer arguments and returns their sum.",
        "255": "Create a function in Python which takes a list as input and returns the sum of the items in the list.",
        "256": "Create a Selenium script in Python to automate the login process in a given website.",
        "257": "Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.",
        "258": "Re-write the following SQL query in Python.",
        "259": "Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.",
        "260": "Come up with a correct approach to optimize the following python program.",
        "261": "Design a program in Python to detect the vowel in a given string.",
        "262": "Convert a given SQL statement into a Python Pandas DataFrame.",
        "263": "Using the data provided, generate a histogram in Python.",
        "264": "Create a Python script to populate an array with random numbers from 1-100.",
        "265": "Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text.",
        "266": "Given an array of strings, write a Python function to remove all duplicates and return the resulting array.",
        "267": "Generate a Python script to find the longest common substring in two strings.",
        "268": "Write a function in Python to search for a character in a given string.",
        "269": "Write a python program to parse an XML document and return a list of tag objects.",
        "270": "Based on a given input, create a function in Python to generate a random string of length 6.",
        "271": "Create a Python program to average the elements of a 2-dimensional array.",
        "272": "Generate a code in Python to convert a number into binary format.",
        "273": "Generate a python program that takes an integer and then prints out the factorial of it?",
        "274": "Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.",
        "275": "Build a simple blockchain system in Python.",
        "276": "Write a Python script to find the GCD of two numbers.",
        "277": "Create a program in Python to find the number of occurrences of an element x in a list y.",
        "278": "Write a Python program to convert ratings in a list of strings to a float.",
        "279": "Create a Python program that encrypts a message using a Caesar cipher.",
        "280": "Write a Python program to find the largest three numbers in a list.",
        "281": "Given two binary trees, check if the first tree is subtree of the second tree.",
        "282": "Write a Python program to swap the values of two variables.",
        "283": "Optimize the following Python code to use built-in functions.",
        "284": "Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.",
        "285": "Devise a Python program to determine whether a given number is even or odd.",
        "286": "Compose a basic blockchain system in Python.",
        "287": "Provide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures.",
        "288": "Write a function in Python to sort a dictionary according to its values, in descending order.",
        "289": "Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.",
        "290": "Write a python program to identify if a string s has matching parentheses",
        "291": "Develop a function in Python to take as input two array of integers and swap their elements.",
        "292": "Can you design a function in Python for reversing a list?",
        "293": "Create a Python script to build a dictionary from string to string of the given samples.",
        "294": "Write a Python script to find the average of numbers stored in an array.",
        "295": "Generate a Python program that takes two lists as input and returns a new list containing only the common elements.",
        "296": "Create a loop in Python to print out all the odd numbers from 1 to 10.",
        "297": "Create a machine learning model in Python that predecits customer lifetime value given a customer's past transactions.",
        "298": "Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.",
        "299": "Develop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose.",
        "300": "Write a Python script to generate a random number between 0 and 9.",
        "301": "Create a Python Flask app that listens for POST requests on the '\/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started on port 5000 and run in debug mode.",
        "302": "Modify an existing Python function to eliminate any redundancies",
        "303": "Create a simple chatbot using Python and state diagrams.",
        "304": "Create a Python 3 program that takes an integer input from the user and prints its cube.",
        "305": "Write a Python program to find the first non-repeating character in a given list.",
        "306": "Create a k-means clustering algorithm in Python.",
        "307": "Write a Python code snippet that produces the following output:",
        "308": "Construct a Python class that takes a given number and calculates the sum of the digits.",
        "309": "Implement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order.",
        "310": "Create a feature extraction function in Python to extract data from a json string.",
        "311": "Construct a Python program to combine the elements of two lists into a list of tuples.",
        "312": "Design and implement a neural network in Python to predict the price of a house given a set of features.",
        "313": "Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.",
        "314": "Create a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.",
        "315": "Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers",
        "316": "Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.",
        "317": "In Python, build a program that can remove all vowels from a given string.",
        "318": "Improve the following function by using Python built-in functions:",
        "319": "Write a python code for sorting n distinct integers using insertion sort.",
        "320": "Create a Python script for a django-like ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete.",
        "321": "Can you write a Python script to sort a list of strings alphabetically?",
        "322": "Write a class in Python that can find the median of an unsorted list of numbers.",
        "323": "Generate an array of random numbers in Python.",
        "324": "Compute the edit distance between two strings in Python.",
        "325": "Create a 3-layer artificial neural network using Python and print the outcome.",
        "326": "Create a Python program to read in 15 integers and print the sum of them.",
        "327": "Implement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.",
        "328": "Explain the approach for solving a linear programming problem using the Simplex method in Python.",
        "329": "Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.",
        "330": "Write a python code that takes in a list of integers and removes all the duplicate elements from it.",
        "331": "Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.",
        "332": "Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?",
        "333": "Create a Python program to classify the sentiment of movie reviews using Natural Language Processing.",
        "334": "Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.",
        "335": "Create a class in Python which matches the following criteria.",
        "336": "Create a Python script to scrape a given website.",
        "337": "Create objects of type Student in Python containing relevant attributes.",
        "338": "Design and write a Python program to extract all public email addresses from a given string",
        "339": "Generate a basic REST API with authentication and endpoints in Python.",
        "340": "Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.",
        "341": "Reverse an input string using Python.",
        "342": "Create an algorithm in Python to find the longest common subsequence of two sequences.",
        "343": "Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character.",
        "344": "Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.",
        "345": "Edit the Python program to sort words in a given string by their length in decreasing alphabetical order.",
        "346": "Write a python program to calculate maximum revenue.",
        "347": "Write a Python program to print the following output pattern",
        "348": "Develop a loop that prints a python array from the end to the beginning.",
        "349": "Given a list of phone numbers, extract only the ones that start with 08 using Python.",
        "350": "Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.",
        "351": "Write a function in Python that takes an array of integer values and reverses the order of the values.",
        "352": "Write a function in Python to create a random string of 10 characters.",
        "353": "Develop a Tic Tac Toe game in Python.",
        "354": "Write Python code to merge two sorted lists.",
        "355": "Create a Python program to find the longest common subsequence between two strings.",
        "356": "Construct a naive bayes classifier using python to classify emails as spam or not spam.",
        "357": "This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.",
        "358": "How can you return two values from a Python function?",
        "359": "Generate a Python program to count the number of pairs with given sum x",
        "360": "Create a Celery task in Python to send an email.",
        "361": "Optimize the following python code using best practices",
        "362": "Create a Python program to find the nth Fibonacci number",
        "363": "Write a Python program to identify the largest number in the given list.",
        "364": "Write a Python program to find a substring in a string.",
        "365": "Given a list of numbers, create a Python script to print all the elements greater than 50.",
        "366": "Create a program in Python to sort a given array in ascending order using bubble sort.",
        "367": "Generate a function in Python that takes a number and prints its factors.",
        "368": "Write a python script to generate an array of random numbers between two specified values.",
        "369": "Create a Python program to filter out words containing five characters or less from a list of words.",
        "370": "Create a Python function to identify the number of even numbers present in a given list of numbers.",
        "371": "Write a Python function to generate a random string of length 8 containing alphanumeric characters.",
        "372": "Write a Python program to solve a linear equation system of the form: ax + by = c.",
        "373": "This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.",
        "374": "Create an algorithm in Python to determine the most efficient order of tasks from an array of given tasks.",
        "375": "Optimize a given Python script that reverse a string.",
        "376": "Create an HTML form with a submit button to send information to a Python program.",
        "377": "Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.",
        "378": "Create a Python program to read an array of integers and calculate their sum.",
        "379": "Create a Python program that multiplies two input numbers and prints the result.",
        "380": "The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc').\n- To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.",
        "381": "Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.",
        "382": "Generate a single Python line to create a list that contains elements from another list.",
        "383": "Write a Python function to find the maximum of three numbers.",
        "384": "Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).",
        "385": "Create a Python dictionary to store data about a student.",
        "386": "Write a function in Python to remove duplicate entries from a list.",
        "387": "Given the following array of numbers, write a Python program to find the maximum element.",
        "388": "Create a Python program to compress a given data sequence.",
        "389": "Write a function in python to split an given array into two parts with equal sum.",
        "390": "Create a for loop in Python to calculate the total sum of all elements in the given list.",
        "391": "Suppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix.",
        "392": "Design a neural network in Python to predict a customer\u2019s annual income based on their age and education level.",
        "393": "Create a python program to classify text documents into two classes: positive and negative.",
        "394": "Design a Python program to filter out the odd numbers from a list.",
        "395": "Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes.",
        "396": "Make the following Python code snippet more efficient.",
        "397": "Construct a Python program that computes the area of a circle with the given radius.",
        "398": "Implement a basic version control system in Python that keeps track of changes in the code.",
        "399": "Write a Python program to solve the Towers of Hanoi game.",
        "400": "Analyze a dataset of customers and create a classification model in scikit-learn to determine customer churn.",
        "401": "Create a Django application with a model that stores the name, address, and email of a user.",
        "402": "Create a function in Python to convert a given number into its Roman form.",
        "403": "Create a linked-list in Python that can traverse in both directions.",
        "404": "Program a python code to convert Celsius to Fahrenheit.",
        "405": "Create a machine learning algorithm in Python to categorize a dataset of records.",
        "406": "Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.",
        "407": "Suggest a valid Python syntax to calculate the sum of two variables using lambda",
        "408": "Generate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9",
        "409": "Explain the difference between a ``list`` and a ``tuple`` in Python.",
        "410": "Generate a Python program to calculate the Fibonacci number at a given position.",
        "411": "Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).",
        "412": "Write a Python program to extract all the words starting with a specific letter",
        "413": "Implement a hash table in Python that supports insert, delete and retrieve operations.",
        "414": "Create a search engine in Python to quickly search through a given array.",
        "415": "Create a function in Python that prints out the largest value from a given list of numbers.",
        "416": "Write a python script that takes a list of numbers from 1 to 8  and prints its cubic values.",
        "417": "Create a dictionary in Python with key-value pairs",
        "418": "Write a Python code to find the number of unique paths from a given source to a destination.",
        "419": "Generate a Python program to display a Fibonacci sequence of first n numbers.",
        "420": "This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"list\", \"help\", and \"version\".",
        "421": "Optimize the following Python program to find the maximum number in a list.",
        "422": "Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.",
        "423": "Create a Python program to print a formatted table of grades for a given set of students.",
        "424": "Design a Python code snippet that deletes all duplicates in a given list of numbers.",
        "425": "Write a Python program to visually summarize the Twitter data.",
        "426": "Develop a function in Python that takes in a string of sentences and removes all the punctuations.",
        "427": "Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.",
        "428": "Create a loop in Python that prints each item of the following list with a message:",
        "429": "Develop a regular expression in Python to match all numeric strings.",
        "430": "Create a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretar\u00eda Ejecutiva, Presidencia, and Presupuesto\/Administraci\u00f3n, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administraci\u00f3n and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named \"proc4.png\" and a DOT file named \"proc4.dot\".",
        "431": "Write a python function to calculate an exponential series",
        "432": "Design an algorithm in Python to add two large numbers represented as strings.",
        "433": "Design an algorithm in Python, that takes an array and sort it in ascending order.",
        "434": "Complete the Python class below so that it can calculate the sum of two integers.",
        "435": "Suggest a completion for the following Python code to check if a given number is an Armstrong number.",
        "436": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.",
        "437": "Write a Python program to generate n-grams of the given text with a window size of 3.",
        "438": "Output the Fibonacci sequence as a list of integers in Python",
        "439": "Develop a machine learning algorithm in Python to identify apples from bananas.",
        "440": "Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.",
        "441": "Generate a fuzzy search algorithm in Python that can match strings with near similarities.",
        "442": "Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)",
        "443": "Is it possible to create a HTML page that displays a table of contents from the data stored in a database?",
        "444": "Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.",
        "445": "Implement a supervised learning algorithm in Python for a classification task using the iris dataset.",
        "446": "Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).",
        "447": "Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.",
        "448": "Write a function in Python to count the number of vowels in a string.",
        "449": "Implement a function f() in Python that takes an argument n and prints the multiplication table of n",
        "450": "Write a python program to optimize the given objective function.",
        "451": "Create a Python generator that returns numbers from a given list.",
        "452": "Develop a Python program to create an autocomplete system that predicts words based on the input text.",
        "453": "Write a Python code snippet to print the unique elements of a given list.",
        "454": "Create a Python program that convert a given string to a list of integers.",
        "455": "Create a basic blockchain in Python using only the core modules",
        "456": "Create a Python program to remove all duplicate elements from a list and preserving the original order.",
        "457": "Generate a voltage signal with random noise using a Python script.",
        "458": "Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values.",
        "459": "Construct a Python code that accepts a string as an input and returns the total number of vowels in the string",
        "460": "Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.",
        "461": "Create a Python program that takes a string and indicates whether it is a palindrome or not.",
        "462": "Generate a machine learning model in Python using scikit-learn for classifying digits in the MNIST dataset.",
        "463": "Develop a Python script to generate an RSA public\/private key pair.",
        "464": "Create a web application in Python using Flask that will take user input and generate an HTML page with the input.",
        "465": "Implement a basic machine learning model in Python that performs binary classification on the given data.",
        "466": "Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.",
        "467": "Create an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions, as well as the ability to add additional global variables. The environment can execute Python code and analyze it for variable usage and imports. The environment also includes a stdout object that can be used to capture and display output from executed code.",
        "468": "Write a Python class to modify the case of the string",
        "469": "Generate a Python program to reverse the order of words in a given string.",
        "470": "Write a Python program to replace a given string with another string.",
        "471": "Write a python program to merge two lists of integers into one sorted list without using the in-built sort function.",
        "472": "Create a Python dictionary with three keys named \"Name\", \"Address\" and \"Phone\".",
        "473": "Implement a chatbot in Python that can provide customer support in a restaurant.",
        "474": "Design a Python program to simulate a simple ATM machine.",
        "475": "Create a program in Python which will take in a list of strings, and print out the longest string in the list.",
        "476": "Create a program in Python that will find the smallest number in a list of numbers.",
        "477": "Generate a Python code to compute the moving average of time-series data points.",
        "478": "Create a Python program to filter an array by a given criteria.",
        "479": "Create a Python function to find the maximum number from a list of non-negative integers.",
        "480": "Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator\/delimiter.",
        "481": "Come up with a code in Python to find the union of two lists.",
        "482": "Construct a python dictionary containing student names and marks as key-value pairs.",
        "483": "Write a code snippet for a simple linear regression model in Python.",
        "484": "Write code in Python to implement a linked list using classes.",
        "485": "Construct an XML document using Python which contains the following data.",
        "486": "Make a Python program generating numbers",
        "487": "Convert this sql query into a python program",
        "488": "This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation on the data, applies a threshold to remove small values, and generates three plots: a histogram, an interpolated image, and a contour plot. To use this code, make sure to have the necessary files and libraries in the correct paths, and adjust the parameters as needed for your data.",
        "489": "Write a function to generate a set of random numbers in Python.",
        "490": "Write a python program to check if a given string contains any numbers",
        "491": "Design a class in Python for storing movie information including the name, year of release, genre and rating.",
        "492": "Given an input string, write a Python program to count the occurrence of each character in the string.",
        "493": "Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.",
        "494": "Write a Python function to generate an even number between 10 and 200 that is divisible by 5.",
        "495": "Create a Python function to find the closest value to a given number in a given array.",
        "496": "Write a Python code to store and print the multiplication table of a given number.",
        "497": "Found and fix any bugs with the following python code.",
        "498": "Generate a function in Python that takes two parameters: \u2018x\u2019 and \u2018y\u2019 and prints the output as \u201cx is greater than y\u201d when x is greater than y, otherwise \u201cy is greater than or equal to x\u201d.",
        "499": "Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.",
        "500": "Design an algorithm in Python for finding out the factorial of a given number.",
        "501": "Construct a class in Python which implements two methods to add two numbers.",
        "502": "Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.",
        "503": "Develop an AI Tic-Tac-Toe game using Python.",
        "504": "Create a Python program to calculate the sum of series 1 + \u00bd + \u2153 + ... + 1\/n.",
        "505": "Develop a decision tree classifier in Python to predict a fourth feature from three other features.",
        "506": "Implement a function in Python that takes a string argument and returns the characters of the string in reverse order.",
        "507": "Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.",
        "508": "Write a Python Program to print out the first n prime numbers.",
        "509": "Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary.",
        "510": "Write a Python code to implement Gradient Descent Algorithm.",
        "511": "Binary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.",
        "512": "Construct a nested loop in Python to print out the following elements in a new line.",
        "513": "Create a machine learning program in Python that will classify text data into 3 different categories.",
        "514": "Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element.",
        "515": "Write a function in Python to print the Fibonacci series.",
        "516": "Design an algorithm in Python to find the longest common substring in two strings.",
        "517": "Create a Python function to shuffle a list of numbers.",
        "518": "What Python code can you write that takes two strings and returns whether they are anagrams?",
        "519": "Create a basic Python script that computes the sum of two variables and stores the result in a third variable.",
        "520": "Generate a set of unique random numbers in the range 0-10 using Python.",
        "521": "Write a function in Python to search for a given word in a large document. The function should return the line number of the document where the word is found.",
        "522": "Design a script in Python to scrape photos and captions from a given website.",
        "523": "Create a python program that prints \"Hello World!\" five times.",
        "524": "Write a Python program to find the common elements between two given lists.",
        "525": "Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.",
        "526": "Create a class to create a linked list in python nodes.",
        "527": "Design a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request.",
        "528": "Improve the following Python program to reduce its time complexity.",
        "529": "Write a Python program to format a given piece of text (input) with different options for font-style, size, and color.",
        "530": "Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.",
        "531": "Using Python, create a function that takes two numbers as input, and generates a random number between them.",
        "532": "Generate a Python program to demonstrate a sorting algorithm.",
        "533": "Write a code to delete a certain element from a linked list.",
        "534": "Create a Python program to determine the total sum of all elements of a list.",
        "535": "Write a script in Python to compete in a Kaggle competition.",
        "536": "Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?",
        "537": "Design a basic chatbot in Python for responding to casual inquiries.",
        "538": "Write a Python program to print the top 5 most frequent words in a given sentence.",
        "539": "Make a program in Python to print a staircase of height 'n', where n is an integer.",
        "540": "Write python code to return the maximum number in a list.",
        "541": "Compose a python program to identify the characters in a given alphabet",
        "542": "Optimize a Flask application for efficient performance.",
        "543": "Design a Python program to take a list of integers and return the sum of the even numbers in the list.",
        "544": "Write a Python program to print the maximum number from a given list.",
        "545": "Write a Python program to sort a list of dictionaries by a key in each dictionary.",
        "546": "Create a Python program to remove all occurrences of the given element in a given array.",
        "547": "Create a Python program to optimize a given multivariate function.",
        "548": "Build a Python class to identify if a provided number is prime or composite.",
        "549": "Write a Python function to format a two-dimensional array as a table.",
        "550": "Develop a program in Python to check whether a string contains only digits.",
        "551": "Implement a function to remove all the duplicates from a linked list in Python.",
        "552": "Generate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers.",
        "553": "Create a Deep Learning Program in Python to Predict Stock Price.",
        "554": "Generate a Python program that performs an edit distance calculation using dynamic programming.",
        "555": "Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N.",
        "556": "Generate a Python program that takes a string and capitalizes the first character of each word.",
        "557": "Construct a python program which takes in input the size of a jagged array and prints it(no values).",
        "558": "Create a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.",
        "559": "Create a python program for constructing a decision tree algorithm for predicting the value of a stock.",
        "560": "Create a Python class with the given attributes and functions.",
        "561": "How would you create a class in Python to store and process data in a Car object?",
        "562": "Write a Python program to print out the Fibonacci series up to n numbers where n is a user input.",
        "563": "Edit the following Python program to return true if the following string contains the word \"Hello\".",
        "564": "Given a list of integers, write a Python program to find the index of the largest number.",
        "565": "Design a python program to handle an array with the following rules:\nIf the element is divisible by 3, the element should be replaced with \"Fizz\".\nIf the element is divisible by 5, the element should be replaced with \"Buzz\".\nIf the element is divisible by 3 and 5, the element should be replaced with \"FizzBuzz\".",
        "566": "Write a Python function that takes two strings as arguments and returns the longest common sub-string between them.",
        "567": "Design a program to reverse a given string.",
        "568": "Generate a python program to calculate the minimum and maximum values in an array",
        "569": "Create a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings.",
        "570": "Write a Python algorithm that finds the longest contiguous sequence of increasing numbers within an array.",
        "571": "Generate a Python function to parse a JSON data structure.",
        "572": "Suggest an improvement for the following python code for finding the sum of elements of a list",
        "573": "Generate a Python class to represent a 3-dimensional vector.",
        "574": "Work out a solution to the Towers of Hanoi game using Python.",
        "575": "Develop an algorithm using Python to calculate the Euclidean distance between 2 points.",
        "576": "Create a Python script to print the absolute difference between two given numbers.",
        "577": "Create a recommendation system in Python using Pandas to recommend new products to customers based on past purchases.",
        "578": "Generate a Python program to filter out a list of numbers and keep only those that are prime",
        "579": "Write a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages.",
        "580": "Assume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page.",
        "581": "Create a class in Python to represent a complex number.",
        "582": "Create an\nPython program that takes a list of integers and returns the sublist consisting of the prime numbers from the list.",
        "583": "Write a Python program to find the most efficient path for a robot to take from its current location to the destination",
        "584": "Edit this python code to be more efficient.",
        "585": "Debug the following Python code",
        "586": "Debug the following Python program which raises a SyntaxError.",
        "587": "Set up GPIO pins, import necessary modules, define operating modes, prompt for password and mode selection, check license validity and user registration, calculate BAC, open solenoid to dispense beer if valid license and BAC below threshold, record swipe data in appropriate file.",
        "588": "Using Python, create a program to print a random element from a list.",
        "589": "Develop an interactive text-based RPG game in Python that gives the player options to move around in an environment and battle monsters.",
        "590": "Create a Text-to-Speech Python application to read out a simple sentence.",
        "591": "Create an application with a Python backend and a React frontend that allows a user to create a list of tasks.",
        "592": "Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.",
        "593": "Generate a Python program to read a list of integers and print its elements in reversed order.",
        "594": "Given a binary tree, write a Python program to determine the sum of all elements in the tree.",
        "595": "Create an API using flask and python which takes a list or array of integers and returns their minimum and maximum values.",
        "596": "Design a python class to represent a 3-dimensional vector with methods to support vector addition and subtraction.",
        "597": "Write a string slicing function in Python that takes a string and start and end index, and return the slice.",
        "598": "Write a python program to tokenize a given text",
        "599": "Generate a Python code for an algorithm to find the shortest path between two points in a matrix",
        "600": "Create a basic Python algorithm that searches a given sorted array for a value using binary search.",
        "601": "Write a Python program that takes the following dictionary as an argument and returns the count of each item",
        "602": "Generate a Python class to read in a textfile and count the frequency of each word.",
        "603": "Is it possible to create a Python program that converts a given string to a different case?",
        "604": "Create a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.",
        "605": "Create a python script that displays the information of three different cities.",
        "606": "Write a Python program to remove duplicate characters of a given string.",
        "607": "Produce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list.",
        "608": "Create a function in Python to calculate the distance between two points.",
        "609": "Create an AI program that recognizes handwritten letters and digits using Python.",
        "610": "Given a list of numbers, write a Python function to find out if any two numbers add up to a given number.",
        "611": "Write a Python program to generate a random number between the given input numbers.",
        "612": "Create a python program to include a web-page rendering feature.",
        "613": "Create a Python dictionary from two given lists.",
        "614": "Construct a code snippet for Python to check whether a number is even or odd.",
        "615": "Develop a reinforcement learning environment that plays tic-tac-toe in Python",
        "616": "Create a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings.",
        "617": "Develop a Python script to sort a given list of names alphabetically.",
        "618": "Create a Python script to connect to a domain and fetch the contents of its homepage",
        "619": "What function will you use to count the number of words in a string?",
        "620": "Create a Python program that shuffles an array of integers.",
        "621": "Write a Python program that calculates the greatest common divisor of two numbers and displays the result.",
        "622": "Develop a python program to convert a given temperature value from Fahrenheit to Celsius.",
        "623": "Write a Python program to generate a random password for a user with length of 8 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character.",
        "624": "Implement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.",
        "625": "Develop a design algorithm in Python that randomly generates a unique snowflake pattern.",
        "626": "Use Python to build a random number generator in the range [0, 10).",
        "627": "Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee\u2019s name, job title, and job number.",
        "628": "Develop a system that finds similarities between given strings.",
        "629": "Write a python program that selects five random elements from a list and prints them.",
        "630": "Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.",
        "631": "Create a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them.",
        "632": "Develop a Python script to print the first 10 cubes of natural numbers.",
        "633": "Create a python function that takes in two strings and output their combined length.",
        "634": "Develop a function in Python to randomly select one element from a given array.",
        "635": "Develop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.",
        "636": "Sort a list of dictionaries in Python by a given key.",
        "637": "Create a Python script to scrape tweets with a particular hashtag from Twitter.",
        "638": "Design an algorithm in Python to find the number of occurrences of a given string in another string.",
        "639": "Generate Python code to print the sum of two user-defined variables.",
        "640": "Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.",
        "641": "Create a web application using Django and Python. This application should allow users to register and login to view a list of quotes.",
        "642": "Create a program in Python 3 to simulate the rolling of two dice.",
        "643": "Create a Python script to format the following string with proper new lines and indentation.",
        "644": "Implement a Python function to generate the Fibonacci sequence of a given length.",
        "645": "Create a python program to calculate the sum of odd numbers within a given range.",
        "646": "Optimize a function written in Python that calculates the mean of a given sequence of numbers",
        "647": "Write a Python program to create a dictionary mapping letters to numbers and numbers to letters.",
        "648": "Develop a script in Python to find the longest common subsequence of two given strings.",
        "649": "Create a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements.",
        "650": "Find the 5 most frequent words in the given text.",
        "651": "Design a python program that calculates a person's BMI (body mass index).",
        "652": "Generate Python code to print the smallest number in a given list of numbers.",
        "653": "Write a Python program to quickly search for a substring in a larger string.",
        "654": "Develop a Python program to fetch the website users of an online store.",
        "655": "Write a python program that will generate a password containing numbers and letters from an entered string.",
        "656": "Generate a Python program to delete an item from a given list.",
        "657": "Write a Python code snippet that takes a list of numbers as argument and prints the average.",
        "658": "Write a Python program to check whether a number is in a given range",
        "659": "Design and implement a function in Python that takes a list of numbers as input and checks if any of the numbers are prime.",
        "660": "Create an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.",
        "661": "Write a script in Python to detect the sentiment of a given text.",
        "662": "Write a Python program to check if a given number is divisible by 3 and 5 or not.",
        "663": "Design a Python program to stop a loop after some specific iterations",
        "664": "Create a REST API in Python Flask for the following model.",
        "665": "Create a neural network with two hidden layers in Python.",
        "666": "Create a Python program that takes a positive integer as an input and prints all its prime factors.",
        "667": "Write an algorithm to implement a trie data structure in Python.",
        "668": "Create a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum.",
        "669": "Write a Python program to sort a list of tuples by their second element.",
        "670": "Create a Python module for a contact book application. This module should include classes for User (with fields for name, age, address, and email) and Contact (with fields for name, age, phone number).",
        "671": "Generate Python classes from the given JSON.",
        "672": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.",
        "673": "Develop a Python script that can query a SQL database and return the total number of entries in all the tables",
        "674": "Write a Python program to filter out strings from a list of strings containing specific characters.",
        "675": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.",
        "676": "Write a Python function that takes a string as input and checks if it is a palindrome or not.",
        "677": "Create a Python script that pulls data from an API and stores it in a database.",
        "678": "Generate a Python program to iterate over a list of numbers and print out only the even numbers.",
        "679": "Modify the following Python code to use a loop instead of recursion.",
        "680": "Write a Python function to transpose a given matrix of size (m x n).",
        "681": "Generate a python program that multiplies two matrices.",
        "682": "Create a basic calculator in Python",
        "683": "Design a solution in Python for determining the frequency of characters in a given string.",
        "684": "Write a Python program to create a class for managing a linked list.",
        "685": "Write a Python function to remove all consecutive duplicates of a given number.",
        "686": "Create a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.",
        "687": "Implement the PageRank algorithm in Python.",
        "688": "Generate a Python function to calculate the area of a triangle given the three sides.",
        "689": "Code a python function to combine two lists into a single list of tuples.",
        "690": "Generate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.",
        "691": "Code a Python program that takes two integers and checks if they are co-prime numbers.",
        "692": "Compose a Python class that creates a list of unique elements in the input.",
        "693": "Develop a code to sort the following  Python dictionary by its values from low to high.",
        "694": "Construct a machine learning model in Python for predicting the prices of apartments in your city.",
        "695": "Generate a code to print the stack trace in Python when an exception occurs.",
        "696": "Create a Python program to read a list of strings and display the same strings in a reverse order.",
        "697": "Devise an algorithm in Python to determine if a given number is even or odd.",
        "698": "Create a machine learning model to classify text documents into two different categories.",
        "699": "Train a model to classify spam emails using Python.",
        "700": "Design a web application in Django that fetches tweets with the #python hashtag.",
        "701": "Design an object-oriented program in Python for playing a game of tic-tac-toe.",
        "702": "Implement an algorithm in Python to reverse a given string.",
        "703": "Compare two strings using Python and output the similarity score between them.",
        "704": "Write a function in Python to create a dictionary from two lists, one of keys and the other one of values.",
        "705": "Creat a Python program to find the sum of the digits of an arbitrary number.",
        "706": "Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.",
        "707": "Write a Python script to parse a JSON string and convert it into a dictionary.",
        "708": "Come up with a solution to parse an HTML document using Python.",
        "709": "Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object.",
        "710": "Write a python program that sorts the list using insertion sort algorithm.",
        "711": "Create an algorithm in Python to separate numbers below 10 and above 5.",
        "712": "Write a Python function to check if a given list contains any duplicate elements.",
        "713": "Make a Python program that reads a 3x3 matrix and prints the sum of all elements.",
        "714": "Can you create a Python script to extract email addresses from a raw text?",
        "715": "Write a class in Python that will allow users to input their name and will return different sentences depending on the length of the name.",
        "716": "Create a basic Twitter bot using Python and Tweepy for publishing tweets.",
        "717": "Implement a queue data structure in python",
        "718": "Generate a program in Python to compare two strings and output true if one string is a permutation of another.",
        "719": "Use the NumPy library to generate a 3x3 identity matrix in Python.",
        "720": "Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.",
        "721": "Gather the information about all Python library released by the Mozilla foundation",
        "722": "Configure a web-server in Python using Flask.",
        "723": "Create a graphical user interface using Tkinter in Python that allows the user to input numbers and calculate the sum.",
        "724": "Compute the product of two matrices using Python.",
        "725": "Develop a Python Program to determine if two given strings are an anagram or not.",
        "726": "Develop a Python script to extract the specific keyword from the given URL.",
        "727": "Optimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.",
        "728": "Provide an algorithm in Python to merge two sorted arrays into a single sorted array.",
        "729": "Create a Python script that takes an array with n elements and shuffles it.",
        "730": "Write a Python class that implements a binary search tree. It should have methods for adding nodes to the tree, searching the tree, and obtaining the size of the tree.",
        "731": "Given a list of strings, write a Python program to sort the strings according to the length of each string.",
        "732": "Write a Python program to construct a spam filter using Na\u00efve Bayes.",
        "733": "Design an algorithm in Python that checks if a given number is even or odd.",
        "734": "Create a text-based adventure game in Python",
        "735": "Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.",
        "736": "Write a python program to which given a list of numbers, will calculate the mean value",
        "737": "Write a Python program to sort the values of a dictionary by its keys in alphabetical order.",
        "738": "Create a Tic Tac Toe game in Python.",
        "739": "Design a program in Python that takes a list of strings and returns a list containing the length of each of the strings.",
        "740": "Write a Python script that takes as input a list of random numbers and returns only the even numbers from the list",
        "741": "Generate a Python function that takes an matrix as input and raises each element of it to the power of 3.",
        "742": "Create a Python program to find the total number of elements in a stack.",
        "743": "Write a Python program to create a dataframe from a given dictionary of lists.",
        "744": "Generate a Python program to output the most frequently occurring word in a given string.",
        "745": "Construct a function in Python to calculate the volume of a sphere.",
        "746": "Generate a python program to find the shortest path between two given nodes",
        "747": "Write a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.",
        "748": "Generate a Python code to calculate the value of the nth Fibonacci number.",
        "749": "Build a Python script for deleting all characters from a string",
        "750": "Create a Python function that takes the words in the string and returns the frequency of each word.",
        "751": "Write a machine learning model in Python to detect the sentiment of a text document.",
        "752": "Write a Python program to generate an SQL query from a given set of parameters.",
        "753": "Create a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen.",
        "754": "Define a Python class to model an appointment.",
        "755": "Automate the process of pulling data from a website using Python.",
        "756": "Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values",
        "757": "Write a function in Python that takes two arrays of the same size and performs elementwise addition.",
        "758": "Create a Python program to retrieve and list all the books in a given category in an online book store.",
        "759": "Create a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database.",
        "760": "Write a Python program to delete a node from a linked list",
        "761": "Create a Python script to format a string containing email addresses. The script should remove special characters and extra spaces, and format the email addresses according to their domain.",
        "762": "Create a function in Python to extract all words from a sentence that are greater than 3 chars in length.",
        "763": "Create a Python function to remove all the characters of a specified string that appear more than once.",
        "764": "Create an optimized sorting alogirthm in Python.",
        "765": "Create a Python program to compute the primes between 1 and n",
        "766": "Create a function in Python that takes a string, removes all non-alphanumeric characters, and prints the result to console.",
        "767": "Develop an algorithm in Python to generate a Fibonacci series up to the nth value.",
        "768": "Develop a program to implement a linear search in Python.",
        "769": "Write a Python script that will take an array of numbers and output the distinct elements.",
        "770": "Design a function in Python that takes in a list and returns its reverse.",
        "771": "Create a class in Python that models a contact with details such as singlename, lastname, email, address, and phone number.",
        "772": "Implement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.",
        "773": "Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.",
        "774": "Create a Python script to generate a n by n multiplication table.",
        "775": "Create a web crawler in Python to automatically scrape data from a given web page.",
        "776": "Write a code snippet in Python to print out the contents of a given dictionary.",
        "777": "This code defines an abstract class called `Domain` that represents an abstract domain. The class has various attributes and methods, including `from_expr`, `to_expr`, `convert_from`, `convert`, `unify`, `poly_ring`, and `frac_field`. To use this class, create a subclass and implement the abstract methods `from_expr` and `to_expr`. You can also use the `convert` method to convert elements to the domain, and the `unify` method to construct a minimal domain that contains elements of two given domains. The `poly_ring` and `frac_field` methods can be used to create polynomial rings and fraction fields, respectively.",
        "778": "Given a set of data, develop a Python program to classify the data into two categories: low and high.",
        "779": "Create an HTML page that displays a table containing a list of books with their ISBN and title.",
        "780": "Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.",
        "781": "Write a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree.",
        "782": "Create a Python program for sorting a list of numbers in increasing order.",
        "783": "Write a function to create a JSON object from a given Python list.",
        "784": "Create a Python script to generate a password that meets the following criteria: length of 8 characters, includes at least one uppercase, one lowercase and one numeric character.",
        "785": "Determine the performance of a given Python function by seeing how long it takes to run.",
        "786": "Write a Python program to filter a list of words by their length.",
        "787": "Create a Python program to parse a sentence and identify all named entities mentioned in the sentence.",
        "788": "Write a Python program that can detect the language of a given piece of text.",
        "789": "Write a blank Python program to convert celsius to fahrenheit.",
        "790": "Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request.",
        "791": "Generate a code to send an email using Python.",
        "792": "Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input.",
        "793": "Design a data structure in Python that implements a Stack.",
        "794": "Create a unit test for an existing Python function. The function should take a single argument and return the square of the argument.",
        "795": "Create a python program to reverse a string passed as input.",
        "796": "Create a class in Python to represent a Person which contains attributes like name, age, height and address.",
        "797": "Create a function in Python that takes a string as input and prints out a list of all the words containing at least five letters.",
        "798": "Write a Python program for finding the longest subarray with a given sum.",
        "799": "Write a Python class that will generate an output in JSON format from a provided input.",
        "800": "Write a Python program to calculate the hypotenuse of a right-angled triangle.",
        "801": "Generate random numbers between 1 and 2 using the random module in Python.",
        "802": "Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?",
        "803": "Generate a Python function to validate a credit card billing address.",
        "804": "Create a RESTful web service in Python which can add and subtract two numbers and return the result.",
        "805": "Design a Python script for merging two sorted lists.",
        "806": "Create a Python program to loop through a given list and print each item on a new line.",
        "807": "Implement a Genetic Algorithm in Python to find the maximum possible fitness score given a set of parameters.",
        "808": "Write a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table.",
        "809": "Calculate the correlation between artists using the Last.fm dataset. Intermediate datasets will be saved in an HDF5 file and the final dataset will be saved in a database. The artist correlation matrix will be saved only for the single selected artist, used in the final step for the similarity comparison. Run the provided Python code to execute the calculation.",
        "810": "Create a Python dictionary structure that stores a warning message for each item in the following list.",
        "811": "Create a python program to find the maximum value of an array using divide and conquer technique.",
        "812": "Develop an algorithm for calculating the sum of two numbers, in Python.",
        "813": "Design a function to tell if a number is even or odd using Python.",
        "814": "Compose a Python Code to swap two numbers without using a temporary variable.",
        "815": "Construct a recursive Python program that computes the factorial of an integer.",
        "816": "Write a Python program to differentiate the following equation:\ny = 5*x^2 + 3*x + 1",
        "817": "Develop a basic cloud-based application using Google App Engine.",
        "818": "Create a Python function for computing the Fibonacci sequence up to the nth number.",
        "819": "Write a Python program that takes a list of numbers and creates a new list of even numbers only.",
        "820": "In Python, debug the following program and explain what was the issue?",
        "821": "Suggest a method to improve the efficiency of the following Python program.",
        "822": "Can you create a program in Python which reverses a number?",
        "823": "Create a function in Python that takes two numbers as arguments and returns their average.",
        "824": "In Python, create a method to generate a random string.",
        "825": "Design an algorithm in Python to simulate a game of rock paper scissors.",
        "826": "Generate a Python script for a query to fetch data from a given MySQL table.",
        "827": "Create a Python script to send an email.",
        "828": "Create an algorithm in Python to make a prediction given a list of features.",
        "829": "Rewrite the code from this Python2 code to be compatible with Python3 code.",
        "830": "Create a class in Python that represents a vector in a 3-dimensional space.",
        "831": "Using Python, create a program to filter out all non-prime numbers from a list.",
        "832": "Create a python program to calculate the compound interest for a given principal amount and a given interest rate.",
        "833": "Write a Python script to generate all possible permutations of a set of input strings.",
        "834": "Generate a python code that adds a delimiter string between every list item.",
        "835": "Optimize a given Python script by running in parallel.",
        "836": "Create a Python function that converts an integer into a binary representation as a string.",
        "837": "Write an example of a class definition in Python.",
        "838": "Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.",
        "839": "Design a Python program to find out the number of unique keywords used in documents.",
        "840": "Design and implement an API in Python for an online store application.",
        "841": "Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.",
        "842": "Generate the Python code for a pipelie of KMeans and GaussianMixture clustering models.",
        "843": "Build a Naive Bayes classifier in Python.",
        "844": "The given code is a Python script that contains functions to deregister HiveServer2 in preparation for an upgrade and to complete an upgrade. To use these functions, import the necessary modules and call the functions with the required parameters. The pre_upgrade_deregister() function runs the \"hive --service hiveserver2 --deregister <version>\" command to de-provision the server in preparation for an upgrade. The post_upgrade_deregister() function runs the same command to complete the upgrade. Both functions obtain the Kerberos ticket if security is enabled.",
        "845": "Design a neural network in Python to identify the characters in a given alphanumeric string.",
        "846": "Generate Python code to implement a binary search algorithm.",
        "847": "Generate the following sequence using a while loop in Python.",
        "848": "Write a Python code snippet that creates a dictionary with keys 1,2,3 and string \"One\",\"Two\" and \"Three\" as the corresponding values",
        "849": "Refactor the following code to be more pythonic",
        "850": "Create a simple game using Python and Pygame.",
        "851": "Generate a program using Python to calculate the factorial of a positive number.",
        "852": "Write a Python program to complete the implementing of a searching algorithm.",
        "853": "Write a Python script to extract data from a web page using Regular Expressions (RegEx).",
        "854": "Create a command-line tool for voting on git commands. The tool should have the following sub-commands: \"vote\", \"list\", \"tally\", and \"elect\". The \"vote\" sub-command should allow a user to vote for a specific commit. The \"list\" sub-command should list all votes. The \"tally\" sub-command should tally all votes. The \"elect\" sub-command should elect a commit based on the number of votes. The tool should be implemented using Python and the Git command-line tool.",
        "855": "Write a Python function to calculate the product of elements in a list.",
        "856": "Design an interface for a Python program that parses HTML documents.",
        "857": "Convert a given code snippet from Swift to Python.",
        "858": "Create a Python script to optimize search engine queries.",
        "859": "Compile a function to calculate the difference of two date objects in Python.",
        "860": "Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list.",
        "861": "Design a Python class to store customer purchase histories.",
        "862": "Create a python script that can find the longest common substring between two strings.",
        "863": "Design a neural network model in Python for text classification.",
        "864": "Create a function in Python to perform a binary search on a sorted array.",
        "865": "Construct a Python function to insert a node at the head of a given linked list.",
        "866": "Write a Python program to find the minimum number of coins that sum up to a given amount.",
        "867": "Create a program in Python for performing a linear search on a given list.",
        "868": "Create an algorithm to replace all the vowels in a string with the character '$'.",
        "869": "Write a Python program to calculate the sum of two numbers (input in separate lines) and print it.",
        "870": "Using the given data, create a class in Python and add some methods to the class.",
        "871": "Can you convert a given HTML page into PDF using Python?",
        "872": "Generate a password strength checker in Python that follows the NIST guidelines.",
        "873": "Create two functions in Python to capitalize and uncapitalize each character of a string.",
        "874": "Generate a script in Python that can make a given webpage mobile-friendly.",
        "875": "Write a function to implement Bubble Sort in Python.",
        "876": "Write a Python program to filter a list of strings so that strings containingthe substring \"bad\" are removed.",
        "877": "Write a python program to add two matrices.",
        "878": "Given a multi-dimensional array, write a python code snippet to find the sum of its elements.",
        "879": "Given the following Python code, determine how many lines of code are in the code.",
        "880": "Create a program in Python that takes an integer n as input and prints out n lines of \"Hello World!\"",
        "881": "Write a code to define a class object in Python.",
        "882": "Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.",
        "883": "Create a Python application for running a text-based adventure game. The application should support user input and provide a textual feedback for each action.",
        "884": "Create a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.",
        "885": "Construct a SQL query to find all the authors whose book titles contain \"python\" in a given database.",
        "886": "Build a function in Python to test whether a string is a palindrome.",
        "887": "Write a python program to search through a list of integers and find the smallest number.",
        "888": "Create a Python function that takes two strings as input and returns the total of the lengths of the two strings.",
        "889": "Write a Python program to create a Tic Tac Toe game.",
        "890": "Write a Python program to remove all duplicate items from a list.",
        "891": "Given a string as an argument, write a Python function to find the longest palindrome in the string.",
        "892": "Optimize a given Python code to find all prime numbers up to a given limit.",
        "893": "Write a Python code to find the second most frequent value in the given array.",
        "894": "Optimize the following python code array to get the maximum value from it in one pass.",
        "895": "Write a python program to print the least common multiple of two integers",
        "896": "Create a Python program to edit a string and remove the vowels from it.",
        "897": "Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.",
        "898": "Optimize a given code in Python to run faster.",
        "899": "Convert the given JSON object to a Python list.",
        "900": "Train a linear regression model using Python to predict the prices of houses.",
        "901": "Write a Python program to perform sentiment analysis using a pre-trained model.",
        "902": "Design a function in Python that takes two lists as input and returns the elements in common.",
        "903": "Write a short Python script to compute the average temperature of a given set of temperatures.",
        "904": "This code is a Python script that renders a stereo scene using OpenGL. To use it, follow these steps:\n\n1. Install Python and OpenGL.\n2. Run the script in a Python environment.\n3. Wait for the scene to render in a new window.\n4. Use the arrow keys to move the objects in the scene.\n5. Press the ESC key to quit the program.",
        "905": "Update the existing code in the following Python program to generate a list of prime numbers in a given range.",
        "906": "Create a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major.",
        "907": "Write a Python program to compute the readability score of a given text.",
        "908": "This code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:\n- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)\n- `--exclude`: a list of files or directories to exclude from the check\n- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)\n- `--git-bin`: the path to the git binary (default is `git`)",
        "909": "Write a function in Python to generate random numbers within a desired range.",
        "910": "Can you produce a program that demonstrates the basics of how to use object oriented programming in Python?",
        "911": "Create an algorithm in Python to calculate the maximum sum of a sub-array of an int array.",
        "912": "Create a Python program that produces the output shown in this example.",
        "913": "How can you create a Python function that prints the number of characters in a string?",
        "914": "Create a Python program to generate and print out a calendar for a given month.",
        "915": "Write a Python program to print a given number in words",
        "916": "Given a list of words, write a Python program to group the anagrams (words which have the same letters in a different order) together.",
        "917": "Write an efficient algorithm to optimize the given code in Python.",
        "918": "Generate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements.",
        "919": "Create a class in Python named \"Employee\" with 3 instance variables \"name\", \"salary\", and \"age\".",
        "920": "Convert the given algorithm written in pseudo code to Python.",
        "921": "Build a classifier model in Python to classify text into two categories.",
        "922": "Edit this code snippet in Python to remove any errors and improve readability.",
        "923": "Generate a function which implements a backwards for loop in Python.",
        "924": "Create a python program to carry out the following tasks:",
        "925": "Write a Python script to simulate a coin toss experiment.",
        "926": "Create a python class that implements a stack.",
        "927": "Write a python function to parse a list of strings and extract the date that appears at the end of the strings?",
        "928": "Design a class in Python for storing employee information. The employee information should include name, age, salary and department.",
        "929": "Create a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers",
        "930": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.",
        "931": "Construct a Python script to find the average of three numbers.",
        "932": "Write an algorithm in Python that calculates the maximum subarray of a given array.",
        "933": "Create a list of ten random numbers in Python.",
        "934": "Generate a Python program to implement the following feature: Search a phrase in a given string.",
        "935": "Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm",
        "936": "Create a version of the game 'Tic-tac-toe' using Python.",
        "937": "Create a Flask Python service that serves an array of strings as JSON using a GET request.",
        "938": "Create a web api in Python, using Flask, that takes a search string and returns a collection of books that match that search.",
        "939": "Generate a program in Python for sorting the elements of an array in descending order.",
        "940": "Normalize the following text using Python.",
        "941": "Write a service in Python that can be used to find the closest point to an input in a given set of coordinates.",
        "942": "Develop a Python program to calculate the area of a triangle using the side lengths.",
        "943": "Write a Python script that takes a given string and finds the longest palindromic substring in it.",
        "944": "Write a function in Python to generate n numbers of Fibonacci series.",
        "945": "Write a valid python statement to convert a dict to a list",
        "946": "Create a python script to calculate the moving average of the given data",
        "947": "Implement a Python program to check if a number is divisible by another number.",
        "948": "Write a python code to identify outliers in data using Standard Deviation methods.",
        "949": "Create a neural network in Python which can classify a given set of food posters as either Italian or Mexican.",
        "950": "Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.",
        "951": "Generate a Python program to filter a list of strings to only return words that have 7 or more characters.",
        "952": "Write a for loop in Python to print out the squared value of the numbers from 0 to 10.",
        "953": "Convert a given python data structure into a json string using json package",
        "954": "Develop a Twitter bot in Python. The bot should search for a given hashtag, like the posts it finds, and follow their authors.",
        "955": "Write a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values.",
        "956": "Create a Python script to help streamline the process of scraping data from a web page.",
        "957": "Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.",
        "958": "Make an algorithm in Python for printing the maximum frequency of an element in an array.",
        "959": "Design an algorithm in Python that checks whether a given number is a perfect square.",
        "960": "Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive).",
        "961": "To start pyHegel, import the module and call the function start_pyHegel(). If starting on Windows with the Console program, call start_console() instead.",
        "962": "Design a Python program that predicts a movie's popularity given its genre, rating, and release date.",
        "963": "Design a program that takes a date as input and calculates the day of the week that date falls on.",
        "964": "Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.",
        "965": "Create a Python program that will count and print the number of vowels and consonants in a user-provided string.",
        "966": "Create a Python program that takes in a 2D array and returns the sum of all the elements.",
        "967": "Implement a logistic regression algorithm in Python to solve a classification task.",
        "968": "Develop a Python program to convert the following Fahrenheit value to Celsius.",
        "969": "Create a program in Python to remove duplicates from a list and return the new list.",
        "970": "Create a class in Python to manage the expiry dates of products.",
        "971": "Create a Python script that includes a function that returns the sum of the first n prime numbers.",
        "972": "Design and generate a valid Java program that uses Stack Overflow's API to print all of the most recent questions and answers on a specific topic.",
        "973": "Write a Python function to check whether a number is in a given range.",
        "974": "Connect to a database, retrieve data, and write it to a JSON file named \"extract.json\". The code is written in Python and requires the SQLite3 library.",
        "975": "Compose a python program to search an element in an array",
        "976": "Create a class in Python using object-oriented programming that creates instance of a book.",
        "977": "Write a Python script to implement an iterator that iterates over a given array.",
        "978": "Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.",
        "979": "Write a python code to find the longest contiguous increasing subsequence in the following array.",
        "980": "Create a Python for loop that prints out each element in a given list.",
        "981": "Create a Python program to calculate the number of possible combinations of a given set of elements.",
        "982": "Can you write a program in Python to remove the duplicate elements in a list?",
        "983": "Write a Python function to remove elements from a given list of integers, if the integer is a multiple of 3",
        "984": "Create an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.",
        "985": "You need to create a python module to explain the Canny Edge Detection algorithm.",
        "986": "Write a Python program for predicting stock prices.",
        "987": "Create a machine learning model in Python that will classify each sentence as Positive, Neutral or Negative sentiment.",
        "988": "Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.",
        "989": "Modify a Python program to encrypt a string using the XOR Cipher.",
        "990": "Write a Python program to extract the first letter of each word in a sentence and print it as an acronym.",
        "991": "Design a class to convert Fahrenheit to Celsius in Python.",
        "992": "Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.",
        "993": "Create a function in Python that takes two matrices and prints the result of their subtraction.",
        "994": "Optimize a Python function that returns the value at the index of an array (list) of size n.",
        "995": "Create a data structure in Python to represent a classical play.",
        "996": "Write a python program for searching for a specific product within a given list of products.",
        "997": "Create a Machine Learning model in Python that predicts the direction of the stock market using historical data.",
        "998": "In Python print out the first 10 numbers of the Fibonacci sequence.",
        "999": "Create a Python program to generate a random list of numbers between 1 to 20 and print out the largest and second largest ones.",
        "1000": "Design a function in Python to find the maximum pair sum from the list input.",
        "1001": "Build a basic web scraper using Python and Scrapy that can crawl a specific website and extract the content from the webpage.",
        "1002": "Create a Python program that takes two lists of integers and prints the common elements between the two lists.",
        "1003": "Design a function in Python to convert a given temperature in Celsius to Fahrenheit.",
        "1004": "Create a Django view in Python to retrieve user records from a database with pagination.",
        "1005": "Create a Python program to find the sum of the Fibonacci sequence.",
        "1006": "Create an algorithm in Python to find the first index of an item in an array.",
        "1007": "Create a program using Python to determine the words in a string with the highest frequency.",
        "1008": "Generate a Python program to sort an array of integers in linear time.",
        "1009": "Optimize an existing Python script by improving its runtime performance.",
        "1010": "Create a Web Scraper in Python to Scrape the Wikipedia page of a given musician and extract the discography.",
        "1011": "Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.",
        "1012": "Write a python program to generate an array filled with the first n prime numbers.",
        "1013": "Develop a Python function to calculate the summed weighted average from a given set of values and weight.",
        "1014": "Write a Python program to solve a system of linear equations.",
        "1015": "Write a Python program to add a prefix and suffix to all strings in a list.",
        "1016": "Generate a Python program to calculate the square root of a given number using Newton\u2019s Method.",
        "1017": "Write a Python program to extract phone numbers from a given text.",
        "1018": "Write a python program to parse an XML document",
        "1019": "Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.",
        "1020": "Generate a Python program to perform matrix multiplication.",
        "1021": "Build a chatbot with Python Flask that can converse with a user.",
        "1022": "Create a Python program to compare two strings and print out the number of differences.",
        "1023": "Design a Python script to merge two sorted arrays into one.",
        "1024": "Generate a spreadsheet to model a sine wave using Python.",
        "1025": "Convert the following python code which uses sets to one which uses lists.",
        "1026": "Generate a Python code to print all the permutations of an array.",
        "1027": "Write a Python program to classify the given data into two classes.",
        "1028": "Write a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment.",
        "1029": "Write a function in Python that receives two numbers as parameters and returns the larger one",
        "1030": "Design an algorithm in Python to find the minimum of three values.",
        "1031": "Create a Python program to generate a hamming code for a given bit string.",
        "1032": "Create a Python program to print out the sum of squares of all the numbers from 1 to 10.",
        "1033": "Design an algorithm in Python that finds the occurrences of 'cat' in a given sentence.",
        "1034": "Produce a Python program to convert a given number of minutes to years and days.",
        "1035": "Create a Python function that takes a string argument, removes all the special characters and returns the modified string.",
        "1036": "Make a program in Python that takes a number n and returns the nth fibonacci number.",
        "1037": "Generate a python program which prints a formatted list containing the elements from two input lists.",
        "1038": "Create a Python script to generate a random password. The generated password should have at least 6 characters, and must contain both letters and numbers.",
        "1039": "Write a Python statement to check if a given number is within a given range",
        "1040": "Design an automated system in Python to remove all even numbers from a list.",
        "1041": "Write a python code to perform a three-way comparison of three numbers.",
        "1042": "Write a Python program to print Hello World ten times.",
        "1043": "Write a Python script that computes the sum of two given integers.",
        "1044": "Create a hash table in Python to store the values (1, 2, 3, 4).",
        "1045": "Convert a string into a valid python program that prints the string on the terminal.",
        "1046": "Write a Python program to print the factorial of a number.",
        "1047": "Construct a regular expression in Python to find all consecutive digits in a sentence.",
        "1048": "Create a Python object-oriented program to represent a student. The student class should have a method calculate_grade which takes a student's grades as input and returns their average.",
        "1049": "Create a python script that compares two sets of input data (lists of numbers) and outputs the intersection set.",
        "1050": "Suggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive).",
        "1051": "Given a list of integers, write a Python function to find the largest consecutive sum of elements in the list.",
        "1052": "Develop an algorithm in Python to identify prime numbers in a given range of numbers.",
        "1053": "Design an AI model in Python to predict the sentiment of a given sentiment text.",
        "1054": "Create a solution for object-oriented programming in Python. The solution should include a way to represent base class, derived class, single inheritance, and multiple inheritance.",
        "1055": "Create a python script to find the longest words in a dictionary.",
        "1056": "Write a Python program to find the optimal solution for a given weighted job scheduling problem.",
        "1057": "Create a program that returns the number of the occurrences of an element in the given list",
        "1058": "Write a Python program to optimize an equation to find the minimum value.",
        "1059": "Develop an algorithm in Python to replace all the vowels in a string with an asterisk.",
        "1060": "Create a Python function that calculates the standard deviation of a given list of numbers.",
        "1061": "This code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.",
        "1062": "Develop a function in Python that takes a list of strings as input and returns a dictionary mapping each string to its length.",
        "1063": "Create a Python code snippet to check if a given number is a prime number.",
        "1064": "Test the following Python code and identify a bug",
        "1065": "Create a program to group the strings of a given list according to their lengths in Python.",
        "1066": "Rewrite a given code snippet in Python using a list comprehension.",
        "1067": "Modify the existing Python program to add an exception clause.",
        "1068": "Create a function in Python to initialize an array with two parameters.",
        "1069": "Generate Python code to sort a given list using insertion sort.",
        "1070": "Generate a Python program to display a pyramid pattern",
        "1071": "Create a Python function to format a string with the proper case and punctuation",
        "1072": "What are the differences between lists and tuples in Python?",
        "1073": "Create a Python program that sorts a list of integers.",
        "1074": "Create a web scraper in Python that retrieves the top 10 headlines from a website's news section.",
        "1075": "Write a Python function to fetch the data from this API https:\/\/coronavirus-19-api.herokuapp.com\/",
        "1076": "Write a function in Python that calculates the maximum value in a 2-dimensional array.",
        "1077": "Design a Flask application in Python to create an API endpoint for user registration.",
        "1078": "Determine the type of the following python object.",
        "1079": "Write a function in Python that takes a string as input and returns the length of the longest word.",
        "1080": "Create a Python script to print all prime numbers between 1 to 1000.",
        "1081": "Create a program in Python to merge two dictionaries into a new one.",
        "1082": "Write a code in Python to add two given numbers.",
        "1083": "Write a Python program to generate a linked list of numbers from 0 to n.",
        "1084": "Given a list of integers as input, write a Python code snippet to find the largest number.",
        "1085": "Classify different programming languages based on their features.",
        "1086": "Develop a RESTful web service in Python which returns the data provided in the given URL.",
        "1087": "Create an algorithm to solve the Tower of Hanoi in Python.",
        "1088": "Build a Python command-line program that takes in a string and encrypts it with a password.",
        "1089": "Write a Python algorithm to compute the number of islands. An island is a group of connected 1s in an array where all four adjacent lands have value 0.",
        "1090": "Our project requires to classify different types of objects into two classes (A and B). Can you provide a Python code to achieve this?",
        "1091": "Create an algorithm in Python for counting the number of islands in a given grid. An island is defined as a group of 1's (land) connected horizontally or vertically.",
        "1092": "Construct a calculator application in Python that takes input from a string and outputs the result",
        "1093": "Can you produce a Python script that outputs all possible permutations of a given string?",
        "1094": "Write a Python function to detect geographical coordinates of a given address.",
        "1095": "Write a python script that takes in a string and remove all vowels from the string.",
        "1096": "Design a Python class that can store the properties of a person.",
        "1097": "Use Selenium to create a Python program to automate testing an existing web page.",
        "1098": "Create a Python script that imports the necessary modules and defines several functions for managing fleet channels and driver positions. The functions include creating a service, getting or creating a fleet channel, deleting a fleet channel, clearing all fleet channels, updating a driver's position, and deleting a driver's position.",
        "1099": "Create an efficient sorting algorithm in Python to sort a given array.",
        "1100": "Generate a Python script to identify which words in a given list appear more than 3 times and print them out.",
        "1101": "How do you create a function in Python to find the highest common factor of the two given numbers?",
        "1102": "Design a scalable REST API in Python that allows users to register and login using their credentials.",
        "1103": "Construct a class in Python to represent complex numbers.",
        "1104": "Write a python program to classify a given text into either spam or ham.",
        "1105": "Design and write a Python script to generate Fibonacci numbers up to n=10000.",
        "1106": "Write a Python program to assess a patient's current state based on their temperature, pulse rate and respiratory rate.",
        "1107": "Create a python program that generates a random integer between two numbers.",
        "1108": "Write a Python function which takes an array as input and prints out all the even numbers in the array.",
        "1109": "Create a function in python to generate a multiplication table for a given number n.",
        "1110": "Create a Python program that prints out a random id number containing 6 digits.",
        "1111": "In Python, build a function that takes in two arguments (x,y) and returns the product of the two numbers.",
        "1112": "Create a function in Python using Pandas to recode a column in the following dataframe.",
        "1113": "Generate a piece of Python code to print the reversed version of a list.",
        "1114": "Develop a Python program that computes the sum of integers from 1 to n.",
        "1115": "Produce a Python program to do a linear search of an element in a given array.",
        "1116": "Write a code snippet in Python which takes an array and returns the list of its square root values.",
        "1117": "Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it",
        "1118": "Design a loop in a Python program to print the Fibonacci series up to the nth term.",
        "1119": "Develop a Python generator to generate all prime numbers in range of 0 - 100.",
        "1120": "Design a neural network in Python to classify a set of data points into one of four different classes.",
        "1121": "Generate a Python decorator for calculating the time taken for a function to execute.",
        "1122": "Create a Python program to print the numbers from 1 to 100, except for multiples of three, where the program should print \"Fizz\" instead.",
        "1123": "Create an Algorithm in Python for implementing a Binary Search Tree.",
        "1124": "Write a function in Python to generate a space-delimited matrix of m rows and n columns.",
        "1125": "Create a security system in Python to check if a given password matches a database of hashed passwords.",
        "1126": "Design a solution in Python to identify all the words containing the given letter.",
        "1127": "Create a Python class to implement a queue with methods push() to insert an element, pop() to remove an element, and peek() to return the top element of the queue.",
        "1128": "What would be the best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python?",
        "1129": "Create a function in Python to check if a number is greater than a given threshold.",
        "1130": "Rewrite the following JavaScript code in Python.",
        "1131": "Write a Python program that takes in a string of numbers delimited by spaces and returns the largest number.",
        "1132": "Create a Python program that takes a string as input and returns all palindromic substrings of the string.",
        "1133": "Write a quick sorting algorithm using Python.",
        "1134": "Create a RNN model using Python that can classify a piece of text as either positive or negative sentiment.",
        "1135": "Create a function in python that takes two integers as inputs and outputs the greatest common divisor.",
        "1136": "Create a text-based game using Python. The game should have different levels and points for completing each level.",
        "1137": "Find a way to write an entire program without using any looping constructs or if-else statements.",
        "1138": "Write a Python program to identify the longest line in a string.",
        "1139": "Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.",
        "1140": "Create a Python script for scraping a website and extracting a list of URLs from it.",
        "1141": "Design a program to filter out strings in a list that have length 3.",
        "1142": "Design a code generator to convert a Python code into Javascript code.",
        "1143": "Write a Python program to parse a JSON object from a given string.",
        "1144": "Implement a Python module that converts a given date to ISO format",
        "1145": "Generate a program in Python to find the maximum element in a given array.",
        "1146": "Write a Dockerfile that sets up a Python environment for a web application.",
        "1147": "Write a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.",
        "1148": "Generate a Python program that will convert a given integer to a string.",
        "1149": "Using Python create a web scraper to retrieve the text in a specific HTML element.",
        "1150": "Generate a Python program that searches a list of given integers for a given target value and returns its index if found.",
        "1151": "Generate a list of the top 10 common words in a given list of words.",
        "1152": "Design a method in Python to test whether or not a number is a palindrome.",
        "1153": "Find the Fibonacci sequence of a given number using a Python program.",
        "1154": "Write a function in Python to print a random permutation of array elements.",
        "1155": "Create a web application using Flask and Python to read in a dataset and print the number of unique items.",
        "1156": "Create a simple webscraper using Python library BeautifulSoup which scrapes a website for articles and downloads all the articles",
        "1157": "To reproduce Figure 8 from Prsa et al. 2016, first set up a binary system with reasonable albedos and relevant parameters. Then compute light curves with wilson and horvat irradiation and plot the relative differences between the two as a function of phase, for several different values of the inclination. Use the given code as a reference.",
        "1158": "Create a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher.",
        "1159": "Create a decision-tree algorithm that takes a CSV of input data and predicts the correct class for python.",
        "1160": "Create an AWS Lambda function in Python that sends an automated SMS message when a new user signup is detected.",
        "1161": "Generate a code to convert Celsius to Fahrenheit in Python",
        "1162": "Create an HTML page for a directory of Engineers that displays their name, organization, and skills.",
        "1163": "Create a Python module that calculates the distance between two points given their latitude and longitude.",
        "1164": "Create a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input.",
        "1165": "Write a Python program to create a new list with only odd numbers.",
        "1166": "Edit this Python code to improve the runtime complexity of the program.",
        "1167": "Create a python script to check if a given name is valid or not.",
        "1168": "Given a sentence, write a python program to return all the possible permutations of the words in the sentence.",
        "1169": "Create a JSON parser in Python",
        "1170": "Create a function in Python to display numbers from 1 to 10.",
        "1171": "Write a function in Python to calculate the Odds Ratios for a given contingency table.",
        "1172": "Create a K-Nearest Neighbors classifier model in Python for predicting the sale price of a used car.",
        "1173": "Given a list of objects and a property of each object. Can you create a Python program to output the value of the property of the first and last object?",
        "1174": "Answer a question using Python.",
        "1175": "Design an efficient data-structure using Python for",
        "1176": "Modify the given Python code to perform sentiment analysis (positive or negative) on a given text.",
        "1177": "Generate a code to calculate the mean absolute difference of items in a list in Python.",
        "1178": "Write a Python program to optimize a function with multiple input parameters.",
        "1179": "Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.",
        "1180": "Create a Python program that separates odd and even numbers.",
        "1181": "Create a program using Python that adds two numbers entered by the user.",
        "1182": "Sort a list in descending order using a lambda function in Python.",
        "1183": "Write a Python program to generate an array of random numbers in the range [0,99], with the length given as input.",
        "1184": "Generate a TensorFlow model in Python to predict the sentiment of text.",
        "1185": "Generate code to build an API using python and Flask",
        "1186": "Develop a Python program to estimate the value of PI using Leibniz's formula.",
        "1187": "Prepare a Python 3 program that takes the following input and finds the most frequently occurring characters in it.",
        "1188": "Write a Python program to compare two sets of strings, and print the longest common substring of the two sets.",
        "1189": "Create a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.",
        "1190": "Construct a for loop in Python to iterate over a list and print out each item in the list.",
        "1191": "Write a Python function to generate an array of numbers from 1 to n in random order.",
        "1192": "Define an interface for a data import task in Python.",
        "1193": "Write a Python program to remove a given element from a list.",
        "1194": "Create a Python program to check if a given string consists of only numeric digits.",
        "1195": "Can you write a python program to produce the intersection of two given lists?",
        "1196": "Convert the following code from python 2.x to python 3.x.",
        "1197": "Outpus the number of unique elements in a Python list.",
        "1198": "Write an algorithm in Python that takes an array of numbers and returns an array of only the even numbers.",
        "1199": "Create a sorting algorithm for an array of integers using Python.",
        "1200": "Utilize array sorting to sort an array in Python.",
        "1201": "Generate a Python function that returns the maximum of two given numbers.",
        "1202": "Using a mix of SQL and Python, build a program to read from a database table into a pandas dataframe, perform some manipulation on that data, and return the manipulated data back to the database table.",
        "1203": "Write a Python function capable of generating a personalized Etsy product listing URL for a given product.",
        "1204": "Implement a class in Python to represent a rectangle with two fields: width and height.",
        "1205": "Create a Python script for classifying customer data.",
        "1206": "Create a Python function to convert centimeter to inches.",
        "1207": "Create a python script that checks if all numbers in an array are greater than, equal to, or less than a given number.",
        "1208": "Write a script to classify the sentiment of a list of comments with Python.",
        "1209": "Create a two-player game of Blackjack in Python.",
        "1210": "Create a function in Python to find the length of a string.",
        "1211": "Create an logging utility in Python that prints the timestamp along with the logged content for each log entry.",
        "1212": "Create a Python script to print out 10 random values between 1 and 10.",
        "1213": "Create a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers.",
        "1214": "Automate the testing of a Python Flask application by writing a script that will run unit tests on the models.",
        "1215": "Rewrite a python function from a set of instructions using list comprehension.",
        "1216": "Write a Python groupby function that returns the top 3 most frequent elements in each group.",
        "1217": "Write a python function that accepts a number n as input and outputs its nth prime number.",
        "1218": "Build a binary search algorithm in Python that takes in an input list and a target value to search for.",
        "1219": "Optimize the given Python code so that it runs more efficiently.",
        "1220": "Create a text-based RPG game in Python. The game should involve player navigation, be randomly generated, and include enemies the player must defeat in order to win.",
        "1221": "Write a Python function to filter strings using a filter function as a parameter.",
        "1222": "Convert a given sentence to uppercase using Python.",
        "1223": "Design a Python algorithm to perform a Prefix Sum operation on an array.",
        "1224": "Write a Python program to determine the number of elements in a given array before the return value is -1.",
        "1225": "Create a code editor program in Python to easily format code and highlight syntax.",
        "1226": "Create a web service in Python that can save blog posts to a database.",
        "1227": "Write a Python program to analyze a sentiment analysis dataset. The dataset contains 3000 rows of tweets, and each row contains the content of the tweets and the corresponding sentiment label (either 0 for negative, or 1 for positive).",
        "1228": "Implement a strategy pattern in Python to manage different behaviors for different objects.",
        "1229": "Create a PipelineManager class with methods to list, get, install, and delete pipelines. The install method should take a pipeline ID and start the installation of the pipeline in another thread. The delete method should start the uninstallation of the pipeline in another thread and remove the image file if it exists. The class should import several modules and classes, including ipdb, os, shutil, json, zipfile, datetime, time, uuid, subprocess, requests, config, common, postgresql, and model.",
        "1230": "Write a Python program to read a CSV and converting the contents to a dictionary.",
        "1231": "In Python, write a function to format a given address into a human-readable form.",
        "1232": "Create a function in Python to remove all non-alphanumeric characters in a string.",
        "1233": "Create a Python program to generate a sentence based on the input text.",
        "1234": "Modify the following Python code to remove the duplicate elements from the list",
        "1235": "Optimize a program in Python for searching for a string in a list.",
        "1236": "Design a Python algorithm to generate a unique six-character alphanumeric string.",
        "1237": "Create a Python class for a customer that stores the customer\u2019s first name, last name and email address.",
        "1238": "Create a Python class for an employee with variable type member fields of name, age, and salary.",
        "1239": "Write a Python program to generate a random password using the given conditions.",
        "1240": "Given an URL as a string, write a program in Python to find the domain name.",
        "1241": "Write Python code to generate a list of prime numbers between 2 and 1000.",
        "1242": "Edit this Python code to execute the following tasks:",
        "1243": "Formulate a design pattern using object-oriented-programming concepts in Python that returns the sum of results from multiple classes.",
        "1244": "Develop a Python script to print out the prime numbers up to a given limit.",
        "1245": "Write a Python script to create a web server to handle two resources using the \"GET\" method.",
        "1246": "Create a Python function to generate a 8-letter random alphanumeric string.",
        "1247": "Write an algorithm to implement a bubble sort in Python.",
        "1248": "Create a Python script to calculate the intersection point of two lines",
        "1249": "Given a JSON string, write a Python program that prints out the values for each key.",
        "1250": "Edit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius.",
        "1251": "Create a Python script that extracts the text from a webpage",
        "1252": "Write a function or class in Python to parse an Excel sheet and extract all strings that are in bold.",
        "1253": "Design a class in Python to represent a Rectangle, which has the two attributes 'length' and 'width'.",
        "1254": "Write a python program to print the name and age of all customers in a list.",
        "1255": "Create a Python class that constructor prints \u201cHello World\u201d.",
        "1256": "Generate a function in Python that displays the Fibonacci sequence for a given value.",
        "1257": "Generate an edit script for transforming an input text.",
        "1258": "Create a web scraper in Python that extracts the titles and summary from the reviews on a certain web page.",
        "1259": "Name different Python string methods.",
        "1260": "Write a Python script to process user input and generate a response according to the user's query.",
        "1261": "Create a payment processing API in Python that takes in a customer's credit card information and validates it using a third-party payment processor like Stripe.",
        "1262": "Produce a Python code to calculate the sum of two squares given x and y as input.",
        "1263": "Create a Python script for calculating the Fibonacci sequence for the given number.",
        "1264": "Create a system to detect plagiarism in Python based on Levenshtein similarity.",
        "1265": "Write a Python program that can recognize the handwritten digits using OpenCV library?",
        "1266": "Define a class method in Python to initialize an object's fields.",
        "1267": "Create a python program to trace any recursive function on the screen.",
        "1268": "Use MongoDB and Python to store customer information with needed fields.",
        "1269": "Generate python code to encode a given string in base64.",
        "1270": "Generate a Python program to print the common elements from two sorted lists.",
        "1271": "Create a random forest classifier in Python which predicts if a house is affordable or not based on its features such as location, size, number of bedrooms, number of bathrooms, etc.",
        "1272": "Can you provide a Python program that resize an array of integers in place?",
        "1273": "Write a Python program to filter out unique elements from an array.",
        "1274": "Write a Python program to split a string on any whitespace.",
        "1275": "Create a ML model in Python to classify different types of fruits.",
        "1276": "Create a natural language processing (NLP) program in Python to classify words into five categories",
        "1277": "Create a Python program to print the current timestamp",
        "1278": "Write a python program to receive user input and calculate the sum of every number entered.",
        "1279": "Create a Python program to find the area of a given trapezoid.",
        "1280": "Upgrade the following code so that it runs on Python 3",
        "1281": "Create a python program that reads a list of names and picks a random name from that list.",
        "1282": "Write a Python code using the Pandas package to filter out rows with a specific condition in a table data.",
        "1283": "Can you create a Python program that returns the largest number in a list of numbers?",
        "1284": "Create a Python program to implement a linear search algorithm to find an element in a list.",
        "1285": "Optimize the given Python code to use list comprehension.",
        "1286": "Create a search algorithm in Python using a binary search, that takes an array of integers and a number as an argument and returns the position of the number within the array if the number exists.",
        "1287": "Edit the following Python function to handle keyboard interrupts.",
        "1288": "Create a regex pattern that matches two different words and prints out the second word if found.",
        "1289": "Create an API route in Python to return the top three highest-priced products.",
        "1290": "Create an optimization algorithm in Python to determine the ideal stock portfolio allocation.",
        "1291": "Write a Python program to encode the given string using a Caesar Cipher.",
        "1292": "Develop a Python program that prints \"Hello, World!\" whenever it is run.",
        "1293": "Develop a Python program to generate 10 random numbers between 1 and 100.",
        "1294": "Create a class and object in python to model the bill of a restaurant.",
        "1295": "Write a Python program to take a list of words and create a dictionary with the words as keys and the frequency of each word as the values.",
        "1296": "Create a user-defined function in Python for finding the sum of squares of three numbers.",
        "1297": "Reverse the words in this sentence using Python.",
        "1298": "Write a Python code snippet to classify animals into mammals, birds, and fishes using decision tree.",
        "1299": "Build a recommendation system in Python to suggest movies to a user based on their previous ratings.",
        "1300": "Create a Python program for sorting a list of words into alphabetical order.",
        "1301": "Given a list of strings, write a Python program to calculate the maximum length of a string.",
        "1302": "The code is a Python script that contains functions to format and plot data using Plotly. To use the code, import it into your Python environment and call the functions as needed. The main function is \"post\", which takes in a filename, data, and optional parameters to customize the plot. The \"format_data\" function can be used to convert raw data into a format that can be plotted using the other functions. The \"get_histogram\", \"get_scatter2d\", and \"get_scatter3d\" functions generate different types of plots based on the input data.",
        "1303": "Generate a Python script for searching for a pattern in a given text.",
        "1304": "Classify the following statement as a valid Python statement, an invalid Python statement or a comment.",
        "1305": "Suggest a programming language and a library for text classification.",
        "1306": "Generate a text-based progress bar using Python.",
        "1307": "Develop a chatbot in Python that records customer requests and stores them in a database.",
        "1308": "Create a Python script to return the first two elements of a list.",
        "1309": "Write a Python script to generate a list of prime numbers between 2 and 30.",
        "1310": "Write a Python function that converts a given number from one numeric base to another.",
        "1311": "Create a program in Python to flatten a given array of arrays.",
        "1312": "Create a Python script using requests library to get the weather forecast of 8 cities.",
        "1313": "Generate a Python function to return the index of a given number in a sorted list.",
        "1314": "Design a class to represent a book in Python.",
        "1315": "Write a Python program that can recognize handwritten letters.",
        "1316": "Create a class for a person in Python which includes name and age as attributes.",
        "1317": "Design a python script to build a tree from a list of parent-child relationships.",
        "1318": "Develop an AI program in Python which can play the game tic-tac-toe.",
        "1319": "Create a Python program that stores user data into a SQL database.",
        "1320": "Develop a Python script to print the prime factors of a given positive integer.",
        "1321": "Create a program in Python to convert any number from 0 to 999 to its corresponding word.",
        "1322": "Write a function in Python to uniformly convert any data format into a JSON format.",
        "1323": "Write a Python program to generate all subsets of a given set.",
        "1324": "Create a code to print the nth Fibonacci number in Python.",
        "1325": "Create a Python program to convert degrees Celsius to degrees Fahrenheit given a value in Celsius.",
        "1326": "Develop a greedy algorithm in Python to complete a given optimization task.",
        "1327": "Create a Python program that counts the occurrences of each letter of the alphabet in a given sentence.",
        "1328": "Write Python code to print the number present in an inputted string.",
        "1329": "Edit the following Python code to re-rank the numbers in descending order.",
        "1330": "Create a k-means clustering algorithm in Python to cluster a given dataset.",
        "1331": "Design an API in Python to fetch location information using geopoints.",
        "1332": "Generate a program in python to capitalize the first letter of each word in a string.",
        "1333": "Write a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter.",
        "1334": "Create a python function that is able to parse a input string and extract all words that have at least 4 characters.",
        "1335": "Write a python program to convert a given string in valid json format",
        "1336": "Write a function in Python for encrypting a given string with a given key.",
        "1337": "Create a script in Python that prints a matrix of size n x m containing random numbers.",
        "1338": "Generate a Python code to get the min and max elements of an array.",
        "1339": "Create a Python program to determine the category of a given number based on predefined criteria.",
        "1340": "Create a Python function to filter a given list of strings and return a new list of strings containing only unique elements.",
        "1341": "Optimize the given Python code by removing any redundant or unnecessary operations.",
        "1342": "Create a function in Python that converts a sentence to upper case.",
        "1343": "Write a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5",
        "1344": "Create a function in Python that converts an array of strings into a dictionary containing character counts.",
        "1345": "Design a program in Python which prints the Fibonacci sequence up to the given number n.",
        "1346": "Translate an algorithm from Java to Python to delete a node in a linked list.",
        "1347": "Simplify a fraction using a provided Python code.",
        "1348": "Create a function in Python that takes two strings in as arguments and returns a boolean value indicating if the strings have the same letter case.",
        "1349": "Implement a bubble sort in Python.",
        "1350": "Design an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.",
        "1351": "Generate code to remove any duplicates from a list of integers in Python.",
        "1352": "Using Tkinter library, write a Python program to create a window with two buttons: One for stopping a program, and the other for starting a program.",
        "1353": "Create a script in Python to sort a list of names by alphabetical order.",
        "1354": "Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.",
        "1355": "Edit the Python program given below, so that it computes the factorial of the given number n.",
        "1356": "Clone a remote Git repository using a Python program.",
        "1357": "Generate a Python script to calculate the factorial of a number.",
        "1358": "Generate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers.",
        "1359": "Given a sentence, write a Python program to capitalise the first letter of each word.",
        "1360": "Generate a function in python that takes two strings and returns the longest substring that is common to both strings.",
        "1361": "Write a function in Python to print all the prime numbers between 0 and 100.",
        "1362": "Write a Python function to compute the frequency of unique words from a given string.",
        "1363": "Write a Python program to generate a simple Maze game where the player starts at position (0,0) and needs to find the goal position (4,4) by navigating the maze.",
        "1364": "Generate a correct program in Python to perform two dimensional binary search",
        "1365": "Develop a text summarizer in Python that takes a text input and returns a summary of the text in two sentences.",
        "1366": "Write a Python program that uses an API to retrieve data from a given web page and displays the relevant information to the user.",
        "1367": "Write an algorithm in Python to detect duplicate values in a given array.",
        "1368": "Design a sorting algorithm in Python that is capable of sorting very large lists.",
        "1369": "Create a Python script for downloading a web page's HTML content.",
        "1370": "Write a python code that takes the starting and ending numbers of a range, and returns the largest prime within that range.",
        "1371": "Create a Python function to calculate the sum of two numbers using a for loop.",
        "1372": "Refactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension.",
        "1373": "Design a Python class to represent a circle with a center and a radius.",
        "1374": "Can you create a loop in Python to find the highest value in an array?",
        "1375": "Design a Python program to compute the maximum sum of any subpolygon within a given array of N points",
        "1376": "Write a Python program to evaluate a given string and return a Boolean value.",
        "1377": "Make a Python program that can generate random numbers between 1 and 1000.",
        "1378": "Write a function in Python to extract domain name from given URLs.",
        "1379": "Write a Python function that takes in a 2D array of integers and return the sum of all elements in the array.",
        "1380": "Develop a Python program that automatically prints out a Fibonacci sequence of length n.",
        "1381": "Design an algorithm for sorting a list in Python.",
        "1382": "This code tests BIP forks in Python 2. To run the test, follow these steps: \n\n1. Start a single node.\n2. Use regtest lock-in with 108\/144 block signalling.\n3. Activate after a further 144 blocks.\n4. Mine 2 blocks and save coinbases for later use.\n5. Mine 141 blocks to transition from DEFINED to STARTED.\n6. Mine 100 blocks signalling readiness and 44 not in order to fail to change state this period.\n7. Mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN).\n8. Mine a further 143 blocks (LOCKED_IN).\n9. Test that enforcement has not triggered (which triggers ACTIVE).\n10. Test that enforcement has triggered.",
        "1383": "Write an algorithm in Python to find the largest and smallest element in an array.",
        "1384": "Generate a Python class that takes a single number as an argument, which indicates an array size, and calculate the median value of the array",
        "1385": "Write a Python program to extract all emails from an HTML page.",
        "1386": "This code is a Python module for image manipulation. To use it, import the module and create an instance of the ImageHelper class. The module provides several methods for image manipulation, including comparison, loading, cropping, bordering, resizing, colorizing, and saving. To manipulate an image, call the manipulate method and pass in the source image file path and any desired options. The method will return True if the image was successfully manipulated and saved, False if there was an error, or the manipulated image if no save destination was specified.",
        "1387": "Write a python program to find the longest palindromic substring from a given string.",
        "1388": "Generate a Python program to calculate the area of a provided room.",
        "1389": "Implement a function in Python to implement Merge Sort algorithm.",
        "1390": "In Python, generate a function to extract data from a MySQL table, given a query string.",
        "1391": "Construct a program to filter out empty strings from a given list.",
        "1392": "Design an algorithm in Python to compute the intersection of two given arrays.",
        "1393": "Write a Python program to generate an array of all the prime numbers within a given range.",
        "1394": "Design a program in Python to track inventory.",
        "1395": "Write a Python program to compare two given strings in terms of length, characters, and case sensitivity.",
        "1396": "Create a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values.",
        "1397": "Create an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers.",
        "1398": "Generate a Python program to generate a Fibonacci series up to 5 terms.",
        "1399": "Generate a random 5x5 matrix consisting of numerical entries in Python.",
        "1400": "Write a function in Python that takes two strings and checks if they are anagrams (i.e., if they contain the same characters in the same order).",
        "1401": "Construct a python visualization to display a bar chart of the results of some data.",
        "1402": "Design a python program to return the n-th element of a given list.",
        "1403": "Suggest a solution to improve the following Python code to minimize the running time.",
        "1404": "Create a Python program to search through a list of names and print out any names that contain the letter 'a'.",
        "1405": "Create a function in Python that takes a list of strings and count all occurrences of a particular word in the list.",
        "1406": "Create a function in Python that takes two integers and returns the larger with the smaller one as its divisor.",
        "1407": "Modify the following python code to include a trycatch block.",
        "1408": "The given code is a Python script that defines a TestMailNotifier class and several methods for testing a NotifierBase class. To use this code, you can create an instance of the TestMailNotifier class and call its methods to test the behavior of the NotifierBase class. To run the tests, you can execute the script.",
        "1409": "Generate a machine learning model in Python with Scikit-Learn to classify data into 3 categories.",
        "1410": "Write a function in Python to find the power of a given number n using an iterative approach.",
        "1411": "Create a program in Python which can classify whether an animal is a bird or a mammal.",
        "1412": "Develop a program to detect and remove a given pattern in a string.",
        "1413": "Write a Python script to print the armstrong numbers between 0 and 1000.",
        "1414": "Create a class in Python that validates input to confirm that it is of the correct type.",
        "1415": "Create a web scraper in Python to get all the comments from a specific Reddit post.",
        "1416": "Create a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.",
        "1417": "Construct a for loop in Python for outputting the numbers in the range of 5-15.",
        "1418": "Sort a given list using bubble sort in Python.",
        "1419": "Create a Python class for a Person, with first name and last name attributes.",
        "1420": "Create a function in Python that takes two strings and returns the Levenshtein distance between them.",
        "1421": "Create an algorithm in Python to remove duplicates from an array of integers while preserving the order of the elements.",
        "1422": "Create an AI script in Python that can play Tic-Tac-Toe.",
        "1423": "Create a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age).",
        "1424": "Create a web-scraping script using Python and the requests library to extract a list of titles from a webpage.",
        "1425": "Create a web scraper in Python to fetch the titles and URLs of trending news stories from BBC news.",
        "1426": "Create a function in Python to print a sorted list of the given input string.",
        "1427": "Create a code in Python to create a random binary tree.",
        "1428": "Create a method in Python that takes a list of numbers and returns its average.",
        "1429": "Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.",
        "1430": "Construct a code snippet in Python to eliminate all the negative numbers in a given list.",
        "1431": "Design a sorting algorithm in Python that can sort this specific array.",
        "1432": "Generate a list of 100,000 random numbers from 0 to 1 using NumPy in Python.",
        "1433": "Write a Python function to compute a similarity score between two input strings.",
        "1434": "Write a function in Python to return the square root of a number.",
        "1435": "Rewrite the following pseudocode in Python",
        "1436": "Identify the data type of each variable in the given Python snippet.",
        "1437": "What is the purpose of Python decorators?",
        "1438": "Train a Naive Bayes classifier in Python with the given dataset.",
        "1439": "Generate a Python script for training a K-Means algorithm on the following dataset.",
        "1440": "This code is a Python script that reads in a file of the CODA format and performs some basic statistical computations. The script requires an index.txt and chain.txt file, which it will automatically identify for internal use. The script can output mean, standard deviation, and confidence interval (default 95%), and can plot a histogram or trace plot. To use the script, run \"coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\" in the terminal, where xx is the desired percentile, variable, or number of bins.",
        "1441": "Create a script to join two given strings if they have compatible characters.",
        "1442": "Generate a Python program that scrambles the input string by randomly switching the positions of the characters.",
        "1443": "Translate the following sentence into Python code: \"Print 'Welcome' 5 times\".",
        "1444": "Implement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.",
        "1445": "Generate a list of all permutations of the letters in a given word using Python.",
        "1446": "Write a Python program to calculate the standard deviation of given data.",
        "1447": "Create a Python script to generate 10 random passwords. The script should prompt the user to enter a length for the passwords.",
        "1448": "Write a Python program to check if two strings are isomorphic.",
        "1449": "Find the most frequent value in the given array in Python.",
        "1450": "Edit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.",
        "1451": "Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number.",
        "1452": "Write a Python program for the game \"Rock, Paper, Scissors\". The program should have basic functions to play the game (i.e. prompting user input, random computer choice etc.) and handle the game logic of determining the winner.",
        "1453": "Design an algorithm in Python to display the total number of odd numbers between a given range",
        "1454": "Create a Python code snippet to print the number of elements in an array",
        "1455": "Design an algorithm in Python to print out binary numbers between 1 and N.",
        "1456": "Write a function in Python to delete duplicates from a list.",
        "1457": "Build a machine learning model in Python to predict customer churn using the given dataset.",
        "1458": "Take a string and output a list of all the words comprising the string",
        "1459": "Create an AI agent in Python that learns to play Tetris and maximizes its score.",
        "1460": "Design a function in Python for computing the area of a triangle.",
        "1461": "Write a python program to find the probability of an event happening given a set of probability data.",
        "1462": "Create a Deep Neural Network in Python that classifies if a credit card transaction is fraudulent or not.",
        "1463": "Design an algorithm in Python for finding the longest common subsequence between two strings.",
        "1464": "Develop an algorithm in Python for detecting spam emails.",
        "1465": "Develop a program in Python that generates random passwords with characters, numbers, and special characters.",
        "1466": "Write a Python program that checks two given strings to see if they are anagrams of each other.",
        "1467": "Optimize a Python program to reverse a string with a lower time complexity.",
        "1468": "Modify a Python web scraper so that it only scrapes text between two HTML tags, and excludes text before or after those tags.",
        "1469": "Generate a code for a Hangman game.",
        "1470": "Write a function for converting a series of hex values into a decimal integer in Python.",
        "1471": "Optimize a given Python program to run more efficiently.",
        "1472": "Create a simple Python program that takes in two strings and prints the one with the longer length.",
        "1473": "Edit the given Python code to sort a list of words by their length.",
        "1474": "Generate a python code to sort a dictionary in descending order by its values",
        "1475": "Generate a list of 50 random numbers between 1 and 100 in Python.",
        "1476": "Generate a Python script to connect to a PostgreSQL database.",
        "1477": "Create a neural network in Python with 3 hidden layers of size 50, 40 and 30 respectively.",
        "1478": "Create a Python class for a Car that has attributes for make, model and year.",
        "1479": "Write a Python program that takes two given strings and checks if the first is a substring of the second one.",
        "1480": "Given a list of numbers in an array, write a Python program to find the sum of the elements of the array.",
        "1481": "Write Python code to generate a random letter from A to Z.",
        "1482": "Write a Python program to edit a given text string and capitalize the first letter of every word.",
        "1483": "Write a Python code to get the intersection of two given arrays.",
        "1484": "Create a function in Python to return the media according to the following criteria:",
        "1485": "Generate a REST API in Python for an employee database with fields for name, salary, and experience. The API should include CRUD operations to create, read, update, and delete entries.",
        "1486": "Construct an algorithm in Python to convert a string to uppercase.",
        "1487": "Create a machine learning algorithm in Python for predicting stock prices using historical data.",
        "1488": "Construct a Python class named \u201cCar\u201d that has 3 fields: top_speed, make, and color.",
        "1489": "Design a function in Python that takes in a string and returns a list of words from the string in reverse order.",
        "1490": "Create a machine learning model in Python that can predict the number of sales of a product based on the features provided.",
        "1491": "Write a python code that takes a string as a parameter and returns the number of different words present in that string.",
        "1492": "Create a Python program to generate a random string of length 8 containing only alphabets and numbers.",
        "1493": "Create a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.",
        "1494": "Develop a Python program that takes a list of words in variable \u2018words\u2019 and creates a new variable with the length of each word.",
        "1495": "Create a class in Python named `Movie` that contains two parameters `title` and `rating`.",
        "1496": "Construct a loop in Python that iterates over a given list of strings and prints each string.",
        "1497": "Generate a Python function to classify the given list of numbers into two subgroups (positives and negatives).",
        "1498": "Generate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.",
        "1499": "Write a python program to generate all prime numbers between 1 and 10.",
        "1500": "Develop a Python program that improves a given string by replacing words with their synonyms.",
        "1501": "Write a python code to print the current time in the given timezone (America\/Chicago).",
        "1502": "Create a basic Natural Language Processing (NLP) system using Python to analyze sentences.",
        "1503": "Create a class in Python for representing a simple counter.",
        "1504": "Create a Python package that contains a collection of functions for finding the average value of an array.",
        "1505": "Create a Python program to find the root of a quadratic equation.",
        "1506": "Build a Python application using Flask and SQLAlchemy that returns a JSON object containing the results of a database query. The application should accept a query parameter that determines what data is returned.",
        "1507": "Create a Python module that implements functions for classes and objects.",
        "1508": "Write a loop in Python to iterate through a list and print all elements that have an even length.",
        "1509": "Create a function in Classical Python to extract the hostname from a given URL",
        "1510": "Create a Python function to generate anagrams from a given string.",
        "1511": "Design a function in Python to find the longest increasing subsequence from an array",
        "1512": "Design a class in Python that stores information about three sides of a triangle.",
        "1513": "Create a class in Python to store the details of mobile phone",
        "1514": "Create a function in Python that takes a string as an argument and replace all vowels with underscores.",
        "1515": "Write a Python program to find the nearest 3 squares to a given number.",
        "1516": "Create a Python program to read the contents of a JSON document and store it in a list.",
        "1517": "Create a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string.",
        "1518": "Generate a Python program to remove all occurrences of the character 'x' from a list",
        "1519": "Create a Python class that encapsulates a Queue data structure.",
        "1520": "Develop a neural network model in Python to recognize a hand-written number.",
        "1521": "Create a program in Python that implements linear regression.",
        "1522": "Create a Python program to convert the following expression in infix notation to postfix notation",
        "1523": "How would you create a 3D Array in python?",
        "1524": "Design a game controller class that stores and updates game state in Python",
        "1525": "Produce a python code to satisfy the following requirements:",
        "1526": "Create a Python script to break the given sentence into words.",
        "1527": "Make a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.",
        "1528": "Create a web scraper with Python to extract the hyperlinks from a given website.",
        "1529": "Come up with a solution to optimize a classifier model in Python.",
        "1530": "Generate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.",
        "1531": "Generate an algorithm to count substrings in Python.",
        "1532": "Write a Python regex expression to match any telephone number that has 8-12 digits with area code.",
        "1533": "Write a Python program to generate and print a random list of size n.",
        "1534": "Create a machine learning model in Python using the scikit-learn library for classifying emails as ham or spam.",
        "1535": "Create a web scraper in Python using the BeautifulSoup library. This scraper should be able to extract information from a web page and store it in a list of dictionaries.",
        "1536": "Output the factorial of a given number in Python.",
        "1537": "Write a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.",
        "1538": "Generate a Python program that automatically generates bar charts for given data",
        "1539": "Write a Python function to filter out strings that contain numbers.",
        "1540": "Implement a function in Python to generate a password of size n",
        "1541": "Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string.",
        "1542": "Write a Python program to calculate the total cost of a customer's online orders.",
        "1543": "Generate a Python program to find the number of words with distinct letters in a given string",
        "1544": "Generate a function in Python for generating a random integer between two given numbers (inclusive).",
        "1545": "Optimize the following Python program to count the frequencies of characters in a string.",
        "1546": "Develop a Python program to test a condition",
        "1547": "Create a class in Python that represents a 3D Cube and initializes all side lengths to 10.",
        "1548": "Generate a Python object literal from a dictionary.",
        "1549": "Classify the following snippet of Python code as data wrangling, visualization, or machine learning.",
        "1550": "Write a function in Python that takes a sentence as an argument and returns the same sentence but with all the words reversed.",
        "1551": "Generate a Python program that computes and prints the sum of the even numbers in a given list.",
        "1552": "Create a basic web-scraper in Python that obtains the price and description of a product from a website.",
        "1553": "Create a web scraper in Python that downloads a list of news articles. The script should take a URL as an input and produce a list of articles from that page. Each article should have the URL, title, author and publication date.",
        "1554": "Create a Python program to search for a given item in a list of strings.",
        "1555": "Generate a Python program to parse a given list of URLs and extract the titles of the web pages.",
        "1556": "Create a Python program to find and print all pairs of numbers from a given array of integers whose sum is equal to a given number.",
        "1557": "Create a Python program that will take an array of integers as input and output a reversed version of the array.",
        "1558": "Convert the following JavaScript program into a Python program that does the same things:\n\nlet a = 5;\nlet b = 10;\nlet c = a + b;",
        "1559": "Generate a script using a language of your choice to validate a field for a given email after taking the input from the user.",
        "1560": "Create a program to generate a frequency table from a given list",
        "1561": "Implement a 'closest to zero' algorithm in Python, which returns the closest to 0 value from a given array.",
        "1562": "Write a Python function to create a Fibonacci sequence up to n-th number.",
        "1563": "Convert the following JSON object to Python dictionary.",
        "1564": "Create an AI game in Python for the user to guess a number between 1 and 10.",
        "1565": "Implement webscraping with Python to extract content from a given website.",
        "1566": "Create a Python lambda expression that takes two parameters, a and b, and returns the average of them.",
        "1567": "Generate a random number in Python between 10 and 20 excluding 14.",
        "1568": "Write a function in Python that normalizes a list of numbers by subtracting their average and dividing by the standard deviation.",
        "1569": "Design a Python program to extract data from the given dataset.",
        "1570": "Build a text generator in Python that can generate poem based on a given input.",
        "1571": "Write a Python comparative sorting algorithm",
        "1572": "Create a web scraper in Python's BeautifulSoup to scrape a list of titles and their corresponding URLs from a web page.",
        "1573": "Can you create a Python program that compares two lists and finds common elements?",
        "1574": "Create a virtual chatbot in Python that can handle simple conversations.",
        "1575": "Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear.",
        "1576": "Generate a python program to remove duplicate elements in a given list.",
        "1577": "Write a python function to remove duplicates from an array.",
        "1578": "Create a Python script to parse an XML document and extract the title and description for each item in the document.",
        "1579": "Create a Python program to simulate an automatic grocery store checkout machine.",
        "1580": "Create a set of functions to encrypt a string in Python using the Advanced Encryption Standard (AES) with a given key and initialization vector (IV).",
        "1581": "Write a Python program that prints all prime numbers up to a given number n.",
        "1582": "Given a set of numbers, write a Python program to find the maximum number after performing arithmetic operations on the digits of the set of numbers.",
        "1583": "Compose a Python program to classify data",
        "1584": "Create a function in Python to calculate the sum of 1 to n numbers.",
        "1585": "Create a Python function that takes a given list of strings, and returns a dictionary of all the words paired with how many times they appear in the list.",
        "1586": "Create a function in Python that takes an array of strings and returns a new array of strings with all the vowels removed from each string.",
        "1587": "Develop a Python web-crawler that takes a URL as input and returns the number of words on the page.",
        "1588": "Write a Python function to convert a string to an integer.",
        "1589": "Edit a given Python program to optimize the time complexity.",
        "1590": "Write an optimized Python program to sort the elements of an array in ascending order.",
        "1591": "Write a Python script to convert a list of words into a dictionary that details the frequencies of each word.",
        "1592": "Optimize an existing Python code snippet that sorts a list of integers in ascending order. The code should be optimized for speed and should not use any libraries.",
        "1593": "Given the input, create a Python program which prints out all the words inside the input in alphabetical order.",
        "1594": "Create a web scraping script in Python that extracts all the users and their reviews from a page on TripAdvisor.",
        "1595": "Write a python program to implement Merge Sort",
        "1596": "Generate a program in Python that takes in a string and returns the reverse of the string.",
        "1597": "Generate a Python statement to select unique values from a list.",
        "1598": "Create a program in Python that checks if a number is prime or not.",
        "1599": "Create a Python program to create a stack with basic push and pop operations.",
        "1600": "Write a Python program to calculate the DFT of a signal using the Fast Fourier Transform (FFT) algorithm.",
        "1601": "Write a Python program to convert a string in camel case format to snake case format",
        "1602": "Given two strings s and t, write a Python program to check if t is a substring of s.",
        "1603": "Generate a program to recognize the sentence 'Good morning' in Python.",
        "1604": "Write a Python program to parse an HTML table and extract its contents.",
        "1605": "Create a Python function named `time_in_words` that takes in input two integer variables, `hours` and `mins`. The function should return a phrase string corresponding to the time indicated by the inputs. For example, if `hours` is equal to `5` and `mins` is equal to `12`, the return value of the function should be `five twelve`.",
        "1606": "Create an AI model in Python that predicts whether a person is a relative of the speaker.",
        "1607": "Write a Python program that takes a URL and checks for broken links.",
        "1608": "Build a solution using the given resources. The end result should present the user with a search bar to query a database.",
        "1609": "Create a Python script that classifies an incoming sentence as either positive or negative.",
        "1610": "Generate a python program that create a pandas dataframe from a dictionary column.",
        "1611": "Given some code, identify the type of the code written.",
        "1612": "Create a Python script that parses a JSON string and complete the following tasks: (1) convert the string to an object, (2) sort the object by keys, and (3) print the object in a formatted way.",
        "1613": "Convert the following Java program to Python program.",
        "1614": "Create a Python program for classifying the sentiment of a text. The program should take a string argument and predict whether the sentiment is positive or negative.",
        "1615": "Create a python program to convert a list of strings to a dictionary.",
        "1616": "Generate a list comprehension in Python for the following operation.",
        "1617": "Create a Python function to find all the prime numbers between 0 and a given number.",
        "1618": "Create a script written in Python for accessing the Reddit API and formulating a Sentiment Analysis on a given subreddit.",
        "1619": "You need to write a Python program for computing the factorial of a number.",
        "1620": "Generate a list of 10 random numbers in Python between 0 and 1 (including 0, excluding 1).",
        "1621": "Create a programmatic interface in Python to search for domain names. The interface should include a text field to enter a query string and a \u201cSearch\u201d button to initiate the search.",
        "1622": "Suggest an algorithm to generate a string of random numbers.",
        "1623": "Create a Python program to create a histogram from a given list of integers.",
        "1624": "Write a Python program to retrieve the titles and scores of the top 10 movies rated by users from the IMDB database.",
        "1625": "Generate a Python code that takes in two sets of coordinates and prints the distance between them",
        "1626": "Write a single line of code to display the current date and time in the format \"Month day year, Hour:Minute\u201d using the Python module datetime.",
        "1627": "Create a program in Python that removes duplicates from a given array.",
        "1628": "Create a function that concatenates two lists in Python.",
        "1629": "Create a text editor in Python using the PyQt5 library.",
        "1630": "Create an algorithm in Python for computing the Levenshtein distance between two strings.",
        "1631": "Create a Python script which removes specified index from a list.",
        "1632": "Create a Python program to check if the given number is divisible by 3 or not.",
        "1633": "Develop a basic web crawler using Python language.",
        "1634": "Rewrite the following code in python",
        "1635": "Create a code in Python to generate a random English word.",
        "1636": "Write a Python code that takes in data points in time-series and returns the average of the data points for the given period.",
        "1637": "Generate an efficient heap sort algorithm for a Python list containing random numbers.",
        "1638": "Design a class in Python that contains a method to format a given string, removing all non-alphanumeric characters and replacing spaces with underscores.",
        "1639": "Produce a program in python to solve a given Sudoku puzzle.",
        "1640": "Write a Python program to calculate the maximum possible sum of a route between two nodes in a tree.",
        "1641": "Create a python program to search for a given string in a list of strings.",
        "1642": "Create a python program that sorts a roster of students by their grade.",
        "1643": "Generate a python script to extract the 10th row from a table",
        "1644": "Create a web scraper in Python that will scrape Reddit for comments and store them in a database.",
        "1645": "Generate a dictionary of objects in Python from a list of words given by the user.",
        "1646": "Create a Machine Learning model in Python which predicts the house prices in a given area.",
        "1647": "Write a function in Python that takes a sentence as an input and prints out the words in reverse order.",
        "1648": "Design a classifier in Python using scikit-learn to identify the sentiment of a given movie review.",
        "1649": "Create a text-based chatbot using Python. The chatbot should have the ability to respond to \u201chello\u201d and give a warm welcome message.",
        "1650": "Can you write an algorithm in Python to check if a given variable is palindrome?",
        "1651": "Write a function in Python to remove duplicates in a list and return the modified list",
        "1652": "Write a Python program to generate a n -by- n matrix of ones and zeros, with the ones in the diagonal and the rest set to zero.",
        "1653": "Design a Python program to extract the duplicate elements from an integer array.",
        "1654": "Establish an automated machine learning workflow in Python.",
        "1655": "Write a PostgreSQL query that returns the title and author of all blog posts with the keyword \"Python\".",
        "1656": "Create a Python function that takes an integer n and returns an array of n random numbers between 0 and 9.",
        "1657": "Optimize a given Python code by reducing the running time to the minimum possible.",
        "1658": "Construct a Python generator to yield all the permutations of a given list.",
        "1659": "Write a Python program to create a basic web scraper that takes a given URL, downloads HTML content from it, and returns a list of all links found in the HTML.",
        "1660": "Create a function in Python that takes a list of numbers as an input and sorts them in ascending order.",
        "1661": "Generate a Python program that creates a word cloud from a given text.",
        "1662": "Create a function in Python that outputs the Fibonacci series up to the nth number.",
        "1663": "Write a Python script to convert a given string to datetime format.",
        "1664": "Create a function in Python that takes two numbers as inputs and prints out their sum.",
        "1665": "Write a Python program to classify the given data into two classes using the KNN algorithm.",
        "1666": "Write a Python program to generate all combinations of 2 given lists.",
        "1667": "Convert this Python function to JavaScript.",
        "1668": "Create a Python function that takes a string of words and returns a list of the most frequent words in the string",
        "1669": "Can you generate a Python program to calculate the length of the hypotenuse of a right triangle?",
        "1670": "Write a python program to detect if a given docstring contains Tensorflow code.",
        "1671": "Write a Python program to calculate the sum of an arbitrary number of arguments.",
        "1672": "Write a function in Python to return the top 3 most frequent words in a given string.",
        "1673": "Create a Python program that takes a list of digits as input and returns a 2D list of all the possible permutations of these digits.",
        "1674": "Write a Python program to find all the words with a length equal to 5 in a sentence and replace them with a placeholder.",
        "1675": "Generate a random number between 5 and 10 using Python.",
        "1676": "Create an interface using Python and Tkinter to read data from an external source and show it in a canvas.",
        "1677": "Write a specific Python program to detect a cycle within a linked list.",
        "1678": "Create a Python program that sorts an array using Merge Sort.",
        "1679": "Develop a Python script to generate random numbers between a minimum and maximum value.",
        "1680": "Create a Python program to predict the sentiment of user reviews using a Naive Bayes classifier.",
        "1681": "Develop a function that returns the sum of three numbers",
        "1682": "Create a Python function to generate a random password of length n",
        "1683": "Create a GUI program in Python to ask a user to input any text and display the output.",
        "1684": "Design an algorithm in Python to find the longest substring without repeating characters.",
        "1685": "Edit the given Python code to print the multiplication table for given number.",
        "1686": "Create a Python script to parse a JSON string and extract data from it.",
        "1687": "Write a web crawler using Python Scrapy which starts from a URL and follows all the hyperlinks on the page until a given depth is reached.",
        "1688": "Design a program to build a recursive tree structure with nodes in Python.",
        "1689": "Develop a biopython program which counts the number of occurrences of a given DNA sequence.",
        "1690": "Design a python function to tokenise a given sentence into basic components like words and punctuations.",
        "1691": "Write a Python code snippet to create a user account with the given name and password.",
        "1692": "Convert the program to use an interactive command line program using Python Argparse library.",
        "1693": "Create a python program to calculate the factorial of the given argument.",
        "1694": "Construct a program in Python that finds the nth prime number.",
        "1695": "Design and create a Python class named trie.",
        "1696": "Create a function in Python that prints the sentence \"Hello, World!\" n times.",
        "1697": "Generate a Python class to represent a car. The class should include attributes for make, model, year, and color.",
        "1698": "Create a Python program to generate an encryption key.",
        "1699": "Transform the following Python function into a list comprehension.",
        "1700": "Generate a machine learning model in Python to classify emails into spam and non-spam.",
        "1701": "Develop a Python program that accepts a list of numbers and prints the 2nd largest and the 3rd smallest elements from the list.",
        "1702": "Create a program in Python that implements a sorting algorithm of your choice to sort a given array of integers in ascending order.",
        "1703": "Write an optimized Python program to generate the Fibonacci sequence up to n.",
        "1704": "Create Python code to group all emails with the same subject into one single email.",
        "1705": "Create a Python program for finding the maximum and minimum numbers in an array of numbers.",
        "1706": "Construct a Python script to search a text for a given string and returns the number of iterations found.",
        "1707": "Construct a class in Python that will represent a shopping cart. The class should contain methods for making a purchase, adding products to the cart, and calculating the total price.",
        "1708": "Create a Python script that uses the Beautiful Soup library to find the top ten most frequent words on a given web page and prints them as a list.",
        "1709": "Write a Python script to generate a random password string with length 20 that contains all the characters in the string.",
        "1710": "Generate a Python program to evaluate a mathematical expression?",
        "1711": "Write a Python function to get the common items from two given lists.",
        "1712": "Edit this Python program to run on Python 3.",
        "1713": "Create a program in Python that takes a list of numbers and sorts them in descending order.",
        "1714": "Write a code in Python to find out how long a given string is.",
        "1715": "Generate a program in python that converts a given sequence of strings into a list",
        "1716": "Create a Python program to find the the largest and smallest in a list",
        "1717": "Create an API endpoint in Python Flask that takes in a query term and searches the Wikipedia API for the query and returns the result.",
        "1718": "Create a Python function to calculate the sum of all numbers from 0 to the input number.",
        "1719": "Write a Python program that computes the Hamming distance for two strings.",
        "1720": "Design a program in Python to find the max three numbers in a list.",
        "1721": "Write a Python program to print the first 20 prime numbers.",
        "1722": "Write a Python program that checks for a palindrome.",
        "1723": "What is the code for a Python function to calculate the factorial of a given integer?",
        "1724": "create a Python program to create a chart of the average temperatures in Celsius for the current year.",
        "1725": "Suggest a Python library for web scraping.",
        "1726": "Create an AI voice assistant in Python to read text from a website.",
        "1727": "Create a method in Python to calculate the Euclidean distance between two points.",
        "1728": "Write a Python function to calculate the cosine similarity between two lists of numbers.",
        "1729": "Develop a function in Python to calculate the circumference of a circle.",
        "1730": "Create a Python script that calculates the edit distance between two strings.",
        "1731": "Create a function in Python which takes a list of numbers as input and returns the maximum of the numbers.",
        "1732": "Write a Python code to find the factorial of a given number without using inbuilt functions like factorial().",
        "1733": "Create an efficient algorithm in Python to convert a list of integers into a single integer representing the sum of the list elements.",
        "1734": "Create a function to parse a JSON string and return a Python dictionary.",
        "1735": "Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.",
        "1736": "This code is a Python script that contains a test suite for the interactivespaces module. To run the tests, execute the script. The tests cover various methods for interacting with the Interactive Spaces API, including getting collections of activities, live activities, live activity groups, spaces, controllers, and named scripts. There are also tests for creating a new live activity. The code uses the unittest module for testing and the mock module for creating mock objects to test against.",
        "1737": "Create an algorithm in Python to search for a particular string in a given text.",
        "1738": "Create a python 3 script to generate a list of integers from 0 to 100.",
        "1739": "Implement a function in Python to filter out invalid names in a list of strings. The function should take as argument a list of strings. A valid name is a string that contains 3 to 20 alphabetic characters. Invalid names should be filtered out and the remaining names should be present in the output list.",
        "1740": "Create a data structure in Python to store details of an employee.",
        "1741": "Create a basic web scraper written in Python using the requests and BeautifulSoup libraries. This scraper should be able to retrieve all of the links on a given web page.",
        "1742": "Create a Python module that utilizes machine learning to predict the selling price of an item from its description.",
        "1743": "Create a Python program to generate a 2D array of a defined size and fill it with random numbers.",
        "1744": "Create a Python program to find the elements that are common in two unsorted lists.",
        "1745": "Generate a random list of numbers between 0 and 10 with a length of 25 using Python.",
        "1746": "Create an algorithm for text summarization using Python.",
        "1747": "Identify the differences between a static method and a class method in Python",
        "1748": "Implement a linear regression model in Python to predict the total monthly expenses from a person's monthly income.",
        "1749": "Construct a while-loop in Python that prints all the even numbers between 0 and 20",
        "1750": "Write a Python program to check if an array has more than three duplicate elements.",
        "1751": "Create a Python class to represent a bank account, with appropriate methods and fields for holding the balance",
        "1752": "Write a Python script for recognizing facial features using OpenCV and Haar features.",
        "1753": "Write a Python function to get the GCD (Greatest Common Divisor) of two positive integers.",
        "1754": "Write a Python program to filter out the duplicates in a list",
        "1755": "Generate a Python program to classify a given set of data",
        "1756": "Generate a Python program to select the optimal solution from a given list of solutions using the greedy algorithm.",
        "1757": "Build a Naive Bayes classification model in Python to analyse the sentiment of a given text.",
        "1758": "Create a Python program that searches for a given string in a database and displays the result.",
        "1759": "Write a Python program to normalize a list of words that contains upper and lowercase letters.",
        "1760": "Write a clustering algorithm in Python to identify patient segments based on a given disease state.",
        "1761": "Create a Python program to detect anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.",
        "1762": "Find the most efficient way to sort a list of numbers with insertion sort.",
        "1763": "Create a Python program that sends a request to a website and displays the response.",
        "1764": "Write a Python program to parse a string and replace all occurrences of the target word with a new word.",
        "1765": "Write a Python program to pre-process text data for sentiment analysis.",
        "1766": "Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer.",
        "1767": "Write a Python program to compute the sum of items in a given list and multiply it by a given number.",
        "1768": "Write a Python function to compare two given lists and return a list containing only the common elements.",
        "1769": "Generate a machine learning model using Python and Scikit-Learn to predict a person\u2019s age based on height and weight.",
        "1770": "Optimize a code snippet written in Python. The code snippet should create a list of numbers from 0 to 10 that are divisible by 2.",
        "1771": "Write a python program to classify an object based on its features.",
        "1772": "Optimize the following Python code which converts a given binary string to an integer.",
        "1773": "Create an application in Python that calculates the Fibonacci sequence numbers up to the n-th element.",
        "1774": "Write a Python program to create a calculator that performs basic operations",
        "1775": "Find the minimum element in a Python list called 'nums'",
        "1776": "Create a Python algorithm to calculate the maximum profit that can be earned given a stock's price list for the day.",
        "1777": "Generate a python code to calculate the median of an unsorted list of numbers.",
        "1778": "Create a function in Python that returns the fibonacci series until the 10th index.",
        "1779": "Create a function in Python that takes two parameters: a list of numbers and an integer, and returns the list of numbers sorted such that any numbers divisible by the integer are placed at the beginning of the list.",
        "1780": "Generate code for a function in Python for finding the sum of a given list of numbers.",
        "1781": "Create a function in Python that takes a dataframe as a parameter and calculates the number of values for each column.",
        "1782": "Given a JSON object, write a Python program to convert it into a dictionary.",
        "1783": "Create a program in python to count the occurences of a given word in a sentence.",
        "1784": "Write a python code to check if an input string is a palindrome.",
        "1785": "Create a Python program to print the sum of two given numbers",
        "1786": "Implement a Naive Bayes classifier in Python that can classify emails as either spam or ham.",
        "1787": "Create a python program that prints the fibonacci series upto a user provided limit.",
        "1788": "Perform basic cryptographic operations using a python code.",
        "1789": "Create a Python function to return all valid permutation of a given string",
        "1790": "Create a virtual environment in Python to manage project dependencies.",
        "1791": "Write a Python program to create a symmetric matrix (with the same elements along the diagonal axis) from a given list of integers.",
        "1792": "Write a Python program to implement K-means clustering algorithm.",
        "1793": "Write a Python program to query a MySQL Server and display the results in a readable format",
        "1794": "Create a Python script to take a natural input number and convert it to binary.",
        "1795": "Optimize a given Python program by reducing the running time.",
        "1796": "Design a function to calculate the mean, median and mode of a given array in Python.",
        "1797": "Design a program in Python to compare two strings and output the number of characters that are different.",
        "1798": "Develop an algorithm in Python to implement bubble sort.",
        "1799": "Using the input, generate a Python program that prints out the frequency of each item in the list.",
        "1800": "Write a Python program to traverse a binary search tree in preorder traversal.",
        "1801": "Generate Python code to predict whether a Iris flower is a setosa or not.",
        "1802": "Create a simple Python program that finds the number of even numbers in a given list.",
        "1803": "Create a Python generator that generates the odd numbers between 0 and given n.",
        "1804": "Create a python script to pass command line arguments to a function.",
        "1805": "Create a function in Python that takes a name and age and prints a greeting like \"Hi, my name is <name> and I'm <age> years old.\"",
        "1806": "Write a class in python which implements the following stack data type with all necessary methods.",
        "1807": "Write a Python program to scramble a given word.",
        "1808": "Write a Python program to parse the following JSON and print out the values of the type and message keys.",
        "1809": "Generate a dynamic query for creating a new table named \u201cemployees\u201d with 3 columns: \u201cid\u201d, \u201cname\u201d, and \u201csalary\u201d using a Python script.",
        "1810": "Make an iterative Binary Search algorithm using Python",
        "1811": "Write a Python program to calculate the total number of bits required to store an integer.",
        "1812": "Implement a K-Means clustering algorithm in Python to cluster the given set of points into three clusters.",
        "1813": "Write a Python program to search for a specific value in a large array of integers and return the index of the value if found.",
        "1814": "Develop a python program to remove punctuations from an input text",
        "1815": "Write a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.",
        "1816": "Implement a program in Python that encodes a given string of text.",
        "1817": "Create a neural network in Python to predict the type of flower given a set of attributes.",
        "1818": "Create a Python program to search an element in a list using Binary Search",
        "1819": "Generate a report to recommend a good option without using any external library in Python.",
        "1820": "Write a Python program to create a dictionary of the elements in a list and their frequency count.",
        "1821": "Write a function in Python that takes two positive integers, a and b, and returns a random number between 1 and a^b.",
        "1822": "Create a class in Python for an object that can contain two strings.",
        "1823": "Create a program in Python that takes a sequence of numbers and removes numbers that occur more than twice.",
        "1824": "What are the benefits of using classes instead of writing functions in Python?",
        "1825": "Design a class in Python that could represent a book.",
        "1826": "Write a Python script to generate a random username using letter and numbers.",
        "1827": "Create an AI assistant in Python to generate a daily calendar with the user's tasks and appointments.",
        "1828": "Given a list of integers, write a Python program to find the list's maximum value.",
        "1829": "Create a Python program that can identify a triangle using the 3 provided side lengths.",
        "1830": "Write a function in Python to check if two strings are anagrams of each other.",
        "1831": "Generate a random list of numbers in Python",
        "1832": "Create a hash table in Python.",
        "1833": "Given a JSON object, write a Python program to list out all the keys present in the object",
        "1834": "Create a Python function that takes a string of text as the input and returns a dictionary containing count of each character in the text.",
        "1835": "Write a class to represent an Employee in Python.",
        "1836": "Create a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words.",
        "1837": "Create a Python program that generates lyrics for a song.",
        "1838": "Create a Python program to generate a boolean expression from an algebraic expression.",
        "1839": "Write a JavaScript algorithm to check if a given string contains all the characters of another given string.",
        "1840": "Write a Python program for finding the most common element in a list.",
        "1841": "Given a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.",
        "1842": "Write a Python script to generate and print a Fibonacci series.",
        "1843": "Create an array of the first 10 whole numbers using python.",
        "1844": "Write a Python program to detect if a given string contains any of the given keywords.",
        "1845": "Create a basic Python program that prints out the class average for a list of student grades.",
        "1846": "Develop a Python routine that can simulate the backend of a website that has a shopping cart.",
        "1847": "Create a function using Python that reverses the order of the words in a given string.",
        "1848": "Create a Python function to calculate the length of the hypotenuse of a right triangle.",
        "1849": "Create a web scraper in Python to extract products from an e-commerce site.",
        "1850": "Utilizing a language model, AutoML, and a database of sports data, generate a Python program that suggests the best team for a given player by querying the database.",
        "1851": "Write a function in Python to calculate the maximum value of two given numbers.",
        "1852": "Write a Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N.",
        "1853": "Create a program in Python to print out the most frequent word in a given dictionary",
        "1854": "Create a program in Python to convert a given string to pig latin.",
        "1855": "Create a string function in Python to convert all words in a string to uppercase.",
        "1856": "Create code that generates the following output using looping concepts in Python.",
        "1857": "Write a Python kernel for a Jupyter Notebook that supports control flow statements (if & for loops).",
        "1858": "Create a class in Python that extends the built-in list object.",
        "1859": "Analyze a given code and suggest areas for improvement in functionality, resiliency or optimization.",
        "1860": "Construct an artificial neural network (ANN) architecture in Python for a given 3-class classification task."
    },
    "input": {
        "0": "[1, 2, 3, 4, 5]",
        "1": "website: www.example.com \ndata to crawl: phone numbers",
        "2": "",
        "3": "Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"",
        "4": "",
        "5": "[12, 13, 13, 45, 22, 99]",
        "6": "Not applicable",
        "7": "'This is a test', ['test', 'this', 'is']",
        "8": "def is_palindrome(s):\n    '''Write your code here.'''",
        "9": "[17, 41, 5, 22, 54, 6, 29, 3, 13]",
        "10": "",
        "11": "This machine learning project is challenging.",
        "12": "List of positive integers: [1, 5, 6, 7, 8]",
        "13": "",
        "14": "",
        "15": "A dataset of 800 images of cats and dogs",
        "16": "int m=36, int n=74, int divisor=6",
        "17": "query = \"catering\"\nword = \"cat\"",
        "18": "Not applicable",
        "19": "The dataset contains 4 features: Length, Width, Height and Weight.",
        "20": "Not applicable",
        "21": "",
        "22": "username: @elonmusk",
        "23": "[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]",
        "24": "message = \"Hello world!\"\nkey = \"secret\"",
        "25": "parameter_1 = 7\nparameter_2 = 9",
        "26": "even_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)",
        "27": "",
        "28": "board = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]",
        "29": "",
        "30": "John (20), Jane (40), Alex (18), Peter (45)",
        "31": "",
        "32": "",
        "33": "[\"cat\", \"dog\", \"apple\", \"banana\"]",
        "34": "Not applicable",
        "35": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "36": "",
        "37": "",
        "38": "",
        "39": "A = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]",
        "40": "\"ABCDF\", \"ABECD\"",
        "41": "def power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)",
        "42": "\/\/ JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});",
        "43": "",
        "44": "",
        "45": "First Integer: 10\nSecond Integer: 10",
        "46": "Not applicable",
        "47": "",
        "48": "Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'",
        "49": "17",
        "50": "[12, 24, 3, 8, -1]",
        "51": "Not applicable",
        "52": "",
        "53": "",
        "54": "",
        "55": "[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%",
        "56": "sample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}",
        "57": "",
        "58": "",
        "59": "arr = [10, 15, 20, 25, 30, 35]",
        "60": "[1, 2, 3, 4]",
        "61": "[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]",
        "62": "Not applicable",
        "63": "",
        "64": "Input List: [1, 2, 3, 4, 3, 2, 1]",
        "65": "['bubble', 'selection', 'quicksort', 'insertion']",
        "66": "Not applicable",
        "67": "",
        "68": "Equation: x2 + 3x - 4 = 0",
        "69": "",
        "70": "",
        "71": "arr = [2, 5, 9, 15], x = 5",
        "72": "List 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]",
        "73": "s1 = \"abcd\", s2 = \"bae\"",
        "74": "",
        "75": "",
        "76": "mail_list = [\"example.user@gmail.com\", \"bad@example\"]",
        "77": "int1 = 10\nint2 = 5",
        "78": "Not applicable",
        "79": "The original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']",
        "80": "Not applicable",
        "81": "",
        "82": "https:\/\/www.example.com\/path\/to\/file",
        "83": "",
        "84": "Not applicable",
        "85": "Row = 3, Column = 3",
        "86": "numbers = [1, 2, 3, 4, 5]",
        "87": "Not applicable",
        "88": "n = 100",
        "89": "",
        "90": "",
        "91": "",
        "92": "\u201cThe rain in Spain stays mainly in the plain.\u201d",
        "93": "",
        "94": "",
        "95": "",
        "96": "[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]",
        "97": "",
        "98": "dictionary = {'A':5, 'B':6, 'C':10}",
        "99": "Not applicable",
        "100": "['Python', 'is', 'Fun']",
        "101": "[3, 0, 1, 0, 5, 0, 2]",
        "102": "",
        "103": "",
        "104": "",
        "105": "",
        "106": "marks = [87, 56, 99, 54]\nmark = 4",
        "107": "for i in range(10):\n    print(\"hello\")",
        "108": "",
        "109": "recipient_emails = [\"email1@example.com\",\"email2@example.com\"]",
        "110": "",
        "111": "",
        "112": "def read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data",
        "113": "def primeCheck(num):",
        "114": "[3, 4, 5, 6, 7]",
        "115": "(1)\n      \/      \\\n    (2)      (3)\n    \/ \\      \/ \\\n  (4) (5)  (6) (7)",
        "116": "Not applicable",
        "117": "",
        "118": "investment_amount = 1000, time = 5, rate_of_interest = 5",
        "119": "",
        "120": "",
        "121": "set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}",
        "122": "[4, 5, 6, 7, 8]",
        "123": "Number of rows= 5",
        "124": "[[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]]",
        "125": "Not applicable",
        "126": "Not applicable",
        "127": "",
        "128": "[2, 3, 4, 5, 6, 7]",
        "129": "def test ():\n    x = 5\n    y = 3 \n    z",
        "130": "",
        "131": "Array: [5, 3, 7, 2]\nSearch value: 7",
        "132": "['Hello  World  ', 'Hi  there', 'Good  Morning']",
        "133": "",
        "134": "A sample utterance \"What time is it?\"",
        "135": "https:\/\/www.example.com as the target website.",
        "136": "2, 3, 4",
        "137": "Example Input: \"<p>This is a <b>test<\/b> string<\/p>\".",
        "138": "[1, 2, 3, 2, 1, 4, 7, 8, 9, 8]",
        "139": "",
        "140": "for i in range(10):\n    print('Hello World')",
        "141": "words = \"Hello \"\nwords2 = \"world!\"",
        "142": "",
        "143": "unsorted_list = [2, 6, 3, 8, 4]",
        "144": "X = [1,2,3,4,5]\nY = [3,5,7,9,13]",
        "145": "",
        "146": "[{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}]",
        "147": "Table name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int)",
        "148": "",
        "149": "list_items = [3, 7, 5, 8, 10]",
        "150": "A quick brown fox jumps over the lazy dog",
        "151": "",
        "152": "\"Python\"",
        "153": "weights = [2, 1, 3], values = [4, 2, 3]",
        "154": "\"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"",
        "155": "",
        "156": "1, 2, 3, 2, 4, 2",
        "157": "Not applicable",
        "158": "['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']",
        "159": "phrases = [\"A bird in the hand\", \"is worth two in the bush\"]",
        "160": "li = [4, 6, 17, 24, 5, 9]",
        "161": "",
        "162": "Employee Data:\nName: John Doe\nJob Title: Senior Developer\nDepartment: IT\nSalary: $120,000\n\nName: Jane Doe\nJob Title: Manager\nDepartment: Finance\nSalary: $95,000\n\nName: Tim Smith\nJob Title: Junior Developer\nDepartment: IT\nSalary: $55,000",
        "163": "",
        "164": "",
        "165": "",
        "166": "",
        "167": "",
        "168": "\"Hello World!\", \"World\", \"Python\"",
        "169": "Not applicable",
        "170": "Not applicable",
        "171": "",
        "172": "Data = {\n\"name\" : \"John\",\n\"age\" : 28\n}",
        "173": "Not applicable",
        "174": "Not applicable",
        "175": "6",
        "176": "Not applicable",
        "177": "from sklearn.svm import SVC\nclf = SVC(kernel='poly', degree=2, gamma=0.05)",
        "178": "str = \"Hello World!\"\n\nreplacement = \u2018X'",
        "179": "Number: 331",
        "180": "",
        "181": "Not applicable",
        "182": "array = [4, 2, 6, 7, 1]",
        "183": "List: [1, 2, 3, 4, 2, 5, 2]\nItem to Remove: 2",
        "184": "",
        "185": "dictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'",
        "186": "def expand_list(list):\n    for item in list:\n        list *= 2",
        "187": "",
        "188": "public class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n}",
        "189": "['cat', 'dog', 'apple', 'banana']",
        "190": "\"This is an example with two emails: john@example.com, and jane@example.com\"",
        "191": "",
        "192": "",
        "193": "def square_root(x):\n    return x**0.5",
        "194": "https:\/\/www.youtube.com\/user\/Thexvid\/videos",
        "195": "",
        "196": "Example code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}",
        "197": "String 1: abc\nString 2: qaxbcy",
        "198": "",
        "199": "Not applicable",
        "200": "\"2 3 + 4 5 * *\"",
        "201": "Sentence: The quick brown fox jumped over the lazy dog.",
        "202": "",
        "203": "",
        "204": "Not applicable",
        "205": "String 1: I want to make a difference\nString 2: The journey to success is long",
        "206": "Not applicable",
        "207": "",
        "208": "0\u00b0C",
        "209": "[45, 12, 52, 89, 33, 99]",
        "210": "",
        "211": "my_dict = {\n   \"a\": 5,\n   \"b\": 10,\n   \"c\": 15\n}",
        "212": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "213": "The cat jumped over the moon.",
        "214": "Not applicable",
        "215": "None",
        "216": "\"Hello World\"",
        "217": "user_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}",
        "218": "x + x + y + y + y",
        "219": "[\"Hello world\", \"This is a test\"]",
        "220": "",
        "221": "Python 3.8.5",
        "222": "[3, 8, 6, 10, 17]",
        "223": "",
        "224": "[3, 4, 1, 2, 5, 3, 3]",
        "225": "Not applicable",
        "226": "",
        "227": "list = [\"john@gmail.com\", \"sarah@yahoo.com\", \"bob@microsoft.com\", \"sophie@gmail.com\"]",
        "228": "",
        "229": "",
        "230": "",
        "231": "data = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'",
        "232": "String: aabbbbbbcccc",
        "233": "Not applicable",
        "234": "Point1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2)",
        "235": "Not applicable",
        "236": "",
        "237": "lst = [7, 8, 12, 19, 22, 23]",
        "238": "[7, 13, 5, 8, 50, 11, 64, 48]",
        "239": "n = 10",
        "240": "import requests\n\nurl = 'https:\/\/api.example.com\/users'\n\nresponse = requests.get(url)\n\nprint(response.json())",
        "241": "strings = [\"First\",\"Second\",\"Third\"]",
        "242": "String = \"HELLO\"",
        "243": "items = [1, 2, 3, 4]\n\nfor item in items:\n print(item)",
        "244": "n = 10",
        "245": "",
        "246": "Given Items (with values and weights): [(60, 10), (100, 20), (120, 30)] \nCapacity of Knapsack: 50",
        "247": "ax + by = c\n\na = 3, b = 5, c = 7",
        "248": "",
        "249": "No input",
        "250": "",
        "251": "",
        "252": "Form elements: Name, Email, Phone",
        "253": "Not applicable",
        "254": "3 5 7",
        "255": "",
        "256": "Target website: www.example.com",
        "257": "Not applicable",
        "258": "SELECT * FROM Movies WHERE category = 'horror';",
        "259": "A = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]",
        "260": "numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in numbers:\n    print(x)",
        "261": "Hello World",
        "262": "SELECT * FROM book;",
        "263": "data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]",
        "264": "",
        "265": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        "266": "Example array: ['a', 'b', 'a', 'c', 'c', 'd']",
        "267": "\"Helwallomst\", \"Welcome\"",
        "268": "String: \u201cHello\u201d\nCharacter: \u2018l\u2019",
        "269": "<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      <\/subchild1>\n      <subchild2 value=\"b\">\n      <\/subchild2>\n    <\/child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      <\/subchild3>\n      <subchild4 value=\"d\">\n      <\/subchild4>\n    <\/child2>\n  <\/root>\n<\/xml>",
        "270": "",
        "271": "a = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]",
        "272": "",
        "273": "7",
        "274": "",
        "275": "Not applicable",
        "276": "1000, 500",
        "277": "[3, 5, 2, 7, 4, 3, 2], x = 2",
        "278": "['4.5', '3.0', '2.5', '4.0']",
        "279": "",
        "280": "1, 6, 3, 8, 7, 4",
        "281": "",
        "282": "",
        "283": "def removeDuplicates(array): \n    for i in range (len(array)): \n        for j in range (i + 1, len(array)): \n            if array[i] == array[j]: \n                array.pop(j)",
        "284": "words =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3",
        "285": "",
        "286": "",
        "287": "[21, 22, 20]",
        "288": "dictionary = {'apple': 2, 'banana': 3, 'mango': 1}",
        "289": "start = 5\nend = 10",
        "290": "",
        "291": "arr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8]",
        "292": "[1,2,3,4,5]",
        "293": "Samples:\napple->red\nbanana->yellow\ncherry->red",
        "294": "[10, 20, 30]",
        "295": "[1, 2, 3, 4, 8], [2, 6, 8, 10]",
        "296": "",
        "297": "Not applicable",
        "298": "Input List: [1, 2, 3, 4, 4, 5, 6]\nTarget: 8",
        "299": "",
        "300": "",
        "301": "",
        "302": "def just_me(name):\n    print(\"Hi, my name is \"+name+\".\")\n    print(\"I am special and nothing else matters.\")\n    print(\"What about you?\")",
        "303": "Not applicable",
        "304": "",
        "305": "lst = [1, 2, 3, 4, 4, 3, 2, 1]",
        "306": "",
        "307": "",
        "308": "6342",
        "309": "",
        "310": "{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"}",
        "311": "[1, 2, 3], [4, 5, 6]",
        "312": "[0.8, 0.4, 0.7]",
        "313": "[1,2], [3,4]",
        "314": "Not applicable",
        "315": "Start=1, End=20",
        "316": "Range: 10-20",
        "317": "",
        "318": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    total = 0\n    for num in array:\n        total = total + num\n    return total",
        "319": "",
        "320": "Model. name - string",
        "321": "[\"Hello\", \"Yes\", \"No\", \"World\"]",
        "322": "",
        "323": "size: 10",
        "324": "string1 = \u201ckitten\u201d\nstring2 = \u201csitting\u201d",
        "325": "",
        "326": "[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]",
        "327": "Not applicable",
        "328": "",
        "329": "myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]",
        "330": "[1, 2, 3, 2, 4, 5, 6, 3]",
        "331": "Not applicable",
        "332": "[\"Hello\",\"World!\",\"Good\",\"Morning\"]",
        "333": "The movie was terrible. It felt like it would never end!",
        "334": "",
        "335": "A class Song with two instance variables, title and artist, and three methods, str(), eq(), and length().",
        "336": "",
        "337": "",
        "338": "\"My email is john@example.com and yours is john@gmail.com.\"",
        "339": "Not applicable",
        "340": "[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}]",
        "341": "Hello World!",
        "342": "x = \"abcdaf\";\ny = \"acbcf\";",
        "343": "",
        "344": "[1, 2, 3, 4, 5]",
        "345": "my_string = \"This is the string which is to be sorted\"",
        "346": "prices = [10, 7, 5, 8, 11, 9]",
        "347": "",
        "348": "arr = [1, 2, 3, 4, 5]",
        "349": "['0834567', '0945678', '07123456', '08901234', '07890123']",
        "350": "list = [\"apple\", \"banana\", \"peach\", \"orange\", \"grape\"]\nsearch_query = \"apple\"",
        "351": "[1, 2, 3, 4, 5]",
        "352": "",
        "353": "",
        "354": "Lists A and B contain the elements [2,4,6] and [3,5,7] respectively.",
        "355": "string 1 = \"ABACEDF\"\nstring 2 = \"ABDCF\"",
        "356": "",
        "357": "",
        "358": "",
        "359": "X = 10",
        "360": "recipient_name = 'John Smith'\nrecipient_email = 'john@example.com'\nsubject = 'Hello World'\nmessage = 'This is a test email.'",
        "361": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1",
        "362": "",
        "363": "[1000, 506, 299, 620, 35]",
        "364": "",
        "365": "[2, 60, 5, 4, 78, 32, 99]",
        "366": "[3,7,4,1]",
        "367": "Not applicable",
        "368": "min = 0\nmax = 50",
        "369": "[\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]",
        "370": "list = [1, 2, 3, 4, 5]",
        "371": "",
        "372": "a, b, c = 2, 1, 4",
        "373": "",
        "374": "tasks = [Task1, Task2, Task3, Task4, Task5]",
        "375": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string",
        "376": "",
        "377": "Not applicable",
        "378": "[1, 3, 5, 7]",
        "379": "a = 3\nb = 4",
        "380": "",
        "381": "x_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]",
        "382": "given_list = [1, 2, 3, 4, 5]",
        "383": "3, 4, 5",
        "384": "URL: https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System",
        "385": "",
        "386": "[1,2,2,3,3,4]",
        "387": "numbers = [1, 43, 78, 3, 92, 42]",
        "388": "Data sequence: 9, -2, 6, 0, -7",
        "389": "[1, 2, 3, 4]",
        "390": "data = [1, 9, 3, 5]",
        "391": "dictionnary = [ \"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\" ]\nprefix = \"d\"",
        "392": "Not applicable",
        "393": "positiveText = \"This is a great movie!\"\nnegativeText = \"This movie was terrible\"",
        "394": "list1 = [1, 2, 3, 4, 5, 6]",
        "395": "Not applicable",
        "396": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate",
        "397": "radius = 5",
        "398": "",
        "399": "starting = [(1, \"A\"), (4, \"A\"), (7, \"A\"), (2, \"A\"), (5, \"A\"), (8, \"A\"), (3, \"A\"), (6, \"A\")]",
        "400": "Not applicable",
        "401": "",
        "402": "number = 15",
        "403": "",
        "404": "",
        "405": "[\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]",
        "406": "Not applicable",
        "407": "a = 3, b = 4",
        "408": "Not applicable",
        "409": "",
        "410": "n = 10",
        "411": "Not applicable",
        "412": "The letter is 's'",
        "413": "",
        "414": "Array: ['school', 'hospital', 'bookstore', 'mall', 'theatre']",
        "415": "list = [2, 4, 1, 6]",
        "416": "[1, 2, 3, 4, 5, 6, 7, 8]",
        "417": "Key: \"FirstName\"\nvalue: \"John\"",
        "418": "",
        "419": "",
        "420": "",
        "421": "list = [9, 2, 5, 6, 4, 1]",
        "422": "List of Strings: [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]",
        "423": "Students = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n]",
        "424": "",
        "425": "Twitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.",
        "426": "\"This is a sample string!\"",
        "427": "data = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]]",
        "428": "my_list = ['A', 'B', 'C', 'D']",
        "429": "",
        "430": "",
        "431": "",
        "432": "The two numbers: \"111\" and \"1337\"",
        "433": "[10, 3, 9, 1, 15, 2]",
        "434": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y",
        "435": "def is_armstrong_number(num):",
        "436": "limit = 10\narray = [1, 3, 5, 4, 2, 6]",
        "437": "The quick brown fox jumps over the lazy dog",
        "438": "",
        "439": "No Input",
        "440": "list1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"]",
        "441": "",
        "442": "No input",
        "443": "",
        "444": "salary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000",
        "445": "Not applicable",
        "446": "def check_number(num):\nif num >= 1 and num <= 10:\n   return True",
        "447": "n = 6",
        "448": "",
        "449": "",
        "450": "",
        "451": "[1,3,5,7,9]",
        "452": "",
        "453": "",
        "454": "",
        "455": "Not applicable",
        "456": "[1, 3, 3, 5, 5, 7]",
        "457": "A signal of frequency 250 Hz and amplitude 1 V.",
        "458": "[3, 4, 2, 8, 15, 6]",
        "459": "",
        "460": "Not applicable",
        "461": "\"racecar\"",
        "462": "mnist dataset",
        "463": "Not applicable",
        "464": "Not applicable",
        "465": "[\n [0.3, 0.2, 0.6],\n [0.3, 0.1, 0.4],\n [0.2, 0.3, 0.4],\n [0.7, 0.4, 0.2],\n [0.5, 0.2, 0.1]\n]",
        "466": "",
        "467": "",
        "468": "A String with the text: \"Hello World\"",
        "469": "",
        "470": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"",
        "471": "list1 = [3, 5, 9, 1, 8];\nlist2 = [4, 11, 7, 2];",
        "472": "Name = 'John';\nAddress = '212 Smith Street';\nPhone = '732-123-4567';",
        "473": "random_user_question.txt\nWhat meals do you serve?",
        "474": "",
        "475": "['foo', 'test', 'longstring', 'bar']",
        "476": "[5, 4, 12, 17, 9]",
        "477": "window = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]",
        "478": "criteria = x % 5 == 0\narray = [1, 2, 5, 10, 15, 20, 25, 30]",
        "479": "list = [1, 3, 12, 5, 8, 10]",
        "480": "strings = [\"Sample\",\"Text\",\"Hello\"]",
        "481": "List 1: [1, 2, 3, 4, 5]\nList 2: [3, 4, 5, 6, 7]",
        "482": "",
        "483": "Not applicable",
        "484": "",
        "485": "Item1, Item2, Item3",
        "486": "",
        "487": "SELECT * FROM orders\nWHERE YEAR(order_date) = 2020",
        "488": "",
        "489": "",
        "490": "",
        "491": "",
        "492": "\"Hello, World!\"",
        "493": "Not applicable",
        "494": "Not applicable",
        "495": "[5, 4, 8, 7], 5",
        "496": "num = 5",
        "497": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum",
        "498": "Not applicable",
        "499": "[2, 3, 4]",
        "500": "7",
        "501": "",
        "502": "6",
        "503": "Not appliccable",
        "504": "n = 5",
        "505": "Features: A, B, C",
        "506": "",
        "507": "",
        "508": "",
        "509": "Not applicable",
        "510": "",
        "511": "nums = [3, 4, 5, 6, 7, 8, 9]\nval = 8",
        "512": "[1,2,3], [4,5,6], [7,8,9]",
        "513": "Not applicable",
        "514": "list = [7, 8, 5]",
        "515": "",
        "516": "",
        "517": "[1, 2, 3, 4, 5]",
        "518": "str1 = \"abcd\"\nstr2 = \"cbda\"",
        "519": "x = 5\ny = 8",
        "520": "",
        "521": "largeDocument = 'This is the first line of the document.\\nThis is the second line of the document.\\nThis is the third line of the document.';\nword = 'second'",
        "522": "",
        "523": "",
        "524": "[1, 2, 3], [2, 3, 4]",
        "525": "",
        "526": "",
        "527": "Not applicable",
        "528": "def find_max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)): \n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum",
        "529": "Given text:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.",
        "530": "nums = [1, 2, 3, 4, 5]",
        "531": "2 and 5",
        "532": "",
        "533": "",
        "534": "[1, 2, 3, 4]",
        "535": "Not applicable",
        "536": "lst = [1,3,5,7,9]\nk = 10",
        "537": "",
        "538": "\"Python is an interpreted, high-level, general-purpose programming language.\"",
        "539": "5",
        "540": "nums = [1, 15, 20, 6]",
        "541": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'",
        "542": "Not applicable",
        "543": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "544": "[5, 4, 2, 7, 12]",
        "545": "my_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}]",
        "546": "arr = [2, 4, 5, 7, 4, 2], element = 4",
        "547": "",
        "548": "10",
        "549": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "550": "\"0123\"",
        "551": "list_nodes = [7, 14, 28, 28, 28, 35, 49]",
        "552": "",
        "553": "",
        "554": "",
        "555": "N = 10",
        "556": "\"this is an example\"",
        "557": "<noInpit>",
        "558": "Not applicable",
        "559": "A csv file containing stock data from the last 3 months.",
        "560": "Attributes: name (string), age (integer), email address (string)\nFunction: toString() - return a string with the formatted attributes",
        "561": "",
        "562": "User input n = 10",
        "563": "def check_hello(s):",
        "564": "[5, 10, 20, 6, 8]",
        "565": "arr = [2, 3, 4, 5, 6, 15]",
        "566": "str_1 = \"abcdabcdabde\"\nstr_2 = \"defabcdabcd\"",
        "567": "Python",
        "568": "",
        "569": "list = [\"this\", \"is\", \"an\", \"example\"]",
        "570": "[3, 2, 1, 4, 5, 6, 7, 8]",
        "571": "data = {\n \"name\": \"John\",\n \"age\": 18,\n \"occupation\": \"Software Engineer\"\n}",
        "572": "def sum_elements(arr):\n    sum_value = 0\n    for num in arr:\n        sum_value += num\n    return sum_value",
        "573": "",
        "574": "The game consists of 3 rods and 4 disks.",
        "575": "",
        "576": "9, 5",
        "577": "Not applicable",
        "578": "nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "579": "['The Hobbit', 'J.R.R. Tolkien', 295], ['The Catcher in the Rye', 'J.D. Salinger', 223]",
        "580": "Not applicable",
        "581": "",
        "582": "[2, 8, 3, 6, 10, 7, 14, 11, 17, 15]",
        "583": "start = (4, 2) \nend = (9, 9)",
        "584": "data = [1, 2, 3, 4]\nresult = []\nfor x in data:\n if x > 2:\n result.append(x)",
        "585": "def f1 (x):\n y = x + 1\ndef f2(x):\n return f1(x)*f1(x)\n\nf2(2)",
        "586": "",
        "587": "",
        "588": "[\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]",
        "589": "Not applicable",
        "590": "",
        "591": "Not applicable",
        "592": "dict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6}",
        "593": "The input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10]",
        "594": "",
        "595": "[12, 4, 9, 24, -5]",
        "596": "",
        "597": "string = \"This is a slicing test\"\nstart = 8\nend = 15",
        "598": "Text='Python is an interpreted, high-level, general-purpose programming language.'",
        "599": "matrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]]\nstart = (0, 0)\nend = (2, 2)",
        "600": "sortedArray = [1, 2, 3, 4, 5, 6, 7]\nvalue = 5",
        "601": "{\"apples\": 5, \"oranges\": 6, \"bananas\": 7}",
        "602": "",
        "603": "",
        "604": "",
        "605": "Edinburgh: Scotland, 54.6\u00b0N, UK\nParis: France, 48.86\u00b0N, Europe\nDhaka: Bangladesh, 23.78\u00b0N, Asia",
        "606": "\"bufferoverflow\"",
        "607": "",
        "608": "point1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)",
        "609": "Not applicable",
        "610": "",
        "611": "",
        "612": "",
        "613": "list1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]",
        "614": "",
        "615": "",
        "616": "strings = ['hello', 'world', 'computer']",
        "617": "[John, Harry, Robert]",
        "618": "",
        "619": "'Hello world, this is a sentence.'",
        "620": "[1, 5, 9, 4, 2]",
        "621": "10 and 20",
        "622": "",
        "623": "Not applicable",
        "624": "MNIST dataset",
        "625": "",
        "626": "",
        "627": "Not applicable",
        "628": "",
        "629": "my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]",
        "630": "[2, 8, 5, 2, 6, 3, 4]",
        "631": "8 and 20",
        "632": "",
        "633": "string_1 = \"Hello\"\nstring_2 = \"World\"",
        "634": "[1, 2, 3, 4]",
        "635": "Not applicable",
        "636": "[{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]",
        "637": "\"#100DaysOfCode\"",
        "638": "haystack = \"Hello World\"\nneedle = \"l\"",
        "639": "var1 = 3 \nvar2 = 7",
        "640": "Not applicable",
        "641": "Not applicable",
        "642": "",
        "643": "'{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
        "644": "6",
        "645": "range(1, 10)",
        "646": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    sum = 0\n    for number in sequence:\n        sum += number\n    return sum \/ len(sequence)",
        "647": "",
        "648": "AGGTAB\nGXTXAYB",
        "649": "list1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7]",
        "650": "Text: Python is a high-level programming language.",
        "651": "",
        "652": "[24, 14, 67, 89, 34, 52]",
        "653": "string = \"hello world\" substring = \"or\"",
        "654": "Website URL: www.example.com",
        "655": "Hello",
        "656": "Item: 5 \nList: [8, 4, 5, 9, 2]",
        "657": "[2, 3, 4, 5, 6]",
        "658": "",
        "659": "[2, 3, 5, 7, 8, 11, 13, 15]",
        "660": "list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]",
        "661": "",
        "662": "10",
        "663": "",
        "664": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email",
        "665": "",
        "666": "",
        "667": "",
        "668": "",
        "669": "[(1, 3), (3, 2), (4, 1), (2, 4)]",
        "670": "Not applicable",
        "671": "{\n\"name\": \"Employee\",\n\"attributes\": {\n\"emp_id\": {\n\"type\": \"int\"\n},\n\"name\": {\n\"type\": \"string\"\n},\n\"department\": {\n\"type\": \"string\"\n},\n\"salary\": {\n\"type\": \"float\"\n}\n}\n}",
        "672": "",
        "673": "SQL database",
        "674": "list_of_strings = [\"Hello\", \"World\", \"1\", \"0\", \"This is a string.\"]",
        "675": "n = 4",
        "676": "Not applicable",
        "677": "Not applicable",
        "678": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "679": "def GCD(x, y):\nif y == 0:\n return x\n else:\n return GCD(y, x%y)",
        "680": "[[1, 2], \n [3, 4], \n [5, 6]]",
        "681": "",
        "682": "",
        "683": "\"A quick brown fox jumps over the lazy dog.\"",
        "684": "",
        "685": "[1,1,2,3,3,3,4,4,4,4]",
        "686": "Not applicable",
        "687": "Not applicable",
        "688": "",
        "689": "",
        "690": "[8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]",
        "691": "num1 = 34\nnum2 = 21",
        "692": "['a','b','b','c','a','c']",
        "693": "students = {\n    'Jacob': 95.5, \n    'Leah': 91.8,\n    'Sebastian': 98.4,\n    'David': 95.1,\n    'Joseph': 90.4\n}",
        "694": "",
        "695": "",
        "696": "[\"Apple\", \"Banana\", \"Mango\", \"Orange\"]",
        "697": "",
        "698": "Provide a sample dataset contains text from two different categories.",
        "699": "",
        "700": "Not applicable",
        "701": "No Input",
        "702": "",
        "703": "String 1: hello world \nString 2: hey world",
        "704": "keys = [1,2,3]\nvalues = ['a','b','c']",
        "705": "345",
        "706": "[1, 2, 3, 4, 5]",
        "707": "'{\"name\": \"GPT\", \"type\": \"AI\"}'",
        "708": "",
        "709": "{\"name\": \"John\", \"age\": 30}",
        "710": "unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]",
        "711": "array = [4, 7, 10, 8, 12, 6]",
        "712": "",
        "713": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "714": "\"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"",
        "715": "",
        "716": "Not applicable",
        "717": "",
        "718": "String 1: abc\nString 2: cba",
        "719": "Not applicable",
        "720": "",
        "721": "",
        "722": "",
        "723": "",
        "724": "Matrix A:\n[2 3]\n[4 7]\nMatrix B:\n[6 5]\n[1 4]",
        "725": "string1 = \"abcd\"\nstring2 = \"cbad\"",
        "726": "URL: https:\/\/www.test.com\/where-is-the-key\nKeyword: key",
        "727": "import threading\nimport time\n\ndef mining(difficulty, start):\n    nonce = start\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n \n        nonce = nonce + 1",
        "728": "[3, 8, 11] and [1, 4, 9]",
        "729": "n = 10",
        "730": "Not applicable",
        "731": "strings = ['abc', 'def', 'ghi', 'jkl', 'mno']",
        "732": "Not applicable",
        "733": "",
        "734": "Not applicable",
        "735": "",
        "736": "",
        "737": "dictionary = {\"c\": 3, \"a\": 1, \"b\": 2}",
        "738": "",
        "739": "['hello', 'world']",
        "740": "A list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]",
        "741": "[[1,2,3], [4,5,6], [7,8,9]]",
        "742": "Stack: [1, 2, 3, 4, 5]",
        "743": "data = {\n    'name': ['John', 'Mark', 'Tom'],\n    'age': [21, 18, 20]\n}",
        "744": "sentence = \"Code Generation is an important task in the AI research\"",
        "745": "",
        "746": "",
        "747": "example_string = \"This i$n't a siMPle StrinG\"",
        "748": "6",
        "749": "string = \"Hello world!\"",
        "750": "",
        "751": "The text document is \"This movie was horrible and I never want to watch it again.\"",
        "752": "Table Name: users\n\nFields: id, name, age\n\nFilter: age > 18",
        "753": "Not applicable",
        "754": "",
        "755": "Website URL: http:\/\/www.example.com",
        "756": "Not applicable",
        "757": "arr1 = [1, 2, 3]\narr2 = [3, 4, 5]",
        "758": "Category = \"Computer Science\"",
        "759": "Not applicable",
        "760": "head = 5 -> 2 -> 1 -> 4 -> 3",
        "761": "List of email addresses with special characters [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]",
        "762": "This is a sample sentence",
        "763": "",
        "764": "unsorted_list = [5, 2, 3, 1, 4]",
        "765": "n = 15",
        "766": "Not applicable",
        "767": "n = 10",
        "768": "[7, -3, 10, 13, -6], -3",
        "769": "[1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]",
        "770": "[1, 2, 3, 4]",
        "771": "",
        "772": "10",
        "773": "Not applicable",
        "774": "3",
        "775": "url = \"http:\/\/www.example.com\"",
        "776": "{\"apple\": 1, \"banana\": 2, \"carrot\": 3}",
        "777": "",
        "778": "[8, 5, 9, 1, 3, 10]",
        "779": "[{\"ISBN\": \"978-0134813071\", \"title\": \"Python Programming\" }, \n{\"ISBN\": \"978-1590595377\", \"title\": \"Advanced Python\" },\n {\"ISBN\": \"978-0302005945\", \"title\": \"PHP Programming\" }]",
        "780": "[12, 23, 45, 22, 50]",
        "781": "Not applicable",
        "782": "[3, 1, 8, 5, 7]",
        "783": "",
        "784": "",
        "785": "def count_words(text):\n    words = text.split(' ')\n    return len(words)",
        "786": "word_list = [\"apple\", \"banana\", \"pear\", \"grape\", \"mango\"]",
        "787": "The founder of Apple Steve Jobs passed away.",
        "788": "The text is: \"Bonjour tout le monde\"",
        "789": "",
        "790": "<html>\n<body>\n<h1>Hello, World!<\/h1>\n<\/body>\n<\/html>",
        "791": "",
        "792": "[1, 2, 3, 4, 4, 5, 5]",
        "793": "Not applicable",
        "794": "Not Applicable",
        "795": "Hello World!",
        "796": "",
        "797": "\"The quick brown fox jumps over the lazy dog\"",
        "798": "arr: [1, 2, 3, 4, 5], sum: 9",
        "799": "",
        "800": "a = 5, b = 12",
        "801": "",
        "802": "\u201cPython\u201d, \u201cProgramming\u201d",
        "803": "Credit card billing address example\n\nAnn Smith\n1234 Main St.\nAnytown, CA 99999",
        "804": "Not applicable",
        "805": "list1 = [1, 5, 9]\nlist2 = [2, 6, 8]",
        "806": "my_list = [\"apples\", \"oranges\", \"bananas\"]",
        "807": "Number of paramters = 3 \nRange of values for each parameter = [0, 1] \nFitness function = x1 * x2 + x3",
        "808": "A database table with columns item_id, item_name, price\nAn Excel spreadsheet with the same columns",
        "809": "",
        "810": "['apple', 'orange', 'banana']",
        "811": "arr = [1, 4, 9, 2, 6]",
        "812": "2, 20",
        "813": "x = 5",
        "814": "",
        "815": "",
        "816": "Not applicable",
        "817": "Not applicable",
        "818": "Number n: 10",
        "819": "lst = [2, 3, 5, 6, 7, 8, 10, 11]",
        "820": "def greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n\nprint(greet(\"John\"))",
        "821": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = []\n    for c in s:\n        if c not in s_list:\n            s_list.append(c)\n    \n    return s_list",
        "822": "Number = 12345",
        "823": "2, 3",
        "824": "",
        "825": "",
        "826": "Table Name: Products\nColumns: product_id, name, price",
        "827": "",
        "828": "features = ['feature1', 'feature2', 'feature3']",
        "829": "#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print i",
        "830": "",
        "831": "myList = [2, 4, 5, 20, 44]",
        "832": "Principal amount = 1000\nInterest rate = 9%",
        "833": "['a', 'b', 'c']",
        "834": "[\"apple\", \"orange\", \"mango\"]",
        "835": "",
        "836": "13",
        "837": "",
        "838": "[25, 15, 20]",
        "839": "A list of documents: \n\n['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']",
        "840": "",
        "841": "Not applicable",
        "842": "n_clusters = 10",
        "843": "",
        "844": "",
        "845": "",
        "846": "Not applicable",
        "847": "0, 1, 2, 4, 7, 11, ...",
        "848": "",
        "849": "def print_all(sequences):\n    for sequence in sequences:\n        print(sequence)",
        "850": "",
        "851": "Number = 4",
        "852": "List: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nTarget item: 7",
        "853": "<div class=\"data\">\n<h1>Name: John Doe<\/h1>\n<h3>Age: 25<\/h3>\n<h3>Location: Los Angeles, CA<\/h3>\n<\/div>",
        "854": "",
        "855": "[1, 2, 3, 4]",
        "856": "Not applicable",
        "857": "let username = \"John\"\nlet score = 123",
        "858": "",
        "859": "",
        "860": "lst=[5,3,1,7,9]",
        "861": "",
        "862": "FIRST STRING = \u201cabcdaf\u201d\nSECOND STRING = \u201czbcdf\u201d",
        "863": "",
        "864": "A sorted array arr = [1, 3, 5, 7, 8, 9, 12]",
        "865": "Not applicable",
        "866": "",
        "867": "[1, 2, 3, 4, 5, 6], 5",
        "868": "Python",
        "869": "2\n3",
        "870": "class File:\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type",
        "871": "",
        "872": "",
        "873": "string = 'hello world'",
        "874": "",
        "875": "",
        "876": "list_of_string = [\"good\",\"bad\",\"weird\",\"great\",\"amazing\"]",
        "877": "X = [[1, 2, 3], \n    [3, 4, 5], \n    [6, 7, 8]]\nY = [[2, 3, 4],\n    [5, 6, 7],\n    [8, 9, 10]]",
        "878": "arr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]",
        "879": "def foo(x):\n    y = x\/2\n    z = x\/3\n    return x+y-z",
        "880": "5",
        "881": "",
        "882": "\"Hello,@ $World.\"",
        "883": "Not applicable",
        "884": "",
        "885": "",
        "886": "\"aba\"",
        "887": "int_list = [25, 64, 11, 43, 7]",
        "888": "string1 = \"example\"\nstring2 = \"string\"",
        "889": "",
        "890": "[1, 2, 2, 4, 5]",
        "891": "",
        "892": "n = 10\nfor num in range(2, n+1): \n\tfor i in range(2, num): \n\t\tif num % i == 0: \n\t\t\tbreak\n\telse: \n\t\tprint(num, end = ' ')",
        "893": "[1, 2, 3, 3, 3, 2, 4, 4, 1, 5]",
        "894": "[-5, 2, 3, 4, 6, -8]",
        "895": "6, 8",
        "896": "Hello world",
        "897": "No Input",
        "898": "def factorial(n):\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact",
        "899": "{\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}",
        "900": "",
        "901": "Not applicable",
        "902": "list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]",
        "903": "temperatures = [71,77,82,81,75,72,78]",
        "904": "",
        "905": "",
        "906": "",
        "907": "text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"",
        "908": "",
        "909": "",
        "910": "\"<noinput>\"",
        "911": "Given an array arr = [2, -1, 3, 5, -7, 3].",
        "912": "3\n3\n3\n3\n3\n3",
        "913": "",
        "914": "",
        "915": "123",
        "916": "[\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]",
        "917": "def my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result",
        "918": "",
        "919": "",
        "920": "Input: Array A\n1. from i=1 to i=length[A]\n2.  j=i \n3.  min = A[i]\n4.  for j = i+1 to length[A]\n5.    if min > A[j]\n6.      min = A[j] \n7.  swap A[i] with A[j]",
        "921": "Dataset:\ntext1: I love cats\nlabel1: 1\n\ntext2: I am scared of dogs\nlabel2: 0\n\nModel Instructions:\n1. Bring the dataset into the model.\n2. Preprocess it.\n3. Split the dataset into training and testing set.\n4. Build a classification model using an appropriate algorithm.",
        "922": "def remove_arr(arr):\nresult =[];\nfor a in arr:\n  if a != 'b'\n    result.append(a)\nreturn result",
        "923": "",
        "924": "Given an array of integers, find the two elements whose sum is closest to 0.",
        "925": "",
        "926": "",
        "927": "list_of_strings = [\"April 11th, 2019\", \"July 2nd, 2018\", \"October 16th, 2012\"]",
        "928": "Not applicable",
        "929": "Not applicable",
        "930": "",
        "931": "10, 20, 30",
        "932": "[-2,1,-3,4,-1,2,1,-5,4]",
        "933": "",
        "934": "Search the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".",
        "935": "[6, 2, 5, 1, 8, 9, 0]",
        "936": "",
        "937": "Not applicable",
        "938": "searchTerm: \"cat\"",
        "939": "[2, 4, 1, 6, 5]",
        "940": "the     Cat    in  the  hat",
        "941": "Input coordinates: (2, 3)\n\nSet of coordinates: [(2.1, 3.1), (1, 1), (0.5, 2.5)]",
        "942": "a=5, b=9, c=11",
        "943": "",
        "944": "",
        "945": "",
        "946": "Data: [2, 3, 5, 10, 11]",
        "947": "7, 2",
        "948": "Data = [2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12]",
        "949": "Train Data:\nItalian:\n- Pizza poster\n- Lasagna poster\n- Spaghetti poster\nMexican:\n- Burrito poster\n- Enchilada poster\n- Taco poster",
        "950": "sample_string = \"HelloWorld\"",
        "951": "words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']",
        "952": "",
        "953": "data = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}",
        "954": "Hashtag: #news",
        "955": "Sample JSON:\n\n{\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}",
        "956": "Not applicable",
        "957": "",
        "958": "Data = [1, 4, 2, 6, 2, 1, 2, 9]",
        "959": "",
        "960": "25",
        "961": "",
        "962": "The input includes three parameters: genre (action), rating (8.5), and release date (2020-02-10).",
        "963": "31\/05\/2020",
        "964": "list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]",
        "965": "Declare a variable \"text\" that contains a sample string",
        "966": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]",
        "967": "Not applicable",
        "968": "212",
        "969": "arr = [1, 2, 3, 1, 4]",
        "970": "",
        "971": "n = 5",
        "972": "Topic - Python",
        "973": "num = 10\nlower = 10\nupper = 20",
        "974": "",
        "975": "[2, 3, 4, 5]",
        "976": "",
        "977": "[2, 5, 6, 8, 9]",
        "978": "",
        "979": "[3,6,9,1,2,3,4,5]",
        "980": "[10, 20, 30, 40]",
        "981": "range = [1, 2, 3]",
        "982": "[5, 9, 2, 4, 5, 9, 2]",
        "983": "list = [3, 6, 9, 11, 12, 15]",
        "984": "[(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]",
        "985": "",
        "986": "A sample dataset with historic prices for Apple Inc. (AAPL)",
        "987": "Not applicable",
        "988": "ArmstrongNumber(371)",
        "989": "current program:\ndef xor_strings(xs, ys):\n    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))",
        "990": "This is a sample sentence.",
        "991": "",
        "992": "[1,2,3,4]",
        "993": "A = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]",
        "994": "[20, 30, 50, 70, 90]",
        "995": "",
        "996": "products = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\"]\n\nsearch_query = \"Grape\"",
        "997": "Sample of 1000 days of State Street Corporation's stock prices.",
        "998": "",
        "999": "Not applicable",
        "1000": "input_list = [20, 11, 33, 67, 89 ,34]",
        "1001": "Website URL: https:\/\/www.example.com",
        "1002": "list1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]",
        "1003": "",
        "1004": "Example Schema of User Table\nuser_id | first_name | last_name | age | email\n\nExample of User Records\nuser_id |first_name |last_name |age |email\n1097 |John |Smith |25 |js@example.com\n3785 |Michael |Johnson |30 |mj@example.com",
        "1005": "",
        "1006": "arr = [1,3,7,9,0,4]\nnum = 7",
        "1007": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "1008": "[5, 4, 3, 1, 2]",
        "1009": "import time\n\nstart = time.time()\n\ndef foo(): \n for _ in range(1000): \n  print('Hello World')\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)",
        "1010": "",
        "1011": "magnitude: 5\nangle: 90",
        "1012": "n = 10",
        "1013": "values = [90, 50, 70], weights = [0.4, 0.2, 0.4]",
        "1014": "2x+3y=8\n5x-1y=-10",
        "1015": "list = ['abc', 'def', 'ghi']",
        "1016": "x = 36",
        "1017": "This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.",
        "1018": "",
        "1019": "List of strings: [\"Hello\", \"World\", \"Hello\", \"World\"]\nSearch String: \"World\"",
        "1020": "A = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]",
        "1021": "Not applicable",
        "1022": "String 1: python\nString 2: perl",
        "1023": "",
        "1024": "",
        "1025": "s = set([2, 3, 4])\nfor n in s:\n    print(n)",
        "1026": "",
        "1027": "",
        "1028": "Not applicable",
        "1029": "",
        "1030": "3, 2, 1",
        "1031": "",
        "1032": "",
        "1033": "Sentence: \u201cThe cat sat on the mat.\u201d",
        "1034": "76586",
        "1035": "This# 1$ i^s an% e*xa_mple -str_ing",
        "1036": "",
        "1037": "list_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]",
        "1038": "Not applicable",
        "1039": "Number: 3, Range: 0-10",
        "1040": "list = [3, 8, 10, 11, 12, 15]",
        "1041": "",
        "1042": "Not applicable",
        "1043": "",
        "1044": "",
        "1045": "Hello World!",
        "1046": "5",
        "1047": "There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.",
        "1048": "Not applicable",
        "1049": "set1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]",
        "1050": "for num in range(11)",
        "1051": "nums = [1, 2, -5, 9, 0, 10]",
        "1052": "",
        "1053": "This product is excellent",
        "1054": "Not applicable",
        "1055": "dict = {\"Hello\": 5, \"World\": 6, \"this\": 4, \"is\": 2, \"a\": 1, \"test\": 4}",
        "1056": "jobs = [(1, 5, 1), (3, 5, 7), (4, 6, 5), (6, 7, 4)]",
        "1057": "nums = [1, 2, 3, 2, 3, 2, 4]",
        "1058": "",
        "1059": "string = \u201cHello World\u201d",
        "1060": "[2, 4, 4, 4, 5, 5, 7, 9]",
        "1061": "",
        "1062": "[\"apple\", \"mango\", \"banana\"]",
        "1063": "Not applicable",
        "1064": "not_a_number = 'A123'\nnumber = int(not_a_number)",
        "1065": "input = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]",
        "1066": "my_list = []\nfor i in range(10):\n my_list.append(i ** 2)",
        "1067": "def calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n        \ncalculate_square(10)",
        "1068": "params: (4, 5)",
        "1069": "",
        "1070": "The maximum height should be 6",
        "1071": "string=\"hello, world\"",
        "1072": "",
        "1073": "my_list = [9, 3, 6, 7, 1]",
        "1074": "Not applicable",
        "1075": "",
        "1076": "[\n    [1, 4, 8],\n    [7, 9, 6]\n]",
        "1077": "Not applicable",
        "1078": "[1, 2, [3, 4]]",
        "1079": "string = \"the quick brown fox jumps over the lazy dog\"",
        "1080": "",
        "1081": "Dictionary 1\n`{'name': 'John', 'age': 25}`\n\nDictionary 2\n`{'company': 'Google', 'city': 'New York'}`",
        "1082": "x = 5 \ny = 11",
        "1083": "",
        "1084": "[9, 2, 6, 3, -5, 5, 7]",
        "1085": "C++, Java, Python, JavaScript",
        "1086": "URL: https:\/\/example.com\/dataset.json",
        "1087": "",
        "1088": "",
        "1089": "",
        "1090": "[objectA, objectB, objectC, objectD]",
        "1091": "[[1, 1, 0, 0, 0],\n [0, 1, 0, 0, 1],\n [1, 0, 0, 1, 1],\n [0, 0, 0, 0, 0],\n [1, 0, 1, 0, 1]]",
        "1092": "\"3+5*7\"",
        "1093": "\"ABC\"",
        "1094": "Address: 1 Rockefeller Plaza, New York City, NY",
        "1095": "string = \"Hello World!\"",
        "1096": "",
        "1097": "https:\/\/example.com",
        "1098": "",
        "1099": "[9, 4, 6, 1, 3, 7]",
        "1100": "words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']",
        "1101": "",
        "1102": "Not applicable",
        "1103": "",
        "1104": "<This is an example of a spam message.>.",
        "1105": "Not applicable",
        "1106": "temperature = 98.6\nbreathing_rate = 18\npulse_rate = 70",
        "1107": "",
        "1108": "[1, 4, 5, 8, 9, 11]",
        "1109": "",
        "1110": "Not applicable",
        "1111": "",
        "1112": "name,age,city\nJohn,30,New York\nMary,25,London\nMike,38,Paris\n\nRecode age such that every age greater than 30 is \"Above 30\" and every age below 30 is \"Below 30\".",
        "1113": "[1, 2, 3]",
        "1114": "",
        "1115": "",
        "1116": "[2, 4, 9]",
        "1117": "[1, 4, 9, 5, 3, 2]",
        "1118": "n=10",
        "1119": "",
        "1120": "",
        "1121": "Not applicable",
        "1122": "",
        "1123": "Not applicable",
        "1124": "m = 3\nn = 5",
        "1125": "Hashed password: abcdefg12345678",
        "1126": "String: \"Hello World\"\nLetter: \"H\"",
        "1127": "Not applicable",
        "1128": "",
        "1129": "",
        "1130": "function addNumbers(x, y) {\n    return x + y;\n}",
        "1131": "64 8 224 54 21",
        "1132": "String = \u201cabc\u201d",
        "1133": "",
        "1134": "",
        "1135": "105, 45",
        "1136": "Not applicable",
        "1137": "",
        "1138": "Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4",
        "1139": "def factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)",
        "1140": "https:\/\/example.com",
        "1141": "['ada', 'python', 'ruby', 'egg', 'coffee']",
        "1142": "def hello_world():\n print(\"Hello World\")",
        "1143": "Input String: {\"name\": \"John Doe\", \"age\": 28}",
        "1144": "25 December 2024",
        "1145": "",
        "1146": "Not applicable",
        "1147": "Not applicable",
        "1148": "",
        "1149": "",
        "1150": "list = [2, 3, 4, 5, 6], target = 4",
        "1151": "['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']",
        "1152": "",
        "1153": "var n = 10;",
        "1154": "input_array = [1, 2, 3, 4, 5]",
        "1155": "",
        "1156": "The website url should be https:\/\/www.example.com\/",
        "1157": "",
        "1158": "Not applicable",
        "1159": "",
        "1160": "Phone Number = 3233334444, Message = \"Thank you for signing up for our service\"",
        "1161": "",
        "1162": "data = [\n {name: 'John Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Python']},\n {name: 'Jane Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Node.js']},\n {name: 'Bob Doe', organization: 'ABC Co.', skills:['GoLang', 'PHP']},\n]",
        "1163": "Not applicable",
        "1164": "n = 10",
        "1165": "[1,2,3,4,5,6,7,8,9]",
        "1166": "def solve(list):\n    max_len = 0\n    for i in range(len(list)-1):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                cur_len = 0\n                k = 0\n                while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]:\n                    cur_len += 1\n                    k += 1\n                max_len = max(max_len, cur_len)\n    return max_len",
        "1167": "",
        "1168": "sentence = \"the cat sat on the mat\"",
        "1169": "",
        "1170": "",
        "1171": "contingency_table = [[100, 75], [40, 35]]",
        "1172": "1,Toyota,Corolla,110000,Petrol,Manual,1990,30,3000",
        "1173": "[\n { \"name\": \"Alice\" , \"age\": 24 },\n { \"name\": \"Bob\" , \"age\": 29 },\n { \"name\": \"Charlie\" , \"age\": 28 }\n]",
        "1174": "Question: What is the sum of all numbers divisible by 25 between 500 and 1000?",
        "1175": "storing a list of strings that can be efficiently searched.",
        "1176": "text = \"This movie was truly amazing\"",
        "1177": "my_list = [1, 2, 3, 4, 5]",
        "1178": "function = f(x, y) = 5x + 3y",
        "1179": "n = 4\nm = 6",
        "1180": "[3, 4, 7, 12, 19]",
        "1181": "Not applicable",
        "1182": "Input list : [1, 5, -9, 8, 21]",
        "1183": "length = 10",
        "1184": "data = [('Where can I find a good cup of coffee?', 0),\n        ('I am so happy!', 1),\n        ('This is so sad :(', 0)]",
        "1185": "",
        "1186": "Not applicable",
        "1187": "Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices",
        "1188": "set1: [\"pineapple\" ,\"mango\",\"apple\",\"orange\"]\nset2: [\"grandfather\",\"grandmother\",\"father\",\"mother\"]",
        "1189": "https:\/\/www.youtube.com\/user\/mahalo",
        "1190": "myList = [1, 2, 3, 4]",
        "1191": "7",
        "1192": "Not applicable",
        "1193": "",
        "1194": "\"123456\"",
        "1195": "list 1: [2, 3, 4] \nlist 2: [3, 5, 6, 4]",
        "1196": "import csv\ncsvReader = csv.reader(open(\"filename.csv\", \"rb\"))",
        "1197": "list = [1, 2, 2, 3, 4, 4, 4]",
        "1198": "[2, 5, 8, 9, 10, 13, 11]",
        "1199": "[4, 2, 9, 7, 3]",
        "1200": "arr = [10, 7, 8, 4, 2, 9]",
        "1201": "",
        "1202": "",
        "1203": "Product name: 'Tulip Breeze Necklace' \nProduct category: 'Jewelry'\nProduct price: $45",
        "1204": "",
        "1205": "customer_data = [\n    {\"name\": \"John Doe\", \"age\": 25, \"gender\": \"Male\"},\n    {\"name\": \"Jane Doe\", \"age\": 30, \"gender\": \"Female\"},\n    {\"name\": \"Pat Smith\", \"age\": 75, \"gender\": \"Unknown\"}\n]",
        "1206": "",
        "1207": "[3, 5,7], 4",
        "1208": "comments = [\"This product is great!\", \"I hate this product\", \"Not sure whether to buy it\"]",
        "1209": "",
        "1210": "",
        "1211": "Not applicable.",
        "1212": "",
        "1213": "list=[2,4,5,7,1,3]",
        "1214": "Not applicable",
        "1215": "Define a function that takes a list of numbers and returns a list containing only the odd numbers from the given list.",
        "1216": "",
        "1217": "",
        "1218": "",
        "1219": "def calculateSum(a, b): \n    total = 0 \n    \n    for i in range(a,b+1): \n        total += i \n \n    return total",
        "1220": "Not applicable",
        "1221": "",
        "1222": "This is a sample sentence.",
        "1223": "[1, 2, 3, 4]",
        "1224": "Array = [2, 3, -1, 5, 4, 7]",
        "1225": "",
        "1226": "Not applicable",
        "1227": "Not applicable",
        "1228": "Not applicable",
        "1229": "",
        "1230": "",
        "1231": "60 Fifth Avenue, New York",
        "1232": "Not applicable",
        "1233": "The quick brown fox jumps over the lazy dog.",
        "1234": "L = [1, 2, 2, 3, 4, 4]",
        "1235": "value = 'apple'\nlist = ['bannanas', 'oranges', 'apple']",
        "1236": "",
        "1237": "",
        "1238": "Not applicable",
        "1239": "Minimum length = 8 \nMaximum length = 15 \nMust contain at least one uppercase letter \nMust contain at least one lowercase letter\nMust contain at least one digit\nMust contain at least one special character",
        "1240": "url = \"https:\/\/www.google.com\"",
        "1241": "",
        "1242": "for i in range(1, 11):\n    print(i)",
        "1243": "",
        "1244": "An integer limit of 100.",
        "1245": "",
        "1246": "Not applicable",
        "1247": "Example array to sort: [4, 2, 9, 12, 3, 5, 7]",
        "1248": "# Line 1\nl1_m = 3\nl1_c = 5\n# Line 2\nl2_m = 7\nl2_c = 9",
        "1249": "{\"FirstName\": \"John\", \"LastName\": \"Smith\"}",
        "1250": "temperatures_fahrenheit = [32, 64, 78, -10]",
        "1251": "URL: https:\/\/www.example.com",
        "1252": "EXCEL SHEET CONTENT ;\n\n| Customer ID | Name | Date |\n|------------|------|------|\n|      12345 | John | 10\/9 |\n| **STRING1** | Mary | 12\/3 |\n|     54321  | Joe  | 5\/7  |   \n| **STRING2** | Paul | 3\/1  |",
        "1253": "",
        "1254": "customers = [\n {'name': 'John', 'age': 25},\n {'name': 'Bob', 'age': 40},\n {'name': 'Alice', 'age': 10},\n {'name': 'Mark', 'age': 35},\n]",
        "1255": "",
        "1256": "n = 10",
        "1257": "Text 1: He went to the store\nText 2: She visited the store",
        "1258": "https:\/\/www.example.com\/reviews",
        "1259": "",
        "1260": "Sample queries:\n\n\"Give me the weather in New York\"\n\n\"What is the population of China?\"",
        "1261": "Not applicable",
        "1262": "",
        "1263": "",
        "1264": "Not applicable",
        "1265": "",
        "1266": "",
        "1267": "",
        "1268": "Not applicable",
        "1269": "string = 'This is a test string.'",
        "1270": "list1=[1,3,5,7]\nlist2=[2,3,6,7]",
        "1271": "[\n  {\n    \"location\": \"downtown\",\n    \"size\": 2650,\n    \"bedrooms\": 3,\n    \"bathrooms\": 2,\n    \"price\": 540000,\n    \"label\": \"affordable\"\n  },\n  {\n    \"location\": \"uptown\",\n    \"size\": 3600,\n    \"bedrooms\": 5,\n    \"bathrooms\": 4,\n    \"price\": 750000,\n    \"label\": \"not affordable\"\n  },\n  {\n    \"location\": \"rural\",\n    \"size\": 2500,\n    \"bedrooms\": 4,\n    \"bathrooms\": 2,\n    \"price\": 400000,\n    \"label\": \"affordable\"\n  },\n  {\n    \"location\": \"suburban\",\n    \"size\": 3500,\n    \"bedrooms\": 5,\n    \"bathrooms\": 3,\n    \"price\": 500000,\n    \"label\": \"not affordable\"\n  }\n]",
        "1272": "arr = [10, 20, 30, 40]\nnew_size = 6",
        "1273": "arr = [3, 6, 3, 2, 7, 5, 6]",
        "1274": "String to be split = \"Python is an interpreted language.\"",
        "1275": "Dataset containing images of fruits",
        "1276": "Not applicable",
        "1277": "",
        "1278": "",
        "1279": "base1 = 2\nbase2 = 4\nheight = 3",
        "1280": "#This code runs on python 2\nprint \"Hello World!\"",
        "1281": "John, Mary, Paul, Gerry",
        "1282": "Table data:\n\nCountry | Population | Area | GDP\n\nUSA | 330,000,000 | 3,796,000 | 21,427,000\n\nChina | 1,400,000,000 | 9,596,961 | 14,140,163\n\nFrance | 67,000,000 | 640,679 | 2,777,000",
        "1283": "[4, 8, 2, 6, 9]",
        "1284": "x = [1, 5, 8, 3], n = 8",
        "1285": "my_list = []\nfor value in range(10):\n my_list.append(value * 2)",
        "1286": "array = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\nnumber = 15",
        "1287": "def main():\n try:\n counter = 0\n while True:\n print(counter)\n counter += 1\n time.sleep(1)\n \nexcept KeyboardInterrupt:\n print('Goodbye!')",
        "1288": "text = \"Learn Python now or learn Java later",
        "1289": "Not applicable",
        "1290": "Example data of stock prices and number of available stocks.",
        "1291": "String: `attack`\nCipher: Rotate 3 positions",
        "1292": "",
        "1293": "",
        "1294": "",
        "1295": "words = ['a', 'b', 'a', 'c', 'b', 'a', 'd']",
        "1296": "",
        "1297": "\"This is a sentence.\"",
        "1298": "Animals = [\"dog\", \"cat\", \"elephant\", \"owl\", \"tuna\", \"salmon\"]",
        "1299": "",
        "1300": "[\"dog\", \"cat\", \"apple\", \"banana\"]",
        "1301": "list_of_strings = [\"dog\", \"cat\", \"elephant\", \"bird\"]",
        "1302": "",
        "1303": "Text: \"The cat jumped over the fence\"\nPattern: \"cat\"",
        "1304": "print(\"Hello Python!\")",
        "1305": "",
        "1306": "",
        "1307": "",
        "1308": "[1,2,3,4,5]",
        "1309": "",
        "1310": "number = 42\nfrom_base = 10\nto_base = 16",
        "1311": "[[1,2,[3]],4]",
        "1312": "[\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]",
        "1313": "",
        "1314": "",
        "1315": "",
        "1316": "",
        "1317": "[ (1, 2), (1, 3), (2, 4), (2, 5), (4, 6), (4, 7) ]",
        "1318": "",
        "1319": "",
        "1320": "",
        "1321": "Input number: 259",
        "1322": "This is an example of a string in XML format:\n\n<note>\n <to>Tove<\/to>\n <from>Jani<\/from>\n <heading>Reminder<\/heading>\n <body>Don't forget me this weekend!<\/body>\n<\/note>",
        "1323": "",
        "1324": "",
        "1325": "Value: 32",
        "1326": "",
        "1327": "Sentence:   'The quick brown fox jumps over the lazy dog.'",
        "1328": "string_1 = \"The temperature is 24 degrees Celsius\"",
        "1329": "numbers = [4, 7, 2, 3]",
        "1330": "",
        "1331": "",
        "1332": "my name is john",
        "1333": "['cat', 'dog', 'fish','apple']\nletter: 'a'",
        "1334": "input_string = 'This is a sample string'",
        "1335": "str = '{\"key1\": \"value1\", \"key2\": \"value2\"}'",
        "1336": "Key: \"mykey123\"\nString: \"My secret message\"",
        "1337": "n=3, m=2",
        "1338": "",
        "1339": "28\ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}",
        "1340": "The list is: [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]",
        "1341": "s = \"\"\nfor i in range(0, 10):\n    for x in range(0, 10):\n        for y in range(0, 10):\n            s += str(i) + str(x) + str(y)",
        "1342": "\"This is an example sentence.\"",
        "1343": "Not applicable",
        "1344": "[\"hello\", \"world\", \"the\"]",
        "1345": "",
        "1346": "Not applicable",
        "1347": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "1348": "String1: Hello\nString2: HeLLo",
        "1349": "",
        "1350": "arr = [1, 4, 9, 6, 2, 5, 9, 7]",
        "1351": "[1, 1, 2, 3, 4, 4, 5]",
        "1352": "",
        "1353": "names = [\"John\", \"Sara\", \"Joseph\", \"James\"]",
        "1354": "[4, 9, 16, 25]",
        "1355": "def factorial(n):\t\n    # TODO",
        "1356": "",
        "1357": "",
        "1358": "Not applicable",
        "1359": "Sentence: hello world",
        "1360": "s1 = \"abcde\"\ns2 = \"xabxcdxxef\"",
        "1361": "Not applicable",
        "1362": "",
        "1363": "Not applicable",
        "1364": "arr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]",
        "1365": "Not applicable",
        "1366": "Sample Webpage: \nhttps:\/\/www.example.com\/page1",
        "1367": "[5, 2, 1, 5, 9, 1, 3]",
        "1368": "[25, 6, 7, 3, 12, 89, 74, 55]",
        "1369": "http:\/\/example.com",
        "1370": "3, 22",
        "1371": "",
        "1372": "Not applicable",
        "1373": "",
        "1374": "arr = [2, 3, 9, 1, 4, 5]",
        "1375": "N = 5\npoints = [[1, 2], [2, 8], [4, 6], [8, 0], [7, -1]]",
        "1376": "String = \u201cThe sky is blue\u201d",
        "1377": "",
        "1378": "\"http:\/\/www.google.com\"",
        "1379": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "1380": "",
        "1381": "",
        "1382": "",
        "1383": "arr = [3, 7, 1, 12, 5]",
        "1384": "arr_size = 10",
        "1385": "<html>\n<head>\n  <title>Page title<\/title>\n<\/head>\n<body>\n  <p>For more information email us at info@example.com.<\/p>\n  <p>You can also contact john@example.com.<\/p>\n<\/body>\n<\/html>",
        "1386": "",
        "1387": "string = \"forgeeksskeegfor\"",
        "1388": "The room has length 5 meters, width 8 meters and height 3 meters.",
        "1389": "",
        "1390": "query_string = \"SELECT * FROM student WHERE course='Python'\"",
        "1391": "[\"Hello\", \"\", \"Python\", \"World\", \"\"]",
        "1392": "",
        "1393": "lower = 20\nupper = 40",
        "1394": "",
        "1395": "String 1: 'Hello World'\nString 2: 'hello world!'",
        "1396": "my_list = [1,1,2,3,4,4,4,4,5,6]",
        "1397": "num1 = 4\nnum2 = 5",
        "1398": "",
        "1399": "Not applicable",
        "1400": "Strings: \"Hello\", \"World\"",
        "1401": "Array of word strings and the associated frequency \n[\n  [\"word1\", 5], \n  [\"word2\", 8], \n  [\"word3\", 3],\n  [\"word4\", 2],\n]",
        "1402": "list_input = [1, 3, 5, 7, 9]\nn = 3",
        "1403": "def reverse_list(input_list): \n    rev_list = [] \n    for i in range(len(input_list)-1,-1,-1): \n        rev_list.append(input_list[i]) \n    return rev_list",
        "1404": "names = [\"John\", \"Paul\", \"George\", \"Ringo\", \"Adam\", \"Peter\", \"Alice\", \"Karen\", \"Jerry\"]",
        "1405": "[\"how\", \"how\", \"are\", \"you\", \"how\", \"are\", \"you\"], \"how\"",
        "1406": "Input integers: 10, 20",
        "1407": "def add_number(a, b):\n    return a + b",
        "1408": "",
        "1409": "",
        "1410": "",
        "1411": "classify(\"hummingbird\")",
        "1412": "String: \u201cI am learning Python programming\u201d\nPattern: \u201clearning\u201d",
        "1413": "",
        "1414": "userInput: a product quantity",
        "1415": "https:\/\/www.reddit.com\/r\/ProgrammerHumor\/comments\/hfpmoo\/people_ask_me_why_i_learn_so_many_programming\/",
        "1416": "",
        "1417": "",
        "1418": "list = [3,5,2,4,7,5]",
        "1419": "",
        "1420": "",
        "1421": "[1, 8, 10, 4, 1, 8, 8]",
        "1422": "Not applicable",
        "1423": "Not applicable",
        "1424": "https:\/\/www.example.com\/titles",
        "1425": "Not applicable",
        "1426": "Input string: computer",
        "1427": "",
        "1428": "[7, 8, 10, 4, 11]",
        "1429": "s1 = \"hello\", s2 = \"lloeh\"",
        "1430": "list = [-3, -2, 0, 4, 5]",
        "1431": "",
        "1432": "Not applicable",
        "1433": "",
        "1434": "A number: 49",
        "1435": "Function Multiply(a, b) \n  Product = 0 \n  i = 0 \n  While i < b \n    Product = Product + a \n    i = i + 1 \n  End While \n  Return Product",
        "1436": "x = 5\nname = \"John\"\ny = [1, 2, 3]",
        "1437": "",
        "1438": "Dataset: basketball_players.csv",
        "1439": "Dataset: \n[2, 34], \n[3, 4], \n[7, 24], \n[5, 14], \n[8, 22], \n[10, 21]",
        "1440": "",
        "1441": "string1 = \"Python\"\nstring2 = \"programming\"",
        "1442": "Hello World",
        "1443": "",
        "1444": "",
        "1445": "word = 'ABC'",
        "1446": "[20, 10, 15, 25]",
        "1447": "Not applicable",
        "1448": "s1 = \"foo\", s2 = \"app\"",
        "1449": "[2, 3, 4, 2, 5, 3]",
        "1450": "word = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')",
        "1451": "50",
        "1452": "Not applicable",
        "1453": "1 and 8",
        "1454": "arr = [1, 2, 3, 4]",
        "1455": "3",
        "1456": "[1,1,3,4,4,5]",
        "1457": "The given dataset contains customers demographic information and their past month usage records.",
        "1458": "String: Python is a programming language.",
        "1459": "Not applicable",
        "1460": "",
        "1461": "probability_data = [0.4, 0.6, 0.2, 0.9]\nevent = \"A\"",
        "1462": "Not applicable",
        "1463": "\"AGGTAB\", \"GXTXAYB\"",
        "1464": "",
        "1465": "",
        "1466": "",
        "1467": "string = \"Hello World!\"",
        "1468": "`<h1>This is a title<\/h1>Some text before the tags<p>This should be scraped<\/p>Some text after the tags`",
        "1469": "",
        "1470": "hexvals = \"7a 0d 72\"",
        "1471": "import random\n\ndef find_max(lst):\n max_val = 0\n \n for i in range(len(lst)):\n   for j in range(len(lst)-1):\n     if lst[i] > lst[j] and lst[i] > max_val:\n       max_val = lst[i]\n       \n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer)",
        "1472": "string1:'Inception', string2: 'Interstellar'",
        "1473": "lst = ['bar','bird','cat']",
        "1474": "d = {\"a\": 23, \"b\": 70, \"c\": 10}",
        "1475": "",
        "1476": "",
        "1477": "Not applicable",
        "1478": "",
        "1479": "string_1 = 'cat'\nstring_2 = 'the cats meow'",
        "1480": "[1, 2, 3, 4, 5]",
        "1481": "",
        "1482": "hello world.",
        "1483": "a = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]",
        "1484": "Given a list of numbers [1, 4, 7, 8, 10, 15, 21],",
        "1485": "[{\n\"name\": \"John Doe\",\n\"salary\": 10000,\n\"experience\": 3\n},\n{\n\"name\": \"Alice Smith\",\n\"salary\": 12000,\n\"experience\": 4\n}]",
        "1486": "hello world",
        "1487": "Historical Stock Price Data for AAPL (Apple stock) from Jan 1, 2010 to Dec 31, 2020",
        "1488": "",
        "1489": "The quick brown fox.",
        "1490": "Features: date, time, price, category, discount",
        "1491": "string=\"The quick brown fox jumped over the lazy dog\"",
        "1492": "",
        "1493": "[6, 3, 10, 4]",
        "1494": "words = [\"Hello\", \"World\", \"I\", \"Love\", \"You\"]",
        "1495": "",
        "1496": "[\"apple\", \"banana\", \"cherry\"]",
        "1497": "list = [4, 5, -2, -7, 5]",
        "1498": "arr = [1, 9, 3, 8, 4]",
        "1499": "",
        "1500": "\"this is an example sentence\"",
        "1501": "",
        "1502": "Not applicable",
        "1503": "",
        "1504": "[1,2,3,4,5]",
        "1505": "given equation is ax2+bx+c=0",
        "1506": "SELECT * FROM users WHERE age > 18",
        "1507": "",
        "1508": "List: [\"apples\", \"oranges\", \"bananas\", \"pineapples\"]",
        "1509": "url = \"http:\/\/www.example.com\/index.html\"",
        "1510": "",
        "1511": "[3, 4, -1, 0, 6, 2, 3]",
        "1512": "",
        "1513": "",
        "1514": "teststring",
        "1515": "30",
        "1516": "Not applicable",
        "1517": "\"Hello world hello world\"",
        "1518": "No Input",
        "1519": "",
        "1520": "",
        "1521": "Not applicable",
        "1522": "A * B + C - D",
        "1523": "",
        "1524": "",
        "1525": "Given two dictionaries d1 and d2, create another dictionary d3 containing the keys from both dictionaries.",
        "1526": "sentence = \"This is an example sentence.\"",
        "1527": "",
        "1528": "",
        "1529": "",
        "1530": "A list of integers [-2, 4, -1, 5, 6]",
        "1531": "string: abcdabcd\nsubstring: cd",
        "1532": "",
        "1533": "8",
        "1534": "Not applicable",
        "1535": "HTML document of a web page\n<html>\n <head>\n  <title>Example Page<\/title>\n <\/head>\n <body>\n  <h1>Welcome to my page!<\/h1>\n  <p>Here is some information about me:<\/p>\n  <ul>\n   <li>Name: John Smith<\/li>\n   <li>Age: 38<\/li>\n  <\/ul>\n <\/body>\n<\/html>",
        "1536": "4",
        "1537": "",
        "1538": "[1, 2, 3, 6, 5, 4, 7]",
        "1539": "[\"apple\",\"hello123\",\"hi12345\", \"good15\"]",
        "1540": "6",
        "1541": "String 1 = \"Hello World!\"\nString 2 = \"World\"",
        "1542": "orders = [\n {'item': 'Pizza', 'price': 12.00}, \n {'item': 'Chips', 'price': 3.50}, \n {'item': 'Coke', 'price': 2.50}\n]",
        "1543": "string = 'hello world'",
        "1544": "",
        "1545": "string = \"String Counting\"",
        "1546": "Test whether a given number is greater than 5.",
        "1547": "",
        "1548": "my_dict = {'a':1, 'b':2, 'c':3}",
        "1549": "from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X, y)",
        "1550": "sentence = \"This is a test sentence\"",
        "1551": "[2, 3, 6, 7, 13, 14]",
        "1552": "A link to the product page on a website.",
        "1553": "https:\/\/www.nytimes.com\/",
        "1554": "[\"hello\", \"world\", \"foo\", \"bar\"], \"bar\"",
        "1555": "[\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]",
        "1556": "[3, 4, 2, 8, 5, 6], the number should be 10",
        "1557": "[1,2,3,4,5]",
        "1558": "Not applicable",
        "1559": "",
        "1560": "a list of elements",
        "1561": "[-2, 4, -5, - 1]",
        "1562": "n=10",
        "1563": "{\"name\": \"John\", \"age\": \"25\"}",
        "1564": "",
        "1565": "A website URL",
        "1566": "",
        "1567": "",
        "1568": "[4,2,7,8,2]",
        "1569": "[\n{ \n\"name\": \"John\", \n\"age\": 20, \n\"hobby\": \"soccer\"\n},\n{ \n\"name\": \"Sarah\", \n\"age\": 19, \n\"hobby\": \"dancing\" \n},\n{ \n\"name\": \"Dave\", \n\"age\": 21, \n\"hobby\": \"painting\" \n}\n]",
        "1570": "",
        "1571": "[9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "1572": "URL: https:\/\/www.example.com\/",
        "1573": "list1 = [3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]",
        "1574": "Not applicable",
        "1575": "json_string = '{\"fruit\": [\"apple\", \"banana\", \"cherry\"], \"vegetable\": [\"carrot\", \"potato\", \"onion\"]}'",
        "1576": "",
        "1577": "[1, 2, 3, 3, 3, 4, 5, 6]",
        "1578": "Not applicable",
        "1579": "",
        "1580": "Key: \"2b7e151628aed2a6abf7158809cf4f3c\"; IV: \"000102030405060708090a0b0c0d0e0f\"",
        "1581": "Not applicable",
        "1582": "nums = [12, 198, 16]",
        "1583": "Classify the given dataset [5, 10, 25, 11, 14, 20] into two categories - numbers below 15 and numbers above 15.",
        "1584": "n = 10",
        "1585": "['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']",
        "1586": "[\"hello\", \"world\", \"how\"]",
        "1587": "url = http:\/\/example.com",
        "1588": "",
        "1589": "def get_maximum_item(arr):\n    maximum_number = float('-infinity')\n\n    for item in arr:\n        if item > maximum_number:\n            maximum_number = item\n\n    return maximum_number",
        "1590": "arr = [5, 3, 2, 4, 1]",
        "1591": "['word', 'word', 'words', 'python']",
        "1592": "unsorted_list = [2, 4, 1, 5, 3]",
        "1593": "I like cats and playing the piano",
        "1594": "The URL of the page: https:\/\/www.tripadvisor.com\/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html",
        "1595": "",
        "1596": "\"Hello World\"",
        "1597": "seq = [2, 3, 5, 3, 4, 9, 5]",
        "1598": "",
        "1599": "",
        "1600": "",
        "1601": "myNameIsRyan",
        "1602": "s = \"abcabc\"\nt = \"abc\"",
        "1603": "",
        "1604": "<table>\n <tr>\n  <td>Name<\/td>\n  <td>Email<\/td>\n <\/tr>\n <tr>\n  <td>John Doe<\/td>\n  <td>john@example.com<\/td>\n <\/tr>\n<\/table>",
        "1605": "",
        "1606": "No input",
        "1607": "",
        "1608": "Frontend: React\nBackend: Python\nDatabase: MongoDB",
        "1609": "",
        "1610": "data_dict = {'name': ['Bob', 'Alice', 'John'],\n             'age': [18, 20, 19]}",
        "1611": "def foo():\n    x = 0\n    y = 1\n    z = 2\n    if x == y:\n        z += 1",
        "1612": "{\"a\": 3, \"b\": 1, \"c\": 2}",
        "1613": "public class GFG\n{\n  static void printPattern(int n)\n  {\n    int i, j;\n    for (i=0; i<n; i++)\n    {\n  for (j=0; j<=i; j++ )\n    System.out.print(\"* \");\n \n   System.out.println();\n }\n }\n \n public static void main(String args[])\n {\n   int n = 5;\n   printPattern(n);\n }\n}",
        "1614": "Not applicable",
        "1615": "",
        "1616": "mulitply each element in (1, 2, 3, 4) by 3",
        "1617": "",
        "1618": "Subreddit to analyze: r\/AskReddit",
        "1619": "5",
        "1620": "",
        "1621": "query string = \"example\"",
        "1622": "",
        "1623": "",
        "1624": "Not applicable",
        "1625": "(2,3), (4,5)",
        "1626": "",
        "1627": "[1,1,2,3,4,5,5,5]",
        "1628": "",
        "1629": "Not applicable",
        "1630": "Two strings: \"kitten\" and \"sitting\"",
        "1631": "",
        "1632": "12",
        "1633": "",
        "1634": "#include <stdio.h>\nint main()\n{\n    int a[10], b[10], i, j;\n    for (i = 0; i < 10; ++i) {\n        a[i] = 0;\n        b[i] = 0;\n    }\n    for (j = 1; j <= 5; ++j) {\n        for (i = 0; i < 10; ++i) {\n            a[i] = a[i] + j;\n            b[i] = b[i] + b[i - 1] + a[i];\n        }\n    }\n    for (i = 0; i < 10; ++i) {\n        printf(\"%d \", b[i]);\n    }\n    return 0;\n}",
        "1635": "",
        "1636": "[1, 3, 4, 5, 3, 9, 6]",
        "1637": "list = [2, 4, 5, 1, 7, 6, 0, 8]",
        "1638": "",
        "1639": "grid = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]",
        "1640": "A tree with 3 nodes. Node A with a value of 8, Node B with a value of 11, and Node C with a value of 7.",
        "1641": "Search String: \u201cexample\u201d  \nList of Strings: [\u201cexample1\u201d, \u201cexample2\u201d, \u201cexample3\u201d, \u201cother1\u201d, \u201cother2\u201d]",
        "1642": "A roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]",
        "1643": "",
        "1644": "Not applicable",
        "1645": "words = [\"hello\", \"world\", \"foo\", \"bar\"]",
        "1646": "A required dataset housing.csv which contains house information, such as square footage, location, number of bedrooms and bathrooms, etc.",
        "1647": "Input sentence: \"This is a test sentence\"",
        "1648": "Not applicable",
        "1649": "Not applicable",
        "1650": "",
        "1651": "list := [1, 2, 2, 3]",
        "1652": "",
        "1653": "[1, 2, 3, 2, 4, 5, 5]",
        "1654": "No input",
        "1655": "title (varchar), content (text), author (varchar)",
        "1656": "10",
        "1657": "n = 10\n\ndef func(n):\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            res = res + i + j\n    return res\n\nfunc(n)",
        "1658": "",
        "1659": "Not applicable",
        "1660": "[5, 1, 3, 9, 4, 2]",
        "1661": "Text: The quick brown fox jumps over the lazy dog.",
        "1662": "",
        "1663": "Input Date: 10\/07\/2020",
        "1664": "x = 5, y = 8",
        "1665": "Data: \n[[4.4, 3.2, 1.3],\n[5.5, 2.3, 4.2],\n[6.7, 3.4, 2.4],\n[6.5, 3.2, 5.1]]",
        "1666": "",
        "1667": "def string_to_num_list(string):\n    numbers = []\n    for letter in string:\n        numbers.append(ord(letter))\n    return numbers",
        "1668": "Not applicable",
        "1669": "",
        "1670": "\"\"\"This is an example docstring.\n\nimport tensorflow as tf\n\nx = tf.constant(42)\ny = tf.constant(4)\n\ndef add():\n    return x + y\n\"\"\"",
        "1671": "",
        "1672": "This is a sample string",
        "1673": "[1, 2]",
        "1674": "The sentence is \"The quick brown fox jumped over the lazy dog\"",
        "1675": "",
        "1676": "Not applicable",
        "1677": "",
        "1678": "array = [4, 2, 3, 6, 1]",
        "1679": "Not applicable",
        "1680": "User Reviews: \n\n1. 'The food was amazing!' \n2. 'I was not happy with the customer service.' \n3. 'The quality of the food was fantastic!'",
        "1681": "three integers a, b, c",
        "1682": "3",
        "1683": "",
        "1684": "String = \"codefortesting\"",
        "1685": "number = 5",
        "1686": "JSON String:\n{\n\"name\": \"John Smith\",\n\"age\": 33,\n\"address\": {\n \"street\": \"123 Main Street\",\n \"city\": \"New York\",\n \"state\": \"NY\",\n \"zip\": \"10001\"\n},\n\"phone_numbers\": [\n {\n \"type\": \"work\",\n \"number\": \"212 555-1234\"\n },\n {\n \"type\": \"cell\",\n \"number\": \"646 555-4567\"\n }\n]\n}",
        "1687": "The URL to start the crawl and a maximum depth of two levels.",
        "1688": "",
        "1689": "ATGGGCTAG",
        "1690": "",
        "1691": "Name: John\nPassword: J0hnP455w0rd",
        "1692": "Not applicable",
        "1693": "",
        "1694": "",
        "1695": "",
        "1696": "",
        "1697": "Not applicable",
        "1698": "",
        "1699": "numbers = [1, 2, 3, 4, 5]\nresult = []\nfor num in numbers:\n    result.append(num * 2)",
        "1700": "",
        "1701": "[3, 5, 2, 4, 9, 7]",
        "1702": "A = [9, 4, 5, 1, 3]",
        "1703": "n = 10",
        "1704": "Not applicable",
        "1705": "1, 10, 3, 8, 6",
        "1706": "string= \"Hello World!\", search=\"l\"",
        "1707": "products = [\n { 'name': 'Chocolate', 'price': 6.00 },\n { 'name': 'Milk', 'price': 3.00 },\n { 'name': 'Cheese', 'price': 12.00 },\n]",
        "1708": "",
        "1709": "",
        "1710": "expression = \"2 * (3 + 5)\"",
        "1711": "list_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8]",
        "1712": "import string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(letter+j)\n    return result",
        "1713": "[30, 10, 40, 20]",
        "1714": "\"Hello\"",
        "1715": "\"This is a test\"",
        "1716": "numbers = [234, 534, 123, 42, 56, 1, 234]",
        "1717": "Query term: Paris",
        "1718": "5",
        "1719": "\"Random String1\", \"This is a random string\"",
        "1720": "[7, 9, 15, 10, 11]",
        "1721": "",
        "1722": "",
        "1723": "",
        "1724": "",
        "1725": "",
        "1726": "example.com",
        "1727": "",
        "1728": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]",
        "1729": "",
        "1730": "s1 = 'cat'\ns2 = 'cot'",
        "1731": "[2, -1, 15, 8, 9, 10]",
        "1732": "num = 6",
        "1733": "List of integers: [1, 3, 5, 8]",
        "1734": "",
        "1735": "City: Los Angeles, California\n10 year average temperature from 2010 to 2020",
        "1736": "",
        "1737": "",
        "1738": "",
        "1739": "['Alex', 'Mark', 'John21', '12345']",
        "1740": "",
        "1741": "Not applicable",
        "1742": "{\n  \u201cdescription\u201d: \u201cGently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!\u201d\n}",
        "1743": "Size of the array: 10x10",
        "1744": "list1 = [12, 5, 7, 45, 32]\nlist2 = [7, 2, 45, 11, 32]",
        "1745": "",
        "1746": "",
        "1747": "",
        "1748": "The data set contains the following columns:\n\nMonthly Income:$2300,\nMonthly Expenses:$850",
        "1749": "",
        "1750": "arr = [4, 2, 8, 2, 1, 4, 19, 4]",
        "1751": "No input.",
        "1752": "<Sample_image.jpg>",
        "1753": "46, 24",
        "1754": "list_a = [1, 2, 3, 2, 5, 2]",
        "1755": "Given a dataset containing information about temperature and humidity, classify whether the day is raining or not",
        "1756": "",
        "1757": "Not applicable",
        "1758": "Database: {\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"age\": 26\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 32\n        },\n        {\n            \"name\": \"Alice\",\n            \"age\": 21\n        }\n    ]\n}\n\nSearch term: Alice",
        "1759": "List of words: [\"HeLlO\", \"wOrlD\"]",
        "1760": "Patient 1: Blood Pressure: 120mmHg, Blood Sugar: 250mg\/dL\nPatient 2: Blood Pressure: 110mmHg, Blood Sugar: 200mg\/dL\nPatient 3: Blood Pressure: 140mmHg, Blood Sugar: 300mg\/dL",
        "1761": "words: \"dear\", \"read\"",
        "1762": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "1763": "",
        "1764": "\"Hello, how are you today? How is your day going?\", \"how\", \"what\"",
        "1765": "The product was good, but customer service was slow",
        "1766": "123",
        "1767": "{'list': [1, 3, 5, 7], 'num': 3}",
        "1768": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]",
        "1769": "Not applicable",
        "1770": "arr = []\nfor i in range(10):\n if i % 2 == 0:\n arr.append(i)",
        "1771": "[2.5, 4.5, 2.5], Classes: [\"apple\", \"orange\", \"pear\"]",
        "1772": "Not applicable",
        "1773": "Not applicable",
        "1774": "",
        "1775": "nums = [2, 3, 4, 1, 7, 8, 5]",
        "1776": "`List of prices = [5, 7, 1, 3, 6, 8]`",
        "1777": "[3, 4, 1, 2, 5]",
        "1778": "",
        "1779": "numbers = [10, 7, 3, 9, 12, 15]\ninteger = 3",
        "1780": "[4, 7, 6, 2]",
        "1781": "Not applicable",
        "1782": "JSON object: { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }",
        "1783": "sentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"",
        "1784": "",
        "1785": "2, 3",
        "1786": "Example dataset of 10 emails with their respective labels (spam\/ham)",
        "1787": "10",
        "1788": "Message: \u201cThis is an example\u201d",
        "1789": "",
        "1790": "",
        "1791": "[1,2,3]",
        "1792": "",
        "1793": "",
        "1794": "",
        "1795": "def sum_of_numbers(n):\n   s = 0\n   for i in range(1,n+1):\n       s = s + i\n   return s",
        "1796": "",
        "1797": "",
        "1798": "arr = [7,2,5,1,3]",
        "1799": "[\"apple\", \"banana\", \"apple\", \"banana\", \"orange\"]",
        "1800": "10\n    5       15 \n  2   7   12    20",
        "1801": "sepal_length,sepal_width,petal_length,petal_width\n5.2,3.5,1.4,0.2",
        "1802": "list1 = [1, 4, 5, 6, 3, 2]",
        "1803": "n = 10",
        "1804": "",
        "1805": "\"John\", 28",
        "1806": "Not applicable",
        "1807": "listen",
        "1808": "{\n  \"type\": \"error\",\n  \"message\": \"An error occurred\"\n}",
        "1809": "",
        "1810": "",
        "1811": "",
        "1812": "dataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]",
        "1813": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8",
        "1814": "This is a great world - let's start coding!",
        "1815": "String1 = \"Hello\" \nString2 = \"World\"",
        "1816": "encoding_string = \"Hello World\"",
        "1817": "",
        "1818": "[2, 8, 10, 17, 19, 25, 28]",
        "1819": "[\n    {\n        \"name\": \"A\",\n        \"cost\": 10,\n        \"rating\": 7\n    },\n    {\n        \"name\": \"B\",\n        \"cost\": 15,\n        \"rating\": 6\n    },\n    {\n        \"name\": \"C\",\n        \"cost\": 20,\n        \"rating\": 8\n    },\n]",
        "1820": "list = [3, 2, 3, 4, 5]",
        "1821": "",
        "1822": "",
        "1823": "[1,2,1,3,4,2,2,2,3,1]",
        "1824": "",
        "1825": "",
        "1826": "[No input]",
        "1827": "",
        "1828": "[1, 8, 2, 4, 10]",
        "1829": "3, 4, 5",
        "1830": "",
        "1831": "Not applicable",
        "1832": "<no input>",
        "1833": "json_object = {\"Stud1\": {\"Roll No\": 1, \"Class\": 10}, \"Stud2\": {\"Roll No\": 2, \"Class\": 11}}",
        "1834": "Not applicable",
        "1835": "",
        "1836": "Not applicable",
        "1837": "Not applicable",
        "1838": "expression = \"x + (y - z) > 0\"",
        "1839": "str1 = 'python' \nstr2 = 'ono',",
        "1840": "",
        "1841": "Python",
        "1842": "Not applicable",
        "1843": "",
        "1844": "String: I love ice cream\nKeywords: [\"chocolate\", \"vanilla\"]",
        "1845": "[80, 85, 90, 75, 95]",
        "1846": "",
        "1847": "Please reverse the order of the words.",
        "1848": "Length of sides: 3 and 4",
        "1849": "URL: https:\/\/www.example.com\/products",
        "1850": "Yadiel Rivera, shortstop",
        "1851": "12 and 15",
        "1852": "N = 10",
        "1853": "d = {'dog':3, 'cat':5, 'bird':4, 'horse':7}",
        "1854": "",
        "1855": "string = \"this is a sample string\"",
        "1856": "",
        "1857": "Not applicable",
        "1858": "",
        "1859": "# A simple Python program to add two numbers\nnum1 = 1.5\nnum2 = 6.3\n\n# Add two numbers\nsum = float(num1) + float(num2)\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
        "1860": "Input layer size = 50\nNumber of hidden layers = 2 \nNumber of output categories = 3"
    },
    "output": {
        "0": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "1": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))",
        "2": "[x*x for x in [1, 2, 3, 5, 8, 13]]",
        "3": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)",
        "4": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process",
        "5": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]",
        "6": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('\/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('\/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('\/records\/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('\/records\/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)",
        "7": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
        "8": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.",
        "9": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",
        "10": "def double_add(num1, num2): \n    return (num1 + num2) * 2",
        "11": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words",
        "12": "list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total\/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))",
        "13": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)",
        "14": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)",
        "15": "import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1.\/255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '\/path\/to\/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)",
        "16": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers",
        "17": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)",
        "18": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)",
        "19": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http:\/\/test.test\/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label",
        "20": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)",
        "21": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)",
        "22": "import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)",
        "23": "import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")",
        "24": "import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)",
        "25": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)",
        "26": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]",
        "27": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))",
        "28": "def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row\/\/3)*3 + i\/\/3][(col\/\/3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")",
        "29": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num \/\/ 10\n    return total",
        "30": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}",
        "31": "# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120",
        "32": "import random\n\nnumber = random.randint(100000, 999999)\nprint(number)",
        "33": "def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)",
        "34": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "35": "for num in my_list:\n    if num % 2 == 0:\n        print(num)",
        "36": "myArray = [float(i) for i in range(0,11)]",
        "37": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
        "38": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction",
        "39": "def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]",
        "40": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "41": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}",
        "42": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
        "43": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False",
        "44": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
        "45": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")",
        "46": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition",
        "47": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) \/ len(nums)\n\n#Print average\nprint(\"The average is \", average)",
        "48": "import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))",
        "49": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')",
        "50": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25",
        "51": "def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)",
        "52": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)",
        "53": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result",
        "54": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)",
        "55": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)",
        "56": "def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))",
        "57": "from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00",
        "58": "def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result",
        "59": "def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum\/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)\/2)] \n      else: \n            median = (arr[len(arr)\/\/2] + arr[len(arr)\/\/2 - 1]) \/ 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)",
        "60": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "61": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum \/ n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 \/ n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605",
        "62": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"\/tmp\/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples\/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c \/ total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))",
        "63": "def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)",
        "64": "def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]",
        "65": "# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']",
        "66": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum \/ count\n return avg",
        "67": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)",
        "68": "import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b\/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) \/ (2*a); \n        x2 = (-b - math.sqrt(discriminant)) \/ (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}",
        "69": "def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result",
        "70": "def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))",
        "71": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))",
        "72": "common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]",
        "73": "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)",
        "74": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string",
        "75": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list",
        "76": "def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True",
        "77": "int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 \/ int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)",
        "78": "import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)",
        "79": "original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']",
        "80": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))",
        "81": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results",
        "82": "import urllib.parse\n\nurl = 'https:\/\/www.example.com\/path\/to\/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: \/path\/to\/file",
        "83": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))",
        "84": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*\/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: \/crontab\/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"",
        "85": "\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "86": "numbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)",
        "87": "for i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
        "88": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')",
        "89": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width",
        "90": "import matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()",
        "91": "# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)",
        "92": "def find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str",
        "93": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5\/9\n    return temp_celsius",
        "94": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp \/\/= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False",
        "95": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")",
        "96": "import requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https:\/\/finance.yahoo.com\/quote\/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')",
        "97": "\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n    _, _, _op = _op_def_lib._apply_op_helper(\n        \"DecodeLibsvm\", input=input, num_features=num_features, dtype=dtype,\n        label_dtype=label_dtype, name=name)\n    _result = _op.outputs[:]\n    _inputs_flat = _op.inputs\n    _attrs = (\"dtype\", _op.get_attr(\"dtype\"), \"label_dtype\",\n              _op.get_attr(\"label_dtype\"), \"num_features\",\n              _op.get_attr(\"num_features\"))\n    _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n    _result = _DecodeLibsvmOutput._make(_result)\n    return _result\n\n  else:\n    try:\n      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n        _ctx._context_handle, _ctx._eager_context.device_name, \"DecodeLibsvm\",\n        name, _ctx._post_execution_callbacks, input, \"dtype\", dtype,\n        \"label_dtype\", label_dtype, \"num_features\", num_features)\n      _result = _DecodeLibsvmOutput._make(_result)\n      return _result\n    except _core._FallbackException:\n      return decode_libsvm_eager_fallback(\n          input, dtype=dtype, label_dtype=label_dtype,\n          num_features=num_features, name=name, ctx=_ctx)\n    except _core._NotOkStatusException as e:\n      if name is not None:\n        message = e.message + \" name: \" + name\n      else:\n        message = e.message\n      _six.raise_from(_core._status_to_exception(e.code, message), None)\n\n\ndef decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function decode_libsvm\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  num_features = _execute.make_int(num_features, \"num_features\")\n  if dtype is None:\n    dtype = _dtypes.float32\n  dtype = _execute.make_type(dtype, \"dtype\")\n  if label_dtype is None:\n    label_dtype = _dtypes.int64\n  label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n  input = _ops.convert_to_tensor(input, _dtypes.string)\n  _inputs_flat = [input]\n  _attrs = (\"dtype\", dtype, \"label_dtype\", label_dtype, \"num_features\",\n  num_features)\n  _result = _execute.execute(b\"DecodeLibsvm\", 4, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n  _result = _DecodeLibsvmOutput._make(_result)\n  return _result\n\n_ops.RegisterShape(\"DecodeLibsvm\")(None)\n\ndef _InitOpDefLibrary(op_list_proto_bytes):\n  op_list = _op_def_pb2.OpList()\n  op_list.ParseFromString(op_list_proto_bytes)\n  _op_def_registry.register_op_list(op_list)\n  op_def_lib = _op_def_library.OpDefLibrary()\n  op_def_lib.add_op_list(op_list)\n  return op_def_lib\n# op {\n#   name: \"DecodeLibsvm\"\n#   input_arg {\n#     name: \"input\"\n#     type: DT_STRING\n#   }\n#   output_arg {\n#     name: \"label\"\n#     type_attr: \"label_dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_indices\"\n#     type: DT_INT64\n#   }\n#   output_arg {\n#     name: \"feature_values\"\n#     type_attr: \"dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_shape\"\n#     type: DT_INT64\n#   }\n#   attr {\n#     name: \"dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_FLOAT\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"label_dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_INT64\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"num_features\"\n#     type: \"int\"\n#     has_minimum: true\n#     minimum: 1\n#   }\n# }\n_op_def_lib = _InitOpDefLibrary(b\"\\n\\311\\001\\n\\014DecodeLibsvm\\022\\t\\n\\005input\\030\\007\\032\\024\\n\\005label\\\"\\013label_dtype\\032\\023\\n\\017feature_indices\\030\\t\\032\\027\\n\\016feature_values\\\"\\005dtype\\032\\021\\n\\rfeature_shape\\030\\t\\\"\\033\\n\\005dtype\\022\\004type\\032\\0020\\001:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"!\\n\\013label_dtype\\022\\004type\\032\\0020\\t:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"\\027\\n\\014num_features\\022\\003int(\\0010\\001\")\n",
        "98": "def dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "99": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('\/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('\/items\/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})",
        "100": "def filter_long_strings(string_list):\n long_strings = []\n for string in string_list:\n if len(string) > 5:\n long_strings.append(string)\n return long_strings\n\nstring_list = ['Python', 'is', 'Fun']\n\nlong_strings = filter_long_strings(string_list)\nprint(long_strings)",
        "101": "def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)",
        "102": "def fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)",
        "103": "def print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])",
        "104": "def sieve_eratosthenes(n): \n    prime_list = [True] * (n+1) \n    prime_list[0] = False\n    prime_list[1] = False\n    primes = [] \n      \n    for i in range(2, n+1): \n        if prime_list[i] == True: \n            primes.append(i) \n            for j in range(i*i, n+1, i): \n                prime_list[j] = False\n    return primes \n  \nn = 100\nprint(\"The Prime numbers from 1 to 100 are:\")\nprint(sieve_eratosthenes(n))",
        "105": "import os\nimport sys\nimport argparse\nimport paddle.fluid as fluid\n\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = fluid.CPUPlace()\n    exe = fluid.Executor(place)\n\n    inference_scope = fluid.core.Scope()\n    with fluid.scope_guard(inference_scope):\n        print \"Loading inference_program from \", src_dir\n        [inference_program, feed_target_names,\n         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)\n\n        inference_transpiler_program = inference_program.clone()\n        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.\n        t = fluid.InferenceTranspiler()\n        # Under the with statement, inference_scope is the global scope.\n        t.transpile(inference_transpiler_program, place)\n\n        #print inference_transpiler_program\n\n        print \"Saving the optimized inference_program to \", dst_dir\n        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.\n        if not os.path.isdir(dst_dir):\n            os.makedirs(dst_dir)\n        model_path = os.path.join(dst_dir, model_filename)\n        with open(model_path, \"wb\") as f:\n            f.write(inference_transpiler_program.desc.serialize_to_string())\n        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', help='Source directory of inference model')\n    parser.add_argument('--dst_dir', help='Dstination directory of inference model')\n    parser.add_argument('--model_filename', default=None, help='The name of model file')\n    parser.add_argument('--params_filename', default=None, help='The name of params file')\n    args = parser.parse_args()\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\n\nif __name__ == '__main__':\n    main()\n",
        "106": "def add_marks(marks, mark):\n return [m + mark for m in marks]",
        "107": "for i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")",
        "108": "def print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()",
        "109": "import smtplib\n\nsender_email = 'example@gmail.com'\npassword = 'example_password'\n\nfor email in recipient_emails:\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        server.ehlo()\n        server.starttls()\n        server.login(sender_email, password)\n\n        subject = 'Automated Email from Program'\n        message = 'Message body'\n \n        server.sendmail(sender_email, email, 'Subject: ' + subject + '\\n\\n' + message)\n        server.quit()\n        print('Email sent successfully.')",
        "110": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"",
        "111": "def num_common_chars(str1, str2):\n    common = 0\n    for c in str1:\n        if c in str2:\n            common += 1\n    return common",
        "112": "def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")",
        "113": "def primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True",
        "114": "def filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)",
        "115": "def dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head",
        "116": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef crawl(url):\n visited = set()\n queue = [url] \n \n while queue:\n curr = queue.pop(0)\n visited.add(curr) \n response = requests.get(curr)\n \n if response.ok:\n soup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the page here \n\n# find all the links\n links = soup.find_all('a', href=re.compile('^http')) \n \n for link in links:\n if link['href'] not in visited:\n queue.append(link['href'])",
        "117": "def get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) \/ num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))",
        "118": "def compoundInterest(investment_amount, rate_of_interest, time):\n    compound_interest = investment_amount * (pow((1 + rate_of_interest \/ 100), time))\n    return compound_interest\n\nci = compoundInterest(1000, 5, 5)\nprint(ci)",
        "119": "import sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")",
        "120": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Code \nprint(fibonacci(9))",
        "121": "def intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)",
        "122": "def smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)",
        "123": "def PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)",
        "124": "import numpy as np\n\ndef filter_out_negative(matrix):\n  # Convert matrix to numpy array\n  matrix = np.array(matrix)\n  # Find all negative numbers and set them to 0\n  matrix[matrix < 0] = 0\n  return matrix\n\nresult = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])\nprint(result)",
        "125": "import flask\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(name)\n\n@app.route('\/countries', methods=['GET'])\ndef get_countries():\nwith open('data.json', 'r') as f:\n countries = json.load(f)\n return jsonify(countries)\n\nif name == 'main':\n app.run()",
        "126": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL and the headers\nurl = '<url>'\nheaders = {'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/81.0.4044.138 Safari\/537.36'}\n\n# Make a request and get HTML in response\nresponse = requests.get(url, headers=headers)\n\n# Parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find all reviews\nreviews = soup.find_all('div', {'class': 'review-container'})\n\n# Go through every review and extract the data\nfor review in reviews:\n    # Get the title\n    title = review.find('span', {'class': 'noQuotes'}).text\n\n    # Get the text\n    text = review.find('p', {'class': 'partial_entry'}).text\n\n    # Print for demo\n    print(title)\n    print(text)\n    print('-' * 50)",
        "127": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')",
        "128": "def divide_in_two_equal_parts(lst):\n    target = sum(lst) \/\/ 2\n    part1 = []\n    part2 = []\n    left_sum = 0\n    right_sum = 0\n    \n    for num in lst:\n        if left_sum <= right_sum:\n            left_sum += num\n            part1.append(num)\n        else:\n            right_sum += num\n            part2.append(num)\n         \n    return part1, part2\n\npart1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7])\n\nprint(\"Part 1:\", part1)\nprint(\"Part 2:\", part2)",
        "129": "def test():\n    x = 5\n    y = 3\n    try:\n        z\n    except NameError:\n        print(\"NameError: Name 'z' is not defined\")",
        "130": "class IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)",
        "131": "def linearSearch(arr, value):\n  for i in range(len(arr)):\n    if arr[i] == value:\n      return i  # value found, return index\n  return -1  # value not found\n\narr = [5, 3, 7, 2]\nsearchValue = 7\n\nresult = linearSearch(arr, searchValue)\n\nif result == -1:\n  print(\"Element not found\")\nelse:\n  print(\"Element present at index\", result)",
        "132": "def remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)",
        "133": "def randomized_list(num_list):\n    for i in range(len(num_list)-1,0,-1):\n        j = random.randint(0,i)\n        num_list[i],num_list[j] = num_list[j],num_list[i]\n    return num_list",
        "134": "from tensorflow.keras.layers import Input, Dense, Embedding, GRU\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\n\n# Create inputs\ninputs1 = Input(shape=(20,))\nx1 = Embedding(1000, 64)(inputs1)\nx1 = GRU(128)(x1)\n\n# Create outputs\ny1 = Dense(1000, activation='softmax')(x1)\n\n# Create model\nmodel = Model(inputs=[inputs1], outputs=[y1])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit([inputs], [outputs],  epochs=10, batch_size=32)\n\n# Generate the response to the sample utterance\nquery = \"What time is it?\"\nprediction = model.predict(query)\n\nprint(prediction)",
        "135": "import requests\nimport bs4\n\nurl = 'https:\/\/www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)",
        "136": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "137": "import re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test<\/b> string<\/p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string",
        "138": "def num_unique_elements(arr):\n    unique_arr = set(arr)\n    return len(unique_arr)\n\nprint(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))",
        "139": "import requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https:\/\/www.news.com\/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)",
        "140": "for i in range(10):\n    print('Happy Holidays')",
        "141": "words = \"Hello \"\nwords2 = \"world!\"\n\ncombined = words + words2\nresult = combined[::-1]\n\nprint(result)",
        "142": "class BankAccount:\n    \n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return True\n        else:\n            return False\n        \n    def get_balance(self):\n        return self.balance",
        "143": "def sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_elem = min(unsorted_list)\n        unsorted_list.remove(min_elem)\n        sorted_list.append(min_elem)\n    return sorted_list",
        "144": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1,2,3,4,5]).reshape(-1,1)\nY = np.array([3,5,7,9,13])\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# Predicts the value of y\nprint(model.predict([[7]]))",
        "145": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)",
        "146": "def sort_by_attr(objects, attr):\n return sorted(objects, key=lambda item: item[attr])\n \nsort_by_attr([{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}], \"age\")",
        "147": "import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title<\/th><th>Author<\/th><th>Genre<\/th><th>Sales<\/th><\/tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}<\/td><td>{author}<\/td><td>{genre}<\/td><td>{sales}<\/td><\/tr>'\n\nhtml += '<\/table>'\n\n# display the results\nprint(html)",
        "148": "def filter_vowels(string):\n     vowels = ('a', 'e', 'i', 'o', 'u')\n     return ''.join(c for c in string if c not in vowels)",
        "149": "list_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]",
        "150": "def words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)",
        "151": "import collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1",
        "152": "string = \"Python\"\nprint(\"Length of the given string is:\", len(string))",
        "153": "\"\"\"\nCalculate the maximum possible revenue from the items with given weights and values\n\"\"\"\n\n# given  weights and values \nweights = [2, 1, 3] \nvalues = [4, 2, 3] \n\n# number of items \nn = len(weights) \n  \n# function to calculate the maximum revenue \ndef knapsack(weights, values, n): \n  \n    # total capacity of knapsack \n    W = 5\n  \n    # matrix to store solution matrix \n    K = [[0 for x in range(W+1)] for x in range(n+1)] \n  \n    # build the solution matrix in bottom up manner \n    for i in range(n+1): \n        for w in range(W+1): \n            if i==0 or w==0: \n                K[i][w] = 0\n            elif weights[i-1] <= w: \n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w]) \n            else: \n                K[i][w] = K[i-1][w] \n  \n    return K[n][W] \n  \nprint (knapsack(weights, values, n))",
        "154": "import re\nimport string\nfrom nltk.corpus import stopwords\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\ntweet_clean = re.sub(r'[^\\w\\s]','',tweet) #remove punctuation\ntokens = tweet_clean.split() #split string into individual words \nstop_words = set(stopwords.words(\"english\")) #get list of stopwords\nfiltered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords\nprint(filtered_tokens)",
        "155": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https:\/\/www.youtube.com\/feed\/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))",
        "156": "def find_mode(list):\n  max_count = 0\n  mode = list[0]\n  count = {}\n  for item in list:\n    if (item in count):\n      count[item] += 1\n    else:\n      count[item] = 1\n    if (count[item] > max_count):\n      max_count = count[item]\n      mode = item\n  return mode",
        "157": "from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('\/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()",
        "158": "def most_common_fruit(fruit_list):\n \n    # Dictionary to get count of each fruit\n    freq_dict = {}\n \n    # Count frequency of each fruit\n    for fruit in fruit_list:\n        if fruit in freq_dict:\n            freq_dict[fruit] += 1\n        else:\n            freq_dict[fruit] = 1\n \n    # Get maximum frequency \n    max_freq = 0\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n \n    # Get the most common fruit\n    most_common_fruit = None\n    for fruit, freq in freq_dict.items():\n        if freq == max_freq:\n            most_common_fruit = fruit\n            break\n \n    return most_common_fruit",
        "159": "result = \"A bird in the hand (17)is worth two in the bush (25)\"\n \ncode:\ninput_phrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n \nresult = \"\"\nfor phrase in input_phrases:\n result += phrase + ' (' + str(len(phrase)) + ')'\n \nprint(result)",
        "160": "def divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24",
        "161": "divisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')",
        "162": "<html>\n  <head>\n    <title>Employee Data<\/title>\n  <\/head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>Name<\/th>\n          <th>Job Title<\/th>\n          <th>Department<\/th>\n          <th>Salary<\/th>\n        <\/tr>\n      <\/thead>\n      <tbody>\n        <tr>\n          <td>John Doe<\/td>\n          <td>Senior Developer<\/td>\n          <td>IT<\/td>\n          <td>$120,000<\/td>\n        <\/tr>\n        <tr>\n          <td>Jane Doe<\/td>\n          <td>Manager<\/td>\n          <td>Finance<\/td>\n          <td>$95,000<\/td>\n        <\/tr>\n        <tr>\n          <td>Tim Smith<\/td>\n          <td>Junior Developer<\/td>\n          <td>IT<\/td>\n          <td>$55,000<\/td>\n        <\/tr>\n      <\/tbody>\n    <\/table>\n  <\/body>\n<\/html>",
        "163": "def select_approved_rows():\n   sql = \"SELECT * FROM table WHERE status = 'approved'\"\n   cur.execute(sql)\n   return cur.fetchall()",
        "164": "from random import choice\nimport string\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password = ''.join(choice(chars) for i in range(8))\n    if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n        return password\n    else: \n        return generate_password()\n\nif __name__ == '__main__':\n    print(generate_password())",
        "165": "# install the module \n# in command prompt\npip install googletrans\n\n# import module\nfrom googletrans import Translator\n\n# create an object\ntranslator = Translator()\n\n# define text\ntext = \"Hello, this is a sample text to translate.\"\n\n# call the function and pass the text\ntranslation = translator.translate(text, dest='fr') \n\n# print the translation \nprint(translation.text)",
        "166": "# Python program to generate \n# a unique 6 digit number \nimport random \ndef generate_number(): \n      \n    # Choose a random number \n    # between 10000 and 99999 \n    random_number = random.randint(10000, 99999) \n  \n    # Return the random number \n    return random_number \n  \n# Driver Code \nif __name__ == \"__main__\": \n    print(generate_number())",
        "167": "import random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)",
        "168": "def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))",
        "169": "class StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }",
        "170": "import dialogflow_v2 as dialogflow\nimport requests\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(project_id, 'session-id')\n\nwhile True:\n text = input('User: ')\n text_input = dialogflow.types.TextInput(text=text, language_code='en-US')\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n\n print('Assistant:', response.query_result.fulfillment_text)",
        "171": "def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)",
        "172": "response = {\n  \"status\": 200,\n  \"data\": {\"name\": \"John\",\"age\":28},\n  \"message\": \"Success\"\n}",
        "173": "from selenium import webdriver\n\n# create a new Firefox session\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(30)\ndriver.maximize_window()\n\n# navigate to the application home page\ndriver.get(\"https:\/\/www.example.com\/\")\n\n# get the search textbox\nsearch_field = driver.find_element_by_name(\"q\")\nsearch_field.clear()\n\n# enter search keyword and submit\nsearch_field.send_keys(\"shoes\")\nsearch_field.submit()\n\n# get the list of elements which are displayed after the search\n# currently on result page using find_elements_by_class_name\nproduct_list = driver.find_elements_by_class_name(\"product\")\n\n# iterate through each element and print the text that is\n# name of the product\nfor product in product_list:\n    print(product.text)\n\n# close the browser window\ndriver.quit()",
        "174": "import requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http:\/\/web-store.com').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Get the product data\nproducts = soup.find_all('div', attrs={\"itemprop\": \"product\"})\nfor product in products:\n    name = product.find(\"span\", attrs={\"itemprop\": \"name\"}).text\n    price = product.find(\"span\", attrs={\"itemprop\": \"price\"}).text\n    description = product.find(\"span\", attrs={\"itemprop\": \"description\"}).text\n    print(name, price, description)",
        "175": "def fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(6)) \/\/ 8",
        "176": "class StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance \/ max_length < threshold",
        "177": "import numpy as np\nfrom sklearn.metrics import accuracy_score\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\n# Calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy: \" + str(accuracy))",
        "178": "def replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))",
        "179": "import math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n\/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))",
        "180": "def element_exists(elem, list_int):\n  return elem in list_int",
        "181": "MORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '\/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -..",
        "182": "def sort_list(array): \n    n = len(array) \n  \n    for i in range(n): \n  \n        min_idx = i \n        for j in range(i+1, n): \n            if array[min_idx] > array[j]: \n                min_idx = j \n        array[i], array[min_idx] = array[min_idx], array[i]\n\nif __name__ == \"__main__\":\n    array = [4, 2, 6, 7, 1]\n    sort_list(array)\n    print(array)",
        "183": "def removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]",
        "184": "# Python program to scrape a webpage\nimport requests as req \nfrom bs4 import BeautifulSoup \n  \nURL = \"http:\/\/www.example.com\/\"\n  \n# GET request \nr = req.get(URL) \n  \n# parse the downloaded homepage and grab all text\nsoup = BeautifulSoup(r.text, \"html.parser\") \n  \n# find and print all links \nlinks = soup.find_all('a') \nfor link in links: \n    print(link.get('href'))",
        "185": "dictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\n\ndef delete_key(dic, k):\n  if k in dic:\n    del dic[k]\n\ndelete_key(dictionary, key)\n\nprint(dictionary)",
        "186": "The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: \n\ndef expand_list(list):\n    list_copy = list[:]   # make a copy of the list\n    for item in list_copy:\n        list *= 2",
        "187": "def reverse_words(string):\n  words = string.split(\" \")\n  reversed_words = []\n  for word in words:\n    reversed_words.insert(0, word)\n  return ' '.join(reversed_words)\n\nstring = 'This is a sentence.'\nreverse_words = reverse_words(string)\nprint(reverse_words)",
        "188": "def foo(a, b):\n return a + b",
        "189": "strings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)",
        "190": "import re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)",
        "191": "import string\nimport random\n\nlength = 8\nchars = string.ascii_uppercase + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint (password)",
        "192": "#!\/usr\/bin\/python\n\n# Malwina Prater, mn367@cam.ac.uk,  2017, Copyright\n# Centre for Trophoblast Research, University of Cambridge\n#\n# Script version: v01.\n#\n# Script to calculate the percent of transcripts mapping to rRNA\n#\n#  INPUTS :\n# 1. HTseq_counts file\n# 2. Original reference transcriptome alignned to\n#\n#  USAGE :    \n#  For producing table(s) with rRNA and MT counts for each sample use commands like that:\n#\n#    .\/rRNA_MT_count.py --gtf \/Users\/malwina\/Documents\/CTR-Data\/genomes\/Mus_musculus\/mm10\/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt\n#\n\n\n# import modules: \nimport os,sys\nfrom optparse import OptionParser\nimport re\n\n# parse in the user options:\n\nparser = OptionParser(usage=\"%prog [-x Excel [-i imagefile] [-s squares]\",\n                      version=\"%prog 0.1\")\n\nparser.add_option(\"--htseq\", dest=\"FileName\", type=\"string\", action=\"store\")\nparser.add_option(\"--gtf\", dest=\"GTF\", type=\"string\", action=\"store\")\n\n(options, args) = parser.parse_args()\n\n\n#files = sys.argv[]\nHTSEQ_COUNTS = options.FileName\nGTF = options.GTF\n\n\n# check if files supplied exist:\ntry:\n    handle = open(GTF, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tGTF File: %s does not exist\\n\" % GTF\n    sys.exit()\n\ntry:\n    handle = open(HTSEQ_COUNTS, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tFile: %s does not exist\\n\" % HTSEQ_COUNTS\n    sys.exit()\n\n\n#\n# First job is to extract all the identifiers of genes\/transcripts mapping to the rRNA and MT genes and store in 2 arrays\n#\n\nrRNA_identifiers = {}\nMT_identifiers = {}\n\n\nwith open(GTF, \"rU\") as handle:\n    #line = handle.readline()\n    for line in handle:\n    \tline.rstrip('\\n')\n    \tif 'gene_biotype \"rRNA\"' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            rRNA_identifiers[identifier] = 1\n        if 'MT' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            MT_identifiers[identifier] = 1    \nhandle.close()    \n\n#print(\"rRNA:\")\n#print(rRNA_identifiers.keys())\n#print(\"MT:\")\n#print(MT_identifiers.keys())\n\n\n#\n# Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers\n#\nCummulative_rRNA_Count = 0\nrRNA_genes = 0\nReadCount = 0\nline_number = 0\nMT_genes = 0;\nCummulative_MT_Count = 0;\n\nwith open(HTSEQ_COUNTS, \"rU\") as handle:\n    for line in handle:\n    \tline.rstrip('\\n')            \n\n        split_line = line.split(\"\\t\")\n        if line_number > 0:\n       \t    if split_line[0] in rRNA_identifiers.keys():  # if rRNA_identifiers[gene_id]\n                rRNA_genes += 1\n                Cummulative_rRNA_Count += int(split_line[1])\n            if split_line[0] in MT_identifiers.keys():\n                MT_genes += 1\n                Cummulative_MT_Count += int(split_line[1])\n            ReadCount += int(split_line[1])\n        line_number += 1\nhandle.close()    \n#print(Cummulative_MT_Count)\n#print(Cummulative_rRNA_Count)\n\n\n#\n# wiritng the output files:\n#              \nout = HTSEQ_COUNTS + '_rRNAmtRNACounts.txt'; \nout = re.sub('.txt_', '_', out)\n\nprint \"Summary output file:\t\t\", out, \"\\n\"\n\nOUT = open(out, \"w\")\nOUT.write('HT-SEQ file name: \\t' + HTSEQ_COUNTS + '\\n\\n')\nOUT.write('GTF file name: \\t\\t' + GTF + '\\n\\n\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('  rRNA and MT identifiers\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('No. of rRNA identifiers: ' + str(len(rRNA_identifiers.keys())) + '\\n') # PRINT size of this hash\nOUT.write('No. of MT identifiers: ' + str(len(MT_identifiers.keys())) + '\\n') # PRINT size of this hash\nOUT.write('\\n\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('  HTSEQ mapping summary\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('ReadCount: ' + str(ReadCount) + '\\n\\n')\n#OUT.write('  Number of rRNA genes: ' + str(rRNA_genes) + '\\n')\nOUT.write('Total no. of rRNA transcripts: ' + str(Cummulative_rRNA_Count) + '\\n')\nperc_rRNA = 100*float(Cummulative_rRNA_Count)\/float(ReadCount)\nperc_rRNA = str(round(perc_rRNA, 3))\nOUT.write('Percent rRNA mapped reads: ' + str(Cummulative_rRNA_Count) + ' \/ ' + str(ReadCount) + ' * 100 = ' + perc_rRNA + '%\\n\\n')\n#OUT.write('\\n  Number of MT genes: ' + str(MT_genes) + '\\n')\nOUT.write('Total no. of MT transcripts: ' + str(Cummulative_MT_Count) + '\\n')\nperc_MT = 100*float(Cummulative_MT_Count)\/float(ReadCount)\nperc_MT = str(round(perc_MT, 3))\nOUT.write('Percent MT mapped reads: ' + str(Cummulative_MT_Count) + ' \/ ' + str(ReadCount) + ' * 100 = ' + perc_MT + '%\\n\\n')\nOUT.close()\n\n\n",
        "193": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5",
        "194": "import requests\nimport re\n\nurl = \"https:\/\/www.youtube.com\/user\/Thexvid\/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"\/watch\\?v=([^\"]+)\">(.+?)<\\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])",
        "195": "# get the list of contents\nimport os\ndirectory_contents = os.listdir()\n\n# print the contents\nfor content in directory_contents:\n    print(content)",
        "196": "# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))",
        "197": "def is_subsequence(str1, str2):\n    i = 0\n    j = 0\n\n    while(i < len(str1) and j < len(str2)):\n        if str1[i] == str2[j]:\n            i += 1\n        j += 1\n\n    return i == len(str1)",
        "198": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out",
        "199": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')",
        "200": "def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46",
        "201": "import re\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']",
        "202": "#! \/usr\/bin\/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http:\/\/jsru.kb.nl\/sru\/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http:\/\/www.loc.gov\/zing\/srw\/'\ntel_ns = 'http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html'\nxsi_ns = 'http:\/\/www.w3.org\/2001\/XMLSchema-instance'\ndc_ns = 'http:\/\/purl.org\/dc\/elements\/1.1\/'\ndcterms_ns = 'http:\/\/purl.org\/dc\/terms\/'\ndcx_ns = 'http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():\n            if r.tag == tagName:\n                if attributeName != '':\n                    try:\n                        if r.attrib[attributeName] == attributeValue:\n                            textFields.append(r.text)\n                    except KeyError:\n                        pass\n                else:\n                    textFields.append(r.text)\n        return textFields\n\n    @property\n    def records(self):\n        if self.sru.nr_of_records == 0:\n            record_data = \"<xml><\/xml>\"\n        else:\n            ns = {'zs': 'http:\/\/www.loc.gov\/zing\/srw\/'}\n            record_data = self.record_data.xpath(\"zs:records\/zs:record\",\n                                                 namespaces=ns)[0]\n        return record(record_data, self.sru)\n\n    # Below property functions all return a list with all instances that satisfy\n    # criteria\n\n    @property\n    def typesDutch(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}type',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'nl'))\n\n    @property\n    def typesDCMI(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}type',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'DCMIType'))\n\n    @property\n    def identifiersISBN(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:ISBN'))\n\n    @property\n    def identifiersBrinkman(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def identifiersURI(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def identifiersOCLC(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'OCLC'))\n\n    @property\n    def languagesDutch(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'nl'))\n\n    @property\n    def languagesEnglish(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'en'))\n\n    @property\n    def languagesFrench(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'fr'))\n\n    @property\n    def languagesISO639(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:ISO639-2'))\n\n    @property\n    def dates(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}date',\n                                   '',\n                                   ''))\n\n    @property\n    def extents(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/terms\/}extent',\n                                   '',\n                                   ''))\n\n    @property\n    def creators(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}creator',\n                                   '',\n                                   ''))\n\n    @property\n    def contributors(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}contributor',\n                                   '',\n                                   ''))\n\n    @property\n    def titles(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '',\n                                   ''))\n\n    @property\n    def titlesMain(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:maintitle'))\n\n    @property\n    def titlesIntermediate(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:intermediatetitle'))\n\n    @property\n    def publishers(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}publisher',\n                                   '',\n                                   ''))\n\n    @property\n    def countries(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}country',\n                                   '',\n                                   ''))\n\n    @property\n    def subjectsBrinkman(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def subjectsISO9707(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'ISO_9707_[Brinkman]'))\n\n    @property\n    def subjectsUNESCO(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'UNESCO'))\n\n    @property\n    def collectionIdentifiers(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/terms\/}isPartOf',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:collectionIdentifier'))\n\n    @property\n    def recordIdentifiersURI(self):\n        return(self.getElementText('{http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html}recordIdentifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def annotations(self):\n        # Note that annotations sometimes contain language or itenID attibutes;\n        # ignored for now (collect everything).\n        return(self.getElementText('{http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html}annotation',\n                                   '',\n                                   ''))\n\n\nclass record():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def __iter__(self):\n        return self\n\n    # This works under Python 2.7\n    def next(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n    # This works under Python 3\n    def __next__(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n\nclass sru():\n    DEBUG = False\n\n    collection = False\n    maximumrecords = 50\n    nr_of_records = 0\n    query = \"\"\n    recordschema = False\n    sru_collections = SETS\n    startrecord = 0\n\n    def search(self, query, collection=False,\n               startrecord=1, maximumrecords=1, recordschema=False):\n\n        self.maximumrecords = maximumrecords\n        if sys.version.startswith('3'):\n            self.query = urllib.parse.quote_plus(query)\n        elif sys.version.startswith('2'):\n            self.query = urllib.quote_plus(query)\n        self.startrecord = startrecord\n\n        if collection not in self.sru_collections:\n            raise Exception('Unknown collection')\n\n        self.collection = self.sru_collections[collection]['collection']\n\n        if not self.collection:\n            raise Exception('Error, no collection specified')\n\n        if not recordschema:\n            self.recordschema = self.sru_collections[collection]['recordschema']\n        else:\n            self.recordschema = recordschema\n\n        record_data = self.run_query()\n\n        nr_of_records = [i.text for i in record_data.iter() if\n                         i.tag.endswith('numberOfRecords')][0]\n\n        self.nr_of_records = int(nr_of_records)\n\n        if self.nr_of_records > 0:\n            return response(record_data, self)\n\n        return False\n\n    def run_query(self):\n        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,\n                             self.recordschema, self.collection, self.query)\n        if self.DEBUG:\n            sys.stdout.write(url)\n\n        r = requests.get(url)\n\n        if not r.status_code == 200:\n            raise Exception('Error while getting data from %s' % url)\n\n        record_data = etree.fromstring(r.content)\n\n        return record_data\n",
        "203": "import numpy as np\n\ndef runningTotal(arr):\n    return np.cumsum(arr)",
        "204": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n \n# Load the data\ndata = pd.read_csv('data.csv')\n \n# Split the data into features and labels\nX = data.drop(['label'], axis=1).values\ny = data['label'].values\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Create the neural network\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(12, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n \n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n \n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)\n \n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test score:', score)",
        "205": "def string_to_list(s1, s2):\n    s1_list = s1.split()\n    s2_list = s2.split()\n    output_list = s1_list + s2_list\n    return output_list\n\nwords = string_to_list(\"I want to make a difference\", \"The journey to success is long\")\nprint(words)",
        "206": "import requests \nfrom bs4 import BeautifulSoup \n  \n# URL to scrap \nURL = 'http:\/\/example.com\/news'\n  \n# get the source code \nhtml_content = requests.get(URL).text \n  \n# parse the html content \nsoup = BeautifulSoup(html_content, \"lxml\") \n  \n# get all the articles  \narticles = soup.find_all('article') \n  \n# print the first 10 articles \nfor article in articles[:10]: \n    print(article.text)",
        "207": "def html_to_text(html_string):\n    output = ''\n    in_tag = False\n    for char in html_string:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            output += char\n    return output",
        "208": "\"\"\"\nConvert the given temperature from Celsius to Fahrenheit\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9\/5) + 32\n    return fahrenheit\n\nif __name__ == '__main__':\n    celsius = 0\n    print(celsius_to_fahrenheit(celsius))",
        "209": "list1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list)",
        "210": "import time\nimport heuristics_algorithm1\nimport heuristics_algorithm2\n\n#input data for algorithms\ndata1 = ...\ndata2 = ...\n\n#Evaluate and compare the performance of two different heuristics algorithms\nstart = time.time()\nresult1 = heuristics_algorithm1.run(data1)\nend = time.time()\ntime1 = end - start\n\nstart = time.time()\nresult2 = heuristics_algorithm2.run(data2)\nend = time.time()\ntime2 = end - start\n\nif time1 < time2:\n    print(\"Algorithm 1 is faster than algorithm 2\")\nelif time2 < time1:\n    print(\"Algorithm 2 is faster than algorithm 1\")\nelse:\n    print(\"Both algorithms have the same performance time\")",
        "211": "def compute_dict_sum(input_dict):\n    result = 0\n    for val in input_dict.values():\n        result += val\n    return result\n\nprint(compute_dict_sum(my_dict))",
        "212": "def filter_even_numbers(lst):\n    # Filter out even numbers from the given list \n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(list)\nprint(result)",
        "213": "import nltk\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs)",
        "214": "#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)",
        "215": "import json \nimport sqlite3\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__) \n  \ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d \n  \n@app.route('\/', methods=['GET'])\ndef index(): \n    connection = sqlite3.connect('database.db')\n    connection.row_factory = dict_factory\n    cur = connection.cursor() \n    all_users = cur.execute('SELECT * FROM users;').fetchall() \n    return jsonify(all_users) \n  \nif __name__ == '__main__': \n    app.run(debug = True)",
        "216": "def count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",
        "217": "import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)",
        "218": "def optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))",
        "219": "def get_word_lists(strings):\n    word_lists = []\n    for string in strings:\n        words = string.split(\" \")\n        word_list = []\n        for i in range(len(words)):\n            word_list.append(words[i:])\n        word_lists.append(word_list)\n    return word_lists\n\nword_lists = get_word_lists([\"Hello world\", \"This is a test\"])\nprint(word_lists) # prints \"[[\"Hello\", \"world\"], [\"This\", \"is\", \"a\", \"test\"]]\"",
        "220": "The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))",
        "221": "#!\/bin\/bash\n\n# Download latest version of Python\ncurl -O https:\/\/www.python.org\/ftp\/python\/3.8.5\/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n.\/configure\n\n# Compile and install\nmake\nmake install",
        "222": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]",
        "223": "def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)",
        "224": "def most_common(nums):\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements\n    for num in nums:\n        # If the element is not present in the dictionary, add it\n        if num not in counts:\n            counts[num] = 0\n\n        # Update the count\n        counts[num] += 1\n\n    # Get the maximum count\n    max_count = max(counts.values())\n\n    # Return the elements that have maximum count\n    return [num for num, count in counts.items() if count == max_count]",
        "225": "array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50",
        "226": "import re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score",
        "227": "filtered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]",
        "228": "def insertion_sort(arr):\n for i in range(1, len(arr)):\n key = arr[i]\n j = i -1\n while j >= 0 and key < arr[j] :\n    arr[j + 1] = arr[j]\n    j = j - 1\n arr[j + 1] = key\n\nreturn arr",
        "229": "def insertionSort(arr):\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj =i-1\n\t\twhile j>=0 and arr[j]>current:\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj-=1\n\t\tarr[j+1] = current\n\treturn arr\n\nif __name__ == '__main__':\n\tarr = [2, 4, 7, 3, 8, 6, 1]\n\tprint(insertionSort(arr))",
        "230": "def eval_expr(expr):\n   return eval(expr)",
        "231": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data)",
        "232": "def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c",
        "233": "from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:\/\/\/test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(200))\n  content = db.Column(db.Text)\n\n  def __repr__(self):\n    return '<BlogPost %r>' % self.title\n\n@app.route('\/post', methods=['POST'])\ndef create_post():\n  data = request.get_json()\n  post = BlogPost(title=data['title'], content=data['content'])\n  db.session.add(post)\n  db.session.commit()\n  return jsonify(post.id)\n\n@app.route('\/posts', methods=['GET'])\ndef get_posts():\n  posts = BlogPost.query.all()\n  return jsonify([post.serialize() for post in posts])\n\n@app.route('\/post\/<id>', methods=['GET'])\ndef get_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  return jsonify(post.serialize())\n\n@app.route('\/post\/<id>', methods=['PUT'])\ndef edit_post(id):\n  data = request.get_json()\n  post = BlogPost.query.filter_by(id=id).first()\n  post.title = data['title']\n  post.content = data['content']\n  db.session.commit()\n  return jsonify(post.serialize())\n\n@app.route('\/post\/<id>', methods=['DELETE'])\ndef delete_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  db.session.delete(post)\n  db.session.commit()\n  return jsonify({ 'message' : 'Post deleted' })\n\nif __name__ == '__main__':\n  app.run(debug=True)",
        "234": "#include <iostream>\n#include <math.h>\n\nint main() \n{ \n    int x1 = 3; \n    int y1 = 4; \n\n    int x2 = -9; \n    int y2 = -2;\n\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \n\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \n\n    return 0; \n}",
        "235": "import random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!')",
        "236": "import requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None",
        "237": "def is_prime(n):\n # check if n is divisible by any of the numbers\n # between 2 and n-1\n for i in range(2, n):\n if n % i== 0:\n return False\n\n return True \n\ndef check_lst(lst):\n # generate a list of booleans \n # where each element corresponds to the corresponding\n # element of lst\n result_lst = []\n for i in range(len(lst)):\n if is_prime(lst[i]):\n result_lst.append(True)\n else:\n result_lst.append(False)\n\n return result_lst\n\nlst = [7, 8, 12, 19, 22, 23]\nprint(check_lst(lst))\n\n# Output: \n# [True, False, False, True, False, True]",
        "238": "def top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))",
        "239": "my_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)",
        "240": "import requests\n\nurl = 'https:\/\/api.example.com\/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application\/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user)",
        "241": "import re \n  \n# input string \nstrings = [\"First\",\"Second\",\"Third\"]\n\n# Get the string \ninp_str = input(\"Please enter your string :\") \n\n# Initialize the flag \nfound = False\n  \n# Search the string \nfor i in strings: \n    if re.search(i, inp_str):\n        found = True\n\n# Print result \nif found == True: \n    print(\"String matches\") \nelse: \n    print(\"String doesn't matches\")",
        "242": "def to_lower(string):\n    return string.lower()",
        "243": "items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value)",
        "244": "def primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7]",
        "245": "# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)",
        "246": "\/\/ A Naive recursive Python \n\/\/ program for 0-1 Knapsack problem \n \n# Returns the maximum value  \n# that can be put in a knapsack of  \n# capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more \n    # than Knapsack capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n  \n# end of function knapSack",
        "247": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)",
        "248": "def insertion_sort(list):\n    for i in range(1,len(list)):\n        key = list[i]\n        j = i - 1\n        while j>=0 and key < list[j]:\n            list[j+1] = list[j]\n            j-=1\n        list[j+1] = key\n    return list",
        "249": "import random \n  \n  \n# All the possible characters \n# that could go into the password \nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n  \n# Using the choice function of the \n# random module choose any \n# character randomly from the set of characters \npassword =  \"\".join(random.sample(string, 8)) \nprint(password)",
        "250": "import random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)]",
        "251": "Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself.",
        "252": "from flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef home():\n return render_template('index.html')\n\n@app.route('\/submit', methods=['POST'])\ndef submit():\n name = request.form.get('name')\n email = request.form.get('email')\n phone = request.form.get('phone')\n \n conn = sqlite3.connect('data.db')\n cur = conn.cursor()\n \n cur.execute(\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\", (name, email, phone))\n conn.commit()\n \n return redirect('\/')\n\t\nif __name__ == '__main__':\n app.run(debug=True)",
        "253": "def transpose(A):\n n = len(A)\n m = len(A[0])\n\n B = [[0 for x in range(n)] for x in range(m)]\n\n for i in range(n):\n for j in range(m):\n B[j][i] = A[i][j]\n\n return B",
        "254": "def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))",
        "255": "def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum",
        "256": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http:\/\/www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close()",
        "257": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)",
        "258": "import sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()",
        "259": "# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]",
        "260": "numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')",
        "261": "def vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x",
        "262": "import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn)",
        "263": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show()",
        "264": "import random\n\ndef populateArray(array_length):\n array = []\n for i in range(array_length):\n array.append(random.randint(1, 100))\n return array",
        "265": "from collections import Counter\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Split the text into individual words\nwords = text.split()\n\n# Create a counter object\ncounter = Counter(words)\n\n# Get the top 10 most frequent words\ntop_words = counter.most_common(10)\n\nprint(top_words)\n\n# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]",
        "266": "def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result",
        "267": "def longest_common_substring(str1, str2):\n    match = 0\n    substr = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            l = 0\n            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):\n                l += 1\n            if l > match:\n                substr = str1[i:i + l]\n                match = l\n    return substr\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result)",
        "268": "def serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True\n  return False",
        "269": "def parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)",
        "270": "import random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6)",
        "271": "def averageMatrix(matrix):\n sum = 0\n for row in matrix:\n  for e in row:\n   sum += e\n\n return sum \/ (len(matrix) * len(matrix[0]))\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(averageMatrix(a)) # 4.77",
        "272": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num \/\/ 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010",
        "273": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))",
        "274": "def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)",
        "275": "import hashlib\nimport json\n\n# Define the Block class\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n # Create the hash of the block contents\n def hash_block(self):\n sha = hashlib.sha256()\n sha.update((str(self.index) + \n str(self.timestamp) + \n str(self.data) + \n str(self.previous_hash)).encode('utf-8'))\n return sha.hexdigest()\n\n# Create the blockchain\ndef create_blockchain():\n blockchain = [create_genesis_block()]\n previous_block = blockchain[0]\n\n # Add blocks for each item in the list of transactions\n for i in range(1, len(blockchain_transactions)):\n block_to_add = next_block(previous_block, blockchain_transactions[i])\n blockchain.append(block_to_add)\n previous_block = block_to_add\n\n# Print the blockchain\ndef print_blockchain():\n for block in blockchain:\n block_index = str(block.index)\n block_timestamp = str(block.timestamp)\n block_data = str(block.data)\n block_hash = block.hash",
        "276": "def findGCD(a, b): \n   if (b == 0): \n       return a\n   return findGCD(b, a % b)\n    \na = 1000\nb = 500\nprint(\"GCD of number is: \", findGCD(a, b))",
        "277": "def count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count",
        "278": "def str_to_float(ratings):\n    return [float(x) for x in ratings]",
        "279": "def caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for c in message:\n        encrypted_c = ord(c) + shift\n        if encrypted_c > 126:\n            encrypted_c -= 94\n        encrypted_message += chr(encrypted_c)\n    return encrypted_message",
        "280": "my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)",
        "281": "# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))",
        "282": "x = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y)",
        "283": "def removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray",
        "284": "from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']",
        "285": "def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "286": "import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)",
        "287": "\"\"\"\nThis code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.\n\"\"\"\n\ndef predict_temperature(temperature_list):\n    alpha = 0.5 #Confidence value\n    predicted_temperature = temperature_list[-1] # Initializing prediction\n    for temperature in temperature_list[:-1]:\n        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature\n    return predicted_temperature\n\nif __name__ == '__main__':\n    temperature_list = [21, 22, 20]\n    print(predict_temperature(temperature_list))",
        "288": "def sortDictionary(dictionary):\n  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n  sorted_dictionary = dict(sorted_list)\n  return sorted_dictionary\n\nsorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})\nprint(sorted_dictionary)",
        "289": "def multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)",
        "290": "def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "291": "def swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp",
        "292": "def reverse_list(list): \n    return list[::-1]",
        "293": "def build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)",
        "294": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum \/ len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))",
        "295": "def common_elements(list1, list2): \n    common_list=[]\n    for element in list1: \n        if element in list2: \n            common_list.append(element) \n    return common_list\n  \nlist1 = [1, 2, 3, 4, 8] \nlist2 = [2, 6, 8, 10]\n\ncommon_list = common_elements(list1, list2) \n\nprint(common_list)",
        "296": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)",
        "297": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Preprocessing\ndf = pd.read_csv('transactions.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Model Training\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Prediction\ncustomer_input = np.array([[10,100,5,...]]) # provide data related to past transactions\ntrans_scaled = scaler.transform(customer_input)\npredicted_LTV = model.predict(trans_scaled)[0]\nprint('Predicted customer lifetime value', predicted_LTV)",
        "298": "def find_pair(lst, target):\n    for i in range(len(lst)):\n        if (target - lst[i]) in lst[i+1:]:\n            return [lst[i], target-lst[i]]\n\nfind_pair([1,2,3,4,4,5,6], 8)",
        "299": "class Matrix: \n    def __init__(self, m, n, lst): \n        self.m = m             \n        self.n = n             \n        self.mat = [] \n  \n        c = 0\n        for i in range(self.m): \n            a =[] \n            for j in range(self.n): \n                    a.append(lst[c]) \n                    c += 1\n            self.mat.append(a) \n  \n    def __str__(self): \n        output = \"\"\n        for i in self.mat: \n            for j in i: \n                output += str(j) + \" \"\n            output += '\\n'\n        return output \n  \n    def add(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] += mat2.mat[i][j] \n  \n    def sub(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] -= mat2.mat[i][j]\n    \n    def mul(self, mat2): \n        result = [] \n        for i in range(self.m): \n            a =[] \n            for j in range(mat2.n): \n                s = 0\n                for k in range(self.n): \n                    s += self.mat[i][k] * mat2.mat[k][j] \n                a.append(s) \n            result.append(a) \n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) \n  \n    def transpose(self):\n        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]\n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0])",
        "300": "import random\n\nrandom_num = random.randint(0,9)\nprint(random_num)",
        "301": "#!\/usr\/bin\/env python\n# coding=utf-8\nimport requests\nimport urllib2\nimport json\nimport os\nfrom flask import Flask\nfrom flask import request\nfrom flask import make_response\nfrom bs4 import BeautifulSoup \n\n\n# Flask app should start in global layout\napp = Flask(__name__)\n\n\n@app.route('\/webhook', methods=['POST'])\ndef webhook():\n\treq = request.get_json(silent=True, force=True)\n\tres = makeWebhookResult(req)\n    \tres = json.dumps(res, indent=4)\n    \tprint(res)\n    \tr = make_response(res)\n    \tr.headers['Content-Type'] = 'application\/json'\n    \treturn r\n\ndef makeWebhookResult(req):\n\tresult = req.get(\"result\")\n\tparameters = result.get(\"parameters\")\n\t\n\tif req.get(\"result\").get(\"action\") == \"productos.sura\":\n        \tcliente = parameters.get(\"tipo_cliente\")\n       \t\tspeech = \"Buscando productos para \" + cliente\n\t\t\n\telif req.get(\"result\").get(\"action\") == \"producto.info\":\n        \tproducto = parameters.get(\"producto\")\n\t\tif (producto==\"hogar\"):\n\t\t\turl = \"https:\/\/www.sura.com\/soluciones-personas\/seguro-hogar.aspx\"\n\t\t\tr = urllib2.urlopen(url).read()\n\t\t\tsoup = BeautifulSoup(r, 'html.parser')\n\t\t\tprint soup\n\t\t\tcontenido = soup.find_all(\"div\",class_=\"textRightColumn\")\n\t\t\tif (len(contenido)==0):\n\t\t\t\tspeech = \"No encontrado\"\n\t\t\telse:\n\t\t\t\tspeech = contenido[0]\n\t\t\t\n\t\telse:\n       \t\t\tspeech = \"Buscando informacion del producto \" + producto\n        \n    \telif req.get(\"result\").get(\"action\") == \"planes.salud\":\n        \turl = \"https:\/\/api.segurossura.com.co\/public\/v1\/directory\/products\"\n        \tmyResponse = requests.get(url)\n\n        \tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\t\n\t\tspeech = \"Seguros Sura Colombia ofrece los siguientes planes de salud: \\n\"\n\t\t\n        \tfor plan in jData:\n\t       \t\tspeech = speech + \"\\n\" + plan[\"nombreField\"].title()\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"info.especialistas\":\n\t\tproducto = parameters.get(\"plan-salud\")\n\t\tciudad = parameters.get(\"ciudad\")\n\t\tespecialidad = parameters.get(\"especialidad\")\n\t\t\n\t\turl = \"https:\/\/api.segurossura.com.co\/public\/v1\/directory\/search\/\" + producto + \"\/\" + ciudad + \"?speciality=\" + especialidad + \"&firstname=&secondname=&firstlastname=&secondlastname=\"\n\t\tmyResponse = requests.get(url)\n\n\t\tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\n\t\tspeech = \"Los profesionales que coinciden con tu busqueda son: \\n\"\n\n\t\tfor medico in jData:\n\t       \t\tspeech = speech + \"\\n\" + medico[\"nombreField\"] + \"\\n Direccion: \" + medico[\"direccionField\"].title() + \"\\n Telefono: \" + medico[\"telefonoField\"] + \"\\n\"\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"coberturas.producto\":\n\t\tproducto = parameters.get(\"productos\")\n\t\tspeech = \"Buscando coberturas del producto: \" + producto\n\telse:\n        \tspeech =\" \"\n\n\treturn {\n        \"speech\": speech,\n        \"displayText\": speech,\n        #\"data\": {},\n        # \"contextOut\": [],\n        \"source\": \"apiai-onlinestore-shipping\"\n    \t}\n\n\nif __name__ == '__main__':\n\tport = int(os.getenv('PORT', 5000))\n   \tprint \"Starting app on port %d\" % port\n   \tapp.run(debug=True, port=port, host='0.0.0.0')\n",
        "302": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")",
        "303": "# Create the states\nstate0 = {\n     'name': 'state0',\n     'message': 'Hello! How can I help you?',\n     'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'}\n}\n\nstate1 = {\n     'name': 'state1',\n     'message': 'Sure, what kind of advice do you need?',\n     'replies': {'Career advice': 'state3','Health advice': 'state4'}\n}\n\nstate2 = {\n     'name': 'state2',\n     'message': 'Yes, I'll do my best! What do you want to know?',\n     'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'}\n}\n\nstate3 = {\n     'name': 'state3',\n     'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.',\n     'replies': {}\n}\n\nstate4 = {\n     'name': 'state4',\n     'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.',\n     'replies': {}\n}\n\nstate5 = {\n     'name': 'state5',\n     'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.',\n     'replies': {}\n}\n\nstate6 = {\n     'name': 'state6',\n     'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.',\n     'replies': {}\n}\n\n\n# Initialize the state\ncurrent_state = state0\n\n# Keep a record of conversation\nconversation = []\n\nwhile True:\n # Print the current state message\n print(current_state['message'])\n conversation.append(current_state['message'])\n\n # Get the user input\n user_input = input('>> ')\n conversation.append(user_input)\n\n # Update the state\n if user_input in current_state['replies']:\n  current_state = eval(current_state['replies'][user_input])\n else:\n  print(\"I don't understand what you mean. Please try again.\")\n\n# End the conversation when the state is terminal\n if not bool(current_state['replies']):\n  print('Goodbye!')\n  break\n\nprint(\"=========================\")\nprint(\"Conversation:\")\nfor message in conversation:\n print(message)",
        "304": "number = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))",
        "305": "def first_non_repeating_char(lst):\n    dct = {}\n    \n    for l in lst:\n        if l in dct:\n            dct[l] += 1\n        else:\n            dct[l] = 1\n            \n    for l in lst:\n        if dct[l] == 1:\n            return l\n            \n    return None\n\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\nprint(first_non_repeating_char(lst))",
        "306": "import numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids",
        "307": "for i in range(7):\n    for j in range(7):\n        if (i + j) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()",
        "308": "class SumOfDigits:\n    \n    def __init__(self, num):\n        self.num = num\n    \n    def calculate_sum_of_digits(self):\n        total = 0\n        for ch in str(self.num):\n            total += int(ch)\n        return total\n\ndigit_sum = SumOfDigits(6342)\nresult = digit_sum.calculate_sum_of_digits()\nprint(result)",
        "309": "def sort_ascending(nums):\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i] \n    return nums",
        "310": "def feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features",
        "311": "def combine_list(array1, array2):\n    return list(zip(array1, array2))",
        "312": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)",
        "313": "def dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11",
        "314": "import flask\nfrom flask import request, jsonify\n\n# Creating the application app\napp = flask.Flask(__name__)\n\n\n@app.route('\/calculate', methods=['POST'])\ndef calculate():\n    # Get the input data from the user\n    data = request.get_json()\n\n    age = data['age']\n    gender = data['gender']\n    car_model = data['car_model']\n\n    # Calculate the insurance price\n    # ...\n    insurance_price = 0.00\n\n    # Return the calculated insurance price in JSON format\n    return jsonify({'insurance_price': insurance_price})\n\t\napp.run(host='0.0.0.0', port=8006)",
        "315": "def sieve_of_eratosthenes(start, end):\n    prime = [True] * (end + 1)\n    p = 2\n    while p * p <= end:\n        if prime[p]:\n            for i in range(p * p, end + 1, p):\n                prime[i] = False\n        p += 1\n    prime_numbers = []\n\n    for p in range (start, end):\n        if prime[p]:\n            prime_numbers.append(p)\n\n    return prime_numbers\n\nprint (sieve_of_eratosthenes(1, 20))",
        "316": "def sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673",
        "317": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string",
        "318": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)",
        "319": "def insertion_sort(arr):\n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], \n        # that are greater than key, \n        # to one position ahead of \n        # their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key",
        "320": "import sqlite3\n\nclass Model:\n\n  def __init__(self):\n    self.conn = sqlite3.connect(\":memory:\")\n    self.cursor = self.conn.cursor()\n\n  def create(self,name):\n    self.cursor.execute(\n\t\t\t\"CREATE TABLE IF NOT EXISTS Models (name TEXT)\"\n\t\t)\n    self.cursor.execute(\n\t\t\t\"INSERT INTO Models(name) VALUES (?)\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()\n\n  def read(self):\n    self.cursor.execute(\"SELECT * FROM Models\")\n    return self.cursor.fetchall()\n\n  def update(self,name):\n    self.cursor.execute(\n\t\t\t\"UPDATE Models SET name = ? WHERE name = ?\", \n\t\t\t(name, name,),\n\t\t)\n    self.conn.commit()\n  \n  def delete(self, name):\n    self.cursor.execute(\n\t\t\t\"DELETE FROM Models WHERE name = ?\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()",
        "321": "strings = [\"Hello\", \"Yes\", \"No\", \"World\"]\n\nstrings.sort()\n\nprint(strings)",
        "322": "class MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)\/\/2] + data[n\/\/2])\/2",
        "323": "import numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)",
        "324": "def editDistance(string1, string2, m, n):\n    # Create an empty matrix\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Filling the first column of the matrix\n    for i in range(m+1): \n        dp[i][0] = i \n  \n    # Filling the second column of the matrix \n    for j in range(n+1): \n        dp[0][j] = j \n  \n    # Populate the matrix\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n  \n            if string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert\n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace\n  \n    return dp[m][n] \n  \n  \n# Driver program \nstring1 = \"kitten\"\nstring2 = \"sitting\"\nm = len(string1) \nn = len(string2) \nprint(editDistance(string1, string2, m, n))",
        "325": "import numpy as np\n\n# define the 3 layers #\ninput_layer = np.array([2, 3])\nhidden_layer = np.array([[0.1, 0.4],\n                         [0.8, 0.6],\n                         [0.3, 0.9]])\noutput_layer = np.array([0.3, 0.7])\n\n# compute the output of the 3-layer network #\nhidden_layer_output = np.dot(input_layer, hidden_layer)\noutput = np.dot(hidden_layer_output, output_layer)\n\nprint(output)",
        "326": "def sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)",
        "327": "from flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('\/users\/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)",
        "328": "The Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. \n\nTo solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau.",
        "329": "def get_greatest_2(items):\n max1 = max2 = float('-inf')\n for item in items:\n if item > max1:\n max1, max2 = item, max1\n elif item > max2:\n max2 = item\n return max1, max2\n\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]\nprint('The greatest 2 numbers from the array:', get_greatest_2(myList))\n\nOutput:\nThe greatest 2 numbers from the array: (9, 8)",
        "330": "final_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)",
        "331": "import numpy as np \n\na = np.random.randint(1, 6, size=(3,3)) \nprint(a)",
        "332": "words = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)",
        "333": "import nltk\nfrom nltk.sentiment import vader\n\nsentence = 'The movie was terrible. It felt like it would never end!'\n\nsid = vader.SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(sentence)\n\nif scores['neg'] > scores['pos']:\n  print('The sentiment of the sentence is negative!')\nelse:\n  print('The sentiment of the sentence is positive!')",
        "334": "\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)",
        "335": "class Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n  \n    def __str__(self):\n        return f'Title: {self.title}\\nArtist: {self.artist}'\n    \n    def __eq__(self, other):\n        return self.artist == other.artist and self.title == other.title\n\n    def length(self):\n        return len(self.title)",
        "336": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....",
        "337": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender",
        "338": "import re\n\ndef extract_emails(text):\n  emails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\n  return emails\n\nextracted_emails = extract_emails(\"My email is john@example.com and yours is john@gmail.com\")\nprint(extracted_emails)",
        "339": "from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '\/item\/<string:name>')\napi.add_resource(ItemList, '\/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)",
        "340": "def calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]",
        "341": "def rev_string(s): \n   return s[::-1] \n  \ns = \"Hello World!\"\nprint(rev_string(s))",
        "342": "#Function to find the LCS of two strings\ndef find_lcs(x, y): \n    # Find lengths of the two strings \n    m = len(x) \n    n = len(y) \n    \n    #To store the lengths of longest common subsequences\n    lcs = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    #Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                lcs[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else: \n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n  \n    #To store one of the possible common subsequence\n    index = lcs[m][n] \n    lcs_str = [\"\"] * (index+1) \n    lcs_str[index] = \"\"\n  \n    #Following loop code is used to find one of the longest common subsequence\n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        #If current character in X and Y are same,then\n        # reduce both the count and add the character to the result string\n        if x[i-1] == y[j-1]: \n            lcs_str[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        # If not same, move to the left, top or corner (diagonal) cell \n        #Whichever has the max value\n        elif lcs[i-1][j] > lcs[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    # Return the longest common subsequence\n    return \"\".join(lcs_str)\n\n# Main function\nx = \"abcdaf\"\ny = \"acbcf\"\nres = find_lcs(x,y)\nprint(\"The Longest Common Subsequence is:\")\nprint(res)\n\n# Output: The Longest Common Subsequence is: \n# abcf",
        "343": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    pwd_length = 8\n\n    password = ''\n    for i in range(pwd_length):\n        password += random.choice(chars)\n    \n    # Check if at least one special character exists in the password\n    if any([char in string.punctuation for char in password]):\n        return password\n    else:\n        return generate_password()\n\nprint(generate_password())",
        "344": "def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])",
        "345": "my_string = \"This is the string which is to be sorted\"\n  \nwords = my_string.split(' ') # split string into list of words \n  \n# create a list of tuples where the first element \n# is the length of the word and the second element \n# is the word itself  \nwords_with_length = [(len(word), word) for word in words] \n  \n# sort list of tuples according to 1st element of tuple i.e. length of word \nwords_with_length.sort(reverse = True) \n  \n# wl contains list words in decreasing order of their length \n# now use join() to join all words whith \" \" \nsorted_string = \" \".join([i[1] for i in words_with_length]) \n  \n# print sorted string \nprint(sorted_string)",
        "346": "def max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff",
        "347": "for i in range(1,6):\n    for j in range(1,i+1):\n        print(j, end=\"\")\n    print()",
        "348": "def printArrayReverse(arr): \n    for i in range(len(arr) - 1, -1, -1): \n        print(arr[i], end = \" \")\n\nprintArrayReverse(arr)",
        "349": "phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\nresult = [number for number in phone_numbers if number.startswith('08')]\nprint(result)",
        "350": "def search_list(list, search_query):\n    result = []\n    for i in range(len(list)):\n        if list[i] == search_query:\n            result.append(i)\n    return result\n\nsearch_list(list, search_query) # returns [0]",
        "351": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order",
        "352": "import random\n\ndef generate_string(string_length):\n    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.choices(random_characters, k=string_length))\n    return random_string\n\nprint(generate_string(10)) # Length: 10",
        "353": "# define the board\nboard = [\" \" for i in range(9)]\n\ndef print_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# define player turn\ndef player_turn(icon):\n\n    if icon == \"X\":\n        number = 1\n    elif icon == \"O\":\n        number = 2\n        \n    print(\"Your turn player {}\".format(number))\n    \n    choice = int(input(\"Enter your move (1-9): \").strip())\n    if board[choice -1] == \" \":\n        board[choice -1] = icon\n    else:\n        print()\n        print(\"That space is taken!\")\n\n# check win\ndef is_victory(icon):\n    if (board[0] == icon and board[1] == icon and board[2] == icon) or \\\n        (board[3] == icon and board[4] == icon and board[5] == icon) or \\\n        (board[6] == icon and board[7] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[3] == icon and board[6] == icon) or \\\n        (board[1] == icon and board[4] == icon and board[7] == icon) or \\\n        (board[2] == icon and board[5] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[4] == icon and board[8] == icon) or \\\n        (board[2] == icon and board[4] == icon and board[6] == icon):\n        return True\n    else:\n        return False\n        \n# define main function\ndef main():\n    print(\"Welcome to Tic Tac Toe!\")\n    print_board()\n    \n    while True:\n        player_turn(\"X\")\n        print_board()\n        if is_victory(\"X\"):\n            print(\"X Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n        player_turn(\"O\")\n        print_board()\n        if is_victory(\"O\"):\n            print(\"O Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n\nmain()",
        "354": "def merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list",
        "355": "# Program to find the longest common subsequence between two strings \ndef lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n\n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n\n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABACEDF\"\nY = \"ABDCF\"\n\nprint(\"Length of LCS is \", lcs(X, Y))",
        "356": "from sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit(X_train, y_train)\n\n# Predict Output \ny_pred = model.predict(X_test)",
        "357": "#! \/usr\/bin\/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com\/stefantkeller\/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '..\/24_LL_ev\/20150211_sample21-1-d6\/spot333um.csv'\n    calib_folder = '..\/24_LL_ev\/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot\n    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)\n    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)\n    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis\n    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.\n    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot\n    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate\n    llow0 = {}\n    lhigh0 = {}\n    texty1 = {}\n    for T in Temperatures:\n        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity\n        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops\n        texty1[T] = float(instr['texty1[{0}]'.format(T)])\n\n    \n    \n    #\n    #\n    #------------------------------------\n    #------------------------------------\n    # plot\n    cols = varycolor(3*len(Temperatures))\n\n\n    plt.subplot(3,1,1)\n    cnt = 0 # color counter\n\n    q0,m0 = {},{} # for linreg\n    for T in Temperatures:\n\n        # linreg\n        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].e()[llow0[T]:lhigh0[T]],\n                                overwrite_zeroerrors=True)\n\n        emax,emaxi = ev.max(emitted[T],True)\n        amax = absorbed[T][emaxi]\n        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)\n        # plot\n        plt.errorbar(absorbed[T].v(),emitted[T].v(),\n                     xerr=absorbed[T].e(),yerr=emitted[T].e(),\n                     c=cols[cnt],linestyle=' ')\n        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])\n\n        plt.text(textx,texty1[T],\n                 '${0}$$^\\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),\n                 color=cols[cnt],fontsize=fontsize)\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Emited power (W)')\n    plt.xlim(xlim)\n    plt.ylim(ylim1)\n    plt.grid('on')\n    \n    #plt.show()\n\n    \n    #------------------------------------\n    plt.subplot(3,1,2)\n    cnt = 0 # reset color counter\n\n    q1,m1 = {},{}\n    for T in Temperatures:\n        relref = reflected[T]\/pumped[T]*100\n        \n        # plot\n        plt.errorbar(absorbed[T].v(),relref.v(),\n                     xerr=absorbed[T].e(),yerr=relref.e(),\n                     c=cols[cnt],linestyle=' ')\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Reflectivity (%)')\n    plt.xlim(xlim)\n    plt.ylim(ylim2)\n    plt.grid('on')\n\n    #plt.show()\n    \n    #------------------------------------\n    # plot dissipation and spectra\n    plt.subplot(3,1,3)\n    cnt = 0 # reset\n    \n    q3,m3 = {},{}\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            # lambda_short\n            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), \n            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),\n            #             c=cols[cnt],linestyle=' ')\n        \n            # lambda_long\n            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1\n            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],\n                                    overwrite_zeroerrors=True)\n            \n            # show only a part, not to confuse reader\n            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], \n            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],\n            #             c=cols[cnt],linestyle=' ')\n            \n            # show the whole range\n            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), \n                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),\n                         c=cols[cnt],linestyle=' ')\n            \n        cnt += 3\n\n    plt.title(title)\n    plt.xlim(xlim3)\n    plt.ylim(ylim3)\n    plt.xlim()\n    plt.xlabel('Dissipated power (W)')\n    plt.ylabel('Wavelength (nm)')\n    plt.grid('on')\n    cnt = 0 # reset\n    \n    \n    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets\n    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes\n    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])\n    \n    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th\n    R_th = dldD\/dldT\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])\n        cnt+=3\n    \n    plt.text(textx3,texty3[0],\n             '$\\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),\n             color='k')\n    \n    R_th = R_th.round(2)\n    therm_imp = 'Thermal impedance: $({0})$ K\/W'.format(R_th)\n    plt.text(textx3,texty3[1],\n             therm_imp,color='k')\n    print therm_imp\n\n    \n    for T in Temperatures:\n        print meantemp[T]\n    \n    plt.show()\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "358": "There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)",
        "359": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count",
        "360": "from celery import Celery\nfrom flask_mail import Message\n\napp = Celery('tasks', backend='redis:\/\/localhost')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n msg = Message(subject, sender='example@example.com', recipients=[recipient_email])\n msg.body = message\n mail.send(msg)",
        "361": "def linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1",
        "362": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
        "363": "max_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)",
        "364": "def find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1",
        "365": "nums = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in nums:\n    if num > 50:\n        print(num)",
        "366": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "367": "def print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n<\/form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application\/json'\n    }\n  };\n\n  fetch('\/my-api\/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n<\/script>",
        "368": "import random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))",
        "369": "# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)",
        "370": "def countEvenNum(list):\n    return len([x for x in list if x % 2 == 0])\n\nlist = [1, 2, 3, 4, 5]\nprint(countEvenNum(list))",
        "371": "import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))",
        "372": "def solve_linear_equation_system(a, b, c):\n x = (c - b) \/ a\n y = (c - a*x) \/ b\n return x, y\n\nx, y = solve_linear_equation_system(a, b, c)\nprint(\"x = {}, y = {}\".format(x, y)) # x = 2.0, y = 2.0",
        "373": "#!\/usr\/bin\/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models\/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))",
        "374": "def most_efficient_order(tasks):\n    \"\"\"\n    This method takes a list of tasks and produces the most efficient order for completing the tasks.\n\n    Parameters\n    ----------\n    tasks: List\n        A list of tasks to be performed.\n\n    Returns\n    -------\n    List\n        An ordered list of tasks representing the most efficient order for completing the tasks.\n    \"\"\"\n    tasks_to_complete = tasks.copy()\n    order = [] \n    while tasks_to_complete:\n        min_time = float(\"inf\")\n        task_index = None\n        for i, task in enumerate(tasks_to_complete):\n            if task.get_time() < min_time:\n                min_time = task.get_time()\n                task_index = i\n        order.append(tasks_to_complete.pop(task_index))\n    return order",
        "375": "def reverse_string(string):\n    return string[::-1]",
        "376": "<form action=\"action.py\" method=\"post\">\n    <input type=\"submit\" value=\"Submit\">\n<\/form>",
        "377": "def add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y",
        "378": "def calculate_sum(arr):\n  sum = 0\n\n  for i in arr:\n    sum += i\n\n  return sum\n\ninput_array = [1, 3, 5, 7]\n\nresult = calculate_sum(input_array)\n\nprint(result) # prints 16",
        "379": "def multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)",
        "380": "import os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~\/jsub\/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tdata_str = f.read()\n\n\t\ttry:\n\t\t\treturn json.loads(data_str)\n\t\texcept ValueError as e:\n\t\t\traise RepoReadError('JSON decode error on task %s: %s' % (task_id, e))\n\n#\tdef __create_repo_dir(self):\n#\t\tsafe_mkdir(self.__jsub_dir)\n\n\tdef __new_task_id(self):\n\t\ttask_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\tif not task_ids:\n\t\t\treturn 1\n\t\ttask_ids.sort(key=int, reverse=True)\n\t\treturn(task_ids[0]+1)\n\n\tdef __json_str(self, data):\n\t\tif self.__json_format == 'pretty':\n\t\t\treturn json.dumps(data, indent=2)\n\t\treturn json.dumps(data, separators=(',', ':'))\n",
        "381": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()",
        "382": "new_list = [element for element in given_list]",
        "383": "def max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nresult = max_of_three(3, 4, 5)\nprint(result)",
        "384": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)",
        "385": "student_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}",
        "386": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))",
        "387": "#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92",
        "388": "def compress_sequence(nums):\n    output = []\n    temp = []\n\n    for i in range(1, len(nums)):\n        if nums[i-1] * nums[i] >= 0:\n            temp.append(nums[i-1])\n        else:\n            temp.append(nums[i-1])\n            output.append(temp)\n            temp = []\n    temp.append(nums[i])\n    output.append(temp)\n\n    return output\n\nprint(compress_sequence([9, -2, 6, 0, -7]))",
        "389": "def split_equal_sum(arr):\n    n = len(arr) \n    leftsum = 0\n    rightsum = sum(arr)\n    \n    for i in range(n): \n        rightsum -= arr[i]\n        if leftsum == rightsum:\n            return True \n        leftsum += arr[i] \n    return False",
        "390": "total = 0\nfor element in data:\n    total = total + element\nprint(total)",
        "391": "def auto_complete(dictionary, prefix):\n    # list for words with the given prefix\n    prefix_words = []\n\n    # iterate through the dictionary\n    for word in dictionary:\n        # if the word starts with given prefix, \n        # add it to the list\n        if word.startswith(prefix):\n            prefix_words.append(word)\n\n    return prefix_words\n\n\ndictionary = [\"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\"]\nprefix = \"d\"\n\nprefix_words = auto_complete(dictionary, prefix)\nprint(prefix_words)\n\n# Output:\n# ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']",
        "392": "import numpy as np\nimport keras \nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Build model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim = 2, activation = 'relu'))\nmodel.add(Dense( 1))\n\n# Compile the model\nmodel.compile(loss = 'mean_squared_error',\n              optimizer = 'adam')\n\n# Obtain some data - age (years), education level (high school, college, university)\nx_train = np.array([[25, 0], [30, 0], [35, 0], \n\t\t    [40, 0], [45, 1], [45, 2],\n\t\t    [50, 1], [50, 2], [55, 1],\n\t\t    [55, 2], [50, 3], [60, 3]])\n\n# Labels - annual income\ny_train = [15000, 20000, 25000, 30000,\n           40000, 45000, 50000, 60000, \n\t   65000, 70000, 80000, 90000]\n\n# Fit the model\nmodel.fit(x_train, y_train, epochs = 150, batch_size = 2)\n\n# Calculate the predicted annual income\nage = 50\neducation = 3\nannualIncome = model.predict(np.array([[age, education]]))\nprint(annualIncome)\n# output: [[80000]]",
        "393": "import nltk\nfrom nltk.classify import NaiveBayesClassifier \n  \ndef label_words(words): \n    return dict([(word, True) for word in words]) \n\npositive_tokens = nltk.word_tokenize(positiveText) \nnegative_tokens = nltk.word_tokenize(negativeText)\n\npositive_data = [(label_words(positive_tokens), 'positive')] \nnegative_data = [(label_words(negative_tokens), 'negative')]\n \ntrain_data = positive_data + negative_data \nclassifier = NaiveBayesClassifier.train(train_data) \n  \n# classify \nclassifier.classify( \n\tlabel_words(nltk.word_tokenize(\"This movie was ok\")))",
        "394": "def filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]",
        "395": "import psycopg2\nfrom datetime import datetime, timedelta\nimport schedule\nimport time\n\nconn = psycopg2.connect(\n host=\"localhost\", \n database=\"db\", \n user=\"user\", \n password=\"password\"\n)\n\ndef refresh_data():\n cur = conn.cursor()\n query = 'REFRESH TABLE \"TableName\";'\n cur.execute(query)\n conn.commit()\n\n# run the refresh_data job every 5 minutes\nschedule.every(5).minutes.do(refresh_data)\n\nwhile True:\n schedule.run_pending()\n time.sleep(1)",
        "396": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05",
        "397": "import math\n\ndef area_circle(radius):\n return math.pi * (radius ** 2)\n\narea = area_circle(radius)\nprint('The area of the circle is %.2f' % area)",
        "398": "class VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()",
        "399": "def hanoi(n, source, spare, target):\n    if n == 1:\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n    else:\n        hanoi(n-1, source, target, spare)\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n        hanoi(n-1, spare, source, target)\n\nn = 8\nsource = [(i, \"A\") for i in range(1, n+1)]\ntarget = []\nspare = []\n\nhanoi(n, source, spare, target)",
        "400": "# Python code\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data set\ndata = pd.read_csv(\"customer_data.csv\")\n\n# Select features\nX = data.drop(['churn'], axis=1)\n\n# Select targets\ny = data['churn']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions and measure accuracy\npredictions = model.predict(X_test)\nprint(model.score(X_test, y_test))",
        "401": "# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate",
        "402": "def int_to_Roman(number): \n  \n    val = [ \n        1000, 900, 500, 400, \n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ] \n    syb = [ \n        \"M\", \"CM\", \"D\", \"CD\", \n        \"C\", \"XC\", \"L\", \"XL\", \n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ] \n    roman_num = '' \n    i = 0\n    while  number > 0:\n        for_val = number \/\/ val[i]\n        roman_num += syb[i] * for_val\n        number -= val[i] * for_val\n        i += 1\n    return roman_num",
        "403": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev",
        "404": "def celsiusToFahrenheit(temp):\n    return round((temp * 9\/5) + 32, 2)",
        "405": "import numpy as np\nfrom sklearn.svm import SVC \n\n# Dataset \ntraining_data = [\n {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n# Feature extraction \nX = []\ny = []\nfor data in training_data:\n X.append(data['features'])\n y.append(data['label'])\n\n# Model \nclf = SVC()\nclf.fit(X, y) \n\n# Prediction \npredict_data = [1, 0, 1]\npredicted_label = clf.predict([predict_data])\n\nprint(predicted_label[0])",
        "406": "from Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\n\ndef encrypt(plaintext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(plaintext)\n\ndef decrypt(ciphertext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.decrypt(ciphertext)",
        "407": "sum = lambda a, b : a + b\nprint(sum(3,4))",
        "408": "# Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import to_categorical\n\n# Loading data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Defining the neural network model\n\n# Input layer\ninputs = Input(shape=(28,28,))\n\n# Hidden layer\nh1 = Dense(64, activation='relu')(inputs)\nh2 = Dropout(0.5)(h1)\n\n# Output layer\noutputs = Dense(10, activation='softmax')(h2)\n\n# Compiling the model\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(loss='categorical_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\n# Data pre-processing\n\n# Reshape inputs from (60000, 28, 28) to (60000, 784)\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Normalize pixel values\nX_train = X_train.astype('float32')\nX_train \/= 255\nX_test = X_test.astype('float32')\nX_test \/= 255\n\n# One-hot encode labels\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)\n\n# Fitting the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)",
        "409": "The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.",
        "410": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))",
        "411": "import string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)",
        "412": "\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))",
        "413": "class HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]",
        "414": "# Define the array\narray = ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n# Function to perform linear search\ndef linearSearch(search_item):\n    # Loop through array\n    for i in range(len(array)):\n        # If search item is found, return its position\n        if array[i] == search_item:\n            return i\n    # If item is not found, return -1\n    return -1\n\n# Input search item\ns = input(\"Enter the item to be searched: \")\n\n# Search the item\nresult = linearSearch(s)\n\n# Print result\nif result == -1:\n    print(\"Item not found.\")\nelse:\n    print(\"Item is found at position \"+str(result))",
        "415": "def get_max_value(numbers): \n    return max(numbers)\n\nprint(get_max_value(list))  # 6",
        "416": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor num in list_numbers:\n    print(num**3)",
        "417": "my_dict = {\n    \"FirstName\": \"John\"\n}",
        "418": "def num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]",
        "419": "def Fibonacci(n):\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\nn = 10\nfor i in range(1, n):\n    print(Fibonacci(i))",
        "420": "#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http:\/\/RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['exist']:\n        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['test']:\n        test_engines(args['<engines>'])\n    elif args['--list']:\n        for sub_site in SUBTITLE_SITE_LIST.keys():\n            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)\n            print sub_dict.get('class_name')\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "421": "def max_num(list):\n  max_num = list[0]\n\n  for num in list:\n    if num > max_num:\n      max_num = num\n  \n  return max_num",
        "422": "def sortAlphabetically(strings): \n    strings.sort() \n    return strings \n\n#Test \nstrings = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_strings = sortAlphabetically(strings) \nprint(*sorted_strings)",
        "423": "def print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))",
        "424": "def deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list",
        "425": "import matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()",
        "426": "import string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))",
        "427": "import numpy as np\nfrom sklearn import linear_model\n\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([75000, 43000, 59000, 32000, 85000])\n\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\n\nprediction = model.predict([[2200, 3]])",
        "428": "my_list = ['A', 'B', 'C', 'D']\n\nfor item in my_list:\n    print(\"The item is: {}\".format(item))",
        "429": "import re \n  \n# Regular expression to match all numeric strings \npattern = '^[0-9]+$'\n  \n# Input string \nstring = '123456789'\n  \n# Matching a pattern \nresult = re.match(pattern, string) \nif result: \n    print(\"String is a valid numeric string\") \nelse: \n    print(\"String isn't a valid numeric string\")",
        "430": "#!\/usr\/bin\/env python\n#  -*- coding: utf-8 -*-\n\n\"\"\"\nBPMN diagram for FOMDES process 1\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom bpmn_pgv import *\nimport pygraphviz as pgv\n\n__author__ = 'mapologo'\n\nPROCESS_LABEL = \"Liquidaci\u00f3n de Cr\u00e9ditos\"\n# A graph for FOMDES processes\nF = pgv.AGraph(strict=False, directed=True)\n\nF.graph_attr.update(label=\"\", rankdir=\"TB\", splines=\"ortho\", labelloc=\"b\",\n                    size=\"8, 7.5\", forcelabels=\"true\", ranksep=\"0.25\", fontname=\"Liberation Sans Narrow Condensed\")\nF.node_attr.update(fontname=\"Liberation Sans Narrow Condensed\")\nF.edge_attr.update(fontname=\"Liberation Sans Narrow Condensed\", fontsize=\"10\")\n\nse_cluster = {\"se7\": (\"Recibir el documento protocolizado\", \"start\"),\n              \"se8\": (\"Revisar el documento protocolizado\", \"human\"),\n              \"se9\": (\"\", \"end\")}\n\nse_edges = {\"se7\": {\"se8\": {}},\n            \"se8\": {\"se9\": {\"style\": \"invis\"}}}\n\nSE = add_cluster(F, \"se\", \"Secretar\u00eda Ejecutiva\", se_cluster, se_edges)\n\np_cluster = {\"p1\": (\"Firma del cheque\", \"human\"),\n             \"p2\": (\"Entregar cheque a beneficiario\", \"message\")}\n\np_edges = {\"p1\":{\"p2\": {}}}\n\nP = add_cluster(F, \"p\", \"Presidencia\", p_cluster, p_edges)\n\npr_cluster = {\"pr2\": (\"Verificar documentaci\u00f3n legal y elaborar certificaci\u00f3n de disponibilidad\", \"human\"),\n              \"pr3\": (\"Crear las cuentas por cobrar\", \"human\"),\n              \"pr4\": (\"Generar tablas de amortizaci\u00f3n\", \"human\"),\n              \"pr5\": (\"Imprimir y firmar orden de liquidaci\u00f3n y cheque\", \"human\")}\n\npr_edges = {\"pr2\": {\"pr3\": {}},\n            \"pr3\": {\"pr4\": {}},\n            \"pr4\": {\"pr5\": {}}}\n\nPR = add_cluster(F, \"pr\", \"Presupuesto\/Administraci\u00f3n\", pr_cluster, pr_edges)\n\nF.add_node(\"SIGEFOMDES Administraci\u00f3n\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SIGEFOMDES Administraci\u00f3n\")\nF.add_node(\"SISAC\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SISAC\")\n\nglobal_edges = {\"Beneficiario\":  {\"se7\": {\"style\": \"dashed\"}},\n                \"se8\": {\"pr2\": {\"style\": \"dashed\"}},\n                \"pr3\": {\"SIGEFOMDES Administraci\u00f3n\": {\"style\": \"dashed\"}},\n                \"pr4\": {\"SISAC\": {\"style\": \"dashed\"}},\n                \"pr5\": {\"p1\": {\"style\": \"dashed\"}},\n                \"p2\": {\"se9\": {\"style\": \"dashed\"}, \"Beneficiario\": {\"style\": \"dashed\"}}}\n\nadd_edges(F, global_edges)\n\nF.draw(\"proc4.png\", prog='dot')\nF.write(\"proc4.dot\")\n",
        "431": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "432": "def add_large_numbers(num1, num2):\n    num1 = num1[::-1]\n    num2 = num2[::-1] \n    carry = 0\n    result = \"\" \n   \n    # Iterate over the length of the length of larger string  \n    for i in range(max(len(num1), len(num2))): \n        if i < len(num1):\n            digit1 = int(num1[i])\n        else:\n            digit1 = 0\n\n        if i < len(num2):\n            digit2 = int(num2[i])\n        else:\n            digit2 = 0\n       \n        sum_total = digit1 + digit2 + carry  \n        carry = sum_total \/\/ 10  \n\n        result += str(sum_total % 10) \n\n    # Add remaining carry  \n    if carry > 0:  \n        result += str(carry) \n\n    return result[::-1]\n\nprint(add_large_numbers(\"111\", \"1337\"))\n# Output: 1448",
        "433": "def sort_ascending(array):\n  array.sort()\n  return array\n\nsort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",
        "434": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y",
        "435": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp \/\/= 10\n  if num == sum:\n    return True  \n  else:\n    return False",
        "436": "def findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum",
        "437": "from collections import Counter\n\n\ndef generate_ngrams(text, window_size):\n    text = text.lower().split(' ')\n    ngrams = []\n    for n in range(window_size, len(text)+1):\n        for i in range(len(text)-n+1):\n            ngrams.append(' '.join(text[i:i+n]))\n    return Counter(ngrams)\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nwindow_size = 3\n\nngrams_count = generate_ngrams(text, window_size)\n\nprint('\\nNGRAMS COUNT:',ngrams_count)\n\n# Output\n# NGRAMS COUNT: Counter({'the quick brown': 3,\n#            'quick brown fox': 2,\n#            'over the lazy': 1,\n#            'brown fox jumps': 1,\n#            'fox jumps over': 1,\n#            'the lazy dog': 1,\n#            'jumps over the': 1,\n#            'quick brown fox jumps': 1})",
        "438": "def fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list",
        "439": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)",
        "440": "dict1 = {}\nfor lst in [list1, list2]:\n key = lst[0]\n val = lst[1:]\n dict1[key] = val\n\nprint(dict1)\n# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}",
        "441": "def find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches",
        "442": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()",
        "443": "Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.",
        "444": "import csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total\/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0",
        "445": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\n\n# Load and explore the data\ndataset = pd.read_csv('iris.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Preprocess the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Define the model\nclf = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model to the training set\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\n\n# Evaluate the model's performance\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "446": "def check_number(num):\n  if (num > 0 and num < 11):\n    return True\n  else:\n    return False",
        "447": "def sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)",
        "448": "def count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count",
        "449": "def f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))",
        "450": "from scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())",
        "451": "def list_generator(input_list):\n    for item in input_list:\n        yield item\n\ngen = list_generator([1,3,5,7,9])\nfor item in gen:\n    print(item)",
        "452": "def autocomplete(input_text):\n    # Generate the word candidates\n    word_candidates = generate_candidates(input_text)\n    # Filter the word candidates \n    filtered_words = filter_candidates(word_candidates)\n    # Rank the words and return the top 5 \n    sorted_words = rank_words(filtered_words)\n    return sorted_words[:5]",
        "453": "def print_unique(my_list):\n    seen = set()\n    for x in my_list:\n        if x not in seen:\n            print(x)\n            seen.add(x)",
        "454": "def to_int_list(s):\n    return [int(x) for x in s.split(',')]",
        "455": "import hashlib\nimport json\n\nclass Blockchain:\n\n def __init__(self):\n self.chain = []\n self.transactions = []\n\n def create_block(self, nonce, previous_hash):\n block = {\n 'block_number': len(self.chain) + 1,\n 'timestamp': self._current_timestamp(),\n 'nonce': nonce,\n 'previous_hash': previous_hash\n }\n self.chain.append(block)\n return block\n\n def _current_timestamp(self):\n return round(time.time() * 1000)\n\n def hash_block(self, block):\n string_object = json.dumps(block, sort_keys=True)\n block_string = string_object.encode()\n raw_hash = hashlib.sha256(block_string)\n hex_hash = raw_hash.hexdigest()\n return hex_hash",
        "456": "# Program to remove duplicate elements\n\ndef remove_duplicates(nums):\n new_list = []\n for num in nums:\n if num not in new_list:\n new_list.append(num)\n \nreturn new_list\n\n# Main program\nnums = [1, 3, 3, 5, 5, 7]\ndedup_nums = remove_duplicates(nums)\nprint(dedup_nums) # [1, 3, 5, 7]",
        "457": "import numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",
        "458": "def min_max(arr):\n  min_val = min(arr)\n  max_val = max(arr)\n  return [min_val, max_val]\n\nresult = min_max([3, 4, 2, 8, 15, 6])\nprint(result)",
        "459": "def count_vowels(string): \n    vowels = \"aeiou\"\n    count = 0\n    for s in string:\n        if s.lower() in vowels:\n            count += 1\n    return count",
        "460": "for i in range(11):\n print(i*2)",
        "461": "def is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))",
        "462": "# Import the necessary libraries \nfrom sklearn.datasets import fetch_openml\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n#Load the dataset\nmnist = fetch_openml('mnist_784')\n\n# Split into features and labels\nX = mnist.data\ny = mnist.target\n\n# Reshape data to be valid\nX = X.reshape((X.shape[0], -1))\nprint(X.shape, y.shape)\n\n# Create a Logistic Regression classifier \nclf = LogisticRegression()\n\n# Fit the model to the data \nclf.fit(X, y)",
        "463": "from Crypto.PublicKey import RSA\n\ndef generate_key_pair():\n key = RSA.generate(2048)\n pub_key = key.publickey().export_key().decode()\n with open('public.pem', 'w') as file:\n  file.write(pub_key)\n \n priv_key = key.export_key().decode()\n with open('private.pem', 'w') as file:\n  file.write(priv_key)\n\ngenerate_key_pair()",
        "464": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        input_text = request.form.get('input_text')\n        return render_template('result.html', input_text=input_text)\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n\/\/ result.html file\n<html>\n <body>\n  <h1>Your Input: <\/h1>\n  <p>{{input_text}}<\/p>\n <\/body>\n<\/html>",
        "465": "from sklearn import linear_model\nfrom sklearn.metrics import accuracy_score\n\nX = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]\ny = [1, 0, 0, 1, 0]\n\nmodel = linear_model.LogisticRegression()\nmodel.fit(X, y)\n\ny_pred = model.predict(X)\naccuracy = accuracy_score(y, y_pred)\n\nprint('Model accuracy:', accuracy)",
        "466": "import re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative",
        "467": "import os\nimport ast\nimport traceback\nimport time\nimport sys\nimport types\nimport builtins\nimport collections\nimport astor\nimport weakref\nfrom .jsonify import jsonify, jsonify_print, jsonify_print_expr\nfrom .datalayer import Analysis, Execution, FileEdit\nfrom .router import send\nfrom . import stdlib\n\ndef now():\n    return int(time.time() * 1000)\n\nclass Environment:\n\n    extra_globals = {}\n\n    active = weakref.WeakSet()\n\n    def __init__(self, path):\n        self.path = path\n        self.globals = {\n            \"print\": jsonify_print,\n            \"print_expr\": jsonify_print_expr,\n            \"jsonify\": jsonify,\n            \"jsonify_print\": jsonify_print,\n            \"listdir\": stdlib.listdir,\n            \"__builtins__\": __builtins__,\n            \"FILES\": stdlib.FilesDict(self.path),\n        }\n        for name in stdlib.builtin_names:\n            self.globals[name] = getattr(stdlib, name)\n        self._cached_analysis = {}\n        self.active.add(self)\n\n    predefined_names = set([\"parsed\"])\n\n    def init_commands(self):\n        \"\"\"Returns a list of commands that represent the existing state of the\n        filesystem\"\"\"\n        for path in os.listdir(self.path):\n            if path.endswith(\".json\"):\n                continue\n            if not os.path.isfile(os.path.join(self.path, path)):\n                continue\n            try:\n                with open(os.path.join(self.path, path), \"r\") as fp:\n                    content = fp.read()\n                yield FileEdit(filename=path, content=content, external_edit=True)\n            except UnicodeDecodeError:\n                pass\n\n    def fixup_globals(self):\n        for name, value in self.extra_globals.items():\n            self.globals.setdefault(name, value)\n\n    def execute(self, filename, content, subexpressions=False):\n        print(\"Executing\", filename, subexpressions)\n        self.fixup_globals()\n        stdout = Stdout()\n        compiled = None\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            RewriteExprToPrint(subexpressions).walk(parsed)\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n            print(\"varsed used:\", sorted(var_inspect.used), \"set:\", sorted(var_inspect.set), \"imported:\", var_inspect.imports)\n            compiled = compile(parsed, filename, 'exec')\n        except:\n            stdout.write(traceback.format_exc())\n\n        def displayhook(value):\n            stdout.write_repr(value)\n\n        orig_displayhook = sys.displayhook\n        sys.displayhook = displayhook\n        orig_stdout = sys.stdout\n        orig_stderr = sys.stderr\n        sys.stdout = stdout\n        sys.stderr = stdout\n        self.globals[\"parsed\"] = parsed\n        self.globals[\"ast\"] = ast\n        globals_before = self.globals.copy()\n        start = time.time()\n        try:\n            try:\n                if compiled:\n                    exec(compiled, self.globals)\n            except:\n                traceback.print_exc()\n        finally:\n            end = time.time()\n            sys.dipslayhook = orig_displayhook\n            sys.stdout = orig_stdout\n            sys.stderr = orig_stderr\n        local_scope = dict(\n            (name, value)\n            for name, value in self.globals.items()\n            if name not in globals_before or globals_before[name] is not value)\n        defines = dict(\n            (key, {\n                \"json\": jsonify(local_scope[key]),\n                \"type\": str(type(local_scope[key])),\n            })\n            for key in local_scope\n            if not isinstance(local_scope[key], types.ModuleType))\n        command = Execution(\n            filename=filename,\n            content=content,\n            emitted=stdout.emitted,\n            defines=defines,\n            start_time=int(start * 1000),\n            end_time=int(end * 1000),\n            exec_time=int((end - start) * 1000),\n            with_subexpressions=subexpressions,\n        )\n        send(command)\n\n    def analyze(self, filename, content):\n        print(\"Analyzing\", filename)\n        properties = {}\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n        except:\n            return\n            properties[\"parse_error\"] = jsonify(traceback.format_exc())\n        else:\n            properties = var_inspect.json\n        if properties != self._cached_analysis.get(filename):\n            self._cached_analysis[filename] = properties\n            send(Analysis(filename=filename, content=content, properties=properties))\n\n\nclass VariableInspector(astor.TreeWalk):\n\n    builtin_names = dir(builtins)\n\n    def init_variables(self):\n        self.used = set()\n        self.set = set()\n        self.imports = set()\n        self.in_target = False\n\n    @property\n    def json(self):\n        used = set(self.used)\n        for key in self.builtin_names:\n            used.discard(key)\n        for key in self.set:\n            used.discard(key)\n        for key in Environment.predefined_names:\n            used.discard(key)\n        return {\n            \"variables_used\": list(used),\n            \"variables_set\": list(self.set),\n            \"imports\": list(self.imports)\n        }\n\n    def pre_arg(self):\n        self.set.add(self.cur_node.arg)\n\n    def pre_Name(self):\n        if self.in_target:\n            # Actually this is a set\n            self.set.add(self.cur_node.id)\n        else:\n            self.used.add(self.cur_node.id)\n\n    def pre_For(self):\n        self.process_assignment(self.cur_node.target)\n\n    def pre_Assign(self):\n        self.process_assignment(self.cur_node.targets)\n\n    def pre_withitem(self):\n        self.process_assignment(self.cur_node.optional_vars)\n\n    def pre_ExceptHandler(self):\n        if self.cur_node.name:\n            self.set.add(self.cur_node.name)\n\n    def pre_alias(self):\n        # Used in imports\n        name = self.cur_node.asname or self.cur_node.name\n        name = name.split(\".\")[0]\n        self.set.add(name)\n        self.imports.add(name)\n\n    def pre_FunctionDef(self):\n        self.set.add(self.cur_node.name)\n\n    def pre_ListComp(self):\n        self.process_assignment(self.cur_node.elt)\n\n    def process_assignment(self, item):\n        if isinstance(item, list):\n            for x in item:\n                self.process_assignment(x)\n            return\n        old_in_target = self.in_target\n        self.in_target = True\n        try:\n            self.walk(item)\n        finally:\n            self.in_target = old_in_target\n\nclass RewriteExprToPrint(astor.TreeWalk):\n\n    expr_node_types = \"\"\"\n    UnaryOp\n    BinOp\n    BoolOp\n    Compare\n    Call\n    IfExp\n    Attribute\n    Subscript\n    ListComp SetComp GeneratorExp DictComp\n    \"\"\".split()\n    # Skipped:\n    #  UAdd USub Not Invert\n    #  Add Sub Mult Div FloorDiv Mod Pow LShift RShift BitOr BitXor BitAnd MatMult\n    #  And Or\n    #  Eq NotEq Lt Gt GtE Is IsNot In NotIn\n    #  Index Slice ExtSlice\n\n    def __init__(self, subexpressions=False):\n        self.subexpressions = subexpressions\n        self.id_counter = 0\n        astor.TreeWalk.__init__(self)\n        if self.subexpressions:\n            for method in self.expr_node_types:\n                self.pre_handlers[method] = self.save_node_name\n                self.post_handlers[method] = self.fixup_subexpressions\n            del self.post_handlers['Module']\n\n    def post_Name(self):\n        if not self.subexpressions:\n            return\n        if isinstance(self.cur_node.ctx, ast.Load):\n            self.replace(self.rewrite_expr(self.cur_node))\n\n    def post_Module(self):\n        node = self.cur_node\n        node.body = [\n            self.rewrite_expr(n) if isinstance(n, ast.Expr) else n\n            for n in node.body]\n\n    def save_node_name(self):\n        self.cur_node.astor_repr = astor.to_source(self.cur_node)\n\n    def fixup_subexpressions(self):\n        new_node = self.rewrite_expr(self.cur_node, self.cur_node.astor_repr)\n        self.replace(new_node)\n\n    def rewrite_expr(self, node, expr_string=None):\n        if expr_string is None:\n            expr_string = astor.to_source(node)\n        node_string = ast.Str(s=expr_string)\n        self.id_counter += 1\n        if isinstance(node, ast.Expr):\n            new_node = ast.Expr(\n                ast.Call(\n                    func=ast.Name(id='print_expr', ctx=ast.Load()),\n                    args=[node_string, node.value, ast.Num(n=self.id_counter)],\n                    keywords=[],\n                    starargs=None,\n                )\n            )\n            new_node.is_print_expr = True\n        else:\n            new_node = ast.Call(\n                func=ast.Name(id='print_expr', ctx=ast.Load()),\n                args=[node_string, node, ast.Num(n=self.id_counter)],\n                keywords=[],\n                starargs=None,\n            )\n            new_node.is_print_expr = True\n        ast.fix_missing_locations(new_node)\n        return new_node\n\n\nclass Stdout:\n\n    total_exprs_limit = 100\n    expr_limit = 10\n\n    def __init__(self):\n        self.emitted = []\n        self.total_exprs_printed = 0\n        self.exprs_printed = collections.Counter()\n\n    def write(self, content):\n        self.emitted.append({\n            \"type\": \"print\",\n            \"time\": now(),\n            \"parts\": [{\"type\": \"str\", \"str\": content}],\n        })\n\n    def writejson(self, json):\n        assert json.get(\"type\"), \"JSON objects must have a type\"\n        json.setdefault(\"time\", now())\n        self.emitted.append(json)\n\n    def write_repr(self, o):\n        self.emitted.append(jsonify(o))\n\n    def flush(self):\n        pass\n\ndef add_global(name, value):\n    Environment.extra_globals[name] = value\n    Environment.predefined_names.add(name)\n    for env in Environment.active:\n        env.globals.setdefault(name, value)\n",
        "468": "class StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())",
        "469": "def reverse_words(str):\n    return \" \".join(str.split()[::-1])",
        "470": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nnew_sentence = sentence.replace(old_word, new_word)\n\nprint(\"The new sentence is: '{}'\".format(new_sentence))",
        "471": "def merge_sort(list1, list2): \n    merged_list = list1 + list2 \n    for i in range(len(merged_list)): \n        min_idx = i           \n        for j in range(i+1, len(merged_list)): \n            if merged_list[min_idx] > merged_list[j]: \n                min_idx = j \n        merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] \n    return merged_list \n  \nlist1 = [3, 5, 9, 1, 8] \nlist2 = [4, 11, 7, 2]\n  \nprint(merge_sort(list1, list2))",
        "472": "info = {\n 'Name':Name,\n 'Address':Address,\n 'Phone':Phone\n}",
        "473": "import random\n\n# list of possible answers\npossible_responses = [\n 'We serve a variety of dishes - from salads to pizzas to steaks!',\n 'Check out our menu for a full list of options',\n 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?',\n 'We have a great selection of meals! What kind of dish are you looking for?',\n 'We have a unique selection of meals - have you checked out our menu?'\n]\n\n# read the user's question\nwith open('random_user_question.txt') as user_question:\n    question = user_question.read()\n\n# choose a random response\nresponse = random.choice(possible_responses)\n\n# display the response to the user\nprint(response)",
        "474": "# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)",
        "475": "def longest_string(str_list): \n    longest_str = '' \n    for str in str_list: \n        if len(str) > len(longest_str): \n            longest_str = str \n  \n    return longest_str \n\nstring_list = ['foo', 'test', 'longstring', 'bar'] \nlong_string = longest_string(string_list) \n\nprint(long_string)",
        "476": "def find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))",
        "477": "def moving_average(data_points, window):\n     moving_average = []\n     for index in range(len(data_points)):\n       start = 0 if index-window+1 < 0 else index-window+1\n       window_data = data_points[start:index+1]\n       average = sum(window_data)\/len(window_data)\n       moving_average.append(average)\n \n     return moving_average\n \nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\nmoving_average = moving_average(time_series, window)\nprint(moving_average)",
        "478": "# Function to filter an array by a given criteria\ndef filter_array(array, criteria):\n # Create an empty list\n filtered_array = []\n # Iterate through the array\n for value in array:\n  # Check if it matches the criteria\n  if criteria(value):\n   # If it matches, add it to the list\n   filtered_array.append(value)\n\n # Return the filtered array\n return filtered_array\n\n# Input criteria\ndef criteria(x):\n return x % 5 == 0\n\nresult = filter_array(array, criteria)\nprint(result) # Outputs [5, 10, 15, 20, 25, 30]",
        "479": "def find_max(list): \n  max_num = 0\n  for i in list: \n    if i > max_num: \n      max_num = i\n  \n  return max_num\n\nlist = [1, 3, 12, 5, 8, 10]\nmax_num = find_max(list)\nprint(\"Maximum number is:\", max_num)",
        "480": "def concatenate_strings(strings, separator):\n return separator.join(strings)",
        "481": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ndef unionList(list1, list2):\n    return set(list1 + list2)\n\nresult = unionList(list1, list2)\nprint(result)",
        "482": "student_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}",
        "483": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()",
        "484": "class Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()",
        "485": "import xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')",
        "486": "def generate_numbers():\n    numbers = []\n    for i in range(10):\n        numbers.append(random.randint(0,10))\n    return numbers",
        "487": "import datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)",
        "488": "# -*- coding: utf-8 -*-\n\nimport os, sys\nprint(\"CWD: \" + os.getcwd() )\n\n# Load configuration file before pyplot\nconfig_path = os.path.abspath('..\/matplotlib\/')\nsys.path.append(config_path)\nimport configuration as config\n\n# Library path\nlib_path = os.path.abspath('..\/..\/lib')\nsys.path.append(lib_path)\nimport framemanager_python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.interpolate\n\n\n# Color map\n# Define \"bds_highcontrast\" color map by Britton Smith <brittonsmith@gmail.com> from http:\/\/yt-project.org\/ \ncdict = {'red':   ((0.0, 80\/256., 80\/256.),\n                   (0.2, 0.0, 0.0),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 256\/256., 256\/256.),\n                   (0.95, 256\/256., 256\/256.),\n                   (1.0, 150\/256., 150\/256.)),\n         'green': ((0.0, 0\/256., 0\/256.),\n                   (0.2, 0\/256., 0\/256.),\n                   (0.4, 130\/256., 130\/256.),\n                   (0.6, 256\/256., 256\/256.),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 80\/256., 80\/256.),\n                   (0.2, 220\/256., 220\/256.),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 20\/256., 20\/256.),\n                   (1.0, 0.0, 0.0))}\n\nplt.register_cmap(name='bds_highcontrast', data=cdict) \n\n# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1\n#row i:    x  y0  y1\n#               \/\n#              \/\n#row i+1:  x  y0  y1\ncdict = {'red':   ((0.0, 0.9, 0.9),\n                   (1.0, 0.9, 0.9)),\n         'green': ((0.0, 0.9, 0.9),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 0.0, 0.0),\n                   (1.0, 0.0, 0.0))}\nplt.register_cmap(name='YELLOW_RED', data=cdict) \n#cmap=plt.get_cmap('YELLOW_RED')\n#cmap=plt.get_cmap('autumn')\n#cmap=plt.get_cmap('gist_heat')\n#cmap=plt.get_cmap('Spectral_r')\n#cmap.set_under([0.0, 0.0, 0.0])\n\n\n\n# Load profile\nprofileName = os.path.abspath(\"foam_ball_short.dsa\")\nframeID = 230\n\nframeManager = framemanager_python.FrameManagerWrapper()\nframeManager.load_profile(profileName);\nnumTSFrames = frameManager.get_tsframe_count();\n\nmatrixID = 1\n\n# Load single frame\ntsframe = np.copy( frameManager.get_tsframe(frameID, matrixID) );\n\ncols = tsframe.shape[1]\nrows = tsframe.shape[0]\n\n# Add padding on border\npadding = 2\nv_padding = np.empty((padding, cols)); v_padding.fill(-50)\nh_padding = np.empty((rows+2*padding, padding)); h_padding.fill(-50)\nzs = np.vstack([v_padding, tsframe]) # Top\nzs = np.vstack([zs, v_padding]) # Bottom\nzs = np.hstack([h_padding, zs]) # Left\nzs = np.hstack([zs, h_padding]) # Right\n\n# Update matrix size with padding\ncols = zs.shape[1]\nrows = zs.shape[0]\n\n# Coordinates of sampled data points\nxs = np.arange(0, cols, 1)\nys = np.arange(0, rows, 1)\n\n# Coordinates of interpolation points\nscaleFactor = 10;\nxi = np.linspace(xs.min(), xs.max(), cols*scaleFactor)\nyi = np.linspace(ys.min(), ys.max(), rows*scaleFactor)\n\n\n\n\n\n#------------------------------------------------------\n# Interpolate with cubic splines\nspline = scipy.interpolate.RectBivariateSpline(ys, xs, zs, kx=3, ky=3, s=0)\n\n# Evaluate splines\nzi = spline(yi, xi)\n\n#------------------------------------------------------\n\n\n'''\n#------------------------------------------------------\n# Polynomial interpolation: \u2018linear\u2019, \u2018nearest\u2019, \u2018cubic\u2019\ncoordinates = [(y, x) for y in ys for x in xs]\nzs_flattened = np.ravel(zs, order='C')\ncoordinates_interpolated = [(y, x) for y in yi for x in xi]\n\n# Interpolate with griddata\nzi_flattened= scipy.interpolate.griddata(coordinates, zs_flattened, coordinates_interpolated, method='cubic')\n\n# Reshape flattened array to 2D\nzi = zi_flattened.reshape((rows*scaleFactor, cols*scaleFactor))\n#------------------------------------------------------\n'''\n\n\n\n\n#------------------------------------------------------\n# Old API\n# Set up a regular grid of sampled data points\n#ys, xs = np.meshgrid(xs, ys)\n\n# Set up a regular grid of interpolated points\n#yi, xi = np.meshgrid(xi, yi)\n\n# Interpolate\n#tck = scipy.interpolate.bisplrep(xs2, ys2, zs, kx=3, ky=3, s=0)\n\n# Evaluate splines\n#zi = scipy.interpolate.bisplev(xi2[:,0], yi2[0,:], tck)\n#------------------------------------------------------\n\n\n\n\n# Apply threshold to level out small values (interpolation ripples)\nmin_threshold = 25\nzi[zi < min_threshold ] = 0 \n\n\n\n#########################################\n# Plotting\n#########################################\nfig, ax = plt.subplots()\n\n\n############\n# Histogram\n############\nplt.hist(zi.flatten(), 128, range=(min_threshold, zi.max()), fc='k', ec='k')\nplt.savefig(\"histogram.pdf\", format='pdf')\nplt.close() \n\n########################\n# Interpolated image\n########################\nfig, ax = plt.subplots()\n\n# Interpolated image\n#cmap=plt.get_cmap('gray')\ncmap=plt.get_cmap('bds_highcontrast')\ncax = ax.imshow(zi, cmap=cmap, vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()])\n\n# Colorbar with countour levels\ncbar = fig.colorbar(cax)\ncbar.set_label('Raw sensor value', rotation=90)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\nax.invert_yaxis()\nax.xaxis.tick_top()\nplt.axis('off')\n\nplt.savefig(\"interpolation.pdf\", format='pdf')\nplt.close() \n\n\n\n############\n# Contour\n############\nfig, ax = plt.subplots()\n\n# Nearest-Neighbor Image\ncax = ax.imshow(zs, interpolation='nearest', cmap=plt.get_cmap('gray'), vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) \n\n#------------------------------------------------------\n# Contour lines: contour()\n#------------------------------------------------------\ncountour_threshold = 50\nlevels = np.linspace(countour_threshold, zs.max(), 10)\n#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(0.0, 0.0, 0.0)], origin='upper') # black contour\ncontour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(1.0, 0.0, 0.0)], origin='upper') # Red contour\n#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') # Colormap\n\n#plt.clabel(contour, inline=True, fontsize=9)\n\n# Colorbar with countour levels\ncbar = fig.colorbar(cax)\ncbar.add_lines(contour)\ncbar.set_label('Raw sensor value', rotation=90)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\n'''\n#------------------------------------------------------\n# Filled contours: contourf()\n#------------------------------------------------------\n\n# Background image\nbackground = np.empty((rows, cols)); background.fill(0)\ncax = ax.imshow(background, cmap=plt.get_cmap('gray'), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()] )\n\n# Filled contour\ncountour_threshold = 100 # Ignore \"ripples\" from spline extrapolation\nmax_threshold = 0 # Boost the upper limit to avoid truncation error\nlevels = np.linspace(countour_threshold, zs.max(), num=10, endpoint=True)\n\n# Levels correspond to midpoint of layers:\n# Extend level range to enlarge top layer (avoid ugly hole)\nlevels[-1] = levels[-1] + (levels[-1] - levels[-2])\/2\n\ncontour = ax.contourf(xi, yi, zi, levels=levels, cmap=plt.get_cmap('bds_highcontrast'), origin='upper')      \n\ncbar = fig.colorbar(contour, format='%.0f')\ncbar.set_label('mV', rotation=0)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\n# Restore old levels\n#levels[-1] = zs.max() \n#cbar.set_ticks(levels)\n#------------------------------------------------------\n'''\n\n\nax.invert_yaxis()\nax.xaxis.tick_top()\nplt.axis('off')\n\nplt.savefig(\"contour.pdf\", format='pdf')\nplt.show() \n\n\n\n \n",
        "489": "import random\n\ndef generate_randoms(n):\n  # generate a set of n random numbers\n  rands = []\n  for _ in range(n):\n    rands.append(random.randint(1,100))\n  return rands\n\ngenerate_randoms(10)",
        "490": "def string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None",
        "491": "class Movie:\n    def __init__(self, name, release_year, genre, rating):\n        self.name = name\n        self.release_year = release_year\n        self.genre = genre\n        self.rating = rating\n\nmovie = Movie(\"Interstellar\", 2014, \"Sci-Fi\", 8.4)\nprint(movie.name, movie.release_year, movie.genre, movie.rating)",
        "492": "def char_occurrences(a_string):\n char_count = {}\n for char in a_string:\n if char in char_count:\n char_count[char] += 1\n else:\n char_count[char] = 1\n return char_count\n\nstring = \"Hello, World!\"\nprint(char_occurrences(string))\n\n# Output\n# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",
        "493": "import string\nimport random\n\ndef generate_password():\n length = 8\n chars = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(chars) for i in range(length))\n \n return password\n\npassword = generate_password()\nprint(password)",
        "494": "def generate_even_number():\n# Generate a random number between 10 and 200\n num = random.randint(10, 200)\n# Check if the number is even\n if num % 2 == 0:\n# Check if the number is divisible by 5\n  if num % 5 == 0:\n   return num\n# If number not divisible by 5, increment number\n  else:\n   return generate_even_number(num+1)\n# If number not even, increment number\n else:\n   return generate_even_number(num+1)",
        "495": "def closest_num(arr, num):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n \n    if arr[right] <= num:\n        return arr[right]\n    elif arr[left] >= num:\n        return arr[left]\n    while right-left > 1:\n        mid = (right+left)\/\/2\n        if arr[mid] == num:\n            return arr[mid]\n        elif arr[mid] > num:\n            right = mid\n        else:\n            left = mid\n    return sorted([arr[right], arr[left]])[0]\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest = closest_num(arr, num)\nprint(closest)",
        "496": "# Function to print the multiplication table\ndef print_multiplication_table(num):\n    # Iterate over numbers from 1 to 10\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(num, i, num*i))\n\nprint_multiplication_table(5)",
        "497": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list",
        "498": "def print_comparison(x, y):\n if x > y:\n print(f'{x} is greater than {y}')\n else:\n print(f'{y} is greater than or equal to {x}')",
        "499": "def sum_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total\n\narr = [2, 3, 4]\n\ntotal = sum_squares(arr)\nprint(total) # 29",
        "500": "def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact",
        "501": "class Calculator:\n def __init__(self):\n   pass\n    \n def add_two_numbers(self, a, b):\n   return a + b\n\n def add(self, a, b, c):\n   return a + b + c\n\ncalculator = Calculator()\nresult = calculator.add_two_numbers(1, 2)\nprint(result)",
        "502": "num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")",
        "503": "import random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame()",
        "504": "def seriesSum(n):\n    # set the initial sum to 0\n    total = 0\n\n    # loop over the range\n    for i in range(1, n+1):\n        total += 1 \/ i\n\n    return total\n\nprint(seriesSum(5))",
        "505": "import pandas as pd\n\n#importing the dataset \ndataset = pd.read_csv('data.csv')\n\n#splitting the dataset into features and labels \nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, 3].values\n\n#importing DecisionTreeClassifier \nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier(criterion = 'entropy')\n\n#fitting the classifier to the dataset\nclassifier.fit(X,y)",
        "506": "def reverse_string(input_string):\n    reversed_string = ''\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string",
        "507": "def check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "508": "def sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    prime_numbers = []\n    for i in range(len(primes)):\n        if primes[i]:\n            prime_numbers.append(i) \n    return prime_numbers",
        "509": "def invert_dictionary(d):\n inverted_d = {}\n\n for key, value in d.items():\n if value not in inverted_d:\n inverted_d[value] = []\n inverted_d[value].append(key)\n\n return inverted_d",
        "510": "\"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1\/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2\/n)*sum(x*(y-y_predicted))\n        bd = -(2\/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr",
        "511": "def binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1",
        "512": "for x in [1,2,3]:\n  for y in [4,5,6]:\n      for z in [7,8,9]:\n          print(x,y,z)",
        "513": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))",
        "514": "def product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5]))",
        "515": "def printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next",
        "516": "def longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring",
        "517": "import random\n\ndef shuffle_list(nums):\n random.shuffle(nums)\n return nums\n\nshuffled_list = shuffle_list([1, 2, 3, 4, 5])\nprint(shuffled_list) #[3, 5, 2, 4, 1]",
        "518": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True",
        "519": "# compute the sum of x and y\nresult = x + y\n\n# store the result in a third variable\nz = result\n\n#print the result\nprint(z) # Output: 13",
        "520": "import random\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers)",
        "521": "def findWord(document, word):\n lines = document.split('\\n')\n line_number = -1\n for i, line in enumerate(lines):\n if word in line:\n line_number = (i + 1)\n break\n return line_number\n\nfindWord(largeDocument, word) # 2",
        "522": "\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https:\/\/example.com\/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')",
        "523": "for x in range(5):\n    print(\"Hello World!\")",
        "524": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common",
        "525": "my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]",
        "526": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None",
        "527": "import requests\nimport json\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('\/getTemp', methods=['POST'])\ndef get_temp():\n city = request.json['city']\n url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID=xxxxxx'\n r = requests.get(url.format(city))\n weather = json.loads(r.text)\n return {'temperature': weather['main']['temp']}\n\nif name == 'main':\n app.run(debug=True)",
        "528": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum",
        "529": "def format_text(text, font=\"Times New Roman\", size='14px', color='#000000'):\n  return \"<span style='font-family: {} font-size: {} color: {}'>{}<\/span>\".format(font, size, color, text)\n\nprint(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.'))",
        "530": "def square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]",
        "531": "def random_number_generator(min, max):\n    return random.randint(min, max)",
        "532": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
        "533": "# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None",
        "534": "def calculate_sum_of_list(arr):\n    total_sum = 0\n    for item in arr:\n        total_sum += item\n    return total_sum\n\nlist1 = [1, 2, 3, 4]\nsum_of_list = calculate_sum_of_list(list1)\nprint(sum_of_list)",
        "535": "# Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ...",
        "536": "def find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7]",
        "537": "import random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))",
        "538": "import collections\n \nsentence = \"Python is an interpreted, high-level, general-purpose programming language.\"\n \n# Split sentence into words\nwords = sentence.split()\n \n# Set the counter for words\ncounter = collections.Counter(words)\n \n# Find top 5 most frequent words\nresult = counter.most_common(5)\nprint(result)",
        "539": "def staircase(n): \n    for i in range(0, n): \n        for j in range(0, n - i - 1): \n            print(end=\" \") \n        for j in range(0, i + 1): \n            print(\"#\", end=\"\") \n        print(\"\\r\") \n  \n# Driver code \nn = 5\nstaircase(n)",
        "540": "def find_max(nums):\n    '''Returns the maximum number in the list.'''\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    \n    return max_val",
        "541": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef identify_characters(alphabet):\n    char_list = []\n    for c in alphabet:\n        char_list.append(c)\n    return char_list",
        "542": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here",
        "543": "def sum_even_numbers(numbers):\n \n result = 0\n \n for number in numbers:\n  if number % 2 == 0:\n   result += number\n \n return result\n \nprint(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "544": "def max_num(nums):\n    max = nums[0]\n    for num in nums[1:]:\n        if num > max:\n            max = num\n    return max\n\nnums = [5, 4, 2, 7, 12]\nprint(max_num(nums))",
        "545": "def sort_list_of_dicts_by_key(my_list, key):\n    return sorted(my_list, key=lambda k: k[key])",
        "546": "def remove_element(arr, element):\n    arr = [x for x in arr if x != element]\n    return arr",
        "547": "import scipy.optimize as opt \n  \ndef optimize_function(function, initial_guess): \n    result = opt.minimize(function, initial_guess) \n    return result.x",
        "548": "class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        for i in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\nif obj.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\")",
        "549": "def printTable(array):\n    # find the longest string in each of the inner lists\n    # so we can format the output\n    col_width = [max(len(str(x)) for x in col) for col in array]\n    for row in array:\n        print(\"  \".join(str(x).ljust(col_width[i]) for i, x in enumerate(row)))\n\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprintTable(array)\n\n# Output: \n# 1   2   3\n# 4   5   6\n# 7   8   9",
        "550": "def is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n\nprint(is_digit_only(\"0123\"))",
        "551": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    def remove_duplicates(self, list_nodes):\n        curr_node= self.head \n        new_list=[]\n        while curr_node != None: \n            if curr_node.data not in new_list: \n                new_list.append(curr_node.data) \n            curr_node = curr_node.next\n                \n        # creating a linked list from the unique elements of list_nodes  \n        self.head=None\n        for i in new_list:\n            self.insert_node(i)\n    \n    def insert_node(self, data): \n    # Create a new node \n        new_node = Node(data) \n        # Check if list is empty\n        if self.head is None: \n            self.head = new_node \n            return\n        # Otherwise, traverse to the end of list before \n        # inserting the new Node \n        last = self.head \n        while (last.next): \n            last = last.next\n        last.next =  new_node",
        "552": "# Function to calculate the maximum, minimum, and average values\ndef calculate_metrics(list):\n    # Calculate the maximum value\n    maximum = max(list)\n    \n    # Calculate the minimum value\n    minimum = min(list)\n   \n    # Calculate the average\n    n = len(list)\n    total = 0\n    for num in list:\n        total += num\n    average = total\/n\n    \n    return maximum, minimum, average\n\n# Main Program \nlist = [3, 4, 5, 6, 21, 8]\n\nmaximum, minimum, average = calculate_metrics(list)\n\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)\nprint(\"Average value:\", average)",
        "553": "from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))",
        "554": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n]",
        "555": "def sum_of_squares(n):\n    result = 0\n    for i in range(n+1):\n        result += i**2\n    return result",
        "556": "def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\ncapitalized_string = capitalize_string(\"this is an example\")\nprint(capitalized_string)",
        "557": "def print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size)",
        "558": "from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('\/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()",
        "559": "# Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv(\"stockdata.csv\")\n\n# Split data\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train\/Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclf.fit(X_train, y_train)\n\n# Model Accuracy\ny_pred = clf.predict(X_test)\nprint('Model accuracy: ',clf.score(X_test, y_test))",
        "560": "class Person:\n    \n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def toString(self):\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\"",
        "561": "class Car:\n    def __init__(self, make, model, color, mileage):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.mileage = mileage\n\n    def accelerate(self, speed):\n        self.speed = speed\n\n    def decelerate(self, speed):\n        self.speed = speed",
        "562": "# Python Program to print the Fibonacci series up to n numbers\n\nn = int(input(\"Enter the value of 'n': \"))\n\n# first two numbers\na = 0\nb = 1\n\nprint(\"Fibonacci Series:\") \nprint(a, b, end=\" \") \n  \nfor i in range(2,n):\n               \n    c = a + b\n    a = b\n    b = c\n    print(c, end = \" \")\n    \nprint()",
        "563": "def check_hello(s):\n    return 'Hello' in s",
        "564": "nums = [5, 10, 20, 6, 8]\nmax_num = max(nums)\nmax_index = nums.index(max_num)\n\nprint(max_index)",
        "565": "def fizz_buzz(arr):\n    new_arr = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            new_arr.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            new_arr.append(\"Fizz\")\n        elif element % 5 == 0:\n            new_arr.append(\"Buzz\")\n        else:\n            new_arr.append(element)\n    return new_arr\n\nprint(fizz_buzz([2, 3, 4, 5, 6, 15]))",
        "566": "def longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub)",
        "567": "def reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string))",
        "568": "def min_max(array):\n    min = array[0]\n    max = array[0]\n\n    for val in array[1:]:\n        if val > max:\n            max = val\n        if val < min:\n            min = val\n    return min, max",
        "569": "def convertToCamelCase(list):\n    camelCaseList = []\n\n    for string in list:\n        string = string.capitalize()\n        camelCaseList.append(string)\n\n    return ''.join(camelCaseList)",
        "570": "def find_longest_increasing_sequence(arr):\n longest_start = 0\n longest_length = 0\n\n current_start = 0\n current_length = 0\n\n for i in range(1, len(arr)):\n prev_val = arr[i - 1]\n curr_val = arr[i]\n\n if curr_val > prev_val:\n current_length += 1\n else:\n current_start = i\n current_length = 1\n\n if current_length > longest_length:\n longest_start = current_start\n longest_length = current_length\n\n longest_sequence = arr[longest_start:longest_start + longest_length]\n return longest_sequence\n\narr = [3, 2, 1, 4, 5, 6, 7, 8]\nlongest_seq = find_longest_increasing_sequence(arr)\nprint(longest_seq) \/\/ Output: [4, 5, 6, 7, 8]",
        "571": "import json\n\ndef parse_json(data):\n data = json.loads(data)\n return data['name'], data['age'], data['occupation']\n\nname, age, occupation = parse_json(data)\nprint(name, age, occupation)\n# Output: John 18 Software Engineer",
        "572": "def sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code.",
        "573": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5",
        "574": "def TowersOfHanoi(n, fromRod, toRod, auxRod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",fromRod,\"to rod\",toRod) \n        return\n    TowersOfHanoi(n-1, fromRod, auxRod, toRod) \n    print(\"Move disk\", n, \"from rod\", fromRod, \"to rod\", toRod) \n    TowersOfHanoi(n-1, auxRod, toRod, fromRod) \n\nn = 4\nTowersOfHanoi(n, 'A', 'C', 'B')",
        "575": "def euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5",
        "576": "def absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))",
        "577": "import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('product_data.csv')\n\n# Create an item-based collaborative filter\ncf = NearestNeighbors(metric='cosine', algorithm='brute')\ncf.fit(data)\n\n# Make recommendations\ndistances, indices = cf.kneighbors(data, n_neighbors=3)\n\n# Print results \nfor i in range(len(data)):\n print('Recommendations for item {}:'.format(i), indices[i])",
        "578": "def filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes",
        "579": "book_list = [\n  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},\n  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},\n]",
        "580": "import pymysql\nfrom pymongo import MongoClient\nimport psycopg2\n\n# connect to MySQL\nconnection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')\n\n# connect to MongoDB\nclient = MongoClient('mongodb:\/\/localhost:27017')\n\n# connect to PostgreSQL\nconnection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')\n\n# define a query for each database\nquery_mysql = 'SELECT * FROM table_name'\nquery_mongodb = {'name': 'John Doe'}\nquery_postgresql =  'SELECT * FROM table_name WHERE age > 18'\n\n# execute the query and fetch the results\nresult_mysql = connection_mysql.execute(query_mysql)\nresult_mongodb = client.db_name.collection_name.find(query_mongodb)\nresult_postgresql = connection_postgresql.execute(query_postgresql)\n\n# close the connections\nconnection_mysql.close()\nclient.close() \nconnection_postgresql.close()\n\n# render the results on webpage\ndef render_page(request):\n    return render(request, 'template.html', {\n        'data_mysql': result_mysql, \n        'data_mongodb': result_mongodb,\n        'data_postgresql': result_postgresql\n    })",
        "581": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary)",
        "582": "def is_prime(num):\n for i in range(2, num \/\/ 2 + 1):\n if num % i == 0:\n return False\n return True\n\ndef prime_list(lst):\n prime_lst = []\n for num in lst:\n if is_prime(num):\n prime_lst.append(num)\n return prime_lst\n\nlst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\nprime_lst = prime_list(lst)\nprint(prime_lst) # Output: [2, 3, 7, 11, 17]",
        "583": "# Function to find the most efficient path\ndef find_path(start, end):\n    # Current location of the robot\n    x = start[0]\n    y = start[1] \n    # Destination coordinates\n    goal_x = end[0] \n    goal_y = end[1] \n    # set to record the cells already visited\n    visited = set() \n    # define a queue to store the tuple of current position and the path\n    queue = [([x, y], [])] \n    # define a neighbor list \n    neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] \n    # define a maximum tries\n    max_tries = 100 \n    # define a while loop\n    while queue:\n        # get current position and current path\n        position, path = queue.pop(0) \n        # check if the goal is reached\n        if position[0] == goal_x and position[1] == goal_y:\n            return path + [position]\n        # check if the current position is out of maximum tries and not visited before\n        if position not in visited and max_tries > 0:\n            visited.add(position)\n            max_tries = max_tries - 1 \n            #get all neighbors of the current position\n            for neighbor_x, neighbor_y in neighbor:\n                next_x = position[0] + neighbor_x\n                next_y = position[1] + neighbor_y\n                # add to the queue\n                queue.append(([next_x, next_y], path + [position]))\n    return None\n \nstart = (4, 2) \nend = (9, 9) \n# most efficient path from start to end\npath = find_path(start, end) \nprint(path)",
        "584": "data = [1, 2, 3, 4]\n\nresult = [x for x in data if x > 2]",
        "585": "# define f1 #\ndef f1(x):\n    return x + 1\n\n# define f2 #\ndef f2(x):\n    return f1(x) * f1(x)\n\n# call f2 #\nprint(f2(2)) #Output: 9",
        "586": "def func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)",
        "587": "# bin\/usr\/python\n\n# Setting up GPIO pins\nfrom time import sleep\nimport RPi.GPIO as GPIO\n\nGPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi\nGPIO.setwarnings(False)\n\nGPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet\nGPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off\n\nimport time\ntimestr = time.strftime(\"%Y%m%d %H%M%S\")\n\n# Import functions to analyze license validity from CheckLicense.py\nfrom CheckLicense import check_license, calc_BAC\n\n                                 \nimport getpass\nimport sys\nimport re\n\n# Operating modes\nwhile True:\n    #try:\n    mode_req=raw_input(\"Enter Mode(normal, party, barkeep): \")\n\n    if mode_req==\"party\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"party\"\n                 \n    if mode_req==\"normal\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"normal\"\n\n    if mode_req==\"barkeep\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"barkeep\"\n\n            \n#Normal mode operations--------------------------------------------------------------------------------------------\n    while mode=='normal':\n            #try:\n        print '{0} mode!' .format(mode)\n\n        raw_text=getpass.getpass('Swipe card now:   ').strip() \n\n        check_license_out=check_license(raw_text)\n            \n        valid_license=check_license_out[0] \n        first_name=check_license_out[1]\n        last_name=check_license_out[2]\n        DL_num=check_license_out[3]\n        \n# Check to see if person is registered user\n\n        users=open(\"users_list.txt\", 'r')\n        hit=0\n        print DL_num\n        \n        if valid_license=='Yes':\n              for line in users:\n                      if re.search(DL_num, line, re.IGNORECASE):\n                              hit=hit+1\n              if hit>=1:\n                      valid_license='Yes'\n              else: \n                      print 'Not registered user'\n                      valid_license='No'\n# Calculating the BAC\n    \n        BAC=calc_BAC(raw_text)\n        print BAC\n\n    # Opening the solenoid \n        if valid_license=='Yes':\n              GPIO.setup(3, GPIO.HIGH)\n              print 'Beer time!'\n              sleep(2);\n              GPIO.setup(3, GPIO.LOW)\n              with open(\"swipes.txt\", \"a\") as myfile:\n                      myfile.write(last_name+\",\"+first_name+\" \")\n                      myfile.write(DL_num+\" \")\n                      myfile.write(mode+\" \")\n                      myfile.write(time.strftime(\"%Y-%m-%d\")+\" \")\n                      myfile.write(str(time.time())+\"\\n\")\n\n       # except (NameError, IndexError, ValueError):\n        #    print \"error\"\n        #    continue\n\n    #Party mode operations--------------------------------------------------------------------------------------------\n                                     \n    while mode==\"party\":\n        try:\n         print '{0} mode!' .format(mode)\n\n         raw_license_text=getpass.getpass('Swipe card now:   ').strip()\n         check_license_out=check_license(raw_license_text) \n\n         valid_license=check_license_out[0] \n         first_name=check_license_out[1]\n         last_name=check_license_out[2] \n\n\n        # Opening the solenoid \n\n         if valid_license=='Yes':\n                 GPIO.setup(3, GPIO.HIGH)\n                 print 'Beer time!'\n                 sleep(2);\n                 GPIO.setup(3, GPIO.LOW)\n                 with open(\"swipes_normal.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\",\")\n                         myfile.write(time.strftime(\"%Y%m%d%H%M%S\\n\"))\n\n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                                  \n    #Barkeep mode operations-------------------------------------------------------------------------------------------\n     \n    while mode==\"barkeep\":\n        try:\n            print '{0} mode!' .format(mode)\n\n            check_license_out=check_license(getpass.getpass('Swipe card now:   ').strip()) \n\n            valid_license=check_license_out[0] \n            first_name=check_license_out[1]\n            last_name=check_license_out[2] \n            #usr_chksum = #chksum(firstname_lastname)\n            #'{0}beer_score' .format(usr_chksum) \n            #Check to see if person is blacklisted\n            blacklist=open(\"blacklist.txt\", 'r')\n            hit=0\n\n            if valid_license=='Yes':\n                 for line in blacklist:\n                         if re.search(last_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                         if re.search(first_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                 if hit>=2:\n                         print \"We don't serve your kind here.\"\n                         blacklisted='Yes'\n                 else: \n                         blacklisted='No'\n\n            #Calculate BAC\n                         \n            #Opening the solenoid \n            if blacklisted=='No':\n                if BAC < intoxicated:\n                    GPIO.setup(3, GPIO.HIGH)\n                    print 'Beer time!'\n                    print BAC\n                    sleep(2);\n                    GPIO.setup(3, GPIO.LOW)\n                    with open(\"swipes_barkeep.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\"_\")\n                         myfile.write(time.strftime(\"%Y-%m-%d %H:%M%S\\n\"))\n                else:\n                    print 'Your BAC is {0}' .format(BAC)\n                    print \"You are too drunk, beer time is over\"\n                 \n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                    \n   # except (NameError, IndexError, ValueError):\n        print \"error\"\n       # continue\n#end ---------------------------------------------------------------------------\n        \n",
        "588": "import random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit)",
        "589": "# Player class\nclass Player(object):\n def __init__(self):\n self.health = 100\n self.location = 'room one'\n self.monsters_killed = 0\n\n# Room class\nclass Room(object):\n def __init__(self):\n self.name = ''\n self.description = ''\n self.monsters = []\n\n def add_monster(self, monster):\n self.monsters.append(monster)\n\n# Monster class\nclass Monster(object):\n def __init__(self):\n self.name = ''\n self.health = 100\n\n def attack(self, player):\n player.health -= 10\n\n# Function to start the game\ndef start_game():\n # Create player, rooms and monsters\n player = Player()\n\n# Main game loop\nwhile True:\n # Show the current room;\n print(f'You are in {player.location}.')\n # Display available actions\n print('Available actions: move, fight')\n # Get user's action\n response = input('What would you like to do? ').lower()\n\n # Moving to a new room\n if response == 'move':\n # Get the list of available rooms\n # Get the user's destination\n # Move the player to the chosen room\n\n# Fighting a monster\n if response == 'fight':\n # Get all monsters in the current room\n # Get the user's chosen monster\n # Initiate a battle between the player and the monster\n\n# End of the game\n if player.health <= 0:\n print ('You have been defeated!')\n break\n\nif __name__ == '__main__':\n start_game()",
        "590": "import pyttsx3\n\ndef text_to_speech(sentence):\n    engine = pyttsx3.init()\n    engine.say(sentence)\n    engine.runAndWait()\n    \ntext_to_speech(\"Hello, this is a simple sentence\")",
        "591": "# Python Backend\n# Web server setup\napp = Flask(__name__)\n\n# Database setup\ndb = SQLAlchemy(app)\n\n# Model for tasks\nclass Task(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(80), unique=True, nullable=False)\n  is_completed = db.Column(db.Boolean, default=False)\n\n  def __repr__(self):\n    return f'<Task {self.id}: {self.title}>'\n\n# API Endpoint\n@app.route('\/tasks', methods=['POST'])\ndef create_task():\n  request_data = request.get_json()\n  title = request_data.get('title')\n  if not title:\n    return jsonify({'error': 'Title must be provided.'}), 400\n\n  task = Task(title=title)\n  db.session.add(task)\n  db.session.commit()\n\n  return jsonify(task.serialize())\n\n# React Frontend\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const TaskList = () => {\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    getTasks()\n  }, [])\n\n  const getTasks = async () => {\n    const response = await axios.get('http:\/\/localhost:3000\/tasks')\n    setTasks(response.data)\n  }\n\n  return (\n    <div>\n      {tasks.map(task => (\n        <div key={task.id}>\n          <input type=\"checkbox\" checked={task.is_complete} \/>\n          <label>{task.title}<\/label>\n        <\/div>\n      ))}\n    <\/div>\n  )\n}",
        "592": "def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict",
        "593": "list_of_ints = [1, 3, 6, 8, 10]\n\nlist_of_ints.reverse()\n\nprint(list_of_ints) # [10, 8, 6, 3, 1]",
        "594": "def sum_tree(root):\n    if root is None:\n        return 0\n\n    return root.val + sum_tree(root.left) + sum_tree(root.right)",
        "595": "from flask import Flask, request\napp = Flask(name)\n\n@app.route('\/minmax', methods=['POST'])\ndef minmax():\n data = request.get_json()\n nums = data['nums']\n minVal = min(nums)\n maxVal = max(nums)\n return {'min': minVal, 'max': maxVal}\n\nif name == 'main':\n app.run()",
        "596": "# Defining a class for 3-dimensional vectors \n \nclass Vector: \n  \n    # defining constructor \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n  \n    # Defining function to print vector\n    def printVec(self):\n        print(self.x, self.y, self.z) \n  \n    # Defining function to add two vectors \n    def addVec(self, V):\n        return Vector(self.x+V.x, self.y+V.y, self.z+V.z) \n  \n    # Defining function to subtract two vectors \n    def subVec(self, V): \n        return Vector(self.x-V.x, self.y-V.y, self.z-V.z) \n\n# Driver code \nv1= Vector(1, 2, 3)\nv2= Vector(5, 3, 2) \n\nprint(\"Vector 1: \")\nv1.printVec() \nprint(\"Vector 2: \")\nv2.printVec()\n\nv3 = v1.addVec(v2)\nprint(\"sum of vector 1 and vector 2: \")\nv3.printVec()\n\nv4 = v1.subVec(v2) \nprint(\"difference of vector 1 and vector 2: \")\nv4.printVec()",
        "597": "def slicing(string, start, end):\n    return string[start:end]\n    \nprint(slicing(string, start, end))",
        "598": "import nltk \nfrom nltk.tokenize import word_tokenize \n  \n# input text  \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n  \n# converting the text into tokens \ntoken = word_tokenize(text) \n  \nprint(token)",
        "599": "def shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len",
        "600": "# Array to search\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\n\n# Target value\nvalue = 5\n\n# Binary search function\ndef binarySearch(array, target):\n # Find the middle of the array\n mid = len(array) \/\/ 2\n \n # Check if the target is equal to the middle value \n if array[mid] == target:\n  return True\n \n # If the target is less than the middle value, search the left half\n elif target < array[mid]:\n  return binarySearch(array[:mid], target)\n  \n # If the target is greater than the middle value, search the right half\n elif target > array[mid]:\n  return binarySearch(array[mid+1:], target)\n \n # If the target is not found\n else:\n  return False\n  \n# Check if the value is in the array\nif binarySearch(sortedArray, value):\n print('Value found!')\nelse:\n print('Value not found!')",
        "601": "def item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts",
        "602": "class WordCounter:\n    def __init__(self, filename):\n        self.word_counts = {}\n        self.filename = filename\n        self.process_file()\n\n    def process_file(self):\n        with open(self.filename) as f:\n            for line in f:\n                words = line.split()\n                for word in words:\n                    if word in self.word_counts:\n                        self.word_counts[word] += 1\n                    else:\n                        self.word_counts[word] = 1\n\n    def get_word_counts(self):\n        return self.word_counts",
        "603": "def convert_string_case(string):\n    new_string = string.swapcase()\n    return new_string\n\nstring = \"this Is A TeST\"\nnew_string = convert_string_case(string)\nprint(new_string)",
        "604": "from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import get_language\nfrom django.utils.translation import ugettext as _\nfrom django.utils.encoding import force_unicode, smart_str, smart_unicode\nfrom django.forms.fields import Field\nfrom django.forms import ValidationError\nfrom widgets import TransCharWidget, TransTextWidget\n\ndef get_default_language_name():\n    '''\n    Get language from default language specified by LANGUAGE_CODE in settings\n    Used in error messages\n    '''\n    lang_name = ''\n    for lang in settings.LANGUAGES:\n        if lang[0] == settings.LANGUAGE_CODE:\n            lang_name = lang[1]\n            break\n    return force_unicode(lang_name)\n\nclass TransDbValue(unicode):\n    '''\n    This class implements a unicode string, but with a hidden attribute raw_data.\n    When used as a string it returns the translation of the current language\n    raw_data attribute stores a dictionary with all translations\n    Also implements a method \"get_in_language(language)\" that returns the translation on any available language\n    '''\n    raw_data = {}\n\n    def get_in_language(self, language):\n        if self.raw_data and self.raw_data.has_key(language):\n            return self.raw_data[language]\n        else:\n            return u''\n\n    def set_in_language(self, language, value):\n        self.raw_data[language] = value\n\nclass TransFormField(Field):\n    '''\n    forms field, used when ModelForm (or deprecated form_for_model\/form_form_instance) is called\n    Also implements form validation in admin\n    '''\n    def clean(self, value):\n        if isinstance(value, dict) and self.required:\n            filled_value = [ v for v in value.values() if bool(v) ]\n            if not filled_value:\n                raise ValidationError, _(\"This field is required.\")\n        return super(TransFormField, self).clean(value)\n\nclass TransField(models.Field):\n    '''\n    Model field to be subclassed\n    Used for storing a string in many languages at database (with python's dictionary format)\n    pickle module could be used, but wouldn't alow search on fields?\n    '''\n    def get_internal_type(self):\n        return 'TextField'\n\n    def to_python(self, value):\n        if isinstance(value, TransDbValue):\n            return value\n\n        if isinstance(value, dict): # formfield method makes this function be called with value as a dict\n            python_value = value\n        else:\n            try:\n                python_value = eval(value)\n                for k,v in python_value.items():\n                    python_value[k] = smart_unicode(v)\n            except Exception:\n                python_value = None\n        if isinstance(python_value, dict):\n            if python_value.has_key(get_language()) and python_value[get_language()]:\n                result = TransDbValue(python_value[get_language()])\n            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:\n                result = TransDbValue(python_value[settings.LANGUAGE_CODE])\n            else:\n                val = \"bal\"\n                for item in python_value.items():\n                    try:\n                        val = item[1]\n                    except:\n                        pass\n                    if val: break\n\n                result = TransDbValue(python_value.items()[0][1])\n            result.raw_data = python_value\n        else:\n            result = TransDbValue(value)\n            result.raw_data = {settings.LANGUAGE_CODE: value}\n        return result\n\n    def get_db_prep_save(self, value):\n        if not isinstance(value, TransDbValue):\n            return value\n        value = [u\"'%s': '''%s'''\" % (k, v) for k, v in value.raw_data.items()]\n        value = u'{%s}' % u','.join(value)\n        return smart_str(value)\n\n    def formfield(self, **kwargs):\n        defaults = {'form_class': TransFormField}\n        defaults.update(kwargs)\n        return super(TransField, self).formfield(**defaults)\n\n    def flatten_data(self, follow, obj=None): \n        '''\n        for serializing objects\n        '''\n        raw_data = self._get_val_from_obj(obj).raw_data.copy()\n        for k,v in raw_data.items():\n            raw_data[k] = smart_str(v)\n        return {self.attname: raw_data}\n\nclass TransCharField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransCharWidget\n        return super(TransCharField, self).formfield(**kwargs)\n\nclass TransTextField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransTextWidget\n        return super(TransTextField, self).formfield(**kwargs)\n\n",
        "605": "def get_city_info(city, country, latitude, continent):\n   print(\"City: {}, Country: {}, Latitude: {}, Continent: {}\".format(\n        city, country, latitude, continent))\n \nget_city_info('Edinburgh', 'Scotland', '54.6\u00b0N', 'UK')\nget_city_info('Paris', 'France', '48.86\u00b0N', 'Europe')\nget_city_info('Dhaka', 'Bangladesh', '23.78\u00b0N', 'Asia')",
        "606": "def remove_duplicate_characters(string):\n    result = \"\"\n    seen = set()\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result += char\n    return result\n\nprint(remove_duplicate_characters(\"bufferoverflow\"))",
        "607": "def sum_list(arr):\n    \"\"\"Finds the sum of a given list of numbers.\n    \n    Args:\n        arr (list): List of numbers.\n        \n    Returns:\n        int: Sum of list elements.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum",
        "608": "import math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)",
        "609": "# imports\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n# Split the dataset into training and testing sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Preprocess the data\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# create a model\nmodel = keras.Sequential()\n# add a convolution layer\nmodel.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D(pool_size=(2, 2)))\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n# add a dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n# add an output layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nmodel.evaluate(x_test, y_test)",
        "610": "def two_sum(numbers, given):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == given:\n                return True\n    return False",
        "611": "import random\n\ndef random_num(start, stop):\n    return random.randint(start, stop)\n\n\n# Example\nnum = random_num(0, 10)\nprint(num)",
        "612": "import webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)",
        "613": "dict1 = dict(zip(list1, list2)) \nprint(dict1)",
        "614": "def is_even(n):\n    if n % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nis_even(4)",
        "615": "import random\n\n# Create class for environment\nclass TicTacToeEnv():\n    # Define initializer\n    def __init__(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n    \n    # Define a reset method to set initial state\n    def reset(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n        return self.state\n        \n    # Define step function\n    def step(self, action):\n        # Set player mark\n        self.state[action] = self.player\n        # Check for winner\n        winner = self.check_winner()\n        done = False\n        if winner == 'X' or winner == 'O':\n            reward = 1\n            done = True\n        else:\n            reward = 0\n        # Switch players\n        if self.player == 'X':\n            self.player = 'O'\n        else:\n            self.player = 'X'\n        # Check for draw and switch player turn\n        if self.player_turn == 8:\n            done = True\n            reward = 0.5\n        self.player_turn += 1\n        # Return state, reward, done, info\n        return self.state, reward, done, None\n        \n    # Define a method to check if someone has won\n    def check_winner(self):\n        win_state = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\n        for i in win_state:\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'X':\n                return 'X'\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'O':\n                return 'O'\n        return None\n\n# Play a game\nenv = TicTacToeEnv()\nenv.reset()\ndone = False\nwhile not done:\n    action = random.randint(0, 8)\n    state, reward, done, _ = env.step(action)\n    print(env.state)\n    if reward == 1 or reward == 0.5:\n        print(\"Winner: \"+str(reward))",
        "616": "strings = ['hello', 'world', 'computer']\n\ndictionary = {}\n\nfor string in strings:\n for char in string:\n  dictionary[char] = len(string)\n\nprint(dictionary)  # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}",
        "617": "def sort_names(names):\n    names.sort()\n    return names\n\nnames = [\"John\", \"Harry\", \"Robert\"]\nresult = sort_names(names)\nprint(result)",
        "618": "import requests\n\nurl = \"https:\/\/www.example.com\/\" \nresponse = requests.get(url) \n\nif response.status_code == 200: \n    print(response.content) \nelse:\n    print(\"Error fetching the page\")",
        "619": "There are 5 words in the given string. \n\nTo count the number of words in a string, you can use the `len()` or `count()` functions in Python. \n\nFor example: \n```\nnum_words = len(string.split())\n```\nor \n```\nnum_words = string.count(\" \") + 1\n```",
        "620": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr \n\nmy_arr = [1, 5, 9, 4, 2]\n\nprint(shuffle(my_arr))",
        "621": "def gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')",
        "622": "def fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9 \n    return round(celsius, 2)",
        "623": "import string\nimport random\n\ndef generate_password():\n   up_alphabet = string.ascii_uppercase\n   low_alphabet = string.ascii_lowercase\n   digits = string.digits\n   symbols = string.punctuation\n   length = 8\n   pass_characters = up_alphabet + low_alphabet + digits + symbols\n   password =  ''.join(random.sample(pass_characters, length))\n   return password\n\nprint(generate_password())",
        "624": "import numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimport pickle\n\n# load training data\nwith gzip.open('.\/mnist_dataset\/mnist.pkl.gz', 'rb') as f:\n    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')\n\n# prepare logistic regression\nX_train, y_train = train_data[0], train_data[1]\nX_valid, y_valid = valid_data[0], valid_data[1]\nX_test, y_test = test_data[0], test_data[1]\n\nX_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])\nX_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])\nX_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])\n\ndef sigmoid(z):\n    return 1.0\/(1.0+np.exp(-z))\n\ndef LogisticRegression(X, y, max_iter, alpha):\n    m, n = X.shape\n    weights = np.zeros(n)\n    \n    for _ in range(max_iter):\n        weights = weights - alpha * (1\/m) * (X.T @ (sigmoid(X @ weights) - y))\n\n    return weights\n\nweights = LogisticRegression(X_train, y_train, 1000, 0.001)\n\n# accuracy on training set\npredictions = np.round(sigmoid(X_train @ weights))\ntrain_accuracy = np.mean(predictions == y_train)\n\n# accuracy on validation set\npredictions = np.round(sigmoid(X_valid @ weights))\nvalid_accuracy = np.mean(predictions == y_valid)\n\n# accuracy on test set\npredictions = np.round(sigmoid(X_test @ weights))\ntest_accuracy = np.mean(predictions == y_test)\n\nprint('Train accuracy = ', train_accuracy)\nprint('Validation accuracy = ', valid_accuracy)\nprint('Test accuracy = ', test_accuracy)",
        "625": "import random\n\ndef generate_snowflake():\n  # Generate random numbers between 0 and 1\n  a = random.random()\n  b = random.random()\n  c = random.random()\n\n  # Generate the snowflake\n  snowflake = [] \n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))\n\n  return snowflake",
        "626": "import random\n \nx = random.randint(0, 9)\nprint(x)",
        "627": "class Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number",
        "628": "def get_jaccard_similarity(str1, str2):\n    a = set(str1.split()) \n    b = set(str2.split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))\n\n# Driver code \nstr1 = \"python programming\"\nstr2 = \"java programming\"\nprint(get_jaccard_similarity(str1, str2))",
        "629": "import random\n\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]\nrandom.shuffle(my_list)\n\nfor i in range(5):\n    print(my_list[i])",
        "630": "my_list = [2, 8, 5, 2, 6, 3, 4]\nmy_list = list(dict.fromkeys(my_list))\nmy_list.sort()\nprint(my_list) # [2, 3, 4, 5, 6, 8]",
        "631": "def prime_numbers(x, y):\n \n prime_nums = {}\n \n for i in range(x, y+1):\n if(i > 1):\n for j in range(2, i):\n if(i % j == 0):\n break\n else:\n prime_nums[i] = i\n \n return prime_nums\n \nprint(prime_numbers(8, 20))\n# { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }",
        "632": "for i in range(1, 11):\n    print(i**3)",
        "633": "def get_string_length(string_1, string_2):\n    return len(string_1 + string_2)",
        "634": "import random\n\ndef randomElement(arr):\n    return random.choice(arr)",
        "635": "# import libraries \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nimport numpy \n\n# load the dataset \ndataset = numpy.loadtxt(\"mnist.csv\", delimiter=\",\") \n\n# split into input (X) and output (Y) variables \nX = dataset[:,0:784] \nY = dataset[:,784] \n\n# Create model\nmodel = Sequential() \nmodel.add(Dense(784, input_dim=784, activation='relu'))\nmodel.add(Dense(256, activation='relu')) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model \nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) \n\n# Fit the model \nmodel.fit(X, Y, epochs=10, batch_size=128, verbose=2)\n\n# Evaluate the model \nscores = model.evaluate(X, Y) \nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))",
        "636": "list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]\n\n# Sort list by given key\nsorted_list = sorted(list_of_dicts, key=lambda item:item['color'])\n\nprint(sorted_list)",
        "637": "import tweepy\n\n# Replace the API_KEY and API_SECRET with your application's key and secret.\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True,\n wait_on_rate_limit_notify=True)\n\n# Replace the hashtag with your hashtag of interest.\nhashtag = '#100DaysOfCode'\n\n# Fetch the tweets\ntweets = tweepy.Cursor(api.search, q=hashtag, lang=\"en\").items()\n\n# Print out the tweets\nfor tweet in tweets:\n print(tweet.text)",
        "638": "def count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count",
        "639": "var1 = 3\nvar2 = 7\n\nsum = var1 + var2\nprint('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'",
        "640": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n  \n# Driver Program \n    print(fibonacci(10))",
        "641": "# projects\/quotes\/models.py\n\nclass Quote(models.Model):\n    author = models.CharField(max_length=255)\n    quote_text = models.TextField()\n\n\nclass UserQuote(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)\n\n# projects\/quotes\/views.py\n\ndef index(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    quotes = request.user.userquote_set.all()\n    return render(request, 'quotes\/index.html', {'quotes': quotes})\n\ndef login(request):\n    if request.user.is_authenticated:\n        return redirect('index')\n\n    if request.method == 'POST':\n        form = AuthenticationForm(request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            django_login(request, user)\n            return redirect('index')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'quotes\/login.html', {'form': form})",
        "642": "import random\n\ndef roll_dice():\n    '''This function simulates rolling two dice.'''\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    print(\"Die 1: {}\".format(die_1))\n    print(\"Die 2: {}\".format(die_2))\n    return (die_1, die_2)",
        "643": "formatted = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'",
        "644": "def generate_fibonacci(length):\n    # Initialize\n    n1, n2 = 0, 1\n\n    # Check if length is valid\n    if length <= 0:\n        print('Invalid length. Positive numbers only.')\n    elif length == 1:\n        print(n1)\n    else:\n        print(n1, n2, end=' ')\n    \n    # Generate sequence\n    for i in range(2, length):\n        n3 = n1 + n2\n        print(n3, end=' ')\n        n1 = n2\n        n2 = n3\n\n# Show output\ngenerate_fibonacci(6)\n# Output: 0 1 1 2 3 5",
        "645": "total = 0\nfor i in range(1, 10):\n    if i % 2 != 0:\n        total += i\nprint(total)",
        "646": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)",
        "647": "letters_numbers = {\n 'a': 1, 'b': 2, 'c': 3,  'd': 4, 'e': 5,\n 'f': 6, 'g': 7, 'h': 8,  'i': 9, 'j': 10,\n 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,\n 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,\n 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26\n}\nnumbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys()))\nprint(numbers_letters)",
        "648": "def lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The length of LCS is \" + lcs(X, Y, m, n))",
        "649": "def merge_sorted_lists(list1, list2):\n    new_list = []\n\n    i1 = 0\n    i2 = 0\n    while i1 < len(list1) and i2 < len(list2):\n        if list1[i1] < list2[i2]:\n            new_list.append(list1[i1])\n            i1 += 1\n        else:\n            new_list.append(list2[i2])\n            i2 += 1\n    \n    while i1 < len(list1):\n        new_list.append(list1[i1])\n        i1 += 1\n    \n    while i2 < len(list2):\n        new_list.append(list2[i2])\n        i2 += 1\n\n    return new_list\n\nlist1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7]\n\nmerged = merge_sorted_lists(list1, list2)\nprint(merged)",
        "650": "from collections import Counter\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)",
        "651": "def calculate_bmi(weight, height):\n    bmi = weight\/(height**2)\n    return bmi",
        "652": "list_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))",
        "653": "def search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)",
        "654": "import requests\n\nurl = 'https:\/\/www.example.com\/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])",
        "655": "def generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))",
        "656": "def remove_item(item, list): \n    list.remove(item) \n    return list\n  \nlist_org = [8, 4, 5, 9, 2]\n  \nresult = remove_item(5, list_org)\nprint(result)",
        "657": "def average(numbers: list):\n    if numbers:\n        return sum(numbers) \/ len(numbers)\n    else:\n        return 0\n    \nnumbers = [2, 3, 4, 5, 6]\nprint(f\"Average of {numbers} is {average(numbers)}\")",
        "658": "def is_in_range(n, lower, upper):\n    return lower <= n <= upper",
        "659": "def is_prime(list_of_numbers):\n    # Iterate over the list of numbers\n    for num in list_of_numbers:\n        # Check if the number is divisible by any number\n        # other than 1 and the number itself\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                # If there is any divisor, the\n                # number is not a prime number\n                return False\n    # All the numbers in the list are prime numbers\n    return True\n\nlist_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]\noutcome = is_prime(list_of_numbers)\nprint(outcome)",
        "660": "def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    \nprint(quicksort(list))\n\n# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]",
        "661": "import textblob\n\ndef detect_sentiment(text):\n    analysis = textblob.TextBlob(text)\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity == 0:\n        return 'neutral'\n    else:\n        return 'negative'",
        "662": "def check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\nif check_divisible_3and5(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)",
        "663": "for i in range(100):\n    if (i > 10):\n        break\n    print(i)",
        "664": "from flask import Flask, jsonify, request\n\n# Class\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n# Create the application instance\napp = Flask(__name__)\n\n# Create a URL route in our application for \"\/\"\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n\n    # POST request\n    if request.method == 'POST':\n        json_data = request.get_json(force=True)\n        if not json_data:\n            return jsonify({'message': 'No input data provided'}), 400\n        user_name = json_data['name']\n        user_email = json_data['email']\n        user = User(name=user_name, email=user_email)\n\n        return jsonify({\n            'name': user.name,\n            'email': user.email\n        })\n    \n    # GET request\n    if request.method == 'GET':\n        # Get user list\n        users = [user.__dict__ for user in users]\n        return jsonify({'users': users}), 200\n\n# Run the application\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)",
        "665": "import numpy as np #importing the libraries \nfrom sklearn.neural_network import MLPClassifier #importing the neural network classifier\n\n#defining the input values\nX = np.array([[0,0],[0,1],[1,0],[1,1]])\ny = np.array([[0],[1],[1],[0]])\n\n#Creating the model\nmodel = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.\nmodel.fit(X,y)\n\n#Testing the model with a new input\ntest_data = np.array([[1,1]])\nprediction = model.predict(test_data) \nprint(\"The model predicts the output as:\",prediction[0])",
        "666": "def prime_factors(num):\n prime_list = []\n i = 2\n while i * i <= num:\n if num % i:\n i += 1\n else:\n num \/\/= i\n prime_list.append(i)\n if num > 1:\n prime_list.append(num)\n return prime_list\n\nn = int(input('Enter a positive integer: '))\nprint(prime_factors(n))",
        "667": "\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")",
        "668": "import unittest\n\ndef add(a, b):\n    return a + b\n\nclass myTests(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 7), 6)\n\n    def test_type(self):\n        self.assertRaises(TypeError, add, 'a', 'b')\n\nif __name__ == '__main__':\n    unittest.main()",
        "669": "def sortBySecondElement(lst):\n    # Sort the list of tuples by their second elements\n    return sorted(lst, key=lambda x : x[1])\n\n# Testing\nlst = [(1, 3), (3, 2), (4, 1), (2, 4)]\n\nsortedLst = sortBySecondElement(lst)\n\nprint(sortedLst)\n\n# Output\n# [(4, 1), (3, 2), (1, 3), (2, 4)]",
        "670": "class User:\n \"\"\"A class representing a user.\"\"\"\n def __init__(self, name, age, address, email):\n self.name = name\n self.age = age\n self.address = address\n self.email = email\n\nclass Contact:\n \"\"\"A class representing a contact.\"\"\"\n def __init__(self, name, age, phone_number):\n self.name = name\n self.age = age\n self.phone_number = phone_number",
        "671": "class Employee:\n    def __init__(self, emp_id, name, department, salary):\n        self.emp_id = emp_id\n        self.name = name\n        self.department = department\n        self.salary = salary",
        "672": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "673": "import sqlite3\n\nconn = sqlite3.connect(\"example.db\")\ncur = conn.cursor()\n\nsql = \"SELECT name FROM sqlite_master WHERE type='table';\"\ncur.execute(sql)\ntables = cur.fetchall()\n\ncount = 0\nfor table in tables:\n    sql = f\"SELECT COUNT(*) FROM {table[0]};\"\n    cur.execute(sql)\n    count += cur.fetchone()[0]\n\nprint(f\"Number of entries: {count}\")",
        "674": "def filter_strings(list_of_strings):\n    return list(filter(lambda x: x.isalpha(), list_of_strings))\n\nprint (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']",
        "675": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "676": "def is_palindrome(string):\n   # reverse the string\n   rev_string = string[::-1] \n   \n   # check if the string is equal to its reverse\n   if (string == rev_string): \n     return True\n   return False\n\n# Example usage:\n\nresult = is_palindrome('racecar')\n# result = True",
        "677": "import requests\nimport json\nimport sqlite3\n\n# Make a GET request to the API\nresponse = requests.get(url)\ndata = response.json()\n\n# Save the data to a database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\nfor item in data:\n    c.execute(\"INSERT INTO items VALUES (?, ?)\", (item['id'], item['name']))\nconn.commit()\nconn.close()",
        "678": "for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n if num % 2 == 0:\n print(num)",
        "679": "def GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x",
        "680": "def transposeMatrix(matrix): \n m = len(matrix) \n n = len(matrix[0]) \n  \n # Create a new matrix \n transpose = [[0 for x in range(m)] for y in range(n)] \n  \n # Iterate through the original matrix \n for i in range(m): \n for j in range(n): \n transpose[j][i] = matrix[i][j] \n return transpose",
        "681": "def matrix_multi(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n\n    if cols_A != rows_B:\n        print(\"Cannot multiply the given matrices.\")\n        return\n\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C",
        "682": "def calculator():\n  while True:\n    try:\n      userInput = input('Input equation (type \"quit\" to exit): ')\n\n      if userInput == \"quit\":\n        break\n        \n      result = eval(userInput)\n      print(result)\n\n    except:\n      print('Invalid equation')\n\ncalculator()",
        "683": "text = \"A quick brown fox jumps over the lazy dog.\"\n\ncount = {} \nfor character in text: \n    if character in count: \n            count[character] += 1\n    else: \n            count[character] = 1\n  \nfor key in count: \n    print('%s appears %d times' % (key, count[key]))",
        "684": "\"\"\"\nWrite a Python program to create a class for managing a linked list.\n\"\"\"\n\n# Create the Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# Create the LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def addNode(self, data):\n        node = Node(data)\n        if self.head == None:\n            self.head = node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = node\n            \n    def printList(self):\n        curr = self.head\n        while curr != None:\n            print(curr.data)\n            curr = curr.next",
        "685": "def remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result",
        "686": "import sys\n\ndef factorial(n):\n if n == 1 or n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n try:\n number = int(input('Please enter a number: '))\n print(f'{number}! = {factorial(number)}')\n except ValueError:\n print('Please enter a valid number.')\nelse:\n print('Please provide a single argument --number')",
        "687": "import networkx as nx\n\ndef page_rank(G, alpha=0.85, personalization=None, \n max_iter=100, tol=1.0e-6, nstart=None, weight='weight', \n dangling=None):\n\n\"\"\"\nReturn the PageRank of the nodes in the graph. \n\nG: graph\nalpha: damping parameter for PageRank, default=0.85\npersonalization: \n    dict, optional \n    The \"personalization vector\" consists of a dictionary with a \n    key for every graph node and nonzero personalization value for each node. \nmax_iter: \n    int, optional \n    Maximum number of iterations in power method eigensolve.\ntol: float, optional\n    Error tolerance used to check convergence in power method eigensolve.\nnstart: \n    dict, optional \n    Starting value of PageRank iteration for each node.\nweight: \n    key, optional \n    Edge data key to use as weight. \ndangling: \n    dict, optional \n    The outedges to be assigned to any \"dangling\" nodes, i.e., nodes without any outedges. \n\nReturns:\n    Dictionary of nodes with PageRank as value.\n\"\"\"\n\n# Initialize results vector with (1-alpha)\/N, \n# where N is the number of nodes in the graph.\nN = G.number_of_nodes()\nx = dict.fromkeys(G, (1 - alpha) \/ N)\n\n# Check if personalization vector was passed in; if so, update results vector\nif personalization is None:\n    p = dict.fromkeys(G, 1 \/ N)\nelse:\n    missing = set(G) - set(personalization)\n    if missing:\n        raise NetworkXError('Personalization dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    p = personalization\n   p = p.copy()\n    s = float(sum(p.values()))\n    for k in p:\n        x[k] = p[k] \/ s\n        p[k] = p[k] \/ s\n\nif dangling is None:\n    # Use personalization vector if dangling vector not specified\n    dangling_weights = p\nelse:\n    # Dangling nodes are nodes with no outedges.\n    # Use personalization vector if dangling vector is specified but\n    # doesn't have an entry for every node\n    missing = set(G) - set(dangling)\n    if missing:\n        raise NetworkXError('Dangling node dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    s = float(sum(dangling.values()))\n    for k in dangling:\n        dangling[k] \/= s\n    dangling_weights = dangling\n\n# power iteration: make up to max_iter iterations\nfor _ in range(max_iter):\n    xlast = x\n    x = dict.fromkeys(xlast.keys(), 0)\n    danglesum = alpha * sum(xlast[n] for n in dangling_weights)\n    for n in x:\n\n# this matrix multiply looks odd because it is\n# doing a left multiply x^T=xlast^T*W\n        for nbr in G[n]:\n            x[nbr] += alpha * xlast[n] * G[n][nbr].get(weight, 1)\n        x[n] += danglesum * dangling_weights.get(n, 0) + (1.0 - alpha) * p.get(n, 0)\n\n# check convergence\nerr = sum([abs(x[n] - xlast[n]) for n in x])\nif err < N*tol:\n    return x\nreturn x",
        "688": "def triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) \/ 2\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area",
        "689": "def combine_lists(list1, list2):\n    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]\n    return combined_list",
        "690": "import numpy as np\nimport pandas as pd\n\ndef bitcoinPricePrediction(data):\n# convert data to numpy array\ndata = np.array(data)\n\n# define the model\nmodel = keras.Sequential([\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(1)])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(data, epochs=50, verbose=1)\n\n# predict the tomorrow's bitcoin price\nprediction = model.predict(data)[0][0]\n\nreturn prediction",
        "691": "def is_coprime(num1, num2):\n        while num1 != 0 and num2 != 0: \n            if(num1 > num2): \n                num1 %= num2 \n            else: \n                num2 %= num1\n                  \n        if(num1 == 0): \n            gcd = num2 \n        else: \n            gcd = num1 \n        if(gcd == 1):\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)",
        "692": "class ListUnique:\n    \n    def __init__(self,list1):\n        # set up empty list\n        self.list1 = []\n        \n        # loop through input list\n        for x in list1:\n            # add element to list if it is not already in the list\n            if x not in self.list1:\n                self.list1.append(x)\n                \n    # returns the modified list\n    def get_list(self):\n        return self.list1\n\nlist1 = ['a','b','b','c','a','c']\n\n# create instance of ListUnique\nlu = ListUnique(list1)\n\n# print the modified list\nprint(lu.get_list()) # prints ['a', 'b', 'c']",
        "693": "def sort_dict_by_values(students):\n    sorted_students = sorted(students, key=students.get)\n    return [sorted_students, [students[key] for key in sorted_students]]\n\nprint(sort_dict_by_values(students))",
        "694": "#Import Data\nimport pandas as pd\ndata = pd.read_csv(\u2018data.csv\u2019)\n\n#Prepare Data\nX = data[['size', 'location', 'bedrooms']]\ny = data['price']\n\n#Train Model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n#Test Model\ntest_X = [[1500, 'downtown', 3]]\ntest_y = model.predict(test_X)\nprint(test_y)",
        "695": "import traceback\n\ntry:\n    # some code that might generate exceptions\n    pass\nexcept Exception as e:\n    print(traceback.format_exc())",
        "696": "def reverse_strings(string_list):\n reversed_string_list = []\n for string in string_list:\n reversed_string_list.insert(0, string)\n return reversed_string_list\n\nstring_list = [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\nprint(reverse_strings(string_list))",
        "697": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "698": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample dataset\ndocs = [\n \"The sky is blue.\",\n \"Violets are red.\",\n \"I love programming.\",\n \"JavaScript is fun.\"\n \"Python is great!\"\n]\n\nlabels = [0, 0, 1, 1, 1]\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Vectorize the documents\nX = vectorizer.fit_transform(docs).toarray()\n\n# Create a Naive Bayes model\nmodel = MultinomialNB()\n\n# Fit the model to the dataset\nmodel.fit(X, labels)\n\n# Make a prediction\nprediction = model.predict([X[3]])\n\n# Print the prediction\nprint(prediction) # prints [1]",
        "699": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))",
        "700": "import os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args)",
        "701": "class Game:\n    def __init__(self):\n        self.board = [[\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"]]\n        self.current_player = \"X\"\n\n    def display_board(self):\n        for i in range(len(self.board)):\n            for j in range(len(self.board[i])):\n                print(self.board[i][j], end=\" \")\n            print()\n\n    def move(self, current_player, row, col):\n        if self.board[row][col] == \"-\": \n            self.board[row][col] = current_player\n        else:\n            print(\"invalid move, row and col has already been taken\")\n\n    def check_winner(self):\n        winner = None\n        for row in self.board:\n            if row[0] == row[1] == row[2]:\n                winner = row[0]\n                break\n        for col in range(len(self.board[0])):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col]:\n                winner = self.board[0][col]\n                break\n        if self.board[0][0] == self.board[1][1] == self.board[2][2]:\n            winner = self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0]:\n            winner = self.board[0][2]\n\n        if winner == None:\n            return False\n        else:\n            return winner",
        "702": "def reverse_string(string): \n    return string[::-1]",
        "703": "import difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909",
        "704": "def createDict(keys, values):\n  dict = {}\n  for i in range(len(keys)):\n    dict[keys[i]] = values[i]\n  return dict",
        "705": "def sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num \/\/ 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}')",
        "706": "def squareList(inputList): \n\t# Returns a list of the squares of all the elements in inputList\n\tsquaredList = [] \n\n\tfor num in inputList:\n\t\tsquaredList.append(num ** 2) \n\n\treturn squaredList\n\n# Example \ninputList = [1, 2, 3, 4, 5] \n\nsquaredList = squareList(inputList) \n\nprint(squaredList)\n\n# Output: [1, 4, 9, 16, 25]",
        "707": "import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)",
        "708": "Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.",
        "709": "@app.route('\/api', methods=['POST'])\ndef api():\n data = request.get_json()\n data['age'] = data['age'] + 2\n return jsonify(data)",
        "710": "def insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list)",
        "711": "below_ten = [] # Separated numbers\nabove_five = [] # Separated numbers\n\n# Iterate over array\nfor n in array:\n    if n > 5:\n        above_five.append(n)\n    else:\n        below_ten.append(n)\n\n# Print results\nprint(\"Below 10: \", below_ten)\nprint(\"Above 5: \", above_five)",
        "712": "def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False",
        "713": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ntotal = 0\n\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        total += matrix[i][j]\n\nprint(total)",
        "714": "import re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']",
        "715": "class NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"",
        "716": "import tweepy\n\n# authentication\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Tweeting\ntext = 'Hello, world!'\napi.update_status(text)",
        "717": "class Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue)",
        "718": "def is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2))",
        "719": "import numpy as np\n\nidentity_matrix = np.identity(3)\nprint(identity_matrix)",
        "720": "def Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8",
        "721": "The Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page.",
        "722": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run()",
        "723": "# Create the window\nwindow = tk.Tk()\n\n# Create two entry fields in the window\nentry1 = tk.Entry(window)\nentry2 = tk.Entry(window)\n\n# Create a function to get inputs from the entry fields and calculate sum\ndef get_sum():\n    num1 = entry1.get()\n    num2 = entry2.get()\n    sum = int(num1) + int(num2)\n    label.config(text=\"Sum is \" + str(sum))\n\n# Create a button to execute the function\nbutton = tk.Button(window, text=\"Calculate\", command=get_sum)\n\n# Create a label to display the result\nlabel = tk.Label(window)\n\n# Pack all widgets\nentry1.pack()\nentry2.pack()\nbutton.pack()\nlabel.pack()\n\n# Main loop\nwindow.mainloop()",
        "724": "# Matrix multiplication in Python\n\nmatrix_A = [[2, 3], [4, 7]] \nmatrix_B = [[6, 5], [1, 4]] \n  \n# result matrix\nresult = [[0, 0], [0, 0]] \n  \n# iterating by row of Matrix A \nfor i in range(len(matrix_A)): \n  \n    # iterating by coloum of Matrix B  \n    for j in range(len(matrix_B[0])): \n  \n        # iterating by rows of Matrix B \n        for k in range(len(matrix_B)): \n            result[i][j] += matrix_A[i][k] * matrix_B[k][j] \n  \nfor r in result: \n    print(r)",
        "725": "def is_anagram(string1, string2):\n    # check if strings have equal length \n    if len(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check if sorted strings are the same \n    if sorted1 == sorted2:\n        return True \n    return False",
        "726": "import re\n\nurl = \"https:\/\/www.test.com\/where-is-the-key\"\nkeyword = \"key\"\n\nmatch = re.search(f'{keyword}', url)\nif match:\n    print(f'{keyword} found at starting index: {match.start()}')\nelse:\n    print(f'{keyword} not found')",
        "727": "import threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1",
        "728": "def merge_arrays(arr1, arr2):\n    merged_arr = []\n    # Make copies of arrays\n    arr1_copy = arr1[:]\n    arr2_copy = arr2[:]\n    \n    # add elements from both array in sorted order\n    while arr1_copy and arr2_copy:\n        if arr1_copy[0] <= arr2_copy[0]:\n            merged_arr.append(arr1_copy.pop(0))\n        else:\n            merged_arr.append(arr2_copy.pop(0))\n            \n    # add remaining elements of array\n    if arr1_copy:\n        merged_arr.extend(arr1_copy)\n    else:\n        merged_arr.extend(arr2_copy)\n    \n    # return merged array\n    return merged_arr\n\narr1 = [3, 8, 11]\narr2 = [1, 4, 9]\n\nprint(merge_arrays(arr1, arr2))",
        "729": "import random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))",
        "730": "class BinarySearchTree:\n\n def __init__(self):\n  self.root = None\n\n def add_node(self, value):\n  if not self.root:\n   self.root = Node(value)\n  else: \n   self._add_node(self.root, value)\n\n def _add_node(self, node, value):\n  if value <= node.value:\n   if node.left:\n    self._add_node(node.left, value)\n   else:\n    node.left = Node(value)\n  else:\n   if node.right:\n    self._add_node(node.right, value)\n   else:\n    node.right = Node(value)\n\n def search(self, value):\n  return self._search(self.root, value)\n\n def _search(self, node, value):\n  if node is None:\n   return False\n  if node.value == value:\n   return True\n  else:\n   if value <= node.value:\n    return self._search(node.left, value)\n   else: \n    return self._search(node.right, value)\n\n def get_size(self):\n  return self._get_size(self.root)\n\n def _get_size(self, node):\n  if not node:\n   return 0\n  return self._get_size(node.left) + 1 + self._get_size(node.right)",
        "731": "def sort_strings_by_length(strings):\n  return sorted(strings, key=len)",
        "732": "from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))",
        "733": "def is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False",
        "734": "import textwrap \n\nclass TextGame(object):\n    def __init__(self):\n        self.level = 1\n        self.is_playing = True\n\n    def start_game(self):\n        self.print_intro()\n        while self.is_playing:\n            self.level_one()\n\n    def print_intro(self):\n        # Introduction text\n        intro = textwrap.dedent('''\n            You awaken in a strange place, and it seems you have no memory of how you got there.\n            You can feel cold dampness of the stone walls and ground beneath your feet.\n            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move\n            towards it.\n        ''')\n        print(intro)\n\n    def level_one(self):\n        # Level one text\n        level_one = textwrap.dedent('''\n            As you make your way towards the light, you come across a fork in the path.\n            You hear a soft whisper coming from the left path.\n        ''')\n        print(level_one)\n\n        action = raw_input('''Do you choose to take the left or right path? ''')\n        if action.upper() == \"LEFT\":\n            self.level_two_left()\n        elif action.upper() == \"RIGHT\":\n            self.level_two_right()\n        else:\n            self.level_one()\n\n    def level_two_left(self):\n        # Level two left text\n        level_two_left = textwrap.dedent('''\n            The whisper gets louder as you take the left path. Eventually, you reach a small room.\n            In the center of the room is a hooded figure standing in front of a pedestal.\n            There is a strange looking artifact on the pedestal.\n        ''')\n        print(level_two_left)\n\n        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')\n        if action.upper() == \"APPROACH\":\n            print(\"You approach the figure and it removes its hood to reveal a face you recognize\")\n        elif action.upper() == \"FLEE\":\n            print(\"You turn and run, taking the right path\")\n            self.level_two_right()\n        else:\n            self.level_two_left()\n\n# Create instance and start the game. \ngame = TextGame()\ngame.start_game()",
        "735": "def double_list(lst):\n    return [x * 2 for x in lst]",
        "736": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total \/ len(nums)",
        "737": "def sort_dictionary_by_keys(dictionary):\n    result = {}\n    for key in sorted(dictionary.keys()):\n        result[key] = dictionary[key]\n    return result\n\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\nsorted_dictionary = sort_dictionary_by_keys(dictionary)\n\nprint(sorted_dictionary)",
        "738": "# define the game board\nboard = [\"_\" for i in range(9)]\n\n# define the player and computer symbols\nplayer = \"X\"\ncomputer = \"O\"\n\ndef display_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# check for a win\ndef check_win():\n    # check rows\n    row1 = board[0] == board[1] == board[2] != \"_\"\n    row2 = board[3] == board[4] == board[5] != \"_\"\n    row3 = board[6] == board[7] == board[8] != \"_\"\n    # if any row does have a match, flag that there is a win\n    if row1 or row2 or row3:\n        game_over = True\n    # check columns\n    col1 = board[0] == board[3] == board[6] != \"_\"\n    col2 = board[1] == board[4] == board[7] != \"_\"\n    col3 = board[2] == board[5] == board[8] != \"_\"\n    # if any column does have a match, flag that there is a win\n    if col1 or col2 or col3:\n        game_over = True\n    # check diagonals\n    diag1 = board[0] == board[4] == board[8] != \"_\"\n    diag2 = board[2] == board[4] == board[6] != \"_\"\n    # if any diagonal does have a match, flag that there is a win\n    if diag1 or diag2:\n        game_over = True\n    # if any condition is true, there is a win\n    if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2:\n        winner = player\n    else:\n        game_over = False\n    return game_over, winner\n\n# play the game\nwhile True:\n    # display the game board\n    display_board()\n    # get player input\n    while True:\n        try:\n            player_choice = int(input(\"Pick a number between 1-9: \"))\n            if player_choice >= 1 and player_choice <= 9:\n                if board[player_choice - 1] == \"_\":\n                    board[player_choice - 1] = player\n                    break\n            else:\n                print(\"Sorry, please try again\")\n        except:\n            print(\"Sorry, please try again\")\n\n    # check for a win\n    game_over, winner = check_win()\n    if game_over:\n        display_board()\n        print(\"Congratulations! You win! \")\n        break\n    # check for a tie\n    if \"_\" not in board:\n        print(\"It's a tie\")\n        break",
        "739": "def string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result)",
        "740": "\"\"\"Generate a python script that takes a list of random numbers as input and return only the even numbers from the list\"\"\"\n\n# Take a list as input\nlst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\n\n# Create a new list that will contain only the even numbers from the input list\neven_numbers = []\n\n# Iterate through input list and append only even numbers to the new list \nfor num in lst:\n    if num % 2 == 0:\n        even_numbers.append(num)\n        \n# Print out the new list containing only even numbers\nprint(even_numbers)",
        "741": "def power_of_3(matrix):\n    for i in range(len(matrix)):\n       for j in range(len(matrix[0])): \n            matrix[i][j] = matrix[i][j] ** 3\n    return matrix",
        "742": "def findNumOfElements(stack): \n    return len(stack)",
        "743": "import pandas as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df)",
        "744": "import collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation']",
        "745": "def sphere_volume(radius): \n    return (4\/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))",
        "746": "def find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path",
        "747": "import string\n\nexample_string = \"This i$n't a siMPle StrinG\"\nnew_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\nprint(new_string)\n\nOutput:\nthisisntasimplestring",
        "748": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(\"The requested Fibonacci number is: \" + str(fib(6)))",
        "749": "newString = string.replace(\"\", \"\")\nprint(newString)",
        "750": "def count_words(string):\n    words = string.split()\n    count_words = {}\n    for word in words:\n        if word in count_words:\n            count_words[word] += 1\n        else:\n            count_words[word] = 1\n\n    return count_words",
        "751": "def sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative",
        "752": "def generate_sql_query(table_name, fields, filter_clause):\n query = \"SELECT \"\n for i in range(len(fields)-1):\n query += fields[i] + \", \"\n query += fields[-1]\n query += \" FROM \" + table_name + \" WHERE \" + filter_clause\n return query",
        "753": "import random\n\nprint(random.randint(1000,9999))",
        "754": "class Appointment:\n    def __init__(self, title, time, location):\n        self.title = title\n        self.time = time\n        self.location = location\n\n    def get_title(self):\n        return self.title\n    \n    def get_time(self):\n        return self.time\n    \n    def get_location(self):\n        return self.location",
        "755": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com'\n\n# Use requests to get website HTML\nresp = requests.get(url)\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(resp.text, 'lxml')\n\n# Extract data from HTML\ndata = []\nfor item in soup.find_all('div'):\n data.append(item.text)\n\n# Print the data\nfor d in data:\n print(d)",
        "756": "import json\n\ndef parse_json_object(request):\n # Parse the incoming JSON object\n data = json.loads(request.data)\n \n # Extract the values\n param1 = data['param1']\n param2 = data['param2']\n \n return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)",
        "757": "def add_arrays(arr1, arr2):\n if len(arr1) != len(arr2):\n  raise Exception(\"Arrays are not of the same size!\")\n return [x + y for x, y in zip(arr1, arr2)]\n\nadd_arrays(arr1, arr2)  # [4, 6, 8]",
        "758": "# define category variable\ncategory = \"Computer Science\"\n# import JSON library for retrieving the data\nimport json\n# import HTTP library for fetching the data\nimport urllib.request\n\n# create the target url\nurl = \"https:\/\/www.example.com\/books\/category\/\" + category\n\n# fetch the data\nresponse = urllib.request.urlopen(url)\n# read the data\ndata = json.loads(response.read())\n\n# print the books\nfor book in data:\n print(book['title'])",
        "759": "import sqlite3\n\nclass StudentDatabase:\n def __init__(self, db):\n  self.conn = sqlite3.connect(db)\n  self.cur = self.conn.cursor()\n  self.cur.execute(\"CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)\")\n  self.conn.commit()\n  \n def add_student(self, name, email, age):\n  self.cur.execute(\"INSERT INTO students VALUES (NULL, ?, ?, ?)\", (name, email, age))\n  self.conn.commit()\n  \n def delete_student(self, id):\n  self.cur.execute(\"DELETE FROM students WHERE id=?\", (id,))\n  self.conn.commit()\n  \n def update_student(self, id, name, email, age):\n  self.cur.execute(\"UPDATE students SET name=?, email=?, age=? WHERE id=?\", (name, email, age, id))\n  self.conn.commit()\n  \n def list_students(self):\n  self.cur.execute(\"SELECT * FROM students\")\n  rows = self.cur.fetchall()\n  return rows\n  \ndef main():\n db = StudentDatabase('students.db')\n db.add_student('John Doe', 'john@doe.com', 30)\n db.add_student('Adam Smith', 'adam@smith.com', 25)\n db.delete_student(2)\n db.update_student(1, 'John Smith', 'john@smith.com', 40)\n print(db.list_students())\n \nif __name__ == '__main__':\n main()",
        "760": "# Node class\nclass Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class\nclass LinkedList: \n  \n    # Function to initialize the Linked  \n    # List object \n    def __init__(self):  \n        self.head = None\n  \n    # Deletes the node at position n\n    def deleteNode(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store headnode \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position-1): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next",
        "761": "import re\n\nemails = [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]\nresult = []\n\nfor email in emails:\n email = re.sub('[^A-Za-z0-9@.+-_]', '', email)\n email = email.replace(' ', '')\n if 'gmail' in email:\n email = email.replace('gmail', 'google')\n elif 'yahoo' in email:\n email = email.replace('yahoo', 'ymail')\n result.append(email)\n\nprint(result)",
        "762": "def extract_long_words(s):\n words = s.split()\n filtered = [w for w in words if len(w) > 3]\n return filtered",
        "763": "def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if string.count(char) == 1:\n            result += char\n    return result",
        "764": "def optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)",
        "765": "import math\n \ndef primes(n):\n    if n < 2:\n        return []\n    \n    size = int(math.sqrt(n)) + 1\n    sieve = bytearray([True]) * size\n    for i in range(2, size):\n        if sieve[i]:\n            for j in range(i*i, size, i):\n                sieve[j] = False\n  \n    primes = [i for i in range(2, size) if sieve[i]]\n    return [p for p in primes if p <= n]\n \nif __name__ == '__main__':\n    n = 15\n    print(primes(n))\n\n# Output: [2, 3, 5, 7, 11, 13]",
        "766": "def clean_string(s):\n clean_s = ''.join(c for c in s if c.isalnum())\n print(clean_s)",
        "767": "# Program to generate a Fibonacci series using an algorithm\n\n# function to generate Fibonacci series\ndef generate_fibonacci_series(n):\n    a, b = 0, 1 \n    result = [] \n    while b < n:\n        result.append(b)\n        a, b = b, a + b \n    return result\n\n# Driver code \nn = 10\nresult = generate_fibonacci_series(n)\nprint(\"The Fibonacci number up to\", n, \"is\", result)",
        "768": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\ntarget = -3\nprint(\"Index of\", target, \" is \", linear_search(arr, target)) # 1",
        "769": "my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9]",
        "770": "def reverse_list(list):\n    return list[::-1]\n\nresult = reverse_list([1,2,3,4])\nprint(result)",
        "771": "class Contact:\n    def __init__(self, single_name, last_name, email, address, phone_number):\n        \"\"\"\n        This is the constructor for the contact class.\n        \"\"\"\n        self.single_name = single_name\n        self.last_name = last_name\n        self.email = email\n        self.address = address\n        self.phone_number = phone_number\n\n    def get_full_name(self):\n        \"\"\"\n        This method returns the full name of the contact.\n        \"\"\"\n        return self.last_name + \", \" + self.single_name\n\n    def get_email(self):\n        \"\"\"\n        This method returns the email of the contact.\n        \"\"\"\n        return self.email\n\n    def get_address(self):\n        \"\"\"\n       This method returns the address of the contact.\n        \"\"\"\n        return self.address\n\n    def get_phone_number(self):\n        \"\"\"\n        This method returns the phone number of the contact.\n        \"\"\"\n        return self.phone_number",
        "772": "def fibonacci(n):\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr[:n+1]\n\nprint(fibonacci(10))",
        "773": "class Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node",
        "774": "# Function to generate multiplication table  \ndef multiplication_table(n): \n    # set the initial value and iters\n    num = 1\n    iters = n + 1\n      \n    # outer loop\n    for i in range(1, iters): \n          \n        # inner loop \n        for j in range(1, iters): \n              \n            # print statement \n            print(num, end = \" \") \n              \n            num = num + 1\n        print()\n  \n# Driver code\nn = 3\nmultiplication_table(n)",
        "775": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL to be scraped\nurl = \"http:\/\/www.example.com\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape data from the HTML using beautiful soup\ndata = soup.find_all('p')\n\n# Print the scraped data\nfor item in data:\n print(item.text)",
        "776": "dictionary = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor item in dictionary:\n  print(\"{}: {}\".format(item, dictionary[item]))",
        "777": "\"\"\"Implementation of :class:`Domain` class.\"\"\"\n\nimport abc\nimport inspect\n\nfrom ..core import Expr\nfrom ..core.compatibility import HAS_GMPY\nfrom ..polys.orderings import lex\nfrom ..polys.polyerrors import CoercionFailed, UnificationFailed\nfrom ..polys.polyutils import _unify_gens\nfrom ..printing.defaults import DefaultPrinting\nfrom .domainelement import DomainElement\n\n\nclass Domain(DefaultPrinting, abc.ABC):\n    \"\"\"Represents an abstract domain.\"\"\"\n\n    is_Ring = False\n    is_Field = False\n\n    has_assoc_Ring = False\n\n    is_FiniteField = False\n    is_IntegerRing = False\n    is_RationalField = False\n    is_RealField = False\n    is_ComplexField = False\n    is_AlgebraicField = False\n    is_RealAlgebraicField = False\n    is_ComplexAlgebraicField = False\n    is_PolynomialRing = False\n    is_FractionField = False\n    is_ExpressionDomain = False\n\n    is_Exact = True\n    is_Numerical = False\n\n    def __hash__(self):\n        return hash((self.__class__.__name__, self.dtype))\n\n    def __call__(self, *args):\n        \"\"\"Construct an element of ``self`` domain from ``args``.\"\"\"\n        return self.dtype(*args)\n\n    def __getstate__(self):\n        return {}\n\n    @abc.abstractmethod\n    def from_expr(self, expr):\n        \"\"\"Convert Diofant's expression ``expr`` to ``dtype``.\"\"\"\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def to_expr(self, element):\n        \"\"\"Convert domain ``element`` to Diofant expression.\"\"\"\n        raise NotImplementedError\n\n    def convert_from(self, element, base):\n        \"\"\"Convert ``element`` to ``self.dtype`` given the base domain.\"\"\"\n        for superclass in inspect.getmro(base.__class__):\n            method = '_from_' + superclass.__name__\n\n            convert = getattr(self, method, None)\n\n            if convert:\n                result = convert(element, base)\n\n                if result is not None:\n                    return result\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} \"\n                             f'from {base} to {self}')\n\n    def convert(self, element, base=None):\n        \"\"\"Convert ``element`` to ``self.dtype``.\"\"\"\n        if base is not None:\n            return self.convert_from(element, base)\n\n        if isinstance(element, self.dtype):\n            return element\n\n        from . import ComplexField, PythonRational, RealField\n        from .expressiondomain import ExpressionDomain\n        from .integerring import GMPYIntegerRing, PythonIntegerRing\n        from .rationalfield import GMPYRationalField, PythonRationalField\n\n        if isinstance(element, int):\n            return self.convert_from(element, PythonIntegerRing())\n\n        if isinstance(element, PythonRational):\n            return self.convert_from(element, PythonRationalField())\n\n        if HAS_GMPY:\n            integers = GMPYIntegerRing()\n            if isinstance(element, integers.dtype):\n                return self.convert_from(element, integers)\n\n            rationals = GMPYRationalField()\n            if isinstance(element, rationals.dtype):\n                return self.convert_from(element, rationals)\n\n        if isinstance(element, float):\n            parent = RealField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, complex):\n            parent = ComplexField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, DomainElement):\n            return self.convert_from(element, element.parent)\n\n        if isinstance(element, ExpressionDomain.Expression):\n            return self.convert_from(element, ExpressionDomain())\n\n        if isinstance(element, Expr):\n            try:\n                return self.from_expr(element)\n            except (TypeError, ValueError):\n                pass\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} to {self}\")\n\n    def __contains__(self, a):\n        \"\"\"Check if ``a`` belongs to this domain.\"\"\"\n        try:\n            self.convert(a)\n            return True\n        except CoercionFailed:\n            return False\n\n    def _from_PolynomialRing(self, a, K0):\n        if a.is_ground:\n            return self.convert(a.LC, K0.domain)\n\n    def _from_FractionField(self, a, K0):\n        if a.numerator.is_ground and a.denominator == 1:\n            return self.convert(a.numerator.LC, K0.domain.ring)\n\n    def unify(self, K1, symbols=()):\n        \"\"\"\n        Construct a minimal domain that contains elements of ``self`` and ``K1``.\n\n        Known domains (from smallest to largest):\n\n        - ``GF(p)``\n        - ``ZZ``\n        - ``QQ``\n        - ``RR(prec, tol)``\n        - ``CC(prec, tol)``\n        - ``ALG(a, b, c)``\n        - ``K[x, y, z]``\n        - ``K(x, y, z)``\n        - ``EX``\n        \"\"\"\n        from .compositedomain import CompositeDomain\n\n        if symbols:\n            if any(isinstance(d, CompositeDomain) and (set(d.symbols) & set(symbols))\n                   for d in [self, K1]):\n                raise UnificationFailed(f\"Can't unify {self} with {K1}, \"\n                                        f'given {symbols} generators')\n\n            return self.unify(K1)\n\n        if self == K1:\n            return self\n\n        if self.is_ExpressionDomain:\n            return self\n        if K1.is_ExpressionDomain:\n            return K1\n\n        if any(isinstance(d, CompositeDomain) for d in (self, K1)):\n            if isinstance(self, CompositeDomain):\n                self_ground = self.domain\n                self_symbols = self.symbols\n                order = self.order\n            else:\n                self_ground = self\n                self_symbols = ()\n                order = K1.order\n\n            if isinstance(K1, CompositeDomain):\n                K1_ground = K1.domain\n                K1_symbols = K1.symbols\n            else:\n                K1_ground = K1\n                K1_symbols = ()\n\n            domain = self_ground.unify(K1_ground)\n            symbols = _unify_gens(self_symbols, K1_symbols)\n\n            if ((self.is_FractionField and K1.is_PolynomialRing or\n                 K1.is_FractionField and self.is_PolynomialRing) and\n                    (not self_ground.is_Field or not K1_ground.is_Field) and domain.has_assoc_Ring):\n                domain = domain.ring\n\n            if isinstance(self, CompositeDomain) and (not isinstance(K1, CompositeDomain) or self.is_FractionField or K1.is_PolynomialRing):\n                cls = self.__class__\n            else:\n                cls = K1.__class__\n\n            return cls(domain, symbols, order)\n\n        def mkinexact(cls, K0, K1):\n            prec = max(K0.precision, K1.precision)\n            tol = max(K0.tolerance, K1.tolerance)\n            return cls(prec=prec, tol=tol)\n\n        if self.is_ComplexField and K1.is_ComplexField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_RealField and K1.is_ComplexField:\n            return mkinexact(K1.__class__, K1, self)\n        if self.is_RealField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField or self.is_RealField:\n            return self\n        if K1.is_ComplexField or K1.is_RealField:\n            return K1\n\n        if self.is_AlgebraicField and K1.is_AlgebraicField:\n            return self.__class__(self.domain.unify(K1.domain), *_unify_gens(self.gens, K1.gens))\n        elif self.is_AlgebraicField:\n            return self\n        elif K1.is_AlgebraicField:\n            return K1\n\n        if self.is_RationalField:\n            return self\n        if K1.is_RationalField:\n            return K1\n\n        if self.is_FiniteField and self.domain == K1:\n            return self\n        if K1.is_FiniteField and K1.domain == self:\n            return K1\n\n        raise NotImplementedError\n\n    def __eq__(self, other):\n        \"\"\"Returns ``True`` if two domains are equivalent.\"\"\"\n        return isinstance(other, Domain) and self.dtype == other.dtype\n\n    def get_exact(self):\n        return self\n\n    def poly_ring(self, *symbols, **kwargs):\n        \"\"\"Returns a polynomial ring, i.e. `K[X]`.\"\"\"\n        from ..polys import PolynomialRing\n        return PolynomialRing(self, symbols, kwargs.get('order', lex))\n\n    def frac_field(self, *symbols, **kwargs):\n        \"\"\"Returns a fraction field, i.e. `K(X)`.\"\"\"\n        from ..polys import FractionField\n        return FractionField(self, symbols, kwargs.get('order', lex))\n",
        "778": "# Define the threshold\nthreshold = 5\n\ndef classify(data):\n  result = []\n  for item in data:\n    if item <= threshold:\n      result.append('low')\n    else:\n      result.append('high')\n  return result\n\nprint(classify([8, 5, 9, 1, 3, 10]))\n# Output: ['high', 'low', 'high', 'low', 'low', 'high']",
        "779": "<html>\n<head>\n  <title>Book List<\/title>\n<\/head>\n<body>\n  <h1>Book List<\/h1>\n  <table>\n    <thead>\n      <tr>\n        <th>ISBN<\/th>\n        <th>Title<\/th>\n      <\/tr>\n      <tbody>\n        <tr>\n          <td>978-0134813071<\/td>\n          <td>Python Programming<\/td>\n        <\/tr>\n        <tr>\n          <td>978-1590595377<\/td>\n          <td>Advanced Python<\/td>\n        <\/tr>\n        <tr>\n          <td>978-0302005945<\/td>\n          <td>PHP Programming<\/td>\n        <\/tr>\n    <\/thead>\n    <tbody>\n  <\/table>\n<\/body>\n<\/html>",
        "780": "# Find the second largest number from a given list\n\nnumbers = [12, 23, 45, 22, 50]\n\n# Sort the list in ascending order\nnumbers.sort()\n\n# Get the second largest number\nsecond_largest_num = numbers[-2]\n\nprint('The second largest number in the list is:', second_largest_num)",
        "781": "class Node:\n def __init__(self, val):\n self.val = val\n self.left = None\n self.right = None\n \nclass BinarySearchTree:\n def __init__(self):\n self.root = None\n \n def insert(self, val):\n newNode = Node(val)\n if self.root == None:\n self.root = newNode\n else:\n curr = self.root\n while curr:\n if val < curr.val:\n if curr.left == None:\n curr.left = newNode\n break\n else:\n curr = curr.left\n else:\n if curr.right == None:\n curr.right = newNode\n break\n else:\n curr = curr.right\n \n def delete(self, val):\n curr = self.root\n parent = None\n isLeftChild = True\n \n while curr.val != val:\n parent = curr\n if val < curr.val:\n curr = curr.left\n isLeftChild = True\n else:\n curr = curr.right\n isLeftChild = False\n \n if curr == None:\n return\n \n # if node has no children\n if curr.left == None and curr.right == None:\n if isLeftChild:\n parent.left = None\n else:\n parent.right = None\n \n # if node has one child\n elif curr.left == None:\n if isLeftChild:\n parent.left = curr.right\n else:\n parent.right = curr.right\n \nelif curr.right == None:\n if isLeftChild:\n parent.left = curr.left\n else:\n parent.right = curr.left\n \n # if node has two children\n else:\n succParent = curr\n succ = curr.right\n \n while succ.left != None:\n succParent = succ\n succ = succ.left\n \n # if successor is a direct right child\n if succParent == curr:\n succParent.right = succ.right\n else:\n succParent.left = succ.right\n \n curr.val = succ.val\n \n def traverse(self):\n if self.root is None:\n return\n curr = self.root\n self.traverseInOrder(curr)\n \n def traverseInOrder(self, curr):\n if curr.left != None:\n self.traverseInOrder(curr.left)\n print(curr.val)\n if curr.right != None:\n self.traverseInOrder(curr.right)",
        "782": "def sort_list(list):\n for _ in range(len(list)):\n for j in range(len(list)-1):\n if list[j] > list[j+1]:\n list[j], list[j+1] = list[j+1], list[j]\n return list\n\n# Testing the function\nexample_list = [3, 1, 8, 5, 7]\nsorted_list = sort_list(example_list)\n\nprint(sorted_list)\n# Output: [1, 3, 5, 7, 8]",
        "783": "import json\n\ndef list_to_json(data):\n    return json.dumps(data)",
        "784": "import string\nimport random\n\ndef generate_password():\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase \n    digits = string.digits\n\n    characters = lowercase + uppercase + digits\n    password = ''.join(random.sample(characters,8))\n    return password\n\nprint(generate_password())",
        "785": "import time\n\ndef count_words(text):\n    start_time = time.time()\n    words = text.split(' ')\n    result = len(words)\n    end_time = time.time()\n    duration = end_time - start_time\n    return result, duration\n\nif __name__ == '__main__':\n    text = 'This sentence has five words'\n    result, duration = count_words(text)\n    print(f'The result is {result} and it took {duration} seconds!')",
        "786": "def filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list\n\nresult = filter_by_length(word_list, 5)\nprint(result)",
        "787": "import nltk\nfrom nltk import word_tokenize\n\nsentence = \"The founder of Apple Steve Jobs passed away.\"\n\ntokenized_text = word_tokenize(sentence)\n\ntagged = nltk.pos_tag(tokenized_text)\n\nnamedEnt = nltk.ne_chunk(tagged, binary=False)\n\nfor ne in namedEnt:\n if type(ne) == nltk.tree.Tree:  \n    entity_name = ' '.join(c[0] for c in ne.leaves())\n    print(entity_name)",
        "788": "import detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr",
        "789": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    This function converts the given celsius value to its corresponding fahrenheit value\n    \"\"\"\n    fahrenheit = (celsius * (9\/5)) + 32\n    return fahrenheit",
        "790": "import http.server\nfrom http.server import SimpleHTTPRequestHandler\n\nclass MyHandler(SimpleHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text\/html')\n    self.end_headers()\n\n    html = b\"\"\"\n        <html>\n        <body>\n        <h1>Hello, World!<\/h1>\n        <\/body>\n        <\/html>\n    \"\"\"\n\n    self.wfile.write(html)\n \nserver = http.server.HTTPServer(('', 8080), MyHandler)\nserver.serve_forever()",
        "791": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit()",
        "792": "def distinct_numbers(arr):\n return list(set(arr))",
        "793": "class Stack: \n def __init__(self): \n self.items = [] \n\n def push(self, item): \n self.items.append(item) \n\n def pop(self):\n if not self.is_empty(): \n return self.items.pop()\n\n def is_empty(self):\n return len(self.items) == 0\n\n def peek(self):\n if not self.is_empty(): \n return self.items[-1]\n\n def size(self):\n return len(self.items)",
        "794": "import unittest\n\ndef square(x):\n   return x * x\n\nclass TestSquareFunction(unittest.TestCase):\n   def test_square(self):\n       self.assertEqual(square(3), 9)\n       self.assertEqual(square(5), 25)\n       self.assertEqual(square(7), 49)\n\nif __name__ == '__main__':\n     unittest.main()",
        "795": "def reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result)",
        "796": "class Person:\n    def __init__(self, name, age, height, address):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.address = address\n    \n    def describe(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Height:', self.height)\n        print('Address:', self.address)",
        "797": "def five_letter_words(string):\n    words = string.split()\n    output_list = []\n    for word in words:\n        if len(word) >= 5:\n            output_list.append(word)\n    print(output_list)\n\nfive_letter_words(\"The quick brown fox jumps over the lazy dog\")\n# Output [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "798": "def longest_subarray_with_sum(arr, given_sum):\n  max_len = 0\n  curr_sum = 0\n  start_index = 0\n  n = len(arr)\n  for end_index in range(n):\n    curr_sum += arr[end_index]\n    while curr_sum > given_sum:\n      curr_sum -= arr[start_index]\n      start_index += 1\n    if curr_sum == given_sum and (end_index-start_index+1) > max_len:\n      max_len = end_index-start_index+1\n  return max_len\n\narr = [1, 2, 3, 4, 5]\ngiven_sum = 9\nprint(longest_subarray_with_sum(arr, given_sum))",
        "799": "class JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input)",
        "800": "import math\n\n# calculate the hypotenuse\ndef calc_hypotenuse(a, b):\n    hyp = math.sqrt(a**2 + b**2)\n    print(\"The length of the hypotenuse is\", hyp)\n\n# input lengths of triangle sides\na = 5\nb = 12\n\n# call the function\ncalc_hypotenuse(a, b)",
        "801": "import random\n\nrandom_number = random.uniform(1, 2)\nprint(random_number)",
        "802": "def new_string(s1, s2):\n    new_str = \"\"\n    for char in s2:\n        if char not in s1:\n            new_str += char\n\n    return new_str\n\nprint(new_string(\"Python\", \"Programming\")) # Output: \"roammig\"",
        "803": "def validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True",
        "804": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"\/\", methods=['GET', 'POST'])\ndef math():\n if request.method == 'POST':\n  num1 = int(request.form.get('num1'))\n  num2 = int(request.form.get('num2'))\n  operation = request.form.get('operation')\n\n  if operation == 'add':\n   result = num1 + num2\n  elif operation == 'subtract':\n   result = num1 - num2\n\n  return {'result': result}\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "805": "def merge_lists(list1, list2):\n merged_list = []\n\n # Iterate over both the lists \n # and compare their elements \n while len(list1) > 0 and len(list2) > 0:\n  if list1[0] < list2[0]:\n   merged_list.append(list1.pop(0))\n  else:\n   merged_list.append(list2.pop(0))\n\n# Check to see if any elements remain in one of the lists\n# and add them to the end of the merged list\n merged_list += list1\n merged_list += list2\n\n return merged_list\n\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8]\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # prints [1, 2, 5, 6, 8, 9]",
        "806": "for item in my_list:\n    print(item)",
        "807": "import numpy as np\n\ndef fitness_function(X):\n return X[0] * X[1] + X[2]\n\ndef generate_genes(n, lower, upper):\n return np.random.uniform(lower, upper, n)\n\ndef GA(genes, fitness, lower, upper, mutation_rate, max_iterations):\n max_fitness = -float('inf')\n max_genes = None\n n = len(genes)\n for iteration in range(max_iterations):\n if max_fitness >= fitness_function(genes):\n break\n # Generate new population\n parent_generation = []\n for _ in range(int(n\/2)):\n parent_generation.append((genes, fitness_function(genes)))\n parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents \n # Select the best\n elite_genes, elite_fitness = parent_generation[0]\n # Crossover\n child_generation = []\n for _ in range(int(n\/2)):  # Breed new population\n parent_1 = np.random.choice(parent_generation)\n parent_2 = np.random.choice(parent_generation)\n child_1, child_2 = crossover(parent_1, parent_2, n)\n child_generation.append(child_1)\n child_generation.append(child_2)\n # Mutate\n mutants = []\n for child in child_generation:\n if np.random.uniform(0, 1) < mutation_rate:\n mutants.append(mutation(child, lower, upper))\n else:\n mutants.append(child)\n # Update \n for gene in mutants:\n genes = gene\n fitness = fitness_function(genes)\n if fitness > max_fitness:\n max_fitness = fitness\n max_genes = gene\n return max_fitness, max_genes\n\ndef crossover(parent_1, parent_2, n):\n n_split = np.random.randint(1, n)  # Split \n child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])\n child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])\n return child_1, child_2\n\ndef mutation(gene, lower, upper):\n for i, gene_value in enumerate(gene):\n if np.random.uniform(0, 1) < mutation_rate:\n gene[i] = np.random.uniform(lower, upper)\n return gene\n\n# Run GA\nn = 3\nlower = 0\nupper = 1\ngenes = generate_genes(n, lower, upper)\nmutation_rate = 0.1\nmax_iterations = 1000\nmax_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)\n\n# Print results\nprint(\"Maximum fitness score:\", max_fitness)\nprint(\"Parameters:\", max_genes)",
        "808": "import pandas as pd\nimport pyodbc\n\n# Connect to database\nserver = '<yourserver>'\ndatabase = '<yourdatabase>'\nusername = '<yourusername>'\npassword = '<yourpassword>'\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = conn.cursor()\n\n# Read Excel file\ndf = pd.read_excel('<yourfilename>')\n\n# Insert values into database\nfor index, row in df.iterrows():\n item_id = row['item_id']\n item_name = row['item_name']\n price = row['price']\n cursor.execute(f\"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})\")\nconn.commit()",
        "809": "#!\/usr\/bin\/env python\n\n''' Calculate the correlation between the artists. Intermediate datasets are\n    saved in the HDF5 file and the final dataset is saved in the database as\n    well. The artist correlation matrix is saved only for the single\n    selected artist, used in the final step for the similarity comparison.\n\n    #--------------------------------------------------------------------------#\n    Copyright (C) 2014, Zlatko Prpa <zprpa.ca@gmail.com>\n\n    This program is free software: you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n    #--------------------------------------------------------------------------#\n'''\n\n#-- standard libs\nimport os, sys, sqlite3, time, locale, itertools as it\n\n#-- add-on libs\nimport numpy, h5py\n\n#-- custom libs\nimport utils\n\n#==============================================================================#\n#--------------------------------- SETUP --------------------------------------#\n#==============================================================================#\n\nlog  = utils.ZpLog(   'logs\/' + os.path.basename(__file__) + '.log')\nelog = utils.ZpErrLog('logs\/' + os.path.basename(__file__) + '.ERROR-traceback.log')\nlog.write(''.ljust(150,'*'), skip_line=1, add_line=1)\n\n#-- setup number formatting\nlocale.setlocale( locale.LC_ALL, \"\" )\nfmt = locale.format\n\n#-- open the HDF5 file for the storage of the intermediate datasets\nh5f = h5py.File('data\/artist-correlation-datasets.h5','w')\nvlen_dtype = h5py.special_dtype(vlen=str)\n\n#==============================================================================#\n#------------------------- Load and process data ------------------------------#\n#==============================================================================#\n\n#--------------------------------------#\n#-- load data and apply basic filter   #\n#--------------------------------------#\n''' Load the records from the artist\/tag table.\n    There is no reason to apply any filter to this basic dataset, as opposite\n    to the tag correlation procedure. We do not need to generalize any\n    specific artist, as we had to do with tag data.\n    Otherwise, the whole processing logic is very much the same.\n'''\nlog.write('Load data.')\ndbs = sqlite3.connect('data\/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)\ncur = dbs.cursor()\ncur.execute(\"SELECT t.artist_name, t.tag, t.count FROM top_artist_tags t\")\nrecs = numpy.array([r for r in cur],dtype=[('art','O'),('tag','O'),('count','i4')])\ncur.close()\ndbs.close()\nlog.write('Loaded %s records.'%fmt('%12d',recs.shape[0],True).strip())\n\n#--------------------------------------#\n#-- prepare data for correlation calc  #\n#--------------------------------------#\n\nlog.write('Prepare data for the correlation calc.')\n\n#-- Get unique list of artists and tags.\nunique_art  = numpy.unique( recs['art'] )\nunique_tags = numpy.unique( recs['tag'] )\n\n''' Create 2d array to hold the vector for each artist. The vector size is 2x\n    the length of the list of the unique tags. First part will have the\n    value 0\/1, depending if the given artist is associated with the given tag.\n    The second part will have the tag ranking (count) value, at the same\n    position for the given tag.\n\n    Assuming the following tuples in the basic dataset [recs]:\n    (art1,tag1,90), (art1,tag2,80), (art1,tag3,60),\n    (art2,tag1,80),                 (art2,tag3,90),\n                    (art3,tag2,90), (art3,tag3,80),\n    (art4,tag1,50), (art4,tag2,70), (art4,tag3,70)\n\n    The \"unique_art\"  list is:  [art1,art2,art3,art4]\n    The \"unique_tags\" list is:  [tag1,tag2,tag3]\n    offset = 3\n    Single artist vector is [0,0,0,0,0,0], with logical mask as\n    [tag1,tag2,tag3,rank1,rank2,rank3].\n\n    Based on the above described data, the complete matrix \"tags_mx\"\n    will have 4 vectors with following values:\n    [[1,1,1,90,80,60],\n     [1,0,1,80, 0,90],\n     [0,1,1, 0,90,80],\n     [1,1,1,50,70,70]]\n\n    The sample data (tags for 1000 artists) is very small and this executes\n    fast, otherwise this loop would be a strong candidate for parallel\n    execution.\n'''\noffset = unique_tags.shape[0]\nart_mx = numpy.zeros((unique_art.shape[0],offset*2),'i4')\n\nfor i in xrange(unique_art.shape[0]):\n    #-- find indicies for all records in the basic dataset for given artist\n    idx = numpy.where( recs['art']==unique_art[i] )[0]\n    #-- get all tags and counts for the given artist\n    tags   = recs['tag'].take(idx)\n    counts = recs['count'].take(idx)\n    #-- find the index positions in the tag unique list, for all tag artists\n    idx = unique_tags.searchsorted(tags)\n    #-- fill in the first part of the artist vector with 1, for each tag found\n    numpy.put( art_mx[i], idx, 1 )\n    #-- fill in the tag count (rank) in the second part of the artist vector\n    numpy.put( art_mx[i], idx+offset, counts )\n\nds = h5f.create_dataset('unique_art', unique_art.shape, dtype=vlen_dtype)\nds[...] = unique_art\nds = h5f.create_dataset('unique_tags', unique_tags.shape, dtype=vlen_dtype)\nds[...] = unique_tags\nds = h5f.create_dataset('art_mx', art_mx.shape, dtype=art_mx.dtype)\nds[...] = art_mx\nh5f.flush()\nlog.write('Saved following datasets:')\nlog.write('unique_art:  shape->%s\\tdtype->%s'%(unique_art.shape, unique_art.dtype))\nlog.write('unique_tags: shape->%s\\tdtype->%s'%(unique_tags.shape,unique_tags.dtype))\nlog.write('art_mx:      shape->%s\\tdtype->%s'%(art_mx.shape,     art_mx.dtype), add_line=1)\n\n#--------------------------------------#\n#-- calculate artist correlation       #\n#--------------------------------------#\n\nlog.write('Calculate artist correlation.')\n\n''' Calculate correlation for each distinct pair of artist vectors.\n    Again, in case of high data volume, this could be executed in parallel\n    using the pool of worker processes.\n    For the present dataset, the approx size of the artist correlation matrix\n    is around 500K recs.\n'''\n#-- first iterator to get the matrix size\nitr  = ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0]))\nsize = sum(1 for _ in itr)\ncorr = numpy.empty( size, dtype=[('art1','O'),('art2','O'),('c','f8')] )\n#-- full iterator\nitr = it.izip(  ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0])),\n                (k for k in xrange(size)) )\nt = time.time()\nfor (x,y),z in itr:\n    c = numpy.corrcoef( art_mx[x], art_mx[y] )[0,1]\n    corr[z] = (unique_art[x], unique_art[y], c)\n    #-- update progres every 10K recs\n    if z%10000==0:\n        log.write_timing1( z, size, t, time.time(), out_type='TTY')\n\n''' Because the full dataset is somewhat big, save only the sample used later\n    in the \"similar artist\" comparison.\n    Comment out if you want to re-run and get all records.\n'''\nlog.write('Full artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype))\nsample_artist = 'Cyndi Lauper'\ni = numpy.where( (corr['art1']==sample_artist)|(corr['art2']==sample_artist) )[0]\ncorr = corr.take(i)\nlog.write('Sample artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype))\n\nds = h5f.create_dataset('corr', corr.shape, dtype=[('art1',vlen_dtype),('art2',vlen_dtype),('c','f8')])\nds[...] = corr\nh5f.close()\nlog.write('Saved sample artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype),add_line=1)\n\n#-- save the records in the database as well\ndbs = sqlite3.connect('data\/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)\ncur = dbs.cursor()\ncur.execute(\"DELETE FROM artist_correlation\")\ncur.executemany(\"INSERT INTO artist_correlation VALUES (?,?,?)\",(r for r in corr))\nlog.write('Loaded %s records in the database.'%fmt('%6d',cur.rowcount,True))\ndbs.commit()\ncur.close()\ndbs.close()\n\nlog.write(''.ljust(150,'*'), add_line=1)\nlog.close()\n\n#==============================================================================#\n#------------------------------------------------------------------------------#\n#==============================================================================#\n",
        "810": "{\n 'apple': 'This apple is not fresh.',\n 'orange': 'This orange has gone bad.',\n 'banana': 'This banana is too ripe.'\n}",
        "811": "def find_max_Using_Divide_and_Conquer(arr):\n    # Base case \n    if len(arr) == 1: \n        return arr[0] \n    if len(arr) == 2: \n        return max(arr[0], arr[1]) \n  \n    # Recursive case \n    mid = len(arr)\/\/2 \n    max_left_sublist = find_max_Using_Divide_and_Conquer(arr[:mid]) \n    max_right_sublist = find_max_Using_Divide_and_Conquer(arr[mid:]) \n  \n    return max(max_left_sublist, max_right_sublist)",
        "812": "def add_numbers(a, b):\n    return a + b\n\nprint(\"The sum of 2 and 20 is: \", add_numbers(2, 20))",
        "813": "def isEven(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\n\nif isEven(x):\n    print(\"It is even\")\nelse:\n    print(\"It is odd\")",
        "814": "# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)",
        "815": "def factorial(n): \n    if n == 0: \n        return 1 \n    else: \n        return n * factorial(n-1)",
        "816": "def differentiate(x):\n  return 10*x + 3;\n\n# Test\nx = 2 \nprint(\"The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:\", differentiate(x)) # Output: 17",
        "817": "# main.py\n# The Google App Engine entry point with requests and responses\n\nfrom google.appengine.ext import ndb\nfrom flask import Flask\n\n# Define the Flask application\napp = Flask(__name__)\n\n@app.route('\/api\/v1\/ persons\/<id>', methods=['GET'])\ndef get_person_by_id(id):\n    person = ndb.Key(\"Person\", id).get()\n    if person is not None:\n        data = person.to_dict()\n        return json.dumps(data)\n    else:\n        # Return an error code if person with the provided ID was not found\n        return '{\"error\": \"Person not found\"}'\n\nif __name__ == '__main__':\n    # This is used when running locally only. When deploying to Google App\n    # Engine, a webserver process such as Gunicorn will serve the app.\n    app.run(host='127.0.0.1', port=8080, debug=True)\n\n# app.yaml\n\n# [START gae_python_app]\nruntime: python27\napi_version: 1\nthreadsafe: true\n\n# app.yaml\nenv_variables:\n  # Replace the placeholder below with your GCP project ID and make sure\n  # the variable is named `GCP_PROJECT`\n  GCP_PROJECT: <YOUR_PROJECT_ID>\n\n# app.yaml\nhandlers:\n- url: \/.*\n  script: main.app\n\n# [END gae_python_app]",
        "818": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55",
        "819": "def get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "820": "The issue with the program is that it is not printing the message stored in the \"msg\" variable. To fix this, the program can be modified as follows:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    print(msg)\n\ngreet(\"John\")",
        "821": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)",
        "822": "# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number\/\/10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321",
        "823": "def average(a, b): \n    return (a + b) \/ 2\n\nprint(average(2, 3))",
        "824": "import random\nimport string\n\ndef generateRandomString(length):\n    chars = string.ascii_letters + string.digits\n    randStr = \"\".join(random.choice(chars) for i in range(length))\n    return randStr\n\nprint(generateRandomString(8))",
        "825": "# We define the possible winning combination of the game\nWINNING_COMBINATION = {\n  \"rock\": \"scissors\",\n  \"paper\": \"rock\",\n  \"scissors\": \"paper\"\n}\n\ndef playRockPaperScissors():\n  # Player 1's turn\n  player1_choice = input(\"Player 1: Choose rock, paper or scissors: \")\n  # Player 2's turn\n  player2_choice = input(\"Player 2: Choose rock, paper or scissors: \")\n\n  # Find the winner\n  if WINNING_COMBINATION[player1_choice] == player2_choice:\n    print(\"Player 1 has won.\")\n  elif WINNING_COMBINATION[player2_choice] == player1_choice:\n    print(\"Player 2 has won.\")\n  else:\n    print(\"It's a tie!\")\n\nplayRockPaperScissors()",
        "826": "import mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)",
        "827": "import smtplib\n\n# Set up the SMTP server\ns = smtplib.SMTP(host='your_host_address_here', port=your_port_here)\ns.starttls()\ns.login(\"your_username_here\", \"your_password_here\")\n\n# Send the mail\nmessage = \"A message\"\ns.sendmail(\"from@example.com\", \"to@example.com\", message)\n\n# Terminate the SMTP session and close the connection\ns.quit()",
        "828": "def predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value",
        "829": "#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print(i)",
        "830": "class Vec3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)",
        "831": "def filterPrimes(myList):\n    result = []\n    for i in myList:\n        is_prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result\n\nprint(filterPrimes(myList)) #[2, 5]",
        "832": "# Python program to calculate the compound interest  \n  \ndef compound_interest(principal, rate, time): \n  \n    # Calculates compound interest  \n    CI = principal * (pow((1 + rate \/ 100), time)) \n    print(\"Compound interest is\", CI) \n  \n# Driver Code  \ncompound_interest(1000, 9, 2)",
        "833": "def permute(input):\n res = []\n for i in range(len(input)):\n for result in permute(input[:i] + input[i + 1:]):\n res.append([input[i]] + result)    \n return res\n\ninputValues = ['a', 'b', 'c']\npermutations = permute(inputValues)\n\nfor perm in permutations:\n print(perm)",
        "834": "def join_list_items(my_list, delimiter):\n    joined_list = delimiter.join(my_list)\n    return joined_list\n\nlist_string = join_list_items([\"apple\", \"orange\", \"mango\"], \", \")\nprint(list_string)\n# Output: apple, orange, mango",
        "835": "import concurrent.futures\n\ndef thread_function(script):\n  \/\/ Code to run the given script in parallel\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n  executor.map(thread_function, scripts)",
        "836": "def to_binary(num):\n  result = \"\"\n  while num > 0:\n   remainder = num % 2\n   num = num \/\/ 2\n   result = str(remainder) + result\n  return result\n\nprint(to_binary(13)) # '1101'",
        "837": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age",
        "838": "def find_GCD(input_list): \n gcd = input_list[0] \n for num in input_list[1:]: \n gcd = find_GCD(gcd, num) \n return gcd\n\ndef find_GCD(a, b):\n while(b != 0): \n a, b = b, a%b \n return a",
        "839": "documents = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']\n\n# Get the words from the documents\nwords = []\nfor doc in documents:\n words += doc.split()\n\n# Get the unique words\nunique_words = set(words)\n\n# Print the number of unique words\nprint(f'The number of unique words is {len(unique_words)}')",
        "840": "from flask import Flask, jsonify, request\n \napp = Flask(__name__)\n\n@app.route('\/products', methods=['GET'])\ndef get_all_products():\n    # query database\n    products = []\n    # format result\n    return jsonify(products)\n\n@app.route('\/products\/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    # query database\n    product = {}\n    # format result\n    return jsonify(product)\n\n@app.route('\/products', methods=['POST'])\ndef create_product():\n    # get data from request\n    data = request.get_json()\n    # save to database\n    # format result\n    return jsonify({'message': 'Product added successfully.'}), 201\n\n@app.route('\/products\/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    # get data from the request\n    data = request.get_json()\n    # update data in the database\n    # format the result\n    return jsonify({'message': 'Product successfully updated.'})\n\n@app.route('\/products\/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    # delete data from the database\n    # format the result\n    return jsonify({'message': 'Product successfully deleted.'})",
        "841": "import random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password",
        "842": "from sklearn.cluster import KMeans, GaussianMixture\ncluster = KMeans(n_clusters=n_clusters).fit(X)\npipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)",
        "843": "import numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]\/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1\/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)\/(2*std**2)))\n        return probabilities",
        "844": "\"\"\"\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\"\"\"\n\nimport os\nimport re\nfrom resource_management.core.logger import Logger\nfrom resource_management.core.exceptions import Fail\nfrom resource_management.core.resources.system import Execute\nfrom resource_management.core import shell\nfrom resource_management.libraries.functions import format\nfrom resource_management.libraries.functions import stack_select\nfrom resource_management.libraries.functions.version import format_stack_version\nfrom resource_management.libraries.functions.version import compare_versions\n\n\ndef pre_upgrade_deregister():\n  \"\"\"\n  Runs the \"hive --service hiveserver2 --deregister <version>\" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically; this process\n  could take a very long time.\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  \"\"\"\n  import params\n\n  Logger.info('HiveServer2 executing \"deregister\" command in preparation for upgrade...')\n\n  if params.security_enabled:\n    kinit_command=format(\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \")\n    Execute(kinit_command,user=params.smokeuser)\n\n  # calculate the current hive server version\n  current_hiveserver_version = _get_current_hiveserver_version()\n  if current_hiveserver_version is None:\n    raise Fail('Unable to determine the current HiveServer2 version to deregister.')\n\n  # fallback when upgrading because \/usr\/iop\/current\/hive-server2\/conf\/conf.server may not exist\n  hive_server_conf_dir = params.hive_server_conf_dir\n  if not os.path.exists(hive_server_conf_dir):\n    hive_server_conf_dir = \"\/etc\/hive\/conf.server\"\n\n  # deregister\n  hive_execute_path = params.execute_path\n  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.\n  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.\n  if \"upgrade\" == params.upgrade_direction:\n    # hive_bin\n    upgrade_target_version = format_stack_version(params.version)\n    if upgrade_target_version and compare_versions(upgrade_target_version, \"4.1.0.0\") >= 0:\n      upgrade_target_hive_bin = format('\/usr\/iop\/{version}\/hive\/bin')\n      if (os.pathsep + params.hive_bin) in hive_execute_path:\n        hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + upgrade_target_hive_bin)\n    # hadoop_bin_dir\n    upgrade_target_hadoop_bin = stack_select.get_hadoop_dir(\"bin\", upgrade_stack_only=True)\n    upgrade_source_hadoop_bin = params.hadoop_bin_dir\n    if upgrade_target_hadoop_bin and len(upgrade_target_hadoop_bin) > 0 and (os.pathsep + upgrade_source_hadoop_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + upgrade_source_hadoop_bin, os.pathsep + upgrade_target_hadoop_bin)\n\n  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)\n  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )\n\n\ndef _get_current_hiveserver_version():\n  \"\"\"\n  Runs \"hive --version\" and parses the result in order\n  to obtain the current version of hive.\n\n  :return:  the hiveserver2 version, returned by \"hive --version\"\n  \"\"\"\n  import params\n\n  try:\n    command = 'hive --version'\n    return_code, iop_output = shell.call(command, user=params.hive_user, path=params.execute_path)\n  except Exception, e:\n    Logger.error(str(e))\n    raise Fail('Unable to execute hive --version command to retrieve the hiveserver2 version.')\n\n  if return_code != 0:\n    raise Fail('Unable to determine the current HiveServer2 version because of a non-zero return code of {0}'.format(str(return_code)))\n\n  match = re.search('^(Hive) ([0-9]+.[0-9]+.\\S+)', iop_output, re.MULTILINE)\n\n  if match:\n    current_hive_server_version = match.group(2)\n    return current_hive_server_version\n  else:\n    raise Fail('The extracted hiveserver2 version \"{0}\" does not matching any known pattern'.format(iop_output))\n\ndef post_upgrade_deregister():\n  \"\"\"\n  Runs the \"hive --service hiveserver2 --deregister <version>\" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically; this process\n  could take a very long time.\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  \"\"\"\n  import params\n\n  Logger.info('HiveServer2 executing \"deregister\" command to complete upgrade...')\n\n  if params.security_enabled:\n    kinit_command=format(\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \")\n    Execute(kinit_command,user=params.smokeuser)\n\n  # calculate the current hive server version\n  current_hiveserver_version = _get_current_hiveserver_version()\n  if current_hiveserver_version is None:\n    raise Fail('Unable to determine the current HiveServer2 version to deregister.')\n\n  # fallback when upgrading because \/usr\/hdp\/current\/hive-server2\/conf\/conf.server may not exist\n  hive_server_conf_dir = params.hive_server_conf_dir\n  if not os.path.exists(hive_server_conf_dir):\n    hive_server_conf_dir = \"\/etc\/hive\/conf.server\"\n\n  # deregister\n  hive_execute_path = params.execute_path\n  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.\n  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.\n  # By now <stack-selector-tool> has been called to set 'current' to target-stack\n  if params.downgrade_from_version is not None:\n    hive_execute_path = _get_hive_execute_path(params.downgrade_from_version)\n\n  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)\n  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )\n\ndef _get_hive_execute_path(stack_version):\n  \"\"\"\n  Returns the exact execute path to use for the given stack-version.\n  This method does not return the \"current\" path\n  :param stack_version: Exact stack-version to use in the new path\n  :return: Hive execute path for the exact hdp stack-version\n  \"\"\"\n  import params\n\n  hive_execute_path = params.execute_path\n  formatted_stack_version = format_stack_version(stack_version)\n  if formatted_stack_version and compare_versions(formatted_stack_version, \"4.1\") >= 0:\n    # hive_bin\n    new_hive_bin = format('\/usr\/iop\/{stack_version}\/hive\/bin')\n    if (os.pathsep + params.hive_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + new_hive_bin)\n    # hadoop_bin_dir\n    new_hadoop_bin = stack_select.get_hadoop_dir_for_stack_version(\"bin\", stack_version)\n    old_hadoop_bin = params.hadoop_bin_dir\n    if new_hadoop_bin and len(new_hadoop_bin) > 0 and (os.pathsep + old_hadoop_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + old_hadoop_bin, os.pathsep + new_hadoop_bin)\n  return hive_execute_path\n",
        "845": "# Imports \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\n\n# Data \ndata = pd.DataFrame(columns=['string'])\ndata = data.append({'string':'3aF5yD'}, ignore_index=True)\n\n# Neural Network Architecture \nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),\n tf.keras.layers.LSTM(256, return_sequences=True),\n tf.keras.layers.Dense(32),\n tf.keras.layers.Dense(len(data), activation='softmax')\n])\n\n# Optimizer\nmodel.compile(optimizer='adam', loss='mse')\n\n# Train \nmodel.fit(data.values, epochs=10)\n\n# Prediction\npredictions = model.predict(data.values)\nprint(predictions)",
        "846": "def binary_search(arr, target):\n left = 0\n right = len(arr)-1\n while left <= right:\n mid = (left + right) \/\/ 2\n if arr[mid] > target:\n right = mid - 1\n elif arr[mid] < target:\n left = mid + 1\n else:\n return mid\n return -1",
        "847": "a, b = 0, 1\nwhile b < 100:\n    print(a)\n    a, b = b, a + b",
        "848": "myDict = {1: \"One\", 2:\"Two\", 3:\"Three\"}",
        "849": "def print_all(sequences):\n    [print(sequence) for sequence in sequences]",
        "850": "import pygame\nimport random\n \n# Define some colors\nblack    = (   0,   0,   0)\nwhite    = ( 255, 255, 255)\ngreen    = (   0, 255,   0)\nred      = ( 255,   0,   0)\n \n# This sets the width and height of each grid location\nwidth=20\nheight=20\n \n# This sets the margin between each cell\nmargin=5\n \n# Create a 2 dimensional array. A two dimensional\n# array is simply a list of lists.\ngrid=[]\nfor row in range(10):\n    # Add an empty array that will hold each cell\n    # in this row\n    grid.append([])\n    for column in range(10):\n        grid[row].append(0) # Append a cell\n \n# Set row 1, cell 5 to one. (Remember rows and\n# column numbers start at zero.)\ngrid[1][5] = 1\n \n# Initialize pygame\npygame.init()\n  \n# Set the height and width of the screen\nsize=[255,255]\nscreen=pygame.display.set_mode(size)\n \n# Set title of screen\npygame.display.set_caption(\"Array Backed Grid\")\n \n# Loop until the user clicks the close button.\ndone=False\n  \n# Used to manage how fast the screen updates\nclock=pygame.time.Clock()\n \n# -------- Main Program Loop -----------\nwhile done==False:\n    for event in pygame.event.get(): # User did something\n        if event.type == pygame.QUIT: # If user clicked close\n            done=True # Flag that we are done so we exit this loop\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE:\n                grid[1][5] = 0\n    # Set the screen background\n    screen.fill(white)\n \n    # Draw the grid\n    for row in range(10):\n        for column in range(10):\n            color = white\n            if grid[row][column] == 1:\n                color = green\n            pygame.draw.rect(screen,\n                             color,\n                             [(margin+width)*column+margin,\n                              (margin+height)*row+margin,\n                              width,\n                              height])\n                              \n    # Limit to 20 frames per second\n    clock.tick(20)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n      \n# Be IDLE friendly. If you forget this line, the program will 'hang'\n# on exit.\npygame.quit ()",
        "851": "#Calculate the Factorial of a Positive Number\n\n#Get input\nfactNum = 4\n\n#Calculate and print result\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\n\nprint(\"The factorial of 4 is:\", factNum)",
        "852": "\"\"\"\nWrite a Python program to complete the implementing of a searching algorithm\n\"\"\"\n\n# Function to implement searching algorithm \ndef search(list, item): \n    # traverse through all list elements\n    for i in range(len(list)): \n        if list[i] == item: \n            return i \n      \n    # item not found\n    return -1\n  \n# main \nif __name__ == \"__main__\": \n    # Given list \n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    item = 7\n  \n    # Calling Function \n    index = search(list, item) \n  \n    if index != -1: \n        print(\"Item found at index\", index) \n    else:\n        print(\"Item is not found in list\")",
        "853": "import re\n\nhtml = \"<div class=\\\"data\\\"> \\\n <h1>Name: John Doe<\/h1> \\\n <h3>Age: 25<\/h3> \\\n <h3>Location: Los Angeles, CA<\/h3> \\\n<\/div>\"\n\npattern = '<h1>Name: (.*)<\/h1>.*<h3>Age: (.*)<\/h3>.*<h3>Location: (.*)<\/h3>'\n\ndata = re.search(pattern, html)\n\nname = data.group(1)\nage = data.group(2)\nlocation = data.group(3)\n\nprint('Name: {}'.format(name))\nprint('Age: {}'.format(age))\nprint('Location: {}'.format(location))",
        "854": "import argparse\nimport collections\nimport re\nimport subprocess\n\n\nNOTES_REF = 'refs\/notes\/votes'\n\n\nVote = collections.namedtuple('Vote', ['commit', 'user'])\n\n\n\ndef vote(args):\n\tassert args.user, 'TODO: determine user automatically'\n\tvote = 'vote:%s' % args.user\n\tsubprocess.check_call([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT],\n\t\tcwd=args.repo_dir)\n\t# TODO: prevent voting twice as same user\n\n\ndef get_all_votes(repo_dir):\n\toutput_bytes = subprocess.check_output([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'list'],\n\t\tcwd=repo_dir)\n\toutput = output_bytes.decode('utf-8')\n\tfor line in output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tvotenote_ref, commit_id = line.split()\n\t\t# TODO use dulwich or something more efficient here\n\t\tvotenote_bytes = subprocess.check_output(\n\t\t\t['git', 'show', votenote_ref],\n\t\t\tcwd=repo_dir)\n\n\t\tvotenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes\n\t\tfor voteline in votenote_content.splitlines():\n\t\t\tif not voteline:\n\t\t\t\tcontinue\n\t\t\tm = re.match(r'^vote:(?P<user>[a-z0-9@._]+)$', voteline.strip()) # TODO check re for user spec\n\t\t\tif not m:\n\t\t\t\tprint('Skipping crap %r' % voteline)\n\t\t\t\tcontinue\n\t\t\tuser = m.group('user')\n\n\t\t\tyield Vote(commit=commit_id, user=user)\n\n\ndef print_list(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tall_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user))\n\tfor v in all_votes_sorted:\n\t\tprint('%s: +1 from %s' % (v.commit, v.user))\n\n\ndef tally(all_votes):\n\t\"\"\" Returns a dict commit id => set of users \"\"\"\n\tres = collections.defaultdict(set)\n\tfor v in all_votes:\n\t\tres[v.commit].add(v.user)\n\treturn res\n\n\ndef print_tally(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tfor commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])):\n\t\tprint('%s: %d votes' % (commit, len(votes)))\n\n\ndef print_elect(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\twinner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items())\n\t# TODO more algorithms\n\tprint('%s won the election with %d votes' % (winner_commit, winner_vcount))\n\n\ndef main():\n\tparser = argparse.ArgumentParser('Vote on git commands')\n\tparser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify')\n\tsubparsers = parser.add_subparsers(dest='cmd')\n\tvote_parser = subparsers.add_parser('vote', help='Vote for commit')\n\tvote_parser.add_argument('--user', metavar='USER_ID', help='ID of the user to vote as')\n\tvote_parser.add_argument('COMMIT', help='reference to the commit to vote for')\n\tsubparsers.add_parser('list', help='List all votes')\n\tsubparsers.add_parser('tally', help='Tally all votes')\n\tsubparsers.add_parser('elect', help='Elect a commit')\n\n\targs = parser.parse_args()\n\tif args.cmd == 'vote':\n\t\tvote(args)\n\telif args.cmd == 'list':\n\t\tprint_list(args)\n\telif args.cmd == 'tally':\n\t\tprint_tally(args)\n\telif args.cmd == 'elect':\n\t\tprint_elect(args)\n\telse:\n\t\tparser.print_help()\n\nif __name__ == '__main__':\n\tmain()\n",
        "855": "def product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])",
        "856": "from bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup",
        "857": "username = \"John\"\nscore = 123",
        "858": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_keywords_from_page(url):\n    headers = {\n        'user-agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/60.0.3112.113 Safari\/537.36'\n    }\n\n    response = requests.get(url, headers = headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    keywords = soup.find('meta', attrs={'name':'keywords'})\n    if keywords:\n        return keywords['content']\n    else:\n        return \"\"\n\n# Optimize search queries by finding keywords from a given website\ndef optimize_query(url):\n    keywords = get_keywords_from_page(url)\n    if keywords:\n        return keywords\n    else:\n        return url",
        "859": "import datetime\n\ndef date_diff(date1, date2):\n    \"\"\"Returns the difference between two date objects in days\"\"\"\n    diff_date = date2 - date1\n    return diff_date.days",
        "860": "def first_last(lst):\n    first_element = lst[0]\n    last_element = lst[-1]\n    return [first_element, last_element]\n\nprint(first_last([5,3,1,7,9]))",
        "861": "class CustomerHistory:\n  def __init__(self, customer_id):\n    self.customer_id = customer_id\n    self.purchase_history = []\n\n  def add_purchase(self, product):\n    self.purchase_history.append(product)\n\n  def get_purchase_history(self):\n    return self.purchase_history",
        "862": "def lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))",
        "863": "from keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=64, input_length=50))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])",
        "864": "def binary_search(arr, target):\n  start = 0\n  end = len(arr) -1\n  while start <= end:\n    mid = (start + end) \/\/ 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] > target:\n      end = mid - 1\n    else:\n      start = mid + 1\n  return -1",
        "865": "class Node:\n def __init__(self, data):\n  self.data = data\n  self.next = None\n\nclass LinkedList:\n def __init__(self):\n  self.head = None\n  \n # Recursive function to insert a node at the beginning of the linked list \n def insert_at_head(self, new_node): \n  current_head = self.head \n  new_node.next = current_head\n  self.head = new_node\n\nlist = LinkedList()\nlist.insert_at_head(Node(1))",
        "866": "def find_min_coins(amount, denominations):\n    min_coins = [float(\"inf\")] * (amount + 1)\n    min_coins[0] = 0\n\n    for i in range(1, amount + 1):\n        for c in denominations:\n            if i - c >= 0:\n                min_coins[i] = min(min_coins[i - c] + 1, min_coins[i])\n\n    return min_coins[amount]",
        "867": "def linear_search(list, n): \n  \n    for i in range(len(list)): \n  \n        if list[i] == n: \n            return i \n\nlist = [1, 2, 3, 4, 5, 6] \nn = 5\n\nx = linear_search(list, n) \n\nif x == None: \n    print(\"Element is not present in the list\") \nelse: \n    print(\"Element is present at index\", x)",
        "868": "def replace_vowels(s): \n    # Initialize an empty string \n    new_s = '' \n  \n    # Iterate through each character\n    for ch in s: \n        # Check if the character is a vowel \n        if (ch == 'a' or ch == 'e' or ch == 'i' \n            or ch == 'o' or ch == 'u'): \n            # Replace it with '$'\n            new_s = new_s + '$' \n        else: \n            # Copy the same character \n            new_s = new_s + ch \n\n    return new_s \n\n\nstr = 'Python'\nresult = replace_vowels(str)\nprint(result)",
        "869": "num1 = int(input())\nnum2 = int(input())\nsum_of_nums\nprint(sum_of_nums)",
        "870": "class File:\n    \"\"\"A simple file class\"\"\"\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n    def get_name(self):\n        return self.name\n\n    def get_size(self):\n        return self.size\n\n    def get_type(self):\n        return self.type",
        "871": "from xhtml2pdf import pisa\n \n# open the page\nwith open('input.html', 'r') as f:\n    html = f.read()\n \n# convert to PDF\npdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))\n \n# print the result\nif not pdf.err:\n    print('PDF created successfully')\nelse:\n    print('Error creating PDF')",
        "872": "import re\n\ndef check_password_strength(password):\n    '''This function checks if the given password is strong according to NIST guidelines'''\n    # check if password is atleast 8 characters long\n    if len(password) < 8:\n        return False\n    \n    # check if password contains atleast one lowercase letter\n    if not re.search('[a-z]', password):\n        return False\n    \n    # check if password contains atleast one uppercase letter\n    if not re.search('[A-Z]', password):\n        return False\n    \n    # check if password contains atleast one number\n    if not re.search('[0-9]', password):\n        return False\n    \n    return True",
        "873": "def capitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.capitalize()\n  return result\n\ndef uncapitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.lower()\n  return result",
        "874": "import bs4\nfrom urllib.request import urlopen\n\ndef make_webpage_mobile_friendly(url):\n    html = urlopen(url)\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n    head_html = soup.find('head')\n    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}\n    meta_tag = soup.new_tag('meta', attrs=meta_attribute)\n    head_html.append(meta_tag)\n    html_body = soup.find('body')\n    for element in html_body.find_all('div', {'class': 'large-wrapper'}):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n    for element in html_body.find_all('img'):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n\n    return soup.prettify()",
        "875": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "876": "list_of_string = [\"good\",\"weird\",\"great\",\"amazing\"]\n\nfiltered_list = [s for s in list_of_string if \"bad\" not in s]\n\nprint(filtered_list)",
        "877": "def add_matrices(X, Y): \n  \n    result = [[0, 0, 0], \n            [0, 0, 0], \n            [0, 0, 0]] \n  \n    # iterate through rows \n    for i in range(len(X)): \n      \n        # iterate through columns \n        for j in range(len(X[0])): \n            result[i][j] = X[i][j] + Y[i][j] \n  \n    for r in result: \n        print(r)",
        "878": "# Use nested list comprehension to calculate the sum \ntotal_sum = sum([sum(row) for row in arr])",
        "879": "4",
        "880": "def hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")",
        "881": "class Object:\n  def __init__(self,attr1,attr2,attr3):\n    self.attr1 = attr1\n    self.attr2 = attr2\n    self.attr3 = attr3",
        "882": "import re\n\ndef remove_non_alphanum(s):\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\n\nstring = \"Hello,@ $World.\"\nres = remove_non_alphanum(string) \n\nprint(res)",
        "883": "import random\nimport os\n\n# define the characters\nvillain = { \"name\": \"Evil Wizard\", \"hp\": 100 }\nhero = { \"name\": \"Hero\", \"hp\": 100 }\n\ndef fight_evil_wizard():\n    print(\"You attack the Evil Wizard!\")\n    # randomly choose to either hit or miss the target\n    is_hit = random.choice([True, False])\n    if is_hit:\n        print(\"You hit the Evil Wizard!\")\n        villain[\"hp\"] -= 10\n    else:\n        print(\"You missed!\")\n    # print out the hp of each character \n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\ndef manage_hp(target, value):\n    target[\"hp\"] += value\n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\nwhile True:\n    os.system(\"cls\")  # clear the terminal output\n    # check if either character is alive\n    if hero[\"hp\"] <= 0:\n        print(\"You have been defeated!\")\n        break\n    if villain[\"hp\"] <= 0:\n        print(\"You have slain the Evil Wizard!\")\n        # you won!\n        break\n\n    # show the user the options\n    print(\"What would you like to do?\")\n    print(\"1. Fight Evil Wizard\")\n    print(\"2. Heal (HP +10)\")\n    print(\"3. Run away\")\n    user_input = int(input(\">> \"))\n\n    if user_input == 1:\n        fight_evil_wizard()\n    elif user_input == 2:\n        manage_hp(hero, 10)\n    elif user_input == 3:\n        print(\"You run away from the Evil Wizard!\")\n        break\n    else:\n        print(\"Invalid input!\")",
        "884": "# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))",
        "885": "SELECT author \nFROM books \nWHERE title LIKE '%python%';",
        "886": "def is_palindrome(s): \n    # Reverse the string \n    rev = s[::-1] \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return True\n    return False\n  \n# Driver code \ns = \"aba\"\nans = is_palindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\")",
        "887": "def find_smallest(int_list):\n    # set the minimum value to the first item in the list initially\n    min_val = int_list[0]\n    # loop over the list and compare each item to the minimum value\n    for num in int_list:\n        if num < min_val:\n            min_val = num\n    # return the minimum value\n    return min_val",
        "888": "def string_length_sum(string1, string2):\n    return len(string1) + len(string2)\n\nresult = string_length_sum(string1, string2)",
        "889": "\"\"\"\nWrite a Python program to create a Tic Tac Toe game\n\"\"\"\n\n# global variables \nboard = [\"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\"] \ngame_is_still_going = True \n  \n# who is the winner \nwinner = None\n  \n # whose turn is it \ncurrent_player = \"X\"\n\n\n# display board\ndef display_board(): \n    print(board[0] + \" | \" + board[1] + \" | \" + board[2])\n    print(board[3] + \" | \" + board[4] + \" | \" + board[5]) \n    print(board[6] + \" | \" + board[7] + \" | \" + board[8])\n  \n  \n# play a game of tic tac toe \ndef play_game(): \n    \n    # display initial board \n    display_board() \n  \n    # while game is still going \n    while game_is_still_going: \n  \n        # assign handle turn to a variable \n        handle_turn(current_player) \n  \n        # check if game is finished \n        check_if_game_over()\n  \n        # flip to another player \n        flip_player() \n          \n    # check if winner  \n    if winner == \"X\" or winner == \"O\": \n        print(\"Winner is: \" + winner) \n    elif winner == None: \n        print(\"Tie.\") \n\n# handle a single turn of a player \ndef handle_turn(player): \n  \n    position = input(\"Choose a position from 1-9: \") \n    position = int(position) - 1\n  \n    board[position] = player \n  \n    display_board() \n  \n  \n# check win\ndef check_if_game_over(): \n    check_if_win() \n    check_if_tie() \n  \n# check rows, columns and diagonals for a win \ndef check_if_win(): \n    # set global variables \n    global winner \n    # check rows \n    row_winner = check_rows() \n    # check columns \n    column_winner = check_columns() \n    # check diagonals \n    diagonal_winner = check_diagonals() \n    if row_winner: \n        # there is a win \n        winner = row_winner \n    elif column_winner: \n        # there is a win \n        winner = column_winner \n    elif diagonal_winner: \n        # there is a win \n        winner = diagonal_winner \n    else: \n        # there is no win \n        winner = None\n    return \n  \n# check rows for a win \ndef check_rows(): \n    # set global varibales \n    global game_is_still_going \n    # check if any of the rows have all the same values (and is not empty) \n    row_1 = board[0] == board[1] == board[2] != \"-\" \n    row_2 = board[3] == board[4] == board[5] != \"-\" \n    row_3 = board[6] == board[7] == board[8] != \"-\" \n    # if any row does have a match, flag that there is a win \n    if row_1 or row_2 or row_3: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if row_1: \n        return board[0] \n    elif row_2: \n        return board[3] \n    elif row_3: \n        return board[6] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check columns for a win \ndef check_columns(): \n    # set global variables \n    global game_is_still_going \n    # check if any of the columns have all the same values (and is not empty) \n    column_1 = board[0] == board[3] == board[6] != \"-\" \n    column_2 = board[1] == board[4] == board[7] != \"-\" \n    column_3 = board[2] == board[5] == board[8] != \"-\" \n    # if any column does have a match, flag that there is a win \n    if column_1 or column_2 or column_3: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if column_1: \n        return board[0] \n    elif column_2: \n        return board[1] \n    elif column_3: \n        return board[2] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check diagonals for a win \ndef check_diagonals(): \n    # set global variables \n    global game_is_still_going \n    # check if any of the diagonals have all the same values (and is not empty) \n    diagonal_1 = board[0] == board[4] == board[8] != \"-\" \n    diagonal_2 = board[2] == board[4] == board[6] != \"-\" \n    # if any diagonal does have a match, flag that there is a win \n    if diagonal_1 or diagonal_2: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if diagonal_1: \n        return board[0] \n    elif diagonal_2: \n        return board[2] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check if there is a tie \ndef check_if_tie(): \n    # set global variables \n    global game_is_still_going \n    # if board is full \n    if \"-\" not in board: \n        game_is_still_going = False \n    # return true if there is a tie, false if not \n    return\n\n# flip to another player\ndef flip_player(): \n    # global variables we need \n    global current_player \n    # if current player was x, make it o \n    if current_player == \"X\": \n        current_player = \"O\"\n    # if current player was o, make it x \n    elif current_player == \"O\": \n        current_player = \"X\"\n\nif __name__ == '__main__':\n    play_game()",
        "890": "def remove_duplicates(lst): \n\treturn list(dict.fromkeys(lst)) \n\nresult = remove_duplicates([1, 2, 2, 4, 5]) \nprint(result)",
        "891": "def longest_palindrome(s):  \n    longest_p = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:\n                longest_p = len(s[i:j])\n    return longest_p",
        "892": "# Optimized Python code to find prime numbers in a range\n# using primality tests\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n\n    return True\n\n\n# Generate a range of consecutive numbers \n# and check for each if it is prime\ndef prime_numbers(n):\n    for num in range(2, n+1):\n        if is_prime(num):\n            print(num, end=' ')\n\n\n# Driver code\nif __name__ == '__main__':\n    n = 10\n    prime_numbers(n)",
        "893": "def second_most_frequent(arr):\n counts = {}\n # Count the frequency of the elements\n for item in arr:\n if item in counts:\n counts[item] += 1\n else:\n counts[item] = 1\n # Sort the list by frequency\n sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n # Return the second most frequent element\n return sorted_count[1][0]\n \nprint(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))",
        "894": "def find_max(arr):\n  max_so_far = arr[0]\n  current_max = arr[0]\n  \n  for i in range(1, len(arr)):\n    current_max = max(arr[i], current_max + arr[i])\n    max_so_far = max(max_so_far, current_max)\n  \n  return max_so_far\n\narr = [-5, 2, 3, 4, 6, -8]\nmax_val = find_max(arr)\n\nprint(max_val) # 10",
        "895": "def lcm(x, y):\n  if x > y:\n    greater = x\n  else:\n    greater = y\n  while(True):\n    if((greater % x == 0) and (greater % y == 0)):\n      lcm = greater\n      break\n    greater += 1\n  return lcm",
        "896": "def remove_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for character in string: \n        if character not in vowels: \n            result += character\n    return result\n  \nprint (remove_vowels(\"Hello world\"))",
        "897": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return (2 * self.length) + (2 * self.width)",
        "898": "def factorial(n):\n    fact = 1\n    while n > 1:\n        fact *= n\n        n -= 1\n    return fact\n\n# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster.",
        "899": "data = {\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\n\nlist = list(data.values())\n \nprint(list)\n# Output: [\"John\", 25, \"programming\"]",
        "900": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y)",
        "901": "import torch\n\n# Load the pre-trained model\nmodel = torch.load('model.pt')\n\n# Get the input data\ninput_data = \"This movie was amazing!\"\n\n# Convert the input data into a tensor\ninput_tensor = torch.tensor([input_data])\n\n# Make a prediction with the pre-trained model\nprediction = model(input_tensor)\n\n# Get the results\nif prediction[0][0].item() > 0.5:\n  print('Positive sentiment')\nelse:\n  print('Negative sentiment')",
        "902": "list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2))",
        "903": "def average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total\/len(temperatures)\n\nprint(average(temperatures))",
        "904": "#!\/usr\/bin\/python\n'''Test for an openGL based stereo renderer - test binocular rendering to a single window\n\nDavid Dunn\nFeb 2017 - created\n\nwww.qenops.com\n\n'''\n__author__ = ('David Dunn')\n__version__ = '1.0'\n\nimport OpenGL\nOpenGL.ERROR_CHECKING = False      # Uncomment for 2x speed up\nOpenGL.ERROR_LOGGING = False       # Uncomment for speed up\n#OpenGL.FULL_LOGGING = True         # Uncomment for verbose logging\n#OpenGL.ERROR_ON_COPY = True        # Comment for release\nimport OpenGL.GL as GL\nimport math, os\nimport numpy as np\nimport dGraph as dg\nimport dGraph.ui as ui\nimport dGraph.cameras as dgc\nimport dGraph.shapes as dgs\nimport dGraph.materials as dgm\nimport dGraph.shaders as dgshdr\nimport dGraph.config as config\nimport dGraph.util.imageManip as im\nimport time\n\nMODELDIR = '%s\/data'%os.path.dirname(__file__)\nWINDOWS = [{\n    \"name\": 'Test 5',\n    \"location\": (0, 0),\n    #\"location\": (2436, 1936), # px coordinates of the startup screen for window location\n    #\"size\": (1920, 1080),\n    \"size\": (1600,800), # px size of the startup screen for centering\n    \"center\": (400,400), # center of the display\n    \"refresh_rate\": 60, # refreshrate of the display for precise time measuring\n    \"px_size_mm\": 0.09766, # px size of the display in mm\n    \"distance_cm\": 20, # distance from the viewer in cm,\n    #\"is_hmd\": False,\n    #\"warp_path\": 'data\/calibration\/newRight\/',\n    },\n]\n\ndef loadScene(renderStack, file=None, cross=False):                \n    '''Load or create our sceneGraph'''\n    scene = dg.SceneGraph(file)\n    stereoCam = dgc.StereoCamera('front', scene)\n    stereoCam.setResolution((renderStack.width\/2, renderStack.height))\n    stereoCam.setTranslate(0.,-.06,0.)\n    stereoCam.setRotate(20.,0.,0.)\n    stereoCam.setFOV(50.)\n    stereoCam.IPD = .062\n    crosses = [\n        #np.array((.031,.0,-10.)),\n        #np.array((-.031,.0,-10.)),\n        np.array((-.2,-.2,-10.)),\n        np.array((-.2,.0,-10.)),\n        np.array((-.2,.2,-10.)),\n        np.array((.0,-.2,-10.)),\n        np.array((.0,.0,-10.)),\n        np.array((.0,.2,-10.)),\n        np.array((.2,-.2,-10.)),\n        np.array((.2,.0,-10.)),\n        np.array((.2,.2,-10.)),\n    ]\n    for idx, position in enumerate(crosses):\n        cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s\/cross.obj'%MODELDIR)\n        cross.setScale(.01,.01,.01)\n        cross.translate = position\n        renderStack.objects[cross.name] = cross\n        print(1,(idx\/3.)\/3.+1\/3.,(idx%3)\/3.+1\/3.)\n        material = dgm.Material('material%s'%idx,ambient=(1,(idx\/3.)\/3.+1\/3.,(idx%3)\/3.+1\/3.), amb_coeff=.5)\n        #material = dgm.Lambert('material%s'%idx,ambient=(1,0,0), amb_coeff=.5, diffuse=(1,1,1), diff_coeff=1)\n        cross.setMaterial(material)\n    renderStack.cameras = [stereoCam]\n    renderStack.append(stereoCam)\n    return True \n\ndef animateScene(renderStack, frame):\n    ''' Create motion in our scene '''\n    # infinity rotate:\n    y = 1\n    x = math.cos(frame*math.pi\/60)\n    for obj in renderStack.objects.itervalues():\n        obj.rotate += np.array((x,y,0.))\n\ndef addInput():\n    for rs in renderStack:\n        ui.add_key_callback(arrowKey, ui.KEY_RIGHT, renderStack=rs, direction=3)\n        ui.add_key_callback(arrowKey, ui.KEY_LEFT, renderStack=rs, direction=2)\n        ui.add_key_callback(arrowKey, ui.KEY_UP, renderStack=rs, direction=1)\n        ui.add_key_callback(arrowKey, ui.KEY_DOWN, renderStack=rs, direction=0)\n\ndef arrowKey(window,renderStack,direction):\n    for o in renderStack.objects:\n        if direction == 3:    # print \"right\"\n            o.rotate(np.array((0.,5.,0.)))\n        elif direction == 2:    # print \"left\"\n            o.rotate(-np.array((0.,5.,0.)))\n        elif direction == 1:      # print 'up'\n            o.translate(np.array((0.,.01,0.)))\n        else:                   # print \"down\"\n            o.translate(-np.array((0.,.01,0.)))\n\ndef drawScene(renderStack):\n    ''' Render the stack '''\n    myStack = list(renderStack)                                     # copy the renderStack so we can pop and do it again next frame\n    temp = myStack.pop()\n    temp.render(renderStack.width, renderStack.height, myStack)     # Render our warp to screen\n\ndef setup():\n    winData = WINDOWS[0]\n    renderStack = ui.RenderStack()\n    renderStack.display = ui.Display(resolution=winData['size'])\n    ui.init()\n    mainWindow = renderStack.addWindow(ui.open_window(winData['name'], winData['location'][0], winData['location'][1], renderStack.display.width, renderStack.display.height))\n    if not mainWindow:\n        ui.terminate()\n        exit(1)\n    ui.make_context_current(mainWindow)\n    ui.add_key_callback(ui.close_window, ui.KEY_ESCAPE)\n    scenes = [loadScene(renderStack) for renderStack in renderStacks]\n    for rs in renderStacks:\n    \trs.graphicsCardInit()\n    return renderStacks, scenes, windows\n\ndef runLoop(renderStack, mainWindow):\n    # Print message to console, and kick off the loop to get it rolling.\n    print(\"Hit ESC key to quit.\")\n    frame = 0\n    start = time.time()\n    while not ui.window_should_close(mainWindow):\n        ui.make_context_current(mainWindow)\n        drawScene(renderStack)\n        now = time.time()\n        time.sleep(max((frame+1)\/config.maxFPS+start-now,0))\n        ui.swap_buffers(mainWindow)\n        ui.poll_events()\n        #animateScene(renderStack, frame)\n        frame += 1\n    ui.terminate()\n    exit(0)\n\nif __name__ == '__main__':\n    renderStack, scene, windows = setup()\n    addInput()\n    runLoop(renderStack, windows[0])\n",
        "905": "def generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \")",
        "906": "class Student:\n def __init__(self, name, age, grade, major):\n  self.name = name\n  self.age = age\n  self.grade = grade\n  self.major = major",
        "907": "def compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words \/ sentences)) - (84.6 * (syllables \/ words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables",
        "908": "#!\/usr\/bin\/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"\/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_format(clang_format_bin, changed_files):\n    \"\"\"\n    Run clang format on a list of files \n    @return 0 if formatted correctly.\n    \"\"\"\n    if len(changed_files) == 0:\n        return 0\n    cmd = [clang_format_bin, \"-style=file\",\n           \"-output-replacements-xml\"] + changed_files\n    print(\"clang-format cmd = {}\".format(cmd))\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        if \"replacement offset\" in cmd_output:\n            print(\"ERROR: Changed files don't match format\")\n            return 1\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling clang-format [{}]\".format(e))\n        return e.returncode\n\n    return 0\n\n\ndef cli():\n    # global params\n    parser = argparse.ArgumentParser(prog='clang-format-check-changed',\n                                     description='Checks if files chagned in git match the .clang-format specification')\n    parser.add_argument(\"--file-extensions\", type=str,\n                        default=\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\",\n                        help=\"Comma separated list of file extensions to check\")\n    parser.add_argument('--exclude', action='append', default=[],\n                        help='Will not match the files \/ directories with these in the name')\n    parser.add_argument('--clang-format-bin', type=str, default=\"clang-format\",\n                        help=\"The clang format binary\")\n    parser.add_argument('--git-bin', type=str, default=\"git\",\n                        help=\"The git binary\")\n    args = parser.parse_args()\n\n    # Run gcovr to get the .gcda files form .gcno\n    changed_files, returncode = get_changed_files(\n        args.git_bin, args.exclude, args.file_extensions)\n    if returncode != 0:\n        return returncode\n\n    return run_clang_format(args.clang_format_bin, changed_files)\n\nif __name__ == '__main__':\n    sys.exit(cli())\n",
        "909": "import random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))",
        "910": "# Python program to display introduction of \n# Object Oriented Programming\n\n# Creating a class\nclass Person:\n\n    # Constructor \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Method\n    def introduce_self(self):\n        print(\"I'm {0} aged {1}.\".format(self.name, self.age))\n\n# Instantiating an object\np1 = Person(\"John\", 25)\n\n# Calling a method\np1.introduce_self()",
        "911": "def max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8",
        "912": "def print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)",
        "913": "def char_count(string): \n    count = 0\n    for char in string: \n        count += 1\n    print(\"Number of characters:\", count)",
        "914": "import calendar\n\n# Input the year and month\nyear = int(input('Enter year: '))\nmonth = int(input('Enter month: '))\n\n# Generate the calendar\ncal = calendar.month(year, month)\n\n# Print the calendar\nprint(cal)",
        "915": "def number_to_words(num):\n    units_list = {\"0\": \"Zero\", \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\":\n                  \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\",\n                  \"9\": \"Nine\"}\n    tens_list = { \"10\": \"Ten\", \"11\": \"Eleven\", \"12\": \"Twelve\", \"13\": \"Thirteen\",\n                  \"14\": \"Fourteen\", \"15\": \"Fifteen\", \"16\": \"Sixteen\", \"17\":\n                  \"Seventeen\", \"18\": \"Eighteen\", \"19\": \"Nineteen\", \"20\":\n                  \"Twenty\", \"30\": \"Thirty\", \"40\": \"Forty\", \"50\": \"Fifty\",\n                  \"60\": \"Sixty\", \"70\": \"Seventy\", \"80\": \"Eighty\", \"90\":\n                  \"Ninety\"}\n    \n    output = \"\"\n    if num in units_list:\n        output += units_list[str(num)]\n    elif num in tens_list:\n        output += tens_list[str(num)]\n    else:\n        if len(str(num)) >= 3:\n            output += units_list[str(num)[0]] + \" Hundred \"\n            output += number_to_words(int(str(num)[1:]))\n        else:\n            output += tens_list[str(num)[0]+\"0\"] + \" \" \n            output += units_list[str(num)[1]]\n    return output\n\nresult = number_to_words(123)\nprint(result)",
        "916": "def anagram_grouping(words):\n   anagrams = dict()\n   #loop through the list and sort each word\n   for word in words: \n      sorted_word = ''.join(sorted(word))\n      # check if sorted word exists as a key in dictionary\n      if sorted_word not in anagrams: \n         anagrams[sorted_word] = [word] #add key and word to dict\n      else: \n         anagrams[sorted_word].append(word) #add word to existing anagrams\n\n   #create a list of anagrams\n   result = []\n   for values in anagrams.values():\n      result.append(values)\n\n   return result\n\n\nwords = [\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\nans = anagram_grouping(words)\nprint(ans)",
        "917": "def my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result\n\ndef my_optimized_process(data):\n    return [do_process(item) for item in data]",
        "918": "def rearrange(arr):\n    even, odd = [], [] \n    for n in arr:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return [item for pair in zip(even, odd) for item in pair]",
        "919": "class Employee():\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age",
        "920": "def selection_sort(A): \n    for i in range(len(A)): \n        minimum = i \n        for j in range(i+1, len(A)): \n            if A[minimum] > A[j]: \n                minimum = j \n        A[i], A[minimum] = A[minimum], A[i]",
        "921": "#import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load and allocate dataset\ndataset = pd.read_csv(\"dataset.csv\")\nX = dataset.Text\ny = dataset.Label\n\n#Preprocessing\ncv = CountVectorizer()\nX = cv.fit_transform(X)\n\n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n\n#Model training\nclf = MultinomialNB()\nclf.fit(X_train,y_train)\n\n\n#Evaluate the model\nscore = clf.score(X_test,y_test)\nprint(\"Accuracy of model: \",score)",
        "922": "def remove_arr(arr):\n    result = []\n    for a in arr:\n        if a != 'b':\n            result.append(a)\n    return result",
        "923": "def backwards_for_loop(n):\n  for i in range(n, 0, -1):\n    # Do something with i\n    print(i)",
        "924": "def find_closest_sum_of_two(arr):\n    if len(arr) < 2:\n        return None\n    \n    # initialize the closest sum and indicies\n    closest_sum = arr[0] + arr[1]\n    first_index = 0\n    second_index = 1\n    \n    # loop through the array and check for closer sums\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] + arr[j]) < abs(closest_sum):\n                closest_sum = arr[i] + arr[j]\n                first_index = i\n                second_index = j\n    \n    return arr[first_index], arr[second_index], closest_sum",
        "925": "import random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss()",
        "926": "class Stack:\n    \n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def isEmpty(self):\n        return self.items == []\n    def peek(self):\n        return self.items[len(self.items)-1]\n    def size(self):\n        return len(self.items)",
        "927": "def parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list",
        "928": "class Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department",
        "929": "from flask import Flask, request, jsonify\n\napp = Flask(name)\n\n@app.route('\/calculate_average', methods=['POST'])\ndef calculate_average():\n numbers = request.json['numbers']\n\n # calculate the sum\n total = 0\n for number in numbers:\n total += number\n\n # calculate the average\n average = total \/ len(numbers)\n\n return jsonify({'average': average})\n\nif name == 'main':\n app.run(debug=True)",
        "930": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "931": "def find_average(a, b, c):\n  return (a + b + c) \/ 3\n\nresult = find_average(10, 20, 30)\nprint(result) # 20",
        "932": "def max_subarray(arr):\n max_so_far = arr[0] \n max_ending_here = arr[0] \n   \n for i in range(1, len(arr)): \n  max_ending_here = max(arr[i], max_ending_here + arr[i]) \n  max_so_far = max(max_so_far, max_ending_here)  \n   \n return max_so_far",
        "933": "import random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]",
        "934": "def search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)",
        "935": "# Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)\/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9]",
        "936": "# create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break",
        "937": "import json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('\/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run()",
        "938": "from flask import Flask, jsonify \nimport requests \n\napp = Flask(__name__) \n\n@app.route('\/books\/<string:search_term>') \ndef search_books(search_term): \n\turl = 'https:\/\/www.googleapis.com\/books\/v1\/volumes?q={}'.format(search_term)\n\tr = requests.get(url).json() \n\tbooks = r['items'] \n\treturn jsonify(books) \n\nif __name__ == '__main__': \n\tapp.run(debug=True)",
        "939": "def sort_descending(arr):\n    # Sort array from largest to smallest\n    arr.sort(reverse=True)\n\n    # Print result\n    print(arr)\n\n# Test\narr = [2, 4, 1, 6, 5]\nsort_descending(arr)\n# Output: [6, 5, 4, 2, 1]",
        "940": "text = \"the Cat in the hat\"\ntext = text.replace('  ', ' ').strip()\nprint(text)",
        "941": "import math\n\ndef find_closest_point(input_coordinates, coordinates_set):\n    # Calculate the euclidean distance for each point in the set\n    distances = []\n    for c in coordinates_set:\n        dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2)\n        distances.append(dist)\n        \n    # Find the index of the point with the smallest distance\n    idx = distances.index(min(distances))\n    \n    # Return the closest point\n    return coordinates_set[idx]\n    \n# Input coordinates\ninput_coordinates = (2, 3)\n\n# Set of coordinates\ncoordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)]\n\n# Find and print the closest point\nclosest_point = find_closest_point(input_coordinates, coordinates_set)\nprint('Closest point: ', closest_point)",
        "942": "# Calculates the area of a triangle given the three side lengths\ndef area_triangle(a, b, c): \n    # Calculate the semi-perimeter \n    s = (a + b + c) \/ 2  \n  \n    # calculate the area \n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 \n    return area \n  \n# Driver Code \na = 5\nb = 9\nc = 11\nprint(\"Area of triangle is : \", area_triangle(a, b, c))",
        "943": "def longest_palindromic_substring(s): \n\tn = len(s) \n\tL = [[0 for x in range(n)] \n\t\t\tfor y in range(n)] \n\t# All substrings of length 1 are palindromes \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\n\t# check all substring of length 2\n\tfor cl in range(2, n + 1): \n\t\tfor i in range(n - cl + 1): \n\t\t\tj = i + cl - 1\n\t\t\tif s[i] == s[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif s[i] == s[j]: \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j - 1],L[i + 1][j]); \n\n\t# start position of the longest palindromic substring \n\tstart = 0\n\tlength = 1\n\tfor i in range(n): \n\t\tif (length < L[i][n - 1]): \n\t\t\tlength = L[i][n - 1] \n\t\t\tstart = i \n\treturn s[start - length + 1:start + length] \n\nprint(longest_palindromic_substring(\"abracadabra\"))",
        "944": "def fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34",
        "945": "mylist = list(mydict.items())",
        "946": "def moving_average(data, num_points):\n    moving_average_list = []\n    for i in range(0, len(data)-num_points+1):\n        window_sum = 0\n        for j in range(i, i+num_points):\n            window_sum += data[j]\n        moving_average_list.append(window_sum\/num_points)\n    return moving_average_list",
        "947": "def is_divisible(n, m):\n    if (n % m == 0):\n        return True\n    else:\n        return False\n    \nprint(is_divisible(7, 2))  # Outputs False",
        "948": "import numpy as np \n\n# Create data\ndata = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12])\n\n# Calculate mean and standard deviation\nmean = np.mean(data)\nstd = np.std(data)\n\n# Set the boundaries\nlower_bound = mean - 3*std\nupper_bound = mean + 3*std\n\n# Find outliers\noutliers = [] \nfor i in data: \n    if i < lower_bound or i > upper_bound: \n        outliers.append(i)\n\n# Print the outliers\nprint(\"Outliers:\", outliers) \n\n\"\"\"\nOutliers: [1, 11, 12]\n\"\"\"",
        "949": "import tensorflow as tf\n\n# Set up the input and output data\nX = tf.placeholder(tf.float32, shape=[None, 3])\ny = tf.placeholder(tf.float32, shape=[None, 2])\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))\n\n# Train the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, epochs=10)",
        "950": "def find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result)",
        "951": "words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\n\ndef filter_list(words):\n  filtered_list = []\n\n  for word in words:\n    if len(word) >= 7:\n      filtered_list.append(word)\n\n  return filtered_list",
        "952": "for i in range(0,11):\n    print(i**2)",
        "953": "import json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'",
        "954": "import tweepy\n\n# authentication for twitter api\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_secret)\n\n# create an API instance\napi = tweepy.API(auth)\n\n# search for posts with the hashtag\nfor tweet in tweepy.Cursor(api.search, q='#news').items(10):\n # like post\n api.create_favorite(tweet.id)\n # follow the author\n api.create_friendship(tweet.user.id)",
        "955": "import json\n\n# sample json object \ndata = {\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\n# parse the json object \nparsed_data = json.loads(data)\n\n# print the parsed values \nprint(\"Name: \", parsed_data[\"name\"])\nprint(\"Age: \", parsed_data[\"age\"])\nprint(\"Hobbies: \", parsed_data[\"hobbies\"])",
        "956": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get HTML content from target website\nr = requests.get('URL')\nhtml_doc = r.text\n\n# Create a beautiful soup object\nsoup = BeautifulSoup(html_doc)\n\n# Find and extract desired data\ndata = soup.select('SELECTOR') \n\n# Print extracted data\nfor x in data: \n print(x.text)",
        "957": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_person(self):\n        print('Name:', self.name, ', Age:', self.age)",
        "958": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2",
        "959": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n\/x) \/\/ 2\n  return x*x == n",
        "960": "def print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)",
        "961": "# -*- coding: utf-8 -*-\n\n########################## Copyrights and license ############################\n#                                                                            #\n# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #\n#                                                                            #\n# This file is part of pyHegel.  http:\/\/github.com\/lupien\/pyHegel            #\n#                                                                            #\n# pyHegel is free software: you can redistribute it and\/or modify it under   #\n# the terms of the GNU Lesser General Public License as published by the     #\n# Free Software Foundation, either version 3 of the License, or (at your     #\n# option) any later version.                                                 #\n#                                                                            #\n# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #\n# License for more details.                                                  #\n#                                                                            #\n# You should have received a copy of the GNU Lesser General Public License   #\n# along with pyHegel.  If not, see <http:\/\/www.gnu.org\/licenses\/>.           #\n#                                                                            #\n##############################################################################\n\nfrom __future__ import absolute_import\n\n# Use version according to option 5 in https:\/\/packaging.python.org\/en\/latest\/single_source_version.html\n\n# make sure that new versions numbers compare properly when using\n# pkg_resources.parse_version\n__version__ = '1.0.0rc2'\n__copyright__ = '2011-2015  Christian Lupien'\n\ndef start_pyHegel():\n    \"\"\" This is the recommanded way to start pyHegel.\n        It starts ipython in a standard way (pylab, autocall enabled,...)\n        and then loads and initializes the pyHegel commands.\n\n        If the python session was started with command line arguments\n        --console, it will try to start pyHegel in the Console program\n        that comes with pythonxy. This is windows only.\n\n        If you later need access to the commands in a module:\n            import pyHegel.commands as cmds\n            cmds.get(somedevice)\n        or\n            from pyHegel.commands import *\n            get(somedevice)\n        or any other variants you want.\n    \"\"\"\n    import sys\n    import os\n    if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console':\n        start_console()\n    else:\n        from . import main\n        main.main_start()\n\ndef start_console():\n    from . import win_console_helper\n    win_console_helper.start_console()\n",
        "962": "import pandas as pd\n\n# read the data file\ndf = pd.read_csv('movie_data.csv')\n\n# feature engineering\ndf['action'] = (df['genres'].str.contains('Action')) * 1\n\n# define which features to be used\nfeatures_df = df[['action','rating']]\n\n# define the target variable\ntarget = df.popularity\n\n# split data into train and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)\n\n# train a RandomForestRegressor model\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\n\n# make prediction\ninput_data = {\n 'action': 1,\n 'rating': 8.5,\n 'release_date': '2020-02-10'\n}\nprediction = rf.predict([input_data])\n\nprint(prediction) \/\/ Outputs the predicted movie popularity",
        "963": "#!\/usr\/bin\/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('\/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]",
        "964": "list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list))",
        "965": "text = 'This is a sample string'\n\n# Get the total number of characters \ntotal = len(text) \n\n# Count the number of vowels \nvowels = 0 \nfor character in text: \n if character in 'aeiou': \n  vowels += 1\n\n# Count the number of consonants \nconsonants = 0 \nfor character in text: \n if character in 'bcdfghjklmnpqrstvwxyz': \n  consonants += 1\n\n# Print the result \nprint(f\"Vowels: {vowels}\")\nprint(f\"Consonants: {consonants}\")\nprint(f\"Total: {total}\")",
        "966": "def sum_2D_array(arr):\n    \"\"\"Return the sum of all the elements in a 2D array.\"\"\"\n    sum_arr = 0\n    for row in arr:\n        for elem in row:\n            sum_arr += elem\n    return sum_arr",
        "967": "import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 \/ (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) \/ len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a)",
        "968": "def convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) \/ 1.8\n\n    return celsius\n\nfahrenheit = 212\ncelsius = convert_to_celsius(fahrenheit)\nprint(celsius)",
        "969": "def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list",
        "970": "class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left",
        "971": "import math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)",
        "972": "import java.net.URL;\nimport java.util.Scanner;\n \npublic class QueryOverflow {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https:\/\/api.stackexchange.com\/2.2\/search?order=desc&sort=activity&tags=python&site=stackoverflow\");\n        Scanner scan = new Scanner(url.openStream());\n        String str = new String();\n        while (scan.hasNext())\n            str += scan.nextLine();\n        scan.close();\n \n        JSONObject obj = new JSONObject(str);\n        JSONArray items = obj.getJSONArray(\"items\");\n        for (int i = 0; i < items.length(); i++)\n        {\n            \/\/ print title\n            System.out.println(items.getJSONObject(i).getString(\"title\"));\n            \/\/ print answer\n            System.out.println(items.getJSONObject(i).getJSONObject(\"accepted_answer\").getString(\"body\"));\n        }\n    }\n}",
        "973": "def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True",
        "974": "#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~\/.traces\/traces.sqlite')  #looks for db under ~\/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u)\n\n    #GET list intervals for primary application\n    cur.execute(activeappSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['appid'] = row[1]\n        a['event'] = row[2]\n        a['start'] = row[3]\n        a['end'] = row[4]\n        appevents.append(a)\n\n    #GET list intervals for primary window\n    cur.execute(activewindowSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['windowid'] = row[1]\n        w['appid'] = (item for item in windows if item[\"id\"] == row[1]).next()['app']\n        w['event'] = row[2]\n        w['start'] = row[3]\n        w['end'] = row[4]\n        windowevents.append(w)\n\n    #GET list intervals for urls\n    cur.execute(activeurlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['urlid'] = row[1]\n        u['appid'] = row[2]\n        u['windowid'] = row[3]\n        u['event'] = row[4]\n        u['start'] = row[5]\n        u['end'] = row[6]\n        urlevents.append(u)\n\n    #GET list of experiences\n    cur.execute(experienceSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['text'] = row[2]\n        exps.append(a)\n\n    #GET list of screenshots\n    image_dir = os.path.expanduser('~\/.traces\/screenshots')  #looks for db under ~\/.traces\n    for y in os.listdir(image_dir):\n        y_dir = os.path.join(image_dir,y)\n        if not os.path.isdir(y_dir):\n            continue\n        for m in os.listdir(y_dir):\n            m_dir = os.path.join(y_dir, m)\n            if not os.path.isdir(m_dir):\n                continue\n            for d in os.listdir(m_dir):\n                d_dir = os.path.join(m_dir, d)\n                if not os.path.isdir(d_dir):\n                    continue\n                for h in os.listdir(d_dir):\n                    h_dir = os.path.join(d_dir, h)\n                    if not os.path.isdir(h_dir):\n                        continue\n                    h_images = os.listdir(h_dir)\n                    for image in h_images:\n                        #make sure the file is an image\n                        if image[-4:] == '.jpg':\n                            i = collections.OrderedDict()\n                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')\n                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset\n                            i['image'] = os.path.join(\"screenshots\", y, m, d, h, image)\n                            images.append(i)\n\n    #GET keywords\n    cmd_rows = []\n    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']\n    starttime = 0.0\n    app = 0\n    window = 0\n    s = ''\n\n    cur.execute(wordsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        if 'Cmd' in row[3]:\n            cmd_rows.append(row)\n        else:\n            text = str(row[2])\n            # if its a char indicating a new word, save our text token\n            if text in newWord:\n                # save our data\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass the whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking time\n                starttime = float(row[1])\n                s = ''\n\n            # if its a regular char on the same window, just keep building the string\n            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:\n                if text == 'Backspace':\n                    s = s[:-1]\n                else:\n                    s += row[2]\n            #else its a regular char but we switched windows, save the data\n            else:\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass teh whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking variables\n                window = int(row[5])\n                app = int(row[4])\n                starttime = float(row[1])\n\n                #write the character to start the next word\n                if text in newWord or text == 'Backspace':\n                    s = ''\n                else:\n                    s = row[2]\n\n    #ASSEMBLE apps and experince into json\n    d = collections.OrderedDict()\n    d['apps']=apps\n    d['window']=windows\n    d['url']=urls\n    d['appevents']=appevents\n    d['windowevents']=windowevents\n    d['urlevents']=urlevents\n    d['exps']=exps\n    d['images']=images\n    d['words']=words\n    data = d\n\n    #WRITE file\n    file = 'extract.json'\n    z = open(file,'w')\n    z.writelines(json.dumps(data))\n",
        "975": "def linear_search(arr, x): \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i+1\n  \n    return -1\n\narr = [2, 3, 4, 5] \nx = 4\n\nprint(linear_search(arr, x))",
        "976": "class Book(object):\n    def __init__(self, title, author, year_published):\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def __str__(self):\n        return '{0} by {1} published in {2}.'.format(\n            self.title, self.author, self.year_published)",
        "977": "def iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)",
        "978": "students = [ \n  { \n    'name': 'John Doe', \n    'age': 18, \n    'grade': 'A'\n  }, \n  { \n    'name': 'Jane Smith', \n    'age': 16, \n    'grade': 'B'\n  } \n]",
        "979": "\"\"\"\nFind the longest contiguous increasing subsequence \n\"\"\"\n\ndef long_increasing_subsequence(arr): \n    n = len(arr) \n    dp = [1 for x in range(n)] \n   \n    for i in range (1 , n): \n        for j in range(0 , i): \n            print (i,j) \n            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): \n                dp[i] = dp[j]+1\n   \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum, dp[i])  \n\n    return maximum \n\narr =[3,6,9,1,2,3,4,5] \nlongest_subsequence_length = long_increasing_subsequence(arr)\nprint(longest_subsequence_length) # prints 5",
        "980": "for element in [10,20,30,40]:\n    print(element)",
        "981": "def calculate_combinations(range):\n    count = 0\n\n    # base case\n    if len(range) == 0:\n        return 0\n    if len(range) == 1:\n        return 1\n\n    # recursive case\n    for i in range:\n        sub_set = range[:]\n        sub_set.remove(i)\n        count += calculate_combinations(sub_set) + 1\n\n    return count\n\nrange = [1, 2, 3]\nprint(calculate_combinations(range))\n# Output: 6",
        "982": "def remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4]",
        "983": "def remove_multiple_of_three(list):\n  new_list = []\n  for item in list:\n    if item % 3 != 0:\n      new_list.append(item)\n  return new_list",
        "984": "def schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)]",
        "985": "import numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges",
        "986": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse)",
        "987": "import spacy\nimport nltk\nfrom nltk.corpus import opinion_lexicon\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Download and create a spaCy model\nnlp = spacy.load('en_core_web_sm')\n\n# Create a list of positive, negative and neutral words\npositive_words = opinion_lexicon.positive()\nnegative_words = opinion_lexicon.negative()\nneutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words))\n\n# Create a Bag of Words Vectorizer\nvectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words))\n\ndef create_examples(words, sentiment):\n    examples = []\n    # Create BOW for each example\n    for w in words:\n        bow = vectorizer.transform([w])\n        examples.append((bow, sentiment))\n    return examples\n\n# Create training examples\npositive_examples = create_examples(positive_words, 'POSITIVE')\nnegative_examples = create_examples(negative_words, 'NEGATIVE')\nneutral_examples = create_examples(neutral_words, 'NEUTRAL')\n\n# Create training data\ntrain_data = positive_examples + negative_examples + neutral_examples\n\n# Train a classifier\nclassifier = LinearSVC()\nclassifier.fit([x[0] for x in train_data], [x[1] for x in train_data])\n\ndef predict_sentiment(sentence):\n    # Create BOW of sentence\n    bow = vectorizer.transform([sentence])\n    # Get sentiment\n    sentiment = classifier.predict(bow)[0]\n    return sentiment\n\nsentence = 'I had a great time today!'\nsentiment = predict_sentiment(sentence)\nprint('The sentiment of the sentence is:', sentiment)",
        "988": "import math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num\/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num\/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num)",
        "989": "def xor_strings(xs, ys):\n    output = \"\"\n    for i in range(0, len(xs)):\n        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()\n\n    return output\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))",
        "990": "SIS",
        "991": "class TempConverter:\n\n    def __init__(self, temp_in_fahrenheit):\n        self.temp_in_fahrenheit = temp_in_fahrenheit\n\n    def convert_f_to_c(self):\n        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5\/9\n        return temp_in_celsius",
        "992": "[x * 10 for x in [1,2,3,4]]",
        "993": "def subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C",
        "994": "def getValueAtIndex(arr, index):\n    return arr[index] if index >= 0 and index < len(arr) else 0\n\nprint(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70",
        "995": "class Play(object):\n    def __init__(self):\n        self.characters = []\n        self.scenes = []\n        self.title = \"\"\n    \n    def add_character(self, character):\n        self.characters.append(character)\n    \n    def add_scene(self, scene):\n        self.scenes.append(scene)\n    \n    def set_title(self, title):\n        self.title = title",
        "996": "# Define a search function\ndef search (products, query):\n  # Loop through list\n  for product in products:\n    if product == query: \n      # Return the product index if it matches the query\n      return products.index(product)\n\n# Get the index of the item\nresult = search(products, search_query)\n\n# Print the result\nprint(result)",
        "997": "import pandas as pd \nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv('stock_prices.csv')\ny = df['direction'].values\nX = df.drop(['date', 'direction'], axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\naccuracy = knn.score(X_test, y_test)\nprint(\"Model accuracy: {}%\".format(round(accuracy*100, 2)))",
        "998": "a, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34",
        "999": "import random\n\nmyList = []\nfor i in range(20):\n myList.append(random.randint(1,20))\n\nprint(\"List of random numbers:\", myList)\n\nmyList.sort()\n\nlargest_num = myList[len(myList)-1]\nsecond_largest_num = myList[len(myList)-2]\n\nprint('Largest number:', largest_num)\nprint('Second-largest number:', second_largest_num)",
        "1000": "def maxPairSum(input_list):\n\n    #assume the first and second elements are the max pair\n    max_pair_sum = input_list[0] + input_list[1]\n\n    # Keep track of the max pair\n    pair_index_one = 0\n    pair_index_two = 1\n\n    # iterate through the entire list\n    for index_one in range(0, len(input_list)):\n        for index_two in range(index_one + 1, len(input_list)):\n\n            # if the current pair sum is greater than the max pair sum\n            # update the max pair sum and the pair indices\n            if input_list[index_one] + input_list[index_two] > max_pair_sum:\n                max_pair_sum = input_list[index_one] + input_list[index_two]\n                pair_index_one = index_one\n                pair_index_two = index_two\n\n    #return the max pair sum\n    return max_pair_sum",
        "1001": "import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n start_urls = ['https:\/\/www.example.com']\n\n def parse(self, response):\n    for item in response.css('div.listing-item') :\n        yield { \n            'title' : item.css('h3.listing-title::text').get(),\n            'price' : item.css('span.price::text').get(),\n            'description' : item.css('p.description::text').get()\n        }",
        "1002": "list1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\ncommon_elements = list(set(list1).intersection(list2))\n\nprint(common_elements)\n# Output: [4, 8]",
        "1003": "def celsius_to_fahrenheit(degrees_c):\n    return (degrees_c * 9\/5) + 32",
        "1004": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\n# Create your views here.\ndef get_user_records(request):\n    page_num = request.GET.get('page', 1)\n    page_size = int(request.GET.get('page_size', 10))\n\n    users = User.objects.all().order_by('user_id')\n    paginator = Paginator(users, page_size)\n    page_data = paginator.page(page_num)\n    response_data = {\n        'data': [\n            {\n                'user_id': user.user_id,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'age': user.age,\n                'email': user.email\n            } for user in page_data\n        ]\n    }\n    return JsonResponse(response_data)",
        "1005": "def fibonacci_sum(n): \n    if n <= 1: \n        return n \n    previous = 0\n    current  = 1\n    sum      = 1\n    \n    for _ in range(n - 1): \n        previous, current = current, previous + current \n        sum += current \n      \n    return sum",
        "1006": "def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "1007": "from collections import Counter\n\nstring = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nwords = string.split()\n\ncnt = Counter()\nfor word in words:\n  cnt[word] += 1\n\nword, count = cnt.most_common(1)[0]\n\nprint(f'Word with highest frequency is \"{word}\" occurring {count} times.')\n\n# Output\nWord with highest frequency is \"dolor\" occurring 1 times.",
        "1008": "def sort(arr): \n    n = len(arr) \n  \n    for i in range(n): \n  \n        min_index = i # assuming current element is smallest \n          \n        # look for smallest element in the rest of the array \n        for j in range(i+1, n): \n            if arr[j] < arr[min_index]: \n                min_index = j \n  \n        arr[i], arr[min_index] = arr[min_index], arr[i] # swap \n  \n    return arr\n  \narr = [5, 4, 3, 1, 2] \nsorted_arr = sort(arr) \n  \nprint(sorted_arr)",
        "1009": "import time \n\nstart = time.time()\n\ndef foo(): \n for i in range(1000): \n  print('Hello World', i)\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)",
        "1010": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_discography(artist):\n  base_url = \"https:\/\/en.wikipedia.org\/wiki\/\"  # Wikipedia base URL\n  artist_name = artist.replace(\" \", \"_\")  # Format URL parameter\n  url = base_url + artist_name\n  response = requests.get(url)\n  if response.status_code == 200:\n    html = response.content\n    soup = BeautifulSoup(html, \"html.parser\")\n    discography = soup.find(\"span\",{\"id\":\"Discography\"}).find_next_sibling().text.strip().replace(\"\\n\", \",\").replace(\")\",\"\").replace(\"(\",\"\")\n    return discography.split(\",\")\n  else:\n    print(\"Error in response.\")\n    return None",
        "1011": "import math\n\ndef magnitude_to_vector(magnitude, angle):\n    x = magnitude * math.cos(math.radians(angle))\n    y = magnitude * math.sin(math.radians(angle))\n    z = 0\n    \n    return (x, y, z)\n\nresult = magnitude_to_vector(5, 90)\n\nprint(f\"The vector is {result}\")",
        "1012": "# Python3 code to generate an \n# array containing first n primes \nimport math \n\ndef generatePrimeArray(n): \n\tprime = [True for i in range(n + 1)] \n\tp = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * 2, n + 1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\n\t# prime[0]= False\n\t# prime[1]= False\n\n\t# Store prime numbers \n\tprime_numbers = [] \n\tfor p in range(n + 1): \n\t\tif prime[p]: \n\t\t\tprime_numbers.append(p) \n\n\t# Print the array \n\treturn prime_numbers \n\nresult = generatePrimeArray(n)\nprint(result)",
        "1013": "def weightedAverage(values, weights):\n    sum = 0.0\n    for i in range(len(values)):\n        sum += values[i] * weights[i]\n    return sum\/len(values)\n\nvalues = [90, 50, 70]\nweights = [0.4, 0.2, 0.4]\n\nprint(weightedAverage(values, weights))",
        "1014": "def solve_linear_system(A, b):\n    \n    # Find the solution of the linear system\n    x = np.linalg.solve(A, b)\n    \n    # Print the solution\n    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))\n    \n\nA = [[2, 3], [5, -1]]\nb = [8, -10]\nsolve_linear_system(A, b)",
        "1015": "pre = \"PRE-\"\nsuf = \"-SUF\"\n\nenriched_list = [ pre + s + suf for s in list]\n\nprint(enriched_list)",
        "1016": "def square_root(x):\n    guess = x\/2\n    while True:\n        next_guess = 0.5 * (guess + (x\/guess))\n        if abs(guess - next_guess) < 0.0001:\n            break\n            guess = next_guess\n    return guess\n\nprint(square_root(36)) # prints 6.0",
        "1017": "\"\"\"\nWrite a Python program to extract phone numbers from a given text.\n\"\"\"\n\nimport re\n\ndef extract_phone_numbers(text):\n    phone_numbers = []\n    pattern = r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        phone_numbers.append(m.group())\n    return phone_numbers\n\ntext = \"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\"\nprint(extract_phone_numbers(text))",
        "1018": "import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_file):\n    root = ET.parse(xml_file).getroot()\n    for child in root:\n        print(child.tag, child.attrib)",
        "1019": "def search_string(lst, s):\n for i, item in enumerate(lst):\n if item == s:\n return i\n return -1",
        "1020": "def matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])",
        "1021": "from flask import Flask, request, jsonify\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET','POST'])\ndef dialog():\n # Get the user's input from the request\n user_input = request.json['user_input']\n\n # Define a response based on the user's input\n if user_input == 'Hi':\n response = 'Hello there!'\n # Add additional actions here\n\n # Return the response as JSON\n return jsonify({'response':response})\n\nif __name__ == '__main__':\n app.run(port=5000, debug=True)",
        "1022": "def compareStrings(string1, string2):\n    result = 0\n\n    if len(string1) != len (string2):\n        result += 1\n    else:\n        for i in range(len(string1)):\n            if string1[i] != string2[i]:\n                result += 1\n    return result\n\n\nif __name__ == '__main__':\n    string1 = 'python'\n    string2 = 'perl'\n    print(compareStrings(string1, string2))\n    \nOutput: 3",
        "1023": "def merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged",
        "1024": "import pandas as pd\nimport numpy as np\n\n# Create spreadsheet\ndf = pd.DataFrame()\n\n# Add column of x-values\nx_values = np.arange(start=0,stop=2*np.pi,step=0.1)\ndf['x'] = x_values\n\n# Add column of y-values\ny_values = np.sin(x_values)\ndf['y'] = y_values\n\n# Save spreadsheet\ndf.to_csv('sine-wave.csv', index=False)",
        "1025": "l = [2, 3, 4]\nfor n in l:\n    print(n)",
        "1026": "def permutation(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        l = []\n        for i in range(len(arr)):\n            data = arr[i]\n            remainders = arr[:i] + arr[i+1:]\n            for p in permutation(remainders):\n                l.append([data] + p)\n        return l",
        "1027": "def classify(data):\n    # Fit your model on the data\n    model.fit(data)\n    # Return the predicted classes\n    return model.predict(data)",
        "1028": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \ndef sentiment_calculator(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.5:\n        sentiment = 'positive'\n    elif -0.5 < sentiment_scores['compound'] < 0.5:\n        sentiment = 'neutral'\n    else:\n        sentiment = 'negative'\n    return sentiment\n  \nsentence = 'This is an amazing experience!'\nsentiment_calculator(sentence)\n# Output: 'positive'",
        "1029": "def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "1030": "def find_min(a, b, c): \n    min_val = a \n    if b < min_val: \n        min_val = b \n    if c < min_val: \n        min_val = c \n    return min_val \n\nprint(find_min(3, 2, 1)) # Output: 1",
        "1031": "def generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1'",
        "1032": "def sum_of_squares(numbers):\n    total = 0\n    for num in range(1,numbers+1):\n        total += num**2\n    print(total)\n\nsum_of_squares(10)",
        "1033": "def find_occurrences(sentence):\n    # Empty list to store indices of occurrence\n    indices = []\n\n    # get length of sentence\n    l = len(sentence)\n \n    # iterate to go through the sentence\n    for i in range(l):\n        # if at any point a substring from i to i+3 is equal to \"cat\"\n        if sentence[i:i+3] == \"cat\":\n            # add i to list of indices\n            indices.append(i)\n \n    # return the list of indices\n    return indices\n\noccurrences = find_occurrences(\"The cat sat on the mat.\")\nprint(\"Indices of occurrences:\", occurrences)",
        "1034": "def convertMinutesToYears(minutes):\n    years = minutes \/ 525600\n    days = minutes % 525600 \/ 1440 \n    \n    print(\"The given\" + str(minutes) + \" minutes is equal to \" + \n    str(round(years)) + \" year(s) and \" + str(round(days)) + \" day(s)\")\n\nconvertMinutesToYears(76586)",
        "1035": "def remove_special_characters(s):\n    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') \n    return new_s\n\nremove_special_characters(\"This# 1$ i^s an% e*xa_mple -str_ing\")",
        "1036": "def fibonacci(n):\n  if n <= 2:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n  \nprint(fibonacci(5)) # 5",
        "1037": "def print_list(list_1, list_2): \n    formatted_list = [list_1 + list_2 for i in range(len(list_1))] \n    for x in formatted_list: \n        for y in x: \n            print(y) \n    \nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nprint_list(list_1, list_2)\n\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6",
        "1038": "import random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    pw_length = 6\n    mypw = \"\"\n\n    for i in range(pw_length):\n        next_index = random.randrange(len(alphabet))\n        mypw = mypw + alphabet[next_index]\n\n    return mypw\n\nprint(generate_password())",
        "1039": "if 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')",
        "1040": "def remove_even(list):\n    return [i for i in list if i%2 != 0]",
        "1041": "def three_way_comparison(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return 1\n    elif num2 > num1 and num2 > num3:\n        return 2\n    elif num3 > num1 and num3 > num2:\n        return 3",
        "1042": "for i in range(10):\n  print(\"Hello World\")",
        "1043": "def sum_two_ints(a, b):\n return a + b",
        "1044": "hash_table = {1: 1, 2: 2, 3: 3, 4: 4}",
        "1045": "print('Hello World!')",
        "1046": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))",
        "1047": "import re \n\nstr = \"There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\"\n\nnum_list = re.findall(r'\\d+', str)\nprint(num_list)\n# Output: ['3', '12', '22', '33']",
        "1048": "class Student:\n def __init__(self, name, grades):\n  self.name = name\n  self.grades = grades\n\n def calculate_grade(self):\n  total = 0\n  for grade in self.grades:\n   total += grade\n\n  return total \/ len(self.grades)\n\nstudent1 = Student(\"John\", [80,90,85,95])\nprint(student1.calculate_grade())\n# Output: 88.75",
        "1049": "def find_intersection(set1, set2):\n intersect_set = []\n for num in set1:\n if num in set2:\n intersect_set.append(num)\n return intersect_set\n\nset1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]\n\nintersect_set = find_intersection(set1, set2)\nprint(intersect_set) # Output -> [3, 4, 5]",
        "1050": "for num in range(11):\n    print(num)",
        "1051": "def largest_consecutive_sum(nums):\n    max_sum = 0\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        if total_sum > max_sum:\n            max_sum = total_sum\n    return max_sum",
        "1052": "def prime_numbers(lower_limit, upper_limit): \n    prime_numbers = [] \n    while lower_limit <= upper_limit:\n        if all(lower_limit % i != 0 for i in range(2, lower_limit)):\n            prime_numbers.append(lower_limit)\n        lower_limit += 1\n    return prime_numbers\n\nprint(prime_numbers(2, 10))",
        "1053": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n  sid = SentimentIntensityAnalyzer()\n  sentiment = sid.polarity_scores(text)\n  if sentiment[\"compound\"] >= 0.5:\n    return \"positive\"\n  elif sentiment[\"compound\"] <= -0.5:\n    return \"negative\"\n  else:\n    return \"neutral\"\n\nsentiment = sentiment_analysis(\"This product is excellent\")\nprint(sentiment)",
        "1054": "# Base class\nclass Base:\n    pass\n\n# Derived class\nclass Derived(Base):\n    pass\n\n# Single inheritance\nclass SingleInheritance(Base):\n    pass\n\n# Multiple inheritance\nclass MultipleInheritance(Base, Derived):\n    pass",
        "1055": "def longest_words(dict):\n    longest_words = []\n    max_length = 0\n    for word, length in dict.items():\n        if length > max_length:\n            longest_words = [word]\n            max_length = length\n        elif length == max_length:\n            longest_words.append(word)\n    return longest_words",
        "1056": "def jobScheduling(jobs):\n    n = len(jobs) \n    \n    jobs = sorted(jobs, key = lambda x: x[1]) \n   \n    table = [0 for i in range(n)] \n    table[0] = jobs[0][2] \n  \n    for i in range(1, n): \n  \n        inclProf = jobs[i][2] \n        l = binarySearch(jobs, i) \n        if (l != -1):\n            inclProf += table[l] \n  \n        table[i] = max(inclProf, table[i-1]) \n  \n    return table[n-1]",
        "1057": "# Python 3 program to count the number of occurrences \n# of an element in the given list\n\n# function to count the number of occurrences \ndef countOccurrences(nums, query):\n    count = 0\n    for num in nums:\n        if query == num:\n            count = count + 1\n    return count\n\n# Driver code \nnums = [1, 2, 3, 2, 3, 2, 4]\n\n# Function Call\nquery = 2\nprint(\"{0} occurs {1} times\".format(query, countOccurrences(nums, query)))",
        "1058": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef equation(x):\n    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x \n\nresults = minimize(equation, [0])\nminx = results.x\nminy = results.fun\n\nprint('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))",
        "1059": "string = \u201cHello World\u201d\n\ndef replaceVowels(string):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\nnew_string = replaceVowels(string)\nprint(new_string) # This will print out \"H*ll* W*rld\"",
        "1060": "def calculate_std_deviation(numbers):\n mean = sum(numbers) \/ len(numbers)\n \n variance = 0\n for num in numbers:\n variance += (num - mean)**2\n variance = variance\/len(numbers)\n \n std_deviation = variance**0.5\n return std_deviation\n \n \nnumbers = [2, 4, 4, 4, 5, 5, 7, 9]\nstd_deviation = calculate_std_deviation(numbers)\nprint('The standard deviation is: {}'.format(std_deviation))",
        "1061": "# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n",
        "1062": "def getStringLengths(words):\n    # Create an empty dictionary \n    lengths = {} \n\n    # For each word in the list of words\n    for word in words:\n        # find the length of the word\n        length = len(word)\n        # add the length of the word to the dictionary\n        lengths[word] = length \n\n    # return the dictionary\n    return lengths\n\nprint(getStringLengths([\"apple\", \"mango\", \"banana\"]))",
        "1063": "def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "1064": "This code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try\/except` statements to catch the error and handle it appropriately.\n\ntry: \n number = int(not_a_number)\nexcept ValueError as e:\n print(f'Error converting {not_a_number} to an integer: {e}')",
        "1065": "\"\"\"\nCreate a program to group the strings of a given list according to their lengths in Python\n\"\"\"\n\n# List of strings \ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n# Dictionary to store the grouped strings \nresult = {} \n\n# Iterate over the list \nfor elem in input:\n    # Get length of each string \n    length = len(elem)\n    # If the length is present in the result dictionary, \n    # add the string to its corresponding list \n    if length in result: \n        result[length].append(elem)\n    # Else, create a new list in the result dictionary \n    # and append the string to the list \n    else: \n        result[length] = [elem] \n  \n# Print the result \nprint(result) \n# Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']}",
        "1066": "my_list = [i ** 2 for i in range(10)]",
        "1067": "def calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n    except ValueError:\n        print(\"The argument cannot be a negative number\")\n        \ncalculate_square(10)",
        "1068": "def initialize_array(rows, cols): \n    array = [[0 for i in range(cols)] for j in range(rows)]\n    return array",
        "1069": "def insertion_sort(list):\n    \"\"\"\n    Sort a given list using insertion sort.\n    list: the list to be sorted\n    \"\"\"\n    # loop through each element in the list, starting from the second element\n    for i in range(1, len(list)):  \n        temp = list[i] \n  \n        # find the position where the current element should be inserted\n        j = i-1\n        while j >= 0 and temp < list[j] : \n                list[j+1] = list[j] \n                j -= 1\n        list[j+1] = temp \n  \n    return list",
        "1070": "# Function to demonstrate printing pattern in pyramid format \ndef pyramid(n): \n    k = 2*n - 2\n    # outer loop to handle number of rows \n    for i in range(0, n): \n        # inner loop to handle number spaces \n        # values changing acc. to requirement \n        for j in range(0, k): \n            print(end=\" \") \n        # decrementing k after each loop \n        k = k - 2\n        # inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n            # printing stars \n            print(\"* \", end=\"\") \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npyramid(n)",
        "1071": "def format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"",
        "1072": "Lists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists.",
        "1073": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [9, 3, 6, 7, 1]\nmy_list = sort_list(my_list)\nprint(my_list)",
        "1074": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/news'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nheadlines = soup.find_all(\"h2\", class_=\"headline\")\nfor headline in headlines[:10]:\n print(headline.string)",
        "1075": "import requests\n\ndef fetch_data():\n    url = 'https:\/\/coronavirus-19-api.herokuapp.com\/'\n    response = requests.get(url)\n    data = response.json()\n    return data\n\nif __name__ == '__main__':\n    print(fetch_data())",
        "1076": "def find_max_val(arr):\n    max_val = 0\n\n    for lst in arr:\n        for num in lst:\n            if num > max_val:\n                max_val = num\n    return max_val\n\nprint(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9",
        "1077": "from flask import Flask, request\n\napp = Flask(name)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.json\n # Create the user\n # ...\n return {'status': 'user created'}\n\nif name == 'main':\n app.run(debug=True)",
        "1078": "list",
        "1079": "def length_longest_word(s):\n    longest_word = \"\"\n    longest_len = 0\n  \n    words = s.split()\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n            longest_word = word\n  \n    return len(longest_word)\n  \nresult = length_longest_word(string)\nprint(result)",
        "1080": "def print_prime_numbers():\n    for num in range(2, 1001):\n\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\nprint_prime_numbers()",
        "1081": "# Dictionaries\ndict1 = {'name': 'John', 'age': 25}\ndict2 = {'company': 'Google', 'city': 'New York'}\n\n# Merge two dictionaries\ndict3 = {**dict1, **dict2}\n\n# Print the merged dictionary\nprint(dict3)\n\n# Output:\n# {'name': 'John', 'age': 25, 'company': 'Google', 'city': 'New York'}",
        "1082": "#Function to add two given numbers\ndef add(x, y):\n   return x + y\n  \n# Print the sum\nprint(add(x, y))",
        "1083": "def generateLinkedList(n): \n\thead = Node(0) \n\tprev = head \n\tfor i in range(1, n + 1): \n\t\tnode = Node(i) \n\t\tprev.next = node \n\t\tprev = node \n\treturn head",
        "1084": "max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)",
        "1085": "C++:   Object-oriented, compiled language\nJava:  Object-oriented, compiled language\nPython: Object-oriented, interpreted language\nJavaScript: Object-oriented, interpreted language",
        "1086": "import flask\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https:\/\/example.com\/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run()",
        "1087": "def tower_of_hanoi(num_discs, source, auxiliary, destination): \n if num_discs == 1: \n     print(\"Move disc 1 from\", source, \"to\", destination) \n     return\n tower_of_hanoi(num_discs - 1, source, destination, auxiliary) \n print(\"Move disc\", num_discs, \"from\", source, \"to\", destination) \n tower_of_hanoi(num_discs - 1, auxiliary, source, destination) \n\ntower_of_hanoi(3, \"A\", \"B\", \"C\")",
        "1088": "import hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)",
        "1089": "def count_islands(grid): \n    if not grid: \n        return 0 \n  \n    row = len(grid) \n    col = len(grid[0]) \n  \n    num_islands = 0\n  \n    for i in range(row): \n        for j in range(col): \n            if grid[i][j] == 1: \n                num_islands += dfs(grid, i, j, row, col) \n  \n    return num_islands \n  \n  \ndef dfs(grid, i, j, row, col): \n    if i < 0 or i >= row or j < 0 or j >= col or grid[i][j] == 0: \n        return 0\n  \n    grid[i][j] = 0\n  \n    dfs(grid, i + 1, j, row, col) \n    dfs(grid, i - 1, j, row, col) \n    dfs(grid, i, j + 1, row, col) \n    dfs(grid, i, j - 1, row, col) \n  \n    return 1",
        "1090": "def classify_objects(list_of_objects):\n    results = []\n    for obj in list_of_objects:\n        if obj == 'objectA' or obj == 'objectB':\n            results.append('A')\n        elif obj == 'objectC' or obj == 'objectD':\n            results.append('B')\n    return results\n\nlist_of_objects = ['objectA', 'objectB', 'objectC', 'objectD']\nclassifications = classify_objects(list_of_objects)\nprint(classifications)",
        "1091": "def countIslands(grid):\n count = 0\n\n for i in range(len(grid)):\n  for j in range(len(grid[0])):\n   if grid[i][j] == 1:\n    dfs(grid, i, j)\n    count += 1\n\n return count\n\ndef dfs(grid, r, c):\n if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0:\n  return\n grid[r][c] = 0\n dfs(grid, r+1, c)\n dfs(grid, r, c+1)\n dfs(grid, r-1, c)\n dfs(grid, r, c-1)\n\nprint(countIslands([[1, 1, 0, 0, 0],\n                    [0, 1, 0, 0, 1],\n                    [1, 0, 0, 1, 1],\n                    [0, 0, 0, 0, 0],\n                    [1, 0, 1, 0, 1]]))\n\/\/ Output: 5",
        "1092": "def calculator(expression):\n    # create a stack for storing values\n    stack = []\n    # iterate through the expression\n    for char in expression:\n        # check if the character is a number\n        if char.isdigit():\n            # if so, push it to the stack\n            stack.append(int(char))\n        # check if the character is an operator\n        if char == '+' or char == '*':\n            # pop two values from the stack\n            val_one = stack.pop()\n            val_two = stack.pop()\n            # determine which operator was used and\n            # perform the corresponding operation\n            if char == '+':\n                stack.append(val_one + val_two)\n            elif char == '*':\n                stack.append(val_one * val_two)\n    # return the calculated result\n    return stack.pop()",
        "1093": "from itertools import permutations\n\ndef print_permutations(input):\n    perms = [''.join(p) for p in permutations(input)]\n    for perm in perms:\n        print(perm)\n\nif __name__ == \"__main__\":\n    print_permutations(\"ABC\")",
        "1094": "(40.7588972, -73.9787129)",
        "1095": "# Python program to remove vowels from a string\n\ndef remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    output_string = \"\"\n    for char in string:\n        if char not in vowels:\n            output_string += char\n    return output_string\n\nif __name__ == \"__main__\":\n    string = \"Hello World!\"\n    print(\"Original String:\", string)\n    string = remove_vowels(string)\n    print(\"String without Vowels:\", string)",
        "1096": "class Person:\n    def __init__(self, name, age, gender, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.address = address\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_gender(self):\n        return self.gender\n    \n    def get_address(self):\n        return self.address",
        "1097": "from selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\ndriver.get('https:\/\/example.com')\n\n# Check the title of the page\nassert driver.title == 'Example Domain'\n\n# Check the text on the page\ntext = driver.find_element_by_xpath('\/\/p').text\nassert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.'\n\n# Check for a hyperlink\nlink = driver.find_element_by_xpath('\/\/a')\nassert link.text == 'More information...'\n\ntime.sleep(2)\ndriver.quit()",
        "1098": "import json\n\nimport requests\n\nfrom logistics.models import Fleet\n\nSERVER_URL = \"http:\/\/demo.geo2tag.org\/instance\/\"\nBASE_SERVICE_NAME = \"testservice\"\nSERVICE_NAME = BASE_SERVICE_NAME\n\nchannel_dict = {}\npoints_dict = {}\n\n\ndef getSerivceUrl():\n    return SERVER_URL + \"service\/\" + SERVICE_NAME\n\ndef one_time_startup():\n    print(\"Application startup execution\")\n    createService()\n    clearAllFleetChannels()\n\n\ndef createService():\n    # m = hashlib.md5()\n    # m.update(socket.gethostbyname(socket.getfqdn()).encode('utf-8'))\n    # global SERVICE_NAME\n    # SERVICE_NAME = BASE_SERVICE_NAME + \"_\" + str(m.hexdigest())\n    # print(\"SERVICE_NAME: \"+SERVICE_NAME)\n    #\n    # url = SERVER_URL + 'service'\n    # data = {'name': SERVICE_NAME}\n    # request = requests.post(url, data=data)\n    # print(request.text)\n    pass\n\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 url \u043a\u0430\u0440\u0442\u044b (\u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 driver-fleet-id)\ndef getFleetMap(fleet_id):\n    try:\n        fleet = Fleet.objects.get(id=fleet_id)\n        channel_id = getOrCreateFleetChannel(fleet)\n    except:\n        channel_id = \"none\"\n\n    return getSerivceUrl() + \"\/map?zoom=10&latitude=59.8944&longitude=30.2642&channel_ids=[\\\"\"+str(channel_id)+\"\\\"]\"\n\n\n# \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u0430\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 (\u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u043e\u0447\u043a\u0438 updateDriverPos)\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 oid \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f fleet\ndef getOrCreateFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id, None)\n        if channel_oid is not None:\n            return channel_oid\n\n        print(\"create channel for fleet \" + str(fleet))\n        url = getSerivceUrl() + '\/channel'\n        full_name = str(fleet.name) + \"_\" + str(fleet.id)\n        data = {'name': full_name, 'json': {'name': str(fleet.name), 'id': str(fleet.id), 'owner': fleet.owner.first_name+' '+fleet.owner.last_name}}\n        request = requests.post(url, data=data)\n        response = request.text\n        channel_exists = response == 'null'\n        if channel_exists:\n            print(full_name+' already exists : '+str(channel_exists))\n            oid = None\n        else:\n            oid = json.loads(response)[\"$oid\"]\n            channel_dict[fleet.id] = oid\n        return oid\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE createFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u0430\u043d\u0430\u043b \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 (\u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430)\ndef deleteFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id)\n        headers = {'content-type': 'application\/json'}\n        url = getSerivceUrl() + \"\/channel\/\" + channel_oid\n        request = requests.delete(url, headers=headers)\n        channel_dict.pop(fleet.id)\n        print(\"delete channel of fleet \" + str(fleet) +\" result: \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043a\u0430\u043d\u0430\u043b\u044b (\u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)\ndef clearAllFleetChannels():\n    print(\"delete all channels\")\n\n    try:\n        url = getSerivceUrl() + '\/channel?number=0'\n        request = requests.get(url)\n        response = request.text\n        print(response)\n        parsed_string = json.loads(response)\n        for channel in parsed_string:\n            channel_oid = channel[\"_id\"][\"$oid\"]\n            headers = {'content-type': 'application\/json'}\n            url = getSerivceUrl() + \"\/channel\/\" + channel_oid\n            print(\"DELETE \" + url)\n            requests.delete(url, headers=headers)\n            channel_dict.clear()\n            points_dict.clear()\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE clearAllFleetChannels: \" + str(e))\n\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043c\u0435\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f ( \u043f\u0440\u0438 api\/driver\/update_pos\/)\ndef updateDriverPos(fleet, driver, lat, lon):\n    try:\n        channel_oid = getOrCreateFleetChannel(fleet)\n        if channel_oid is not None:\n            point_oid = points_dict.get(driver.id, None)\n\n            url = getSerivceUrl() + '\/point'\n            data = [{\"lon\": float(lat), \"lat\": float(lon), \"alt\": 1.1,\n                     \"json\": {\"name\": driver.first_name + \" \" + driver.last_name}, \"channel_id\": channel_oid}]\n            if point_oid is None:\n                request = requests.post(url, data=json.dumps(data))\n                point_oid = json.loads(request.text)[0]\n                points_dict[driver.id] = point_oid\n                print(\"added point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \"+request.text)\n\n            else:\n                # delete old\n                del_url = getSerivceUrl() + '\/point\/' + point_oid\n                request = requests.delete(del_url)\n                success = request.text == '{}'\n                if success:\n                    points_dict.pop(driver.id)\n                    # add new\n                    request = requests.post(url, data=json.dumps(data))\n                    point_oid = json.loads(request.text)[0]\n                    points_dict[driver.id] = point_oid\n                    print(\"updated point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \" + request.text)\n\n                else:\n                    print(\"error while delete \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE updateDriverPos: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u043e\u0447\u043a\u0443, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0432 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0435 fleet (\u043f\u0440\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 \u0438 \u043f\u0440\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u043f\u043e\u0435\u0437\u0434\u043a\u0438)\ndef deleteDriverPos(fleet, driver):\n    try:\n        point_oid = points_dict.get(driver.id)\n        url = getSerivceUrl() + '\/point\/' + point_oid\n        request = requests.delete(url)\n        points_dict.pop(driver.id)\n        print(\"cleared position for driver \" + str(driver) + \" from fleet \" + str(fleet) + \" result: \"+request.text)\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteDriverPos: \" + str(e))\n\n\n",
        "1099": "def sort_arr(arr):\n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]  \n    return arr\n\nresult = sort_arr([9, 4, 6, 1, 3, 7])\nprint(result)",
        "1100": "words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']\nfrom collections import Counter\nword_counts = Counter(words)\nwords_appearing_more_than_3_times = [word for word, count in word_counts.items() if count > 3]\nprint(words_appearing_more_than_3_times)",
        "1101": "def highestCommonFactor(num1, num2): \n    if num1 > num2: \n        small = num2 \n    else: \n        small = num1 \n    for i in range(1, small+1): \n        if((num1 % i == 0) and (num2 % i == 0)): \n            hcf = i \n    return hcf",
        "1102": "from flask import Flask, request\nfrom flask_restful import Resource, Api\n\n# Create the Flask application\napp = Flask(__name__)\napi = Api(app)\n\n# Create app routes\nclass UserRegister(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Register the user\n  # ...\n\n  # Return a success message\n  return {'msg': 'User registered successfully!'}\n\nclass UserLogin(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Verify login credentials \n  # ...\n\n  # Return a success message if credentials verified\n  return {'msg': 'User logged in successfully!'}\n\n# Register resources with the API\napi.add_resource(UserRegister, '\/register')\napi.add_resource(UserLogin, '\/login')\n\n# Run the application\nif __name__ == '__main__':\n app.run()",
        "1103": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        return f\"{self.real} + {self.imaginary}i\"",
        "1104": "\"\"\"\nClassify a text into either spam or ham \n\"\"\"\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef classify_spam(text):\n    # Create a vectorizer object\n    vec = CountVectorizer()\n    \n    # Tokenize the text\n    X = vec.fit_transform([text])\n    \n    # Create a Multinomial NB model \n    model = MultinomialNB()\n    model.fit(X, y)\n    \n    # Make predictions\n    prediction = model.predict(X)\n    \n    if prediction[0] == 0:\n        return 'ham'\n    else:\n        return 'spam'\n\nif __name__ == '__main__':\n    text = 'This is an example of a spam message.'\n    print(classify_spam(text))",
        "1105": "def generate_fibonacci(n):  \n    #first two Fibonacci numbers  \n    a = 0\n    b = 1\n    #check if the number of terms is valid  \n    if n <=0:  \n        print(\"Please enter a positive integer\")  \n    elif n == 1:  \n        print(\"Fibonacci sequence upto\",n,\":\")  \n        print(a)  \n    else:  \n        print(\"Fibonacci sequence:\")  \n        for i in range(0,n):  \n            print(a)  \n            c = a + b  \n            #update values  \n            a = b  \n            b = c  \n# Driver function  \ngenerate_fibonacci(10000)",
        "1106": "def assess_patient(temperature, breathing_rate, pulse_rate):\n if temperature > 100:\n  print('Fever present')\n if breathing_rate < 12 or breathing_rate > 20:\n  print('Respiratory distress')\n if pulse_rate < 60 or pulse_rate > 100:\n  print('Heart rate issue')",
        "1107": "import random\n\ndef random_int(x, y):\n    return random.randint(x, y)",
        "1108": "def print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11])",
        "1109": "def generate_multiplication_table(n):\n    table = []\n    for i in range(1, n+1):\n        row = []\n        for j in range(1, n+1):\n            row.append(i * j)\n        table.append(row)\n    return table",
        "1110": "import random\n\ndef generateId():\n  return ''.join(str(random.randint(0,9)) for i in range(6))\n\nprint(generateId())",
        "1111": "def product(x, y):\n    return x * y",
        "1112": "import pandas as pd\n \ndef recode_age(data):\n    data['age_recoded'] = data['age'].apply(\n        lambda x: 'Above 30' if x > 30 else 'Below 30'\n    )\n \ndf = pd.read_csv('data.csv')\nrecode_age(df)\nprint(df)",
        "1113": "print(list(reversed([1, 2, 3])))",
        "1114": "def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))",
        "1115": "def linearSearch(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1",
        "1116": "[math.sqrt(x) for x in [2, 4, 9]]",
        "1117": "def index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1",
        "1118": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nprint(fibonacci(n))",
        "1119": "def generate_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            yield num\n\nfor prime_number in generate_prime_numbers(100):\n    print(prime_number)",
        "1120": "import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# define 2-D data points with four different classes \nx_train = np.array([[1,2], [2,4], [4,2], [2,1], [4,4], [3,3], [3,1], [1,3]])\ny_train = np.array([0,0,1,1,2,2,3,3])\n\n# define the network model\nmodel = keras.Sequential([\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(4, activation='softmax')\n])\n\n# compile the model \nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=10)",
        "1121": "import time\n\ndef timeit(func):\n def wrapper(*args, **kwargs):\n start = time.time()\n result = func(*args, **kwargs)\n end = time.time()\n print(f\"Time taken for {func.__name__}: {end-start} seconds\")\n return result\n return wrapper",
        "1122": "for num in range(1, 101):\n    if num % 3 == 0:\n        print('Fizz')\n    else:\n        print(num)",
        "1123": "class TreeNode:\n \n def __init__(self, val):\n  self.val = val\n  self.left = None\n  self.right = None\n\nclass BST:\n \n def __init__(self):\n  self.root = None\n \n def insert(self, val):\n  node = TreeNode(val)\n  if self.root is None:\n   self.root = node\n  else:\n   self.__insert_helper(self.root, node)\n \n def __insert_helper(self, root, node):\n  if node.val < root.val:\n   if root.left is None:\n    root.left = node\n   else:\n    self.__insert_helper(root.left, node)\n  else:\n   if root.right is None:\n    root.right = node\n   else:\n    self.__insert_helper(root.right, node)\n    \ndef search(self, val):\n node = self.__search_helper(self.root, val)\n return node is not None\n\ndef __search_helper(self, root, val):\n if root is None:\n  return None\n if root.val == val:\n  return root\n if val < root.val:\n  return self.__search_helper(root.left, val)\n else:\n  return self.__search_helper(root.right, val)",
        "1124": "def generate_matrix(m, n):\n    matrix = \"\"\n    # generate the matrix row by row\n    for i in range(m):\n        row = \"\"\n        # generate a single row with n columns\n        for j in range(n):\n            row += str(random.randint(-100, 100)) + \" \"\n        matrix += row + \"\\n\"\n    return matrix\n\nmatrix = generate_matrix(3, 5)\nprint(matrix)\n# 23 12 -72 -35 47\n# -6 67 42 -54 95\n# 93 13 75 -9 -63",
        "1125": "import bcrypt\n\ndef checkPassword(hashed_password):\n # Hash the password\n password = bcrypt.hashpw(password, bcrypt.gensalt()) \n\n # Check the password against the hash\n if bcrypt.checkpw(password, hashed_password):\n   return True\n else:\n   return False\n\nif __name__ == \"__main__\":\n hashed_password = \"abcdefg12345678\"\n if checkPassword(hashed_password):\n   print(\"Password match\")\n else:\n   print(\"Password verficiation failed\")",
        "1126": "def find_words_containing_letter(givenString, letter):\n    words = givenString.split(' ')\n    words_containing_letter = []\n\n    for word in words:\n        if letter in word:\n            words_containing_letter.append(word)\n    \n    return words_containing_letter\n\nprint(find_words_containing_letter('Hello World', 'H'))",
        "1127": "class Queue:\n def __init__(self):\n self.queue = []\n\n def push(self, item):\n self.queue.append(item)\n\n def pop(self):\n return self.queue.pop(0)\n\n def peek(self):\n return self.queue[0]\n\n# Usage example\nq = Queue()\nq.push(1)\nq.push(2)\nq.push(3)\n\nprint(q.pop()) # 1 \nprint(q.peek()) # 2",
        "1128": "The best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python is a k-d tree. A k-d tree is a specialized data structure that can be used to store and efficiently query k-nearest neighbors of points in a 2-Dimensional space. It is a space partitioning tree that recursively splits the dimensions of the space around a median. This allows for extremely efficient queries of the k-nearest neighbors.",
        "1129": "def is_greater(num, threshold):\n    if num > threshold:\n        return True\n    else:\n        return False",
        "1130": "def addNumbers(x, y):\n    return x + y",
        "1131": "def findMax(string):\n  numbers = string.split(\" \")\n  largest = 0\n  \n  for number in numbers:\n    if number > largest:\n      largest = number\n      \n  return largest\n  \nstring = \"64 8 224 54 21\"\nprint(f\"The largest number is {findMax(string)}.\")",
        "1132": "def palindromic_substring(s):\n  all_palindromes = []\n\n  #  check for substrings of length 3\n  for i in range(len(s) - 2):\n    if s[i] == s[i + 2]:\n      all_palindromes.append(s[i:i + 3])\n\n  #  check for substrings of length 4\n  for i in range(len(s) - 3):\n    if s[i] == s[i + 3]:\n      all_palindromes.append(s[i:i + 4])\n\n  return all_palindromes\n\nresult = palindromic_substring(\"abc\")\nprint(result)",
        "1133": "def quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right)",
        "1134": "# Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))",
        "1135": "def gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n  \n # driver code  \nx = 105\ny = 45 \nprint(\"The gcd of\", x,  \n                        \"and\", y, \"is\", gcd(x, y))",
        "1136": "import random\n\n# Initialize the game\nlevel = 1\npoints = 0\n\nwhile True:\n # Randomly generate the level\n level = random.randint(1, 10)\n \n # Print out the level and ask for input\n print('Level {}'.format(level))\n user_input = input()\n \n # Logic for checking the input\n if user_input == 'correct':\n points += 10\n elif user_input == 'wrong':\n break\n\n# Print out the result\nprint('Points:', points)",
        "1137": "\/\/ In C\n#include <stdio.h>\n\nint main()\n{\n    int x = 0;\n    \/\/ Recurse to infinity\n    x = main();\n    printf(\"Infinite Recursion Complete\");\n    return 0;\n}\n\n\/\/ In Python\ndef recursive_call():\n  recursive_call()\n\nrecursive_call()",
        "1138": "test_str = 'Sentence 1\\nSentence 2\\nSentence 3 (longest sentence)\\nSentence 4'\n\n# Get all lines in test_str into a list\nstr_lines = test_str.split('\\n')\n\n# Find the longest line in the list\nlongest_line = max(str_lines, key=len)\n\n# Print the longest line\nprint(f'The longest line is: {longest_line}')",
        "1139": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result",
        "1140": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nurls = []\n\nfor link in soup.find_all('a', href=True):\n if link['href'].startswith('http'):\n urls.append(link['href'])\n\nprint(urls)",
        "1141": "def filter_by_length(list):\n    \"\"\"\n    Filters out strings in the given list that have length 3.\n    \"\"\"\n    filtered_list = [word for word in list if len(word) == 3]\n    return filtered_list\n\nif __name__ == '__main__':\n    list = ['ada', 'python', 'ruby', 'egg', 'coffee']\n    print(filter_by_length(list))",
        "1142": "function helloWorld() {\n console.log(\"Hello World\");\n}",
        "1143": "import json\n\ngivenString = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 28}\"\n\ndata = json.loads(givenString)\n\nprint(data)",
        "1144": "import datetime\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00",
        "1145": "# Generate a program in Python to find the maximum element in a given array\n\ndef maximum_element(arr):\n  \"\"\"\n  Find the maximum element in a given array.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The maximum value found in the array, or None if the array is empty.\n  \"\"\"\n  max_element = None\n  for n in arr:\n    if max_element is None or n > max_element:\n      max_element = n\n  return max_element",
        "1146": "FROM python:3.8\n\n# Set environment variables\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Copy project files\nWORKDIR \/usr\/src\/app\nRUN mkdir static\nRUN mkdir templates\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run the app\nCMD uvicorn app:app --host=0.0.0.0 --port=8000",
        "1147": "import pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)",
        "1148": "def int_to_string(num):\n   return str(num)",
        "1149": "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('http:\/\/example.com\/')\nhtml = response.content\nsoup = BeautifulSoup(html, 'html.parser')\n\ntext_in_element = soup.find('div', {'class': 'my-class'}).get_text()\nprint(text_in_element)",
        "1150": "def search(list, target):\n  for i in range(len(list)):\n    if list[i] == target:\n      return i\n  return -1\n\nlist = [2, 3, 4, 5, 6]\ntarget = 4\n\nindex = search(list, target)\nif index == -1:\n  print(\"The target was not found.\")\nelse:\n  print(\"The target was found at index %d.\" % index)",
        "1151": "from collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)",
        "1152": "def is_palindrome(n):\n    n_str = str(n)\n    return n_str == n_str[::-1]",
        "1153": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nprint(Fibonacci(n))",
        "1154": "import random\ndef random_permutation(input_array):\n    perm = []\n    while(len(input_array) > 0):\n        el = random.choice(input_array)\n        perm.append(el)\n        input_array.remove(el)\n    return perm",
        "1155": "@app.route('\/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html')",
        "1156": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get articles\narticles = soup.find_all('article')\n\n# Download the articles\nfor article in articles:\n    article_url = article.find('a')['href']\n    article_response = requests.get(article_url)\n    with open(article_url.split('\/')[-1], 'wb') as f:\n        f.write(article_response.content)",
        "1157": "#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Lambert Scattering (irrad_method='horvat')\n# ============================\n# \n# Setup\n# -----------------------------\n\n# Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release).\n\n# In[ ]:\n\n\nget_ipython().system('pip install -I \"phoebe>=2.0,<2.1\"')\n\n\n# As always, let's do imports and initialize a logger and a new bundle.  See [Building a System](..\/tutorials\/building_a_system.html) for more details.\n\n# In[1]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\nimport phoebe\nfrom phoebe import u # units\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlogger = phoebe.logger('error')\n\nb = phoebe.default_binary()\n\n\n# Relevant Parameters\n# ---------------------------------\n\n# For parameters that affect reflection and heating (irrad_frac_\\*) see the tutorial on [reflection and heating](.\/reflection_heating.ipynb).\n# \n# The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely.\n\n# In[3]:\n\n\nprint(b['irrad_method'])\n\n\n# Influence on Light Curves (fluxes)\n# ---------------------------------\n# \n# Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http:\/\/phoebe-project.org\/publications\/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations.\n# \n# <img src=\"prsa+2016_fig8.png\" alt=\"Figure 8\" width=\"600px\"\/>\n# \n# First we'll roughly create a A0-K0 binary and set reasonable albedos.\n\n# In[4]:\n\n\nb['teff@primary'] = 11000\nb['rpole@primary'] = 2.5\nb['gravb_bol@primary'] = 1.0\n\nb['teff@secondary'] = 5000\nb['rpole@secondary'] = 0.85\n\nb['q@binary'] = 0.8\/3.0\n\nb.flip_constraint('mass@primary', solve_for='sma@binary')\nb['mass@primary'] = 3.0\n\n\n# In[5]:\n\n\nprint(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component'))\n\n\n# In[6]:\n\n\nb['irrad_frac_refl_bol@primary'] = 1.0\nb['irrad_frac_refl_bol@secondary'] = 0.6\n\n\n# Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination.\n# \n# Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses.\n\n# In[7]:\n\n\nphases = np.linspace(0,1,101)\nb.add_dataset('lc', times=b.to_time(phases))\n\n\n# In[8]:\n\n\nfor incl in [0,30,60,90]:\n    b.set_value('incl@binary', incl)\n    b.run_compute(irrad_method='wilson')\n    fluxes_wilson = b.get_value('fluxes', context='model')\n    b.run_compute(irrad_method='horvat')\n    fluxes_horvat = b.get_value('fluxes', context='model')\n    plt.plot(phases, (fluxes_wilson-fluxes_horvat)\/fluxes_wilson, label='i={}'.format(incl))\n    \nplt.xlabel('phase')\nplt.ylabel('[F(wilson) - F(horvat)] \/ F(wilson)')\nplt.legend(loc='upper center')\nplt.show()\n\n",
        "1158": "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(80), unique=True)\n author_id = db.Column(db.Integer, db.ForeignKey('author.id'))\n publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))\n\nclass Author(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\nclass Publisher(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\ndb.create_all()\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "1159": "def decision_tree_classifier(input_data):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    return y_pred",
        "1160": "import boto3\n\ndef lambda_handler(event, context):\n    phone_number = event[\"Phone Number\"]\n    message = event[\"Message\"]\n\n    # Create an SNS client\n    sns = boto3.client(\"sns\")\n\n    # Publish a simple message to the specified SNS topic\n    response = sns.publish(\n        PhoneNumber=phone_number,\n        Message=message\n    )\n\n    # Response\n    return {\n        'statusCode': 200,\n        'body': response\n    }",
        "1161": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Convert Celsius Temperature to Fahrenheit.\n\n    Parameters:\n        celsius (float): Temperature in Celsius\n        \n    Returns:\n        Temperature in Fahrenheit\n    \"\"\"\n    return celsius * 9\/5 + 32",
        "1162": "<!DOCTYPE html>\n<html>\n<head>\n <title>Engineers Directory<\/title>\n<\/head>\n<body>\n <p>Directory of Engineers and their skills<\/p>\n <ul>\n <li>\n <span>Name: <\/span><span>John Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Python<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Jane Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Node.js<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Bob Doe<\/span>, \n <span>Organization: <\/span><span>ABC Co.<\/span>, \n <span>Skills: <\/span><span>GoLang, PHP<\/span>\n <\/li>\n <\/ul>\n<\/body>\n<\/html>",
        "1163": "import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r",
        "1164": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10))",
        "1165": "def get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums))",
        "1166": "def solve(list):\n    max_len = 0\n    longest_prefix = [0] * len(list)\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            longest_prefix[i] = longest_prefix[i-1] + 1\n        else:\n            longest_prefix[i] = 0\n        max_len = max(max_len, longest_prefix[i])\n    return max_len",
        "1167": "def is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name))",
        "1168": "import itertools\n\ndef get_permutations(sentence):\n    sentence_list = sentence.split(\" \")\n    return list(itertools.permutations(sentence_list))\n\nif __name__ == '__main__':\n    print(get_permutations(\"the cat sat on the mat\"))",
        "1169": "import json\n\ndef parseJSON(jsonString):\n    data = json.loads(jsonString)\n    return data",
        "1170": "def display_nums():\n    for i in range(1, 11):\n        print(i)",
        "1171": "def odds_ratio(contingency_table):\n    numerator = (contingency_table[0][0] * contingency_table[1][1])\n    denominator = (contingency_table[0][1] * contingency_table[1][0])\n    if denominator == 0:\n        return None\n    odds_ratio = numerator \/ denominator\n    return odds_ratio\n    \nif __name__ == \"__main__\":\n    contingency_table = [[100, 75], [40, 35]]\n    print(odds_ratio(contingency_table))",
        "1172": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# list of features and labels\nfeatures = np.array([[110000, 'Petrol', 'Manual', 1990, 30, 3000]])\nlabels = np.array([[1]])\n\n# perform data preprocessing\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# create the model\nmodel = KNeighborsClassifier()\nmodel.fit(X_train_scaled, y_train)\n\n# predict sales price\npredicted_price = model.predict([X_test_scaled[0]])\n\nprint(\"Predicted sale price:\", predicted_price[0])",
        "1173": "nameFirst = 'Alice'\nnameLast = 'Charlie'\nageFirst = 24\nageLast = 28",
        "1174": "int sum = 0\n \nfor i in range(500, 1000):\n  if(i % 25 == 0):\n    sum += i\n \nprint(sum)",
        "1175": "class StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False",
        "1176": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\")",
        "1177": "def mean_absolute_difference(my_list):\n    diff = 0\n    for i in range(len(my_list) - 1):\n        diff += abs(my_list[i] - my_list[i + 1])\n    return diff \/ (len(my_list) - 1)\n\nif __name__ == \"__main__\":\n    print(mean_absolute_difference(my_list))",
        "1178": "#import matplotlib.pyplot as plt \nimport numpy as np \nimport sympy as sym \nfrom scipy import optimize \n\n# define the function\ndef function(x, y):\n\treturn 5*x + 3*y \n\n# define the inputs\nx = sym.Symbol('x') \ny = sym.Symbol('y') \n\n# optimize the function\nresult = optimize.minimize(function, [0, 0]) \n\n# output the results\nprint('The optimal value of x is:', result.x[0]) \nprint('The optimal value of y is:', result.x[1])",
        "1179": "def sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))",
        "1180": "def odd_even(numbers):\n    odd = []\n    even = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even\n\nodds, evens = odd_even([3, 4, 7, 12, 19])\nprint(odds) # prints: [3, 7, 19]\nprint(evens) # prints: [4, 12]",
        "1181": "# The function to add two numbers\ndef add(num1, num2):\n  # Adding the two numbers\n  result = num1 + num2\n \n  # Printing the result\n  print(f'The result of the addition is {result}')\n\n# Taking the input from the user\nnum1 = int(input('Enter the first number: '))\nnum2 = int(input('Enter the second number: '))\n\n# Calling the add function\nadd(num1, num2)",
        "1182": "list = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list)",
        "1183": "import random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)]",
        "1184": "import tensorflow as tf\nfrom tensorflow import keras\n\n# Split data into train and test sets\ntrain_X, train_y, test_X, test_y = [], [], [], []\nfor x, y in data:\n train_X.append(x)\n train_y.append(y)\n\n# Create tokenizer\ntokenizer = keras.preprocessing.text.Tokenizer()\ntokenizer.fit_on_texts(train_X)\n\n# Create model\nmodel = keras.models.Sequential([\nkeras.layers.Dense(64, input_shape=[None,]),\n keras.layers.Dense(64, activation='relu'),\n keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile model\nmodel.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n)\n\n# Train\ntrain_X_vector = tokenizer.texts_to_matrix(train_X)\nmodel.fit(train_X_vector, train_y, epochs=10, validation_split=0.2)",
        "1185": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run()",
        "1186": "def estimate_pi(n_terms: int) -> float:\n    numerator: float = 4.0\n    denominator: float = 1.0\n    operation: float = 1.0\n    pi: float = 0.0\n\n    for _ in range(n_terms):\n        pi += operation * (numerator \/ denominator)\n        denominator += 2.0\n        operation *= -1.0\n\n    return pi\n\n\nif __name__ == \"__main__\":\n    print(estimate_pi(1000))",
        "1187": "string = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\")",
        "1188": "s1 = set([\"pineapple\" ,\"mango\",\"apple\",\"orange\"])\ns2 = set([\"grandfather\",\"grandmother\",\"father\",\"mother\"])\n\nlongest_common_string = \"\"\n\nfor word1 in s1:\n  for word2 in s2:\n    if word1 not in longest_common_string and word2 not in longest_common_string:\n      common_string = \"\"\n      for i in range(min(len(word1),len(word2))):\n        if word1[i] == word2[i]:\n          common_string += word1[i]\n    \n      if len(common_string) > len(longest_common_string):\n        longest_common_string = common_string\n\nprint(longest_common_string)",
        "1189": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/user\/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers)",
        "1190": "for element in myList: \n print(element)",
        "1191": "import random\n\ndef generate_random_array(n):\n    array = [i for i in range(1, n + 1)]\n    random.shuffle(array)\n    return array\n\nresult = generate_random_array(7)\nprint(result)",
        "1192": "class DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here",
        "1193": "def remove_item(items, target):\n    return [i for i in items if i != target]",
        "1194": "# Python program to check if a given string consists of only numeric digits \n\n# making a string with only digits \n# and assigning it to a variable \ntest_string = \"123456\"\n  \n# printing original string  \nprint(\"Original String: \" + test_string) \n  \n# using if condition to \n# Check if all values are numbers \nif test_string.isdigit(): \n    print(\"String contains only numbers\") \nelse : \n    print(\"String not contains only numbers\")",
        "1195": "list1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4}",
        "1196": "import csv\n\nwith open(\"filename.csv\", 'r', newline='') as f:\n    csvReader = csv.reader(f)",
        "1197": "unique_elements = set(list)\nprint(\"Number of unique elements:\", len(unique_elements))",
        "1198": "def keep_even_only(arr):\n    return [n for n in arr if n%2 == 0]\n\narr = [2, 5, 8, 9, 10, 13, 11]\neven_arr = keep_even_only(arr)\n\nprint(even_arr)\n\n# Output:\n# [2, 8, 10]",
        "1199": "def sort(array):\n  # base case: if array is empty or has only one element, it is already sorted\n  if len(array) <= 1:\n    return array\n\n  # divide array into two halves\n  midpoint = len(array) \/\/ 2\n  left = array[:midpoint]\n  right = array[midpoint:]\n\n  # recursively sort left and right subarrays\n  left = sort(left)\n  right = sort(right)\n\n  # merge two sorted halfs\n  return merge(left, right)\n\ndef merge(left, right):\n  result = []\n  left_index = 0 # index of the left subarray\n  right_index = 0 # index of the right subarray\n\n  # keep going until one of the two subarrays is depleted\n  while left_index < len(left) and right_index < len(right):\n    if left[left_index] <= right[right_index]:\n      # add the smallest element and increment its index\n      result.append(left[left_index])\n      left_index += 1\n    else:\n      result.append(right[right_index])\n      right_index += 1\n  \n  # we must have reached the end of the left or right subarray\n  # append all remaining elements\n  for i in range(left_index, len(left)):\n    result.append(left[i])\n  for i in range(right_index, len(right)):\n    result.append(right[i])\n  \n  return result\n\n# Test code\narray = [4, 2, 9, 7, 3]\nsorted_array = sort(array)\nprint(sorted_array)",
        "1200": "arr.sort() \nprint(arr)",
        "1201": "def maxOfTwo Numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\nprint(maxOfTwoNumbers(4, 6))",
        "1202": "# Establish an SQL connection \nimport sqlite3\nconn = sqlite3.connect(\"mydatabase.db\")\n\n# Create a cursor object \nc = conn.cursor()\n\n# Execute SQL Query \nc.execute(\"SELECT * FROM TABLE\")\n\n# Store the result in a dataframe \nimport pandas as pd\ndf = pd.DataFrame(c.fetchall()) \n\n# Perform some manipulation on the data \n# E.g. Add a new column \ndf['new_col'] = df['old_col1'] + df['old_col2']\n\n# Update the table \ndf.to_sql(\"TABLE\", conn, if_exists='replace', index=False)\n\n# Close connection \nconn.close()",
        "1203": "def generateURL(productName, productCategory, productPrice):\n productName = productName.lower().replace(' ', '-')\n productCategory = productCategory.lower().replace(' ', '-')\n return 'https:\/\/www.etsy.com\/listing\/{}-{}-{}\/{}'.format(productName, productPrice, productCategory, productName)\n \ngeneratedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)\n# https:\/\/www.etsy.com\/listing\/tulip-breeze-necklace-45-jewelry\/tulip-breeze-necklace",
        "1204": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height",
        "1205": "import pandas as pd\n\ndf = pd.DataFrame(customer_data)\ndf[\"age_category\"] = df[\"age\"].apply(lambda a: \"Young\" if 0 < a <= 20 else \"Middle-aged\" if 21 <= a <= 60 else \"Senior\")\ndf[\"gender_category\"] = df[\"gender\"].apply(lambda g: \"Male\" if g == \"Male\" else \"Female\" if g == \"Female\" else \"Other\")\n\nprint(df)",
        "1206": "def centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches)",
        "1207": "def checkNum(arr, num):\n    response = []\n    for element in arr: \n        if element > num: \n            response.append('greater than')\n        elif element < num:\n            response.append('less than')\n        else:\n            response.append('equal to')\n    return response\n\nnums = [3,5,7]\nout = checkNum(nums, 4)\nprint(out)",
        "1208": "def classify_sentiment(comments):\n    results = []\n    for comment in comments:\n        if \"great\" in comment or \"love\" in comment:\n            results.append(\"positive\")\n        elif \"hate\" in comment or \"bad\" in comment:\n            results.append(\"negative\")\n        else: \n            results.append(\"neutral\")\n    return results\n\nprint(classify_sentiment(comments))",
        "1209": "from random import shuffle\nfrom itertools import product\n\ndeck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S']))\nshuffle(deck)\n\nplayer1_score = 0\nplayer2_score = 0\n\ndef deal_cards(player):\n    card1 = deck.pop()\n    card2 = deck.pop()\n    player.append(card1)\n    player.append(card2)\n    return player\n\nplayer1 = deal_cards([])\nplayer2 = deal_cards([])\n\n# Player 1 turn\nplayer1_score = 0\nfor i in range(len(player1)):\n    card_score = 0\n    if (player1[i][0] == 'A'):\n        card_score = 11\n    elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player1[i][0])\n        \n    player1_score += card_score\n\n# Player 2 turn\nplayer2_score = 0\nfor i in range(len(player2)):\n    card_score = 0\n    if (player2[i][0] == 'A'):\n        card_score = 11\n    elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player2[i][0])\n        \n    player2_score += card_score\n\n# Checking the winner\nif (player1_score > player2_score):\n    print(\"Player 1 wins!\")\nelif (player2_score > player1_score):\n    print(\"Player 2 wins!\")\nelse:\n    print(\"It's a Tie!\")",
        "1210": "def string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12",
        "1211": "import datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message')",
        "1212": "import random\n\nfor i in range(10):\n    print(random.randint(1, 10))",
        "1213": "list=[2,4,5,7,1,3]\n\neven_sum= 6\nodd_sum= 15\n\ndef sum_even_odd(list):\n    even_sum=0\n    odd_sum=0\n    \n    for num in list:\n        if num % 2 == 0:\n            even_sum+=num\n        else:\n            odd_sum+=num \n    \n    print(\"even_sum=\",even_sum)\n    print(\"odd_sum=\",odd_sum)\n    \nsum_even_odd(list)",
        "1214": "import unittest\nfrom flask_testing import TestCase\nfrom app import db, Task\n\nclass TestModel(TestCase):\n def create_app(self):\n return app\n\n def setUp(self):\n db.create_all()\n self.task = Task(description='Description')\n db.session.add(self.task)\n db.session.commit()\n\n def tearDown(self):\n db.session.remove()\n db.drop_all()\n\nclass TestTask(TestModel):\n def test_task_creation(self):\n self.assertEqual('Description', self.task.description)\n\nif __name__ == '__main__':\n unittest.main()",
        "1215": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "1216": "def top_frequent(data, key):\n  grouped = data.groupby(key)\n  result = []\n\n  for name, group in grouped:\n    counts = group.value_counts()\n    top_3 = counts.nlargest(3).index.tolist()\n    result.append((name, top_3))\n  \n  return result",
        "1217": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "1218": "def binary_search(arr,target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high: \n    mid = (low + high) \/\/ 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nindex = binary_search(arr, target)\nif index != -1: \n    print(\"Element is present at index\", index)\nelse: \n    print(\"Element is not present in the array\")",
        "1219": "def calculateSum(a, b): \n    return int((b - a + 1) * (a + b) \/ 2)",
        "1220": "import random\nimport time\n\n# Create classes\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.hp = 100\n        self.position = [0, 0]\n\nclass Enemy:\n    def __init__(self, name):\n        self.name = name\n        self.hp = random.randint(50, 100)\n\n# Initialize globals\nplayer = Player(input(\"What is your name? \"))\nenemies = []\ndone = False\n\n# Game loop\nwhile not done:\n    print(\"You are in room ({}, {})\".format(player.position[0], \n                                            player.position[1]))\n    print(\"1. Move\")\n    print(\"2. Check HP\")\n    print(\"3. Exit Game\")\n    action = int(input(\"What do you want to do? \"))\n\nif action == 1:\n    # Movement\n    x = int(input(\"Move how many units on the x-axis? \"))\n    y = int(input(\"Move how many units on the y-axis? \"))\n    player.position[0] += x\n    player.position[1] += y\n\nelif action == 2:\n    # Check HP\n    print(\"Your HP is {}\".format(player.hp))\n\nelif action == 3:\n    # Exit Game \n    done = True\n\n# Generate enemies randomly\nif random.random() < 0.1:\n    enemies.append(Enemy(\"Rat\"))\n    print(\"An enemy appeared!\")\n\n# Combat\nfor enemy in enemies:\n    print(\"A {} approaches!\".format(enemy.name))\n    print(\"What do you do? 1. Fight 2. Flee\")\n    action = int(input(\">\"))\n\n    if action == 1:\n        fight(player, enemy)",
        "1221": "def filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered",
        "1222": "sentence = \"This is a sample sentence.\"\noutput = sentence.upper()\nprint(output)",
        "1223": "def prefix_sum(arr):\nresult = []\ns = 0\nfor x in arr:\n    s += x\n    result.append(s)\nreturn result\n\narr = [1, 2, 3, 4]\nprefix_sum(arr)",
        "1224": "def countElements(Array): \n    count = 0\n    for i in Array: \n        if i != -1: \n            count = count + 1\n        else: \n            break\n    return count",
        "1225": "import tkinter as tk\nfrom tkinter import filedialog, Text, Menu\n\n# root window configuration\nroot = tk.Tk()\nroot.title(\"Code Editor\")\n\n# text area where code is written\ntextArea = Text(root, relief=\"sunken\")\ntextArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = \"nsew\")\n\n# sets the scrollbar x y\nscrollbar = tk.Scrollbar(textArea)\ntextArea.configure(xscrollcommand=scrollbar.set)\nscrollbar.config(command=textArea.yview)\nscrollbar.grid(row=0, column=3, sticky='nsew')\n\n# open file\ndef open_file():\n    global filename\n    filename = filedialog.askopenfilename(defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    if filename == \"\":\n        filename = None\n    else:\n        root.title(f\"Code Editor - {filename}\")\n        textArea.delete(1.0, tk.END)\n        f = open(filename, \"r\")\n        textArea.insert(1.0, f.read())\n        f.close()\n\n# save file\ndef save_file():\n    if filename == None:\n        save_as()\n    else:\n        f = open(filename, \"w\")\n        f.write(textArea.get(1.0, tk.END))\n        f.close()\n\n# save as file\ndef save_as():\n    global filename\n    filename = filedialog.asksaveasfilename(initialfile=\"Untitled.txt\", defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    f = open(filename, \"w\")\n    f.write(textArea.get(1.0, tk.END))\n    f.close()\n\n# creating the statusbar\nstatusBar = tk.Label(root, text=\"Status Bar\")\nstatusBar.grid(row=1, column=0, columnspan=3, sticky=\"ew\")\n\n# creating the menubar\nmenubar = Menu(root)\nroot.config(menu=menubar)\n\n# creating the options for the file menu\nfileMenu = Menu(menubar)\nmenubar.add_cascade(label=\"File\", menu=fileMenu)\nfileMenu.add_command(label=\"Open\", command=open_file)\nfileMenu.add_command(label=\"Save\", command=save_file)\nfileMenu.add_command(label=\"Save As\", command=save_as)\n\n# coding syntax highlighting\ntextArea.configure(bg=\"grey\", fg=\"white\")\n\n# loop to run application\nroot.mainloop()",
        "1226": "import sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "1227": "import pandas as pd\n\n# Load the data\ndata = pd.read_csv('.\/dataset.csv')\n\n# Get the text and the labels\ntexts = data['text'].values\nlabels = data['label'].values\n\n# Generate a dictionary of all the words in the dataset\nwords = set()\nfor text in texts:\n for word in text.split():\n words.add(word)\n\n# Create a dictionary of word counts\nword_counts = {}\nfor word in words:\n word_counts[word] = 0\n\n# Count the number of times each word appears in each sentiment label\nfor i in range(len(texts)):\n for word in texts[i].split():\n if labels[i] == 0:\n word_counts[word] -= 1\n else:\n word_counts[word] += 1\n\n# Print out the words with the highest sentiment polarity\nsorted_words = sorted(word_counts.items(), key=lambda x: x[1])\n\nfor word, count in sorted_words[:10]:\n print(f'{word}: {count}')",
        "1228": "class Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, func=None):\n        if func:\n            self.execute = func\n\n    def execute(self):\n        \"\"\"The default method that prints 'Hello world!'\"\"\"\n        print(\"Hello world!\")\n\n# Replace by other strategies\ndef execute_replacement1():\n    print(\"Hola mundo!\")\n\ndef execute_replacement2():\n    print(\"Mere saath kaam kar!\")\n\n# Instantiate the strategy\ns1 = Strategy()\n# Execute the strategy\ns1.execute()\n\n# Create replacement strategy 1\ns2 = Strategy(execute_replacement1)\n# Execute the strategy\ns2.execute()\n\n# Create replacement strategy 2\ns3 = Strategy(execute_replacement2)\n# Execute the strategy\ns3.execute()",
        "1229": "#!env\/python3\n# coding: utf-8\ntry:\n    import ipdb\nexcept ImportError:\n    pass\n\n\nimport os\nimport shutil\nimport json\nimport zipfile\nimport datetime\nimport time\nimport uuid\nimport subprocess\nimport requests\n\n\n\nfrom config import *\nfrom core.framework.common import *\nfrom core.framework.postgresql import execute\nfrom core.model import *\n\n\n\n\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n# PIPELINE MANAGER\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \nclass PipelineManager:\n    def __init__(self):\n        pass\n\n\n    def list(self):\n        \"\"\"\n            List all pipelines with minimum of data\n        \"\"\"\n        sql = \"SELECT id, name, type, status, description, version, image_file_id, starred, installation_date, manifest, documents FROM pipeline ORDER BY id\"\n        result = []\n        for res in execute(sql): \n            result.append({\n                \"id\": res.id,\n                \"name\": res.name,\n                \"description\": res.description,\n                \"type\": res.type,\n                \"status\": res.status,\n                \"version\": res.version,\n                \"image_file_id\": res.image_file_id,\n                \"starred\": res.starred,\n                \"installation_date\": res.installation_date.isoformat(),\n                \"manifest\": res.manifest,\n                \"documents\": res.documents\n            })\n        return result\n\n    def get(self, fields=None, query=None, order=None, offset=None, limit=None, depth=0):\n        \"\"\"\n            Generic method to get pipelines according provided filtering options\n        \"\"\"\n        if not isinstance(fields, dict):\n            fields = None\n        if query is None:\n            query = {}\n        if order is None:\n            order = \"name, installation_date desc\"\n        if offset is None:\n            offset = 0\n        if limit is None:\n            limit = RANGE_MAX\n        pipes = Session().query(Pipeline).filter_by(**query).order_by(order).limit(limit).offset(offset).all()\n        for p in pipes: p.init(depth)\n        return pipes\n\n\n\n    def install_init (self, name, metadata={}):\n        pipe = Pipeline.new()\n        pipe.name = name\n        pipe.status = \"initializing\"\n        pipe.save()\n\n        if metadata and len(metadata) > 0:\n            pipe.load(metadata)\n        log('core.PipeManager.register : New pipe registered with the id {}'.format(pipe.id))\n        return pipe\n\n\n\n    def install_init_image_upload(self, filepath, file_size, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be uploaded on the server.\n            Create an entry for the pipeline and the file (image that will be uploaded) in the database.\n            Return the Pipeline and the File objects created\n\n            This method shall be used to init a resumable upload of a pipeline \n            (the pipeline\/image are not yet installed and available, but we need to manipulate them)\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.upload_init(filepath, file_size)\n        pipe = self.install_init(filepath, pipe_metadata)\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe, pfile\n\n\n\n    async def install_init_image_url(self, url, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved via an url.\n            Create an entry for the pipeline and the file (image) in the database.\n            Async method as the download start immediatly, followed by the installation when it's done\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        raise NotImplementedError(\"TODO\")\n\n\n\n    def install_init_image_local(self, filepath, move=False, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved on the local server.\n            Create an entry for the pipeline and the file (image) in the database.\n            Copy the local file into dedicated directory and start the installation of the Pipeline\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.from_local(filepath, move)\n        pipe = self.install_init(os.path.basename(filepath), pipe_metadata)\n\n        # FIXME: Sometime getting sqlalchemy error 'is not bound to a Session' \n        # why it occure here ... why sometime :\/ \n        check_session(pfile)\n        check_session(pipe)\n\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe\n\n\n    def install_init_image(self, file_id, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have already been uploaded the local server via the regovar file api.\n            Create an entry for the pipeline in the database.\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = File.from_id(file_id)\n        if pfile:\n            pipe = self.install_init(os.path.basename(pfile.path), pipe_metadata)\n            pipe.image_file_id = file_id\n            pipe.save()\n            return pipe\n        return None\n    \n\n\n    def check_manifest(self, manifest):\n        \"\"\"\n            Check that manifest (json) is valid and return the full version completed \n            with default values if needed\n        \"\"\"\n        missing = \"\"\n        for k in [\"name\", \"version\"]:\n            if k not in manifest.keys():\n                missing += k + \", \"                \n        if missing != \"\":\n            missing = missing[:-2]\n            raise RegovarException(\"FAILLED Checking validity of manifest (missing : {})\".format(missing))\n\n        # 2- Default value for optional fields in mandatory file\n        default = {\n            \"description\": \"\",\n            \"type\": \"job\",\n            \"contacts\": [],\n            \"regovar_db_access\": False,\n            \"inputs\": \"\/pipeline\/inputs\",\n            \"outputs\": \"\/pipeline\/outputs\",\n            \"databases\": \"\/pipeline\/databases\",\n            \"logs\": \"\/pipeline\/logs\"\n        }\n        for k in default.keys():\n            if k not in manifest.keys():\n                manifest[k] = default[k]\n\n        # 3- check type\n        if manifest[\"type\"] not in [\"job\", \"importer\", \"exporter\", \"reporter\"]:\n            raise RegovarException(\"FAILLED Checking validity of manifest (type '{}' not supported)\".format(manifest[\"type\"]))\n\n\n        log('Validity of manifest checked')\n        return manifest\n\n\n\n    def install(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the installation of the pipeline. (done in another thread)\n            The initialization shall be done (image ready to be used)\n        \"\"\"\n        from core.core import core\n\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if not pipeline : \n            raise RegovarException(\"Pipeline not found (id={}).\".format(pipeline_id))\n        if pipeline.status != \"initializing\":\n            raise RegovarException(\"Pipeline status ({}) is not \\\"initializing\\\". Cannot perform another installation.\".format(pipeline.status))\n        if pipeline.image_file and pipeline.image_file.status not in [\"uploaded\", \"checked\"]:\n            raise RegovarException(\"Wrong pipeline image (status={}).\".format(pipeline.image_file.status))\n\n        if not pipeline.image_file or pipeline.image_file.status in [\"uploaded\", \"checked\"]:\n            if asynch:\n                run_async(self.__install, pipeline)\n            else:\n                pipeline = self.__install(pipeline)\n\n        return pipeline\n\n\n    def __install(self, pipeline):\n        from core.core import core\n        # Dezip pirus package in the pirus pipeline directory\n        root_path = os.path.join(PIPELINES_DIR, str(pipeline.id))\n        log('Installation of the pipeline package : ' + root_path)\n        os.makedirs(root_path)\n        os.chmod(pipeline.image_file.path, 0o777)\n\n        # TODO: Check zip integrity and security before extracting it\n        #       see python zipfile official doc\n        with zipfile.ZipFile(pipeline.image_file.path,\"r\") as zip_ref:\n            zip_ref.extractall(root_path)\n\n            # check package tree\n            # find root folder\n            files = [i.filename for i in zip_ref.infolist()]\n            for f in files:\n                if f.endswith(\"manifest.json\"): break\n            zip_root = os.path.dirname(f)\n            # remove intermediate folder\n            if zip_root != \"\":\n                zip_root = os.path.join(root_path, zip_root)\n                for filename in os.listdir(zip_root):\n                    shutil.move(os.path.join(zip_root, filename), os.path.join(root_path, filename))\n                os.rmdir(zip_root)\n\n        # Load manifest\n        try:\n            log(os.path.join(root_path, \"manifest.json\"))\n            with open(os.path.join(root_path, \"manifest.json\"), \"r\") as f:\n                data = f.read()\n                log(data)\n                # Fix common parsing problem regarding json syntaxe\n                data = data.replace(\"False\", \"false\")\n                data = data.replace(\"True\", \"true\")\n                manifest = json.loads(data)\n                manifest = self.check_manifest(manifest)\n                pipeline.developpers = manifest.pop(\"contacts\")\n                pipeline.manifest = manifest \n\n                # list documents available\n                pipeline.documents = {\n                    \"about\": os.path.join(root_path, \"doc\/about.html\"),\n                    \"help\": os.path.join(root_path, \"doc\/help.html\"),\n                    \"icon\": os.path.join(root_path, \"doc\/icon.png\"),\n                    \"icon2\": os.path.join(root_path, \"doc\/icon.jpg\"),\n                    \"form\": os.path.join(root_path, \"form.json\"),\n                    \"license\":os.path.join(root_path, \"LICENSE\"),\n                    \"readme\": os.path.join(root_path, \"README\")\n                }\n                for k in pipeline.documents.keys():\n                    if not os.path.exists(pipeline.documents[k]):\n                        pipeline.documents[k] = None\n                p = pipeline.documents.pop(\"icon2\")\n                if not pipeline.documents[\"icon\"]:\n                    pipeline.documents[\"icon\"] = p\n                pipeline.load(manifest)\n                pipeline.save()\n        except Exception as ex:\n            pipeline.status = \"error\"\n            pipeline.save()\n            raise RegovarException(\"Unable to open and read manifest.json. The pipeline package is wrong or corrupt.\", exception=ex)\n        \n        # Update and save pipeline status\n        pipeline.type = manifest[\"type\"]\n        pipeline.installation_date = datetime.datetime.now()\n        pipeline.status = \"installing\"\n        pipeline.save()\n        \n        # Install pipeline\n        result = core.container_manager.install_pipeline(pipeline)\n        return result\n\n\n\n\n    def delete(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the uninstallation of the pipeline. (done in another thread)\n            Remove image file if exists.\n        \"\"\"\n        from core.core import core\n\n        result = None\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if pipeline:\n            result = pipeline.to_json()\n            # Clean container\n            try:\n                if asynch: \n                    run_async(self.__delete, pipeline) \n                else: \n                    self.__delete(pipeline)\n            except Exception as ex:\n                war(\"core.PipelineManager.delete : Container manager failed to delete the container with id {}.\".format(pipeline.id))\n            try:\n                # Clean filesystem\n                shutil.rmtree(pipeline.path, True)\n                # Clean DB\n                core.files.delete(pipeline.image_file_id)\n                Pipeline.delete(pipeline.id)\n            except Exception as ex:\n                raise RegovarException(\"core.PipelineManager.delete : Unable to delete the pipeline's pirus data for the pipeline {}.\".format(pipeline.id), ex)\n        return result\n\n\n    def __delete(self, pipeline):\n        from core.core import core\n        \n        try:\n            core.container_manager.uninstall_pipeline(pipeline)\n        except Exception as ex:\n            raise RegovarException(\"Error occured during uninstallation of the pipeline. Uninstallation aborded.\", ex)\n \n",
        "1230": "import csv\n\ndef csv_to_dict(filename):\n with open(filename) as csv_file:\n reader = csv.DictReader(csv_file)\n csv_dict = {}\n for row in reader:\n csv_dict[row['Date']] = row['Product']\n return csv_dict",
        "1231": "def format_address(address):\n    address_items = address.split(',')\n    street = address_items[0]\n    city_state = address_items[1].split()\n    city = city_state[0]\n    state = city_state[1]\n    formatted_address = street + ', ' + city + ', ' + state\n\n    return formatted_address\n\naddress = '60 Fifth Avenue, New York'\nformatted_address = format_address(address)\nprint(formatted_address)",
        "1232": "import re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str)",
        "1233": "\"\"\"\nGenerate a sentence based on the input text\n\"\"\"\n\nimport random\n\n#get the user input\nuser_input = \"The quick brown fox jumps over the lazy dog.\"\n\n#split the string into a list of words\nword_list = user_input.split()\n\n#shuffle the list\nrandom.shuffle(word_list)\n\n#convert the list back to a string\ngenerated_sentence = ' '.join(word_list)\n\n#print the generated sentence\nprint(generated_sentence)",
        "1234": "L = [1, 2, 2, 3, 4, 4] \n\nL = list(set(L)) \n\nprint(L)",
        "1235": "def search(value, list):\n    for i in range(len(list)):\n        if list[i] == value:\n            return i\n    return -1\n\nvalue= 'apple'\nlist = ['bannanas', 'oranges', 'apple']\nprint(search(value, list))",
        "1236": "import string\nimport random\n\ndef get_unique_string():\n    characters = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\nunique_string = get_unique_string()\nprint(unique_string)",
        "1237": "class Customer:\n    def __init__(self, first_name, last_name, email):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n\ncustomer = Customer(\"John\", \"Smith\", \"john.smith@example.com\")",
        "1238": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary",
        "1239": "import string \nimport random \n\ndef generate_password(length):\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_chars) for _ in range(length))\n    if (any(c.islower() for c in password)\n        and any(c.isupper() for c in password)\n        and any(c.isdigit() for c in password)\n        and any(c in string.punctuation for c in password)):\n       return password\n    else:\n       return generate_password(length)\n  \n# Create random passwords with length 10 \nx = generate_password(10) \nprint ('Random Password :', x)",
        "1240": "def get_domain_name(url): \n    return url.split(\"\/\")[2]\n\nprint(get_domain_name(\"https:\/\/www.google.com\"))  # prints www.google.com",
        "1241": "def generate_prime_numbers(lower, upper):\n  prime_numbers = []\n  for num in range(lower, upper + 1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        prime_numbers.append(num)\n  return prime_numbers",
        "1242": "for i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2))",
        "1243": "class Computer: \n    def __init__(self, name): \n        self.name = name \n\n    def calculate(self): \n        pass\n\n# Let's create a class to add two numbers\nclass Add(Computer): \n    def calculate(self, x, y): \n        return x + y\n\n# Let's create a class to multiply two numbers\nclass Multiply(Computer): \n    def calculate(self, x, y): \n        return x * y\n\n# Client code to use the classes above \nclass Client(Computer): \n    # Utility method to calculate sum \n    def sum(self, a, b): \n        s = Add(self.name)\n        m = Multiply(self.name)\n        total = s.calculate(a, b) + m.calculate(a, b) \n        print(\"Result of sum and multiply\", total)\n        return total \n\n# Create a client object\nc = Client(\"Comp\")\nc.sum(2, 6)  # Result of sum and multiply 14",
        "1244": "def is_prime(n):\n if n == 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n\n# Print out prime numbers from 1 to 100\nlimit = 100\n\nfor i in range(1, limit+1):\n if is_prime(i):\n print(i)",
        "1245": "import http.server\n\nclass myHandler(http.server.BaseHTTPRequestHandler):\n\tdef do_GET(self):\n\t\tif self.path == '\/page1':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 1\")\n\t\telif self.path == '\/page2':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 2\")\n\t\telse:\n\t\t\tself.send_error(404)\n\nhttpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler)\nhttpd.serve_forever()",
        "1246": "import random\nimport string\n\ndef randomString(stringLength=8):\n lettersAndDigits = string.ascii_letters + string.digits\n return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint(randomString()) \/\/ output '7Oti2cgn'",
        "1247": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "1248": "# define a function \ndef getIntersectionPoint(line1, line2): \n    # line1 (slope and intercept) \n    l1_m = line1[0]\n    l1_c = line1[1]\n  \n    # line2 (slope and intercept) \n    l2_m = line2[0]\n    l2_c = line2[1]\n    \n    x = (l2_c - l1_c) \/ (l1_m - l2_m)\n    y = l1_m * x + l1_c\n    return (x, y) \n  \n# given two lines\nline1 = (3, 5) \nline2 = (7, 9)\n  \n# calculate intersection point\nintersection_point = getIntersectionPoint(line1, line2)\n  \n# print the point\nprint(\"Intersection point of lines is:\", intersection_point)",
        "1249": "import json\n\ndata_string = '{\"FirstName\": \"John\", \"LastName\": \"Smith\"}'\ndata = json.loads(data_string)\n\nfor key, value in data.items(): \n    print(\"{} = {}\".format(key, value))",
        "1250": "temperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)\/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius)",
        "1251": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())",
        "1252": "import xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2']",
        "1253": "class Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width",
        "1254": "for customer in customers:\n  print(f\"Name: {customer['name']}, Age: {customer['age']}\")",
        "1255": "class HelloWorld:\n    def __init__(self):\n        print(\u201cHello World\u201d)",
        "1256": "def fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))",
        "1257": "#!\/usr\/bin\/env python\n\ntext1 = \"He went to the store\"\ntext2 = \"She visited the store\"\n\nedited_text = text1[:2] + text2[2:]\n\nprint edited_text",
        "1258": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \u201chttps:\/\/www.example.com\/reviews\u201d\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \u201chtml.parser\u201d)\n\ntitles = []\nsummaries = []\n\nfor review in soup.find_all(\u2018div\u2019, {\u2018class\u2019: \u2018review\u2019}):\n titles.append(review.find(\u2018h3\u2019).text)\n summaries.append(review.find(\u2018p\u2019).text)",
        "1259": "String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill().",
        "1260": "# Libraries\nimport requests\nimport json\n\n# Get user input\nuser_input = input('Please enter your query: ')\n\n# Process user input\nif 'weather' in user_input:\n # Get weather data\n city = user_input.split()[-1] # extract city from user query \n r = requests.get(f'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&appid=YOUR_API_KEY')\n data = json.loads(r.text) \n\n# Output response\n if data['cod'] == '404':\n print('City not found!')\n else:\n print(f'The temperature in {city} is: {data[\"main\"][\"temp\"]} \u00b0C')\n\nelif 'population' in user_input:\n # Get population data\n country = user_input.split()[-1] # extract country from user query\n r = requests.get(f'https:\/\/restcountries.eu\/rest\/v2\/name\/{country}')\n data = json.loads(r.text)[0] # extract population from API response\n\n# Output response\n print(f'The population of {country} is: {data[\"population\"]}')\n\nelse:\n print(\"I'm sorry, I don't understand.\")",
        "1261": "import stripe\n\nstripe.api_key = 'sk_test_YOUR_KEY'\n\ndef process_payment(card_info):\n    # validate the credit card information\n    if not stripe.Token.create(\n        card={\n            'number': card_info['number'],\n            'exp_month': card_info['exp_month'],\n            'exp_year': card_info['exp_year'],\n            'cvc': card_info['cvc'],\n        },\n    ):\n        return False\n\n    # create and process the charge:\n    stripe.Charge.create(\n        amount=card_info['amount'],\n        currency='usd',\n        source=card_info['token'],\n        description='Example charge',\n    )\n\n    return True",
        "1262": "def sum_squares(x, y):\n    return x**2 + y**2\n\nx = 2\ny = 4\ns = sum_squares(x, y)\nprint(\"The sum of two squares is {}\".format(s))",
        "1263": "def fibonacci_sequence(n):\n a, b = 0, 1\n for i in range(n):\n a, b = b, a + b\n return a",
        "1264": "import nltk \nfrom nltk.metrics import edit_distance \n\ndef levenshtein_similarity(string1, string2):\n    edit_dist = edit_distance(string1, string2)\n    similarity = 1-(edit_dist\/max(len(string1), len(string2)))\n    return similarity\n\ndef detect_plagiarism(s1, s2):\n    similarity_score = levenshtein_similarity(s1, s2)\n    if  similarity_score > 0.75: \n        return \"The texts have high similarity\"\n    elif  similarity_score > 0.5:\n        return \"The texts have moderate similarity\"\n    else:\n        return \"The texts have low similarity\"",
        "1265": "\"\"\"\nRecognize handwritten digits using OpenCV library\n\"\"\"\nimport cv2\nimport numpy as np\n\n# Load the model\nmodel = cv2.ml.SVM_load('svm_model.xml')\n\n# Read the input image\nimg = cv2.imread('input.png')\n\n# Convert to grayscale and apply Gaussian filtering\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nimg_gray = cv2.GaussianBlur(img_gray, (5,5), 0)\n\n# Threshold the image\nret, img_thresh = cv2.threshold(img_gray, 90, 255, cv2.THRESH_BINARY_INV)\n\n# Find contours\n_, ctrs, _ = cv2.findContours(img_thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# Get rectangles contains each contour\nrects = [cv2.boundingRect(ctr) for ctr in ctrs]\n\n# For each rectangular region, calculate HOG features and predict\n# the digit using Linear SVM.\nfor rect in rects:\n    # Draw the rectangles\n    #cv2.rectangle(img, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 3) \n    # Make the rectangular region around the digit\n    leng = int(rect[3] * 1.6)\n    pt1 = int(rect[1] + rect[3] \/\/ 2 - leng \/\/ 2)\n    pt2 = int(rect[0] + rect[2] \/\/ 2 - leng \/\/ 2)\n    roi = img_thresh[pt1:pt1+leng, pt2:pt2+leng]\n    # Resize the image\n    roi = cv2.resize(roi, (64, 64), interpolation=cv2.INTER_AREA)\n    roi = cv2.dilate(roi, (3, 3))\n    # Calculate the HOG features\n    roi_hog_fd = hog(roi, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), visualize=False)\n    roi_hog_fd = np.asarray(roi_hog_fd, dtype=np.float32)\n    # Predict the digit using Linear SVM\n    nbr = model.predict(roi_hog_fd)\n    #cv2.putText(img, str(int(nbr[0][0])), (rect[0], rect[1]),cv2.FONT_HERSHEY_DUPLEX, 2, (0, 255, 255), 3)\n    print(int(nbr[0][0]))",
        "1266": "class SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2",
        "1267": "def trace_function(F):\n    def wrapper(*args, **kwargs):\n        print(F.__name__ + str(args) + str(kwargs))\n        value = F(*args, **kwargs)\n        print(F.__name__ + \" returns \" + str(value))\n        return value\n    return wrapper",
        "1268": "# Import the needed libraries\nfrom pymongo import MongoClient\n\n# Connect to the MongoDB client\nclient = MongoClient('localhost:27017')\n\n# Create an instance of a MongoDB database\ndb = client['customer_database']\n\n# Create the customers collection\ncustomers = db.create_collection('customers')\n\n# Add the needed fields\ncustomers.create_index([(\"Name\", 1)], unique=True)\ncustomers.create_index([(\"Phone Number\", 1)], unique=True)\ncustomers.create_index([(\"Email\", 1)], unique=True)\ncustomers.create_index([(\"Address\", 1)], unique=True)",
        "1269": "def base64_encode(string):\n    encoded_string = base64.b64encode(string.encode('utf-8')) \n    return encoded_string.decode('utf-8')",
        "1270": "def print_common_elements(list1, list2):\n    result = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            i += 1\n        elif list2[j] < list1[i]: \n            j += 1\n        else: \n            result.append(list1[i])\n            i += 1\n            j += 1\n      \n    for i in range(len(result)):\n        print(result[i],end=\" \")",
        "1271": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Train the classifier\nfeatures = ['location', 'size', 'bedrooms', 'bathrooms', 'price']\nX = data[features]\ny = data['label']\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\nprint(predictions)",
        "1272": "\"\"\"\nProviding a Python program that resizes an array of integers in place\n\"\"\"\ndef resize_array(arr, new_size):\n    # base case\n    if len(arr) == new_size:\n        return\n\n    # add elements to increase the size\n    if len(arr) < new_size:\n        for _ in range(new_size - len(arr)):\n            arr.append(0)\n\n    # delete elements to decrease the size    \n    elif len(arr) > new_size:\n        for _ in range(len(arr) - new_size):\n            arr.remove(arr[-1])\n\nif __name__ == '__main__':\n    arr = [10, 20, 30, 40]\n    new_size = 6\n    resize_array(arr, new_size)\n    print(arr)",
        "1273": "arr = [3, 6, 3, 2, 7, 5, 6]\n\ndef unique_elements(arr):\n  return list(set(arr))\n\nunique_arr = unique_elements(arr)\nprint(unique_arr)",
        "1274": "def splitOnWhitespace(inputString):\n\twords = inputString.split()\n\treturn words\n\nstringToBeSplit = \"Python is an interpreted language.\"\nwords = splitOnWhitespace(stringToBeSplit)\nprint(words) \/\/ Output: ['Python', 'is', 'an', 'interpreted', 'language.']",
        "1275": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom tensorflow.keras.utils import to_categorical\n\n# Load the dataset\nX = np.load('fruits-images.npy')\ny = np.load('fruits-labels.npy')\ny = to_categorical(y)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(100,100,3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\n\n# Compile and fit\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs=15, batch_size=32, validation_data=(X_test, y_test))\n\n# Plot the accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()",
        "1276": "import nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other",
        "1277": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))",
        "1278": "numbers = []\nwhile True:\n    userInput = input(\"Enter a number: \") \n    if userInput == 'done':\n        break\n    try:\n        userInput = int(userInput)\n        numbers.append(userInput)\n    except ValueError:\n        print(\"Invalid input, please enter a valid number\")\n\nprint(\"Sum of entered numbers : \" + str(sum(numbers)))",
        "1279": "def area_trapezoid(base1, base2, height):\n return (base1 + base2) * (height \/ 2)\n \nprint(area_trapezoid(2, 4, 3)) # Output: 9.0",
        "1280": "print(\"Hello World!\")",
        "1281": "import random\n\nnames = [\"John\", \"Mary\", \"Paul\", \"Gerry\"]\n\nprint(\"The randomly chosen name is\", random.choice(names))",
        "1282": "import pandas as pd\n\n# Read data\ndata = {'Country': ['USA', 'China', 'France'], \n        'Population': [330000000, 1400000000, 67000000], \n        'Area': [3796000, 9596961, 640679], \n        'GDP': [21427000,14140163,2777000]}\ndf = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP'])\n\n# Filter for rows with a population higher than 500 million\nlarge_countries = df[df['Population'] > 500000000]\nprint(large_countries)",
        "1283": "def largestNumber(list): \n    maximum = list[0] \n      \n    for num in list: \n        if num > maximum: \n            maximum = num \n    return maximum \n  \nlist = [4, 8, 2, 6, 9] \nlargestNumber = largestNumber(list) \n  \nprint(\"Largest number in the given list is:\", largestNumber)",
        "1284": "def linear_search(x, n):\n    found = False\n    for i in range(len(x)):\n        if x[i] == n:\n            found = True\n            break\n\n    if found == True:\n        print('Element', n, 'found at position', i)\n    else:\n        print('Element', n, 'not found')\n\nx = [1, 5, 8, 3]\nn = 8\n\nlinear_search(x, n)",
        "1285": "my_list = [value * 2 for value in range(10)]",
        "1286": "def binary_search(array, target):\n  left = 0\n  right = len(array) - 1\n  while left <= right:\n      middle = (left + right)\/\/2\n      if array[middle] < target:    \n          left = middle + 1\n      elif array[middle] > target:  \n          right = middle - 1\n      else:                         \n          return middle             \n  return -1                        \n\nposition = binary_search(array, number) \nif position == -1:\n  print(\"Number not found in array.\")\nelse:\n  print(f\"{number} found at position {position}\")",
        "1287": "def main():\n try:\n counter = 0\n while True:\n print(counter)\n counter += 1\n time.sleep(1)\n \n except KeyboardInterrupt:\n print('Goodbye!') \n sys.exit()",
        "1288": "pattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\"",
        "1289": "import json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nproducts = [\n {\n  \"name\": \"book\",\n  \"price\": 15\n }, \n {\n  \"name\": \"pen\",\n  \"price\": 5\n }, \n {\n  \"name\": \"tablet\",\n  \"price\": 200\n }, \n {\n  \"name\": \"chair\",\n  \"price\": 80\n }\n]\n\n@app.route(\"\/top_three_products\", methods=[\"GET\"])\ndef get_top_three_products():\n   # Sort the list of products by price in descending order\n   sorted_products = sorted(products, key=lambda product: -product['price'])\n   # Return only the top 3 products\n   highest_priced_products = sorted_products[:3]\n   return jsonify(highest_priced_products)\n\nif __name__ == \"__main__\":\n    app.run()",
        "1290": "import numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1\/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation)",
        "1291": "def caesar_cipher_encode(input_string, cipher):\n    output = ''\n    for c in input_string:\n        ascii_val = ord(c)\n        if (ascii_val > 64 and ascii_val < 91) or (ascii_val > 96 and ascii_val < 123):\n            new_ascii_val = ascii_val + cipher\n            if (ascii_val > 64 and ascii_val < 91 and new_ascii_val > 90) or (ascii_val > 96 and ascii_val < 123 and new_ascii_val > 122):\n                new_ascii_val = ascii_val - 26 + cipher\n            output += chr(new_ascii_val)\n        else:\n            output += c\n    return output",
        "1292": "#Python program to print \"Hello World!\"\n\nprint(\"Hello, World!\")",
        "1293": "import random\n\nfor i in range(10):\n    print(random.randint(1,100))",
        "1294": "class Bill:\n    def __init__(self, items):\n        self.items = items\n        self.total_cost = 0.0\n\n    def calculate_total_cost(self):\n        for item in self.items:\n            self.total_cost += item['price']\n        return self.total_cost\n\n# Create an object of Bill\nrestaurant_bill = Bill([{'item': 'burger', 'price': 10.99}, {'item': 'fries', 'price': 2.49}])\nprint(restaurant_bill.calculate_total_cost())",
        "1295": "words_dict = {}\nfor word in words:\n    if word in words_dict:\n        words_dict[word] += 1\n    else:\n        words_dict[word] = 1\n\nprint(words_dict)\n\n# Output\n# {'a': 3, 'b': 2, 'c': 1, 'd': 1}",
        "1296": "def sumOfSquares(a, b, c):\n     return a*a + b*b + c*c",
        "1297": "\"sentence. a is This\"",
        "1298": "import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Creating pandas dataframe to hold the animal data\nanimals_df = pd.DataFrame({'Animal': Animals})\n\n# Create target variable Mammal, Bird and Fish\nmammals = ['dog', 'cat', 'elephant']\nbirds = ['owl']\nfishes = ['tuna', 'salmon']\n\nanimals_df['Mammal'] = animals_df.Animal.apply(lambda x: 1 if x in mammals else 0)\nanimals_df['Bird'] = animals_df.Animal.apply(lambda x: 1 if x in birds else 0)\nanimals_df['Fish'] = animals_df.Animal.apply(lambda x: 1 if x in fishes else 0)\n\n\n# Create the target variable using the code labels\nanimals_df['target'] = animals_df.Mammal.astype(str) + '_' + animals_df.Bird.astype(str) + '_' + animals_df.Fish.astype(str)\n\n#drop unwanted columns\nanimals_df.drop(columns = ['Mammal', 'Bird', 'Fish'], inplace=True)\n\n# Create decision tree classifier object\nclf = DecisionTreeClassifier()\n\n# Train the model using the data\nclf.fit(animals_df[['Animal']], animals_df['target'])",
        "1299": "def movie_recommender_system(user):\n    \"\"\"\n    This function uses a collaborative filtering algorithm \n    to suggest movies to the given user\n    \"\"\"\n    # Get the list of rated movies by the user\n    user_movies = user.get_rated_movies()\n\n    # Get the list of ratings given by other users\n    user_ratings = user.get_ratings()\n\n    # Calculate the similarity between the user and other users\n    user_similarity = user.calculate_similarity(user_movies, user_ratings)\n\n    # Get the list of movies rated highly by other users\n    other_rated_movies = user.get_top_rated_movies(user_ratings) \n\n    # Find the movies which the user has not seen so far, but recommended by other users\n    unseen_movies = [m for m in other_rated_movies if m not in user_movies]\n    \n    # Sort the movies based on their similarity and the ratings given by other users\n    sorted_movies = sorted(unseen_movies, \n                            key=lambda m: user_similarity[m] * user_ratings[m], \n                            reverse=True)\n    \n    # Get the top 10 movies\n    top_movies = sorted_movies[:10]\n\n    return top_movies",
        "1300": "def sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)",
        "1301": "max_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length)",
        "1302": "\nimport os\nimport json\nfrom dateutil.parser import parse\n\nimport plotly\nfrom plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure\n\n\n__version__ = '0.0.1'\n\n\ndef is_numeric(x):\n    \n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_date(d):\n    \n    try:\n        parse(d)\n        return True\n    except ValueError, AttributeError:\n        return False\n\n\ndef is_string(x):\n    return is_numeric(x) + is_date(x) == 0\n\n\ndef format_data(data):\n    \n    data = json.loads(''.join(data))\n    \n    keys = data[0].keys()\n    \n    # Check column type\n    sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ]\n    \n    values = [ [ d.get(key) for key in keys ] for d in data ]\n    values = zip(*values)\n    \n    if len(sidx) == 1:\n        text = values.pop(sidx[0])\n        keys.pop(sidx[0])\n    else:\n        text = None\n    \n    return {\n        'layout': {\n            'axes': keys\n        },\n        'data': {\n            'values': values,\n            'text': text\n        }\n    }\n\n\ndef get_histogram(data):\n    \n    values = data['values']\n    return Data([\n        Histogram(\n            x=values\n        )\n    ])\n\n\ndef get_scatter2d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter(\n            x=values[0],\n            y=values[1],\n            mode='markers',\n            text=data['text']\n        )\n    ])\n\n\ndef get_scatter3d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter3d(\n            x=values[0],\n            y=values[1],\n            z=values[2]\n        )\n    ])\n\n\ndef post(filename, data, fileopt='new', title=None, world_readable=True):\n    \n    # Get username and api key\n    username = os.environ.get('PLOTLY_USERNAME')\n    api_key = os.environ.get('PLOTLY_API_KEY')\n    \n    plotly.tools.set_credentials_file(username=username, api_key=api_key)\n    \n    axes = data['layout']['axes']\n    \n    nAxes = len(axes)\n    \n    get_data = {\n        1: get_histogram,\n        2: get_scatter2d,\n        3: get_scatter3d\n    }\n    \n    axes_kwargs = ['xaxis', 'yaxis', 'zaxis']\n    axes_obj = [XAxis, YAxis, ZAxis]\n    \n    layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) }\n    dataobj = get_data[nAxes](data['data'])\n    layout = Layout(**layout_kwargs)\n    \n    fig = Figure(data=dataobj, layout=layout)\n    \n    r = plotly.plotly.plot(fig, filename=filename)\n    print r\n    ",
        "1303": "import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")",
        "1304": "Valid Python statement.",
        "1305": "Python is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification.",
        "1306": "import sys \n\ndef progress_bar(iteration, total, length=50, fill='\u2588'):\n    iteration = iteration + 1\n    percent = (\"{0:.1f}\").format(100 * (iteration \/ float(total)))\n    filledLength = int(length * iteration \/\/ total)\n    bar = fill * filledLength + '-' * (length - filledLength)\n    sys.stdout.write('\\r |{}| {}% {}'.format(bar,percent, \"Complete\"))\n    sys.stdout.flush()",
        "1307": "import sqlite3\n\n# Connect to the database\ncon = sqlite3.connect('customer_requests.db')\ncursor = con.cursor()\n\n# Create the customer table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\")\n\n# Create and run the chatbot\ndef chatbot():\n    print(\"Welcome to the chatbot! Enter 'exit' to quit.\\n\")\n    while True:\n        response = input(\"You: \")\n        if response == 'exit':\n            break\n        else:\n            print(\"Chatbot: Your request has been recorded.\\n\")\n            # Store the request in the database\n            con.execute(f\"INSERT INTO customer_requests(request) VALUES ('{response}')\")\n            con.commit()\n\nchatbot()",
        "1308": "def get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2]",
        "1309": "# Generate a list of prime numbers between 2 and 30\n\n# Generate a list of all numbers between 2 and 30\nnumbers = range(2, 31)\n\n# Loop over all numbers\nfor num in numbers:\n    prime_flag = True\n    # Check if the number is divisible by any other between 2 and itself\n    for i in range(2, num):\n        if (num % i == 0):\n            prime_flag = False\n            break\n \n    # If the number is not divisible by any other number, it is prime\n    if prime_flag:\n        print(num)",
        "1310": "def convert_number(number, from_base, to_base): \n    # convert number to base 10 \n    result = int(str(number), from_base) \n  \n    # convert base 10 to new base \n    res = \"\"\n    while result > 0:\n        res += str(result % to_base)\n        result \/\/= to_base\n    res = res[::-1] \n  \n    return res",
        "1311": "def flatten_list(arr):\n  result = []\n  for element in arr:\n    if type(element) == list:\n      result += flatten_list(element)\n    else:\n      result.append(element)\n  return result\n\narr = [[1,2,[3]],4]\n\nprint(flatten_list(arr)) # [1, 2, 3, 4]",
        "1312": "import requests\n\n# list of cities for which we want the weather forecast\ncities = [\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]\n\n# api key\napi_key = YOUR_API_KEY\n\n# base url for the weather api\nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID=\" + api_key\n\n# create an empty list to store weather data\nweather_data = []\n\n# loop through the cities and get the weather data\nfor city in cities:\n\t# make a request to the api\n\tr = requests.get(url.format(city)).json()\n\t# store the weather data in the list\n\tweather_data.append(r)\n\n# print the weather data\nprint(weather_data)",
        "1313": "def index_of(number, lst): \n    hi = len(lst) \n    lo = 0\n    index = -1\n\n    while hi > lo: \n        mid = (hi + lo)\/\/2\n        if lst[mid] < number: \n            lo = mid + 1\n        elif lst[mid] > number: \n            hi = mid \n        else: \n            index = mid \n            return index \n    return index",
        "1314": "class Book:\n    # Attributes\n    title = \"\"\n    author = \"\"\n    pages = 0\n\n    # Constructor\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n# Create a book object\nbook = Book(\"The Catcher in the Rye\", \"JD Salinger\", 277)",
        "1315": "import numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)",
        "1316": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age)",
        "1317": "# Python \nclass Node: \n  def __init__(self, data): \n    self.data = data \n    self.children = [] \n  \ndef buildTree(relationships): \n  tree = {} \n  for parent, child in relationships: \n    if parent not in tree: \n      tree[parent] = Node(parent) \n    parent_node = tree[parent] \n    if child not in tree: \n      tree[child] = Node(child) \n    child_node = tree[child] \n    parent_node.children.append(child_node) \n  return tree[1]",
        "1318": "def tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False",
        "1319": "import sqlite3\n\n# create database connection\nconn = sqlite3.connect('user_data.db')\nc = conn.cursor()\n\n# create database table\nc.execute('''CREATE TABLE users\n       (name TEXT, age INTEGER, city TEXT)''')\n\n# add user data\nc.execute(\"INSERT INTO users VALUES ('John', 24, 'New York')\")\nc.execute(\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\")\nc.execute(\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\")\n\n# save and close database connection\nconn.commit()\nconn.close()",
        "1320": "def primeFactors(n): \n      \n    factors = []\n    while n % 2 == 0: \n        factors.append(2) \n        n = n \/ 2\n  \n    for i in range(3, int(sqrt(n))+1, 2): \n          \n        while n % i== 0: \n            factors.append(i) \n            n = n \/ i \n          \n    if n > 2: \n        factors.append(n) \n  \n    return factors \n  \nn = 315\nprint(primeFactors(n))",
        "1321": "def number_to_words(num):\n  units = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n           \"eight\", \"nine\"]\n  teens = [\"\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n          \"seventy\", \"eighty\", \"ninety\"]\n  hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\",\n              \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\",\n              \"ninehundred\"]\n\n  num_str = str(num)\n  result = \"\"\n\n  if num == 0:\n    result = \"zero\"\n\n  elif len(num_str) == 3:\n    result += hundreds[int(num_str[0])] + \" \"\n    if int(num_str[1:]) != 0:\n      result += number_to_words(int(num_str[1:]))\n\n  elif len(num_str) == 2:\n    if int(num_str[0]) == 1:\n      result += teens[int(num_str[1])]\n    else:\n      result += tens[int(num_str[0])] + \" \"\n      if int(num_str[1]) != 0:\n        result += units[int(num_str[1])]\n\n  elif len(num_str) == 1:\n    result += units[int(num_str[0])]\n\n  return result\n  \nprint(number_to_words(259))",
        "1322": "import json\n\ndef convert_to_json(data):\n    \"\"\"Convert any data format into a JSON format.\"\"\"\n    try:\n        # check if data is string\n        if isinstance(data, str):\n            return json.loads(data)\n        # check if data is xml\n        elif data.tag == 'note':\n            return {\n                'to': data.find('to').text,\n                'from': data.find('from').text, \n                'heading': data.find('heading').text,\n                'body': data.find('body').text,\n            }\n    except Exception as e:\n        raise e",
        "1323": "def generate_subset(input_set):\n    subsets = [[]]\n \n    for elem in input_set:\n        n = len(subsets)\n        for i in range(n):\n            current_subset = subsets[i]\n            subsets.append(current_subset + [elem])\n \n    return subsets",
        "1324": "def fibonacci_n(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nn = 9\nprint(fibonacci_n(n))",
        "1325": "# Function to convert degrees Celsius to degrees Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n return (celsius * 9\/5) + 32\n\n# Input Celsius value\ncelsius = 32\n\n# Calculate Fahrenheit\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f'{celsius} Celsius is {fahrenheit} Fahrenheit')",
        "1326": "def greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result",
        "1327": "# Create a dictionary to store the count of each letter \nletter_counts = {}\n\n# Loop through each letter in the given sentence\nfor letter in 'The quick brown fox jumps over the lazy dog.':\n     # Check if the letter is present in the dictionary\n     if letter in letter_counts:\n         # Increment the count if the key is present\n         letter_counts[letter] += 1\n     else:\n         # Initialize the count if the key is not present\n         letter_counts[letter] = 1\n\n# Print the output in a nice format\nfor key,val in letter_counts.items():\n    print(key, '-', val)",
        "1328": "def print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]",
        "1329": "numbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "1330": "from sklearn.cluster import KMeans\n\ndef k_means_clustering(data, num_clusters):\n    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    return labels",
        "1331": "# Import relevant modules\nimport requests\nimport json\n\n# Url for API\nURL = \"https:\/\/api.example.com\/geocode\"\n\n# Create function to fetche location information\ndef get_location_info(lat, lon):\n    PARAMS = {'lat': lat, 'lon': lon}\n    response = requests.get(url=URL, params=PARAMS)\n    output = json.loads(response.text)\n    return output\n\n# Call the function\nlocation_info = get_location_info(lat, lon)",
        "1332": "def capitalize(string):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)",
        "1333": "def count_elements_with_letter(arr,letter):\n   count = 0\n   for a in arr:\n      if letter in a:\n         count += 1 \n   \n   return count \n\ncount_elements_with_letter(['cat','dog','fish','apple'], 'a')\n# output: 3",
        "1334": "def extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string']",
        "1335": "import json\n\ndef str_to_json(json_string):\n    # convert the string to dictionary\n    json_dict = json.loads(json_string) \n    # convert the dictionary to json\n    json_data = json.dumps(json_dict) \n    # return json\n    return json_data",
        "1336": "import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message')",
        "1337": "import random\n\ndef random_matrix(n, m):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(random.randint(1,100))\n        matrix.append(row)\n    return matrix\n\nres = random_matrix(3, 2)\nprint(res)",
        "1338": "def min_and_max(array):\n    min_element = array[0]\n    max_element = array[0]\n    for element in array:\n        if element < min_element:\n            min_element = element\n        elif element > max_element:\n            max_element = element \n    return (min_element, max_element)",
        "1339": "def define_category(num, criteria):\n    if num >= criteria[\"low\"][0] and num <= criteria[\"low\"][1]:\n        return \"low\"\n    elif num >= criteria[\"medium\"][0] and num <= criteria[\"medium\"][1]:\n        return \"medium\"\n    elif num >= criteria[\"high\"][0] and num <= criteria[\"high\"][1]:\n        return \"high\"\n    else:\n        return \"not found\"\n\nnum = 28 \ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\ncategory = define_category(num, criteria)\n\nprint(category)",
        "1340": "def filter_list(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\nstrings = [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\nfiltered_strings = filter_list(strings)\nprint(filtered_strings)\n\n# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']",
        "1341": "s = \"\"\nfor i in range(0, 10):\n    for x in range(0, 10):\n        s += str(i) + str(x) + ''.join([str(y) for y in range(0, 10)])",
        "1342": "def sentence_to_upper(sentence):\n    return sentence.upper()\n\nprint(sentence_to_upper(\"This is an example sentence.\"))",
        "1343": "import random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())",
        "1344": "def array_to_char_count_dict(arr):\n    character_count = {}\n    for string in arr:\n        for char in string:\n            if char in character_count:\n                character_count[char] += 1\n            else:\n                character_count[char] = 1\n    return character_count\n\narr = [\"hello\", \"world\", \"the\"]\nprint(array_to_char_count_dict(arr))\n# Output: {'h': 1, 'e': 2, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1, 't': 1}",
        "1345": "def print_fibonacci_seq(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a + b\n\nif __name__ == '__main__':\n    n = 100\n    print_fibonacci_seq(n)",
        "1346": "# Python function to delete a node \n# in a Linked List. \nclass Node: \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to delete node from Linked List \ndef deleteNode(head, position): \n    # If linked list is empty \n    if head == None: \n        return \n\n    temp = head \n \n    # If head needs to be removed \n    if position == 0: \n        head = temp.next\n        temp = None\n        return head \n\n    # Find previous node of the node to be deleted \n    for i in range(position -1 ): \n        temp = temp.next\n        if temp is None: \n            break\n \n    # If position is more than number of nodes \n    if temp is None: \n        return \n \n    if temp.next is None: \n        return \n\n    # Node temp.next is the node to be deleted \n    # store pointer to the next of node to be deleted \n    next = temp.next.next\n\n    # Unlink the node from linked list \n    temp.next = None\n \n    temp.next = next \n\n    return head",
        "1347": "def simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator",
        "1348": "def same_case(string1, string2): \n\n    # Take the lengths of two strings into consideration \n    if len(string1) != len(string2): \n        return False\n        \n    # Compare character by character \n    # If any one of the characters are not of same case \n    # return false \n    for x, y in zip(string1, string2): \n        if x.islower() != y.islower(): \n            return False\n\n    # If execution reaches this point \n    # it means that all characters of both strings \n    # are having same case \n    return True",
        "1349": "def bubble_sort(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst",
        "1350": "def is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True",
        "1351": "def remove_duplicates(lst): \n    final_list = [] \n    for num in lst: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n    \nlst = [1, 1, 2, 3, 4, 4, 5] \nprint(remove_duplicates(lst))",
        "1352": "import tkinter as tk\n\n# Create window\nroot = tk.Tk()\n\n# Create two buttons\nstop_button = tk.Button(root, text=\"Stop Program\", command=stop_program)\nstart_button = tk.Button(root, text=\"Start Program\", command=start_program)\n\n# Place two buttons in the window\nstop_button.pack()\nstart_button.pack()\n\n# Display window\nroot.mainloop()",
        "1353": "names.sort()\nprint(names)",
        "1354": "def to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict",
        "1355": "def factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "1356": "import git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https:\/\/github.com\/username\/repo.git\")",
        "1357": "def factorial(n):\n if n == 0:\n   return 1\n else:\n   return n * factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\n\nfactorial = factorial(num)\n\nprint(\"The factorial of\",num,\"is\",factorial)",
        "1358": "import string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17",
        "1359": "words = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string)",
        "1360": "def longest_common_substring(s1, s2):\n    \"\"\"\n    This function takes two strings and returns the longest substring\n    that is common to both strings.\n    :param s1: string\n    :param s2: string\n    :return: longest common substring\n    \"\"\"\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]",
        "1361": "def print_prime_numbers():\n for num in range(0, 101):\n if num > 1:\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n print(num)\n\nprint_prime_numbers()",
        "1362": "def unique_words_freq(string): \n words = string.split() \n words_freq = {}\n for word in words: \n if word not in words_freq.keys(): \n words_freq[word] = 1 \n else: \n words_freq[word] += 1 \n \n return words_freq\n\nresult = unique_words_freq(\"Hello world, hello world\")\nprint(result)",
        "1363": "# Maze Class \nclass Maze: \n  \n    # Maze constructor \n    def __init__(self): \n        self.n = 5\n        self.maze = [[ 1, 0, 0, 0, 1 ], \n                     [ 1, 1, 1, 0, 1 ], \n                     [ 0, 0, 0, 0, 0 ], \n                     [ 0, 1, 1, 1, 1 ], \n                     [ 0, 1, 0, 0, 1 ]] \n   \n    # function to print the maze \n    def printMaze(self): \n        for i in range(self.n): \n            for j in range(self.n): \n                print(self.maze[i][j], end =\" \") \n            print () \n   \n    # function to check if maze is solved or not \n    def isSolved(self, x, y): \n        if x == self.n - 1 and y == self.n - 1: \n            return True\n        return False\n\n# Driver Function \nif __name__ == \"__main__\": \n    mazeObj = Maze() \n    mazeObj.printMaze() \n    print(\"Is the maze solved? :\", \n          mazeObj.isSolved(0, 0))",
        "1364": "def binarySearch2D(arr, key):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) \/\/ 2\n        if arr[mid][0] == key:\n            return True\n        elif arr[mid][0] > key:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n\narr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]\nkey = 3\n\nif binarySearch2D(arr, key):\n    print(True) \nelse :\n    print(False)",
        "1365": "import nltk\nimport re\n\ndef summarize_text(text):\n \"\"\"\n A basic text summarizer that takes a text input and returns a summary of the text in two sentences.\n \"\"\"\n\n # Tokenize the text\n tokens = nltk.sent_tokenize(text)\n # Get the frequency of each word\n word_frequencies = {}\n for word in nltk.word_tokenize(text):\n if word not in word_frequencies.keys():\n word_frequencies[word] = 1\n else:\n word_frequencies[word] += 1\n\n # Get the maximum frequency\n maximum_frequency = max(word_frequencies.values())\n\n # Compute the weight of each word\n for word in word_frequencies.keys():\n word_frequencies[word] = (word_frequencies[word]\/maximum_frequency)\n\n # Generate the summary\n sentence_scores = {}\n for sent in tokens:\n for word in nltk.word_tokenize(sent.lower()):\n if word in word_frequencies.keys():\n if len(sent.split(' ')) < 30:\n if sent not in sentence_scores.keys():\n sentence_scores[sent] = word_frequencies[word]\n else:\n sentence_scores[sent] += word_frequencies[word]\n\n # Get the two highest-scoring sentences\n summary_sentences = heapq.nlargest(2, sentence_scores, key=sentence_scores.get) \n\n # Construct the summary\n summary = ' '.join(summary_sentences)\n return summary",
        "1366": "import requests \n\n# api-endpoint \nURL = \"https:\/\/www.example.com\/page1\"\n  \n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n  \n# extracting data in json format \ndata = r.json() \n  \n# extracting relevant data \nstatus = data['status'] \nsub_title = data['sub_title'] \nmax_clients = data['max_clients'] \n\n# printing extracted data  \nprint(\"Status:\", status) \nprint(\"Sub Title:\", sub_title)\nprint(\"Max Clients:\", max_clients)",
        "1367": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates",
        "1368": "def sort(array):\n    for i in range(len(array)):\n        low = i\n        for j in range(i+1, len(array)):\n            if array[low] > array[j]:\n                low = j\n        array[i], array[low] = array[low], array[i]\n    return array\n \nexample = [25, 6, 7, 3, 12, 89, 74, 55]\nsorted_array = sort(example)\nprint(sorted_array)",
        "1369": "import requests\n \nurl = 'http:\/\/example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html)",
        "1370": "def largest_prime_in_range(start, end):\n    largest_prime = 0\n    # Iterate over the range\n    for i in range(start, end + 1):\n        # Check if number is prime\n        is_prime = True\n        if i > 1:\n            for j in range(2, ceil(sqrt(i))+ 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n        # Check if number is the largest prime\n        if is_prime and i > largest_prime:\n            largest_prime = i\n\n    return largest_prime\n\nif __name__ == '__main__':\n    output = largest_prime_in_range(3, 22)\n    print(output)",
        "1371": "def sum_of_two(x, y):\n  result = 0\n  for i in range(x, y+1):\n    result += i\n  return result",
        "1372": "numbers = [x for x in range(1, 11)]",
        "1373": "class Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle((1, 2), 5)\nprint(f\"Area of the circle: {circle.area()}\")\nprint(f\"Circumference of the circle: {circle.circumference()}\")",
        "1374": "max_val = arr[0]\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val)",
        "1375": "def max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')",
        "1376": "def evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False",
        "1377": "import random\n\ndef random_number():\n    return random.randint(1, 1000)\n\nprint(random_number())",
        "1378": "import re\ndef extract_domain_name(url):\n    regex = r\":\/\/([^\/]+)\/?\"\n    match = re.search(regex, url)\n \n    if match:\n        return match.group(1)\n\nurl = \"http:\/\/www.google.com\"\ndomain_name = extract_domain_name(url)\nprint(domain_name)\n \n# Output: \n# google.com",
        "1379": "def sumArray(arr):\n  sum = 0\n  for i in range(len(arr)):\n    for j in range(len(arr[i])):\n      sum += arr[i][j]\n      \n  return sum\n\nsumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45",
        "1380": "def print_fibonacci(length):\n    a = 0 \n    b = 1\n\n    while length > 0:\n        print(a)\n        temp = a \n        a = b \n        b = temp + b \n        length = length - 1",
        "1381": "def sort_list(list):\n   for i in range(len(list)-1):          # loop over index i from 0 to n-2\n       small = i                         # set minimum index to i\n       for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1\n           if list[j] < list[small]:      # compare list[j] with list[small]\n               small = j                  # update minimum index\n       list[i], list[small] = list[small], list[i]  # swap list[i] and list[small]\n   return list\n\n\n# Main program\nlist = [ 3, 8, 4, 6, 2, 9, 7]\nprint (\"Original list:\", list)\nsort_list(list)\nprint (\"Sorted list:\", list)",
        "1382": "#!\/usr\/bin\/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT\/X11 software license, see the accompanying\n# file COPYING or http:\/\/www.opensource.org\/licenses\/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108\/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main()",
        "1383": "def find_min_max(arr):\n    min, max = arr[0], arr[0]\n    for item in arr:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    return min, max\n\n# test\narr = [3, 7, 1, 12, 5]\nmin, max = find_min_max(arr)\nprint(f'min: {min}, max: {max}')",
        "1384": "class MedianCalculator:\n    def __init__(self, arr_size):\n        self.arr_size = arr_size\n        self.arr = []\n    \n    def calculate_median(self):\n        if self.arr_size == 0:\n            return 0\n        elif self.arr_size == 1:\n            return self.arr[0]\n        else:\n            self.arr.sort()\n            if self.arr_size % 2 == 0:\n                mid1 = self.arr_size \/\/ 2 - 1\n                mid2 = self.arr_size \/\/ 2\n                return (self.arr[mid1] + self.arr[mid2]) \/ 2\n            else:\n                return self.arr[self.arr_size \/\/ 2]",
        "1385": "import re\n\nhtml_str = \"\"\"\n<html>\n<head>\n  <title>Page title<\/title>\n<\/head>\n<body>\n  <p>For more information email us at info@example.com.<\/p>\n  <p>You can also contact john@example.com.<\/p>\n<\/body>\n<\/html>\"\"\"\n\nemails = re.findall(r'\\S+@\\S+', html_str)\nprint(emails)\n\n# Output: ['info@example.com', 'john@example.com']",
        "1386": "# -*- coding: utf-8 -*-\n\n\nimport tempfile\n\nfrom dp_tornado.engine.helper import Helper as dpHelper\n\n\nclass ImageHelper(dpHelper):\n    def compare(self, i1, i2, error=0):\n        i1 = self.load(i1)\n        i2 = self.load(i2)\n\n        if not i1 or not i2:\n            return None\n\n        s1 = i1.size\n        s2 = i2.size\n\n        if s1[0] != s2[0] or s2[1] != s2[1]:\n            print('size ne,', s1, s2)\n            return False\n\n        i1 = i1.load()\n        i2 = i2.load()\n\n        for i in range(s1[0]):\n            for j in range(s1[1]):\n                if i1[i, j] != i2[i, j]:\n                    if error:\n                        for k in range(len(i1[i, j])):\n                            if abs(i1[i, j][k] - i2[i, j][k]) > error:\n                                print('pixel ne,', i1[i, j], i2[i, j], abs(i1[i, j][k] - i2[i, j][k]), error)\n                                return False\n                    else:\n                        return False\n\n        return True\n\n    def _driver(self, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        if options and 'driver' in options and options['driver'] == 'wand':\n            return self.helper.io.image.driver.wand\n\n        return self.helper.io.image.driver.pillow\n\n    def load(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        tmp = None\n        drivers = []\n\n        pillow_image = self.helper.io.image.driver.pillow.Image\n        wand_image = self.helper.io.image.driver.wand.Image\n\n        if pillow_image:\n            drivers.append(pillow_image)\n\n        if wand_image:\n            drivers.append(wand_image)\n\n        try:\n            if isinstance(src, tuple(drivers)):\n                return src\n\n            elif self.helper.web.url.validate(src):\n                code, res = self.helper.web.http.get.raw(src)\n\n                if code != 200:\n                    raise Exception('The specified image url is invalid.')\n\n                tmp = tempfile.NamedTemporaryFile(delete=False)\n                tmp.write(res)\n                tmp.close()\n\n                tmp = tmp.name\n\n            else:\n                tmp = None\n\n            if not tmp and not src:\n                raise Exception('The specified image is invalid.')\n\n            img = self._driver(options=options).load(tmp if tmp else src)\n\n            if not img:\n                raise Exception('The specified image is invalid.')\n\n            return img\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n        finally:\n            if tmp:\n                self.helper.io.file.remove(tmp)\n\n    def execute(self, src, fn, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        img = self.load(src, options=options)\n\n        if not img:\n            return False\n\n        try:\n            return fn(img, options)\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n    def size(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            if not img:\n                return -1, -1\n\n            return img.width, img.height\n\n        return self.execute(src, fn, options=options)\n\n    def crop(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            crop = kwargs['crop'] if 'crop' in kwargs else None\n\n            if not crop:\n                return img\n\n            e_top = 0\n            e_left = 0\n            e_right = 0\n            e_bottom = 0\n\n            if self.helper.misc.type.check.string(crop):\n                crop = crop.split(',')\n                crop = [int(e.strip()) for e in crop]\n\n            if self.helper.misc.type.check.numeric(crop):\n                e_top = e_left = e_right = e_bottom = crop\n\n            elif isinstance(crop, (tuple, list)):\n                if len(crop) == 1:\n                    e_top = e_left = e_right = e_bottom = crop[0]\n\n                elif len(crop) == 2:\n                    e_top = e_bottom = crop[0]\n                    e_left = e_right = crop[1]\n\n                elif len(crop) == 4:\n                    e_top = crop[0]\n                    e_right = crop[1]\n                    e_bottom = crop[2]\n                    e_left = crop[3]\n\n            img = self._driver(options=kwargs).crop(img, e_left, e_top, img.size[0] - e_right, img.size[1] - e_bottom)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def border(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not border:\n                return img\n\n            if '_org' in kwargs and 'radius' in kwargs and kwargs['radius']:\n                return img\n\n            img = self._driver(options=kwargs).border(img, border, border_color)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def radius(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            radius = int(kwargs['radius'] or 0) if 'radius' in kwargs else None\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not radius:\n                return img\n            elif '__radius_processed__' in img.__dict__:\n                return img\n\n            img = self._driver(options=kwargs).radius(img, radius, border, border_color)\n            img.__dict__['__radius_processed__'] = True\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def colorize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            colorize = kwargs['colorize'] if 'colorize' in kwargs else None\n\n            if not colorize:\n                return img\n\n            img = self._driver(options=kwargs).colorize(img, colorize)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def resize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            size = kwargs['size'] if 'size' in kwargs else None\n            mode = kwargs['mode'] if 'mode' in kwargs else None\n            scale = int(kwargs['scale']) if 'scale' in kwargs else 1\n            limit = True if 'limit' in kwargs and kwargs['limit'] else False\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n\n            if not size:\n                return img\n\n            width_new, height_new = size\n            width_origin, height_origin = img.size\n\n            if scale > 1:\n                if limit:\n                    scale_max_width = float(width_origin) \/ float(width_new)\n                    scale_max_height = float(height_origin) \/ float(height_new)\n\n                    scale_max = min(scale, scale_max_width, scale_max_height)\n                else:\n                    scale_max = scale\n\n                if scale_max > 1:\n                    width_new = int(width_new * scale_max)\n                    height_new = int(height_new * scale_max)\n\n            if not width_new:\n                width_new = width_origin * height_new \/ height_origin\n                mode = self.helper.io.image.mode.resize\n\n            if not height_new:\n                height_new = height_origin * width_new \/ width_origin\n                mode = self.helper.io.image.mode.resize\n\n            if border:\n                width_new -= border * 2\n                height_new -= border * 2\n\n            if not mode:\n                mode = self.helper.io.image.mode.resize\n\n            if mode not in self.helper.io.image.mode.modes:\n                raise Exception('The specified mode is not supported.')\n\n            seqs = []\n\n            for i, im in self._driver(options=kwargs).iter_seqs(img, kwargs):\n                # Image Resizing\n                if mode == self.helper.io.image.mode.center:\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new, kwargs)\n\n                elif mode == self.helper.io.image.mode.fill:\n                    ratio_origin = float(width_origin) \/ float(height_origin)\n                    ratio_new = float(width_new) \/ float(height_new)\n\n                    if ratio_origin > ratio_new:\n                        tw = int(round(height_new * ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, tw, height_new)\n                        left = int(round((tw - width_new) \/ 2.0))\n                        im = self._driver(options=kwargs).crop(im, left, 0, left + width_new, height_new)\n\n                    elif ratio_origin < ratio_new:\n                        th = int(round(width_new \/ ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, width_new, th)\n                        top = int(round((th - height_new) \/ 2.0))\n                        im = self._driver(options=kwargs).crop(im, 0, top, width_new, top + height_new)\n\n                    else:\n                        im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                elif mode == self.helper.io.image.mode.resize:\n                    if width_new > width_origin or height_new > height_origin:\n                        width_new = width_origin\n                        height_new = height_origin\n\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                seqs.append(im)\n\n            img = seqs[0]\n            seqs.remove(img)\n            img.__dict__['__frames__'] = seqs\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def save(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            ext = kwargs['format'] if 'format' in kwargs else None\n            dest = kwargs['dest'] if 'dest' in kwargs else None\n\n            if not dest:\n                return None\n\n            if not ext and self.helper.misc.type.check.string(dest):\n                ext = self.helper.io.path.ext(dest, dot='').lower()\n\n            if not ext and self.helper.misc.type.check.string(src):\n                ext = self.helper.io.path.ext(src, dot='').lower()\n\n            if not ext and '_org' in kwargs and kwargs['_org'] and self.helper.misc.type.check.string(kwargs['_org']):\n                ext = self.helper.io.path.ext(kwargs['_org'], dot='').lower()\n\n            if dest == 's3':\n                # TODO\n                return False\n\n            if not self._driver(options=kwargs).save(img, ext, dest, kwargs):\n                return False\n\n            return True\n\n        return self.execute(src, fn, options=options)\n\n    def manipulate(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        options['_org'] = src\n\n        try:\n            img = self.load(src, options=options)\n\n            # Crop\n            img = self.crop(img, options=options)\n\n            if not img:\n                return False\n\n            # Resize\n            img = self.resize(img, options=options)\n\n            if not img:\n                return False\n\n            # Radius\n            img = self.radius(img, options=options)\n\n            if not img:\n                return False\n\n            # Border\n            img = self.border(img, options=options)\n\n            if not img:\n                return False\n\n            # Colorize\n            img = self.colorize(img, options=options)\n\n            if not img:\n                return False\n\n            # Save\n            saved = self.save(img, options=options)\n\n            if saved is None:\n                return img\n            elif saved is False:\n                return False\n\n            return True\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n",
        "1387": "# Function to find longest palindromic substring \ndef longest_palindromic_substring(string): \n    maxLength = 1\n\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point\n    # of even and length palindromes\n    for i in range(1, length): \n        # Find the longest even length palindrome with center\n        # points as i - 1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low\n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n        # Find the longest odd length palindrome with center\n        # point as i\n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength:\n\t\t\t    start = low \n\t\t\t    maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n    # print the substring\n    print(string[start: start + maxLength])\n  \n# Driver code \nstring = \"forgeeksskeegfor\"\n\nlongest_palindromic_substring(string)",
        "1388": "length_meters = 5\nwidth_meters = 8\nheight_meters = 3\n\n# Calculate area of room\nroom_area_meters_squared = length_meters * width_meters * height_meters\n\n# Print the area\nprint(f\"The area of the room is {room_area_meters_squared} meters squared.\")",
        "1389": "def merge_sort(arr): \n    # Base case \n    if len(arr) <= 1:\n        return arr\n    else: \n        # Split array into two halves \n        mid = len(arr)\/\/2\n        left = arr[:mid] \n        right = arr[mid:] \n\n        # Call merge_sort recursively with each half \n        left = merge_sort(left) \n        right = merge_sort(right)\n    \n        # Merge each half \n        return merge(left, right) \n \ndef merge(left, right): \n  \n    # Initialize variables \n    result = [] \n    left_index = 0\n    right_index = 0\n   \n    # result will be a sorted array\n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            result.append(left[left_index]) \n            left_index += 1\n        else: \n            result.append(right[right_index]) \n            right_index += 1\n    \n     # If left is longer, add remaining elements\n    result += left[left_index:] \n\n    # If right is longer, add remaining elements\n    result += right[right_index:] \n    return result",
        "1390": "def extract_data_from_mysql(query_string):\n    conn = mysql.connector.connect(host=\"localhost\", user=\"root\", passwd=\"password\", database=\"student\")\n    \n    cursor = conn.cursor()\n    cursor.execute(query_string)\n    \n    result = cursor.fetchall()\n    \n    conn.close()\n    \n    return result",
        "1391": "def remove_empty_strings(lst):\n    filtered_list = []\n    for item in lst:\n        if item != \"\":\n            filtered_list.append(item)\n    return filtered_list\n\nfiltered_list = remove_empty_strings([\"Hello\", \"\", \"Python\", \"World\", \"\"])\nprint(filtered_list)",
        "1392": "def intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))",
        "1393": "def generate_primes(lower, upper):\n    \"\"\"\n    This functions returns an array of all the prime numbers within a given range.\n    \"\"\"\n    prime_list = []\n    for num in range(lower, upper + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list",
        "1394": "class Inventory:\n  def __init__(self):\n    # Declare an empty dictionary to hold inventory information\n    self.inventory = {}\n \n  # Function for adding product\n  def add_product(self, product_name, quantity):\n    # If product_name exists in inventory, add quantity to existing product's quantity\n    if product_name in self.inventory.keys():\n      self.inventory[product_name] += quantity\n    else:\n      # If product_name is not in inventory, add it to inventory\n      self.inventory[product_name] = quantity\n \n  # Function for removing product\n  def remove_product(self, product_name, quantity):\n    # If product_name exists in inventory and there's insufficient quantity, print an error message\n    if product_name in self.inventory.keys() and self.inventory[product_name] < quantity:\n      print(\"Error: Insufficient Quantity!\")\n    else:\n      # If product_name is in inventory and there's sufficient quantity, remove product from inventory\n      self.inventory[product_name] -= quantity\n      if self.inventory[product_name] == 0:\n        del self.inventory[product_name]\n \n  # Function for printing inventory\n  def print_inventory(self):\n    print(\"Inventory:\")\n    # Iterate through keys and values of inventory and print them\n    for product_name, quantity in self.inventory.items():\n      print(product_name + \" : \" + str(quantity))",
        "1395": "def compare_strings(str1, str2):\n # compare string length\n if len(str1) > len(str2):\n print('String 1 is longer than String 2')\n elif len(str2) > len(str1):\n print('String 2 is longer than String 1')\n else:\n print('Strings are of equal length')\n\n # compare characters\n common_chars = set(str1).intersection(set(str2))\n if len(common_chars) == min(len(str1), len(str2)):\n print('Strings have same characters')\n\n # compare case sensitivity\n if str1.lower() == str2.lower():\n print('Strings are equal in terms of case sensitivity')\n\nstr1 = 'Hello World'\nstr2 = 'hello world!'\n\ncompare_strings(str1, str2);",
        "1396": "my_dict = {}\n\nfor item in my_list:\n    if item not in my_dict:\n        my_dict[item] = 0\n    my_dict[item] += 1\n\nprint(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}",
        "1397": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('\/add', methods=['GET'])\ndef add():\n num1 = float(request.args.get('num1'))\n num2 = float(request.args.get('num2'))\n\n sum = num1 + num2\n\n return str(sum)\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "1398": "def fibonacci(num): \n  # Initializing first two numbers of the series \n  a = 0\n  b = 1\n  print(\"Fibonacci series: \", end = \" \") \n  for i in range(num): \n    # Generating next number in the series \n    c = a + b\n    a = b\n    b = c \n    # printing the generated number in the series \n    print(c, end =\" \") \n  \n# Get number of terms to generate in the series\nnum = 5\n\n#Calling fibonacci function  \nfibonacci(num)",
        "1399": "import numpy as np\n\nrandom_matrix = np.random.randint(1, 100, size=(5, 5))\nprint(random_matrix)",
        "1400": "def isAnagram(str1, str2):\n    # Convert the strings to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n\n    # Sort the strings\n    str1sorted = ''.join(sorted(str1))\n    str2sorted = ''.join(sorted(str2))\n\n    # Check if sorted strings are equal \n    if(str1sorted == str2sorted):\n        return True\n    else:\n        return False\n\n# Test\nprint(isAnagram('Hello', 'World'))",
        "1401": "import matplotlib.pyplot as plt\n\nwords = [\"word1\", \"word2\", \"word3\", \"word4\"]\nfrequencies = [5, 8, 3, 2]\n\nplt.bar(words, frequencies)\nplt.title(\"Word Frequency Chart\")\nplt.xlabel(\"Words\")\nplt.ylabel(\"Frequency\")\nplt.show()",
        "1402": "def get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))",
        "1403": "def reverse_list(input_list): \n    left = 0\n    right = len(input_list) - 1\n    while left < right:\n        input_list[left], input_list[right] = input_list[right], input_list[left]\n        left += 1\n        right -= 1\n        \n    return input_list",
        "1404": "names = [\"John\", \"Paul\", \"George\", \"Ringo\", \"Adam\", \"Peter\", \"Alice\", \"Karen\", \"Jerry\"]\n\nfor name in names:\n if 'a' in name:\n print(name)\n\n# Output\nAdam\nAlice\nKaren",
        "1405": "def countOccurrences(words, target):\n    count = 0\n    for word in words:\n        if word == target:\n            count += 1\n    \n    return count\n\nprint(countOccurrences([\"how\", \"how\", \"are\", \"you\", \"how\", \"are\", \"you\"], \"how\"))",
        "1406": "def get_larger_number_divisible_by_smaller(num1, num2):\n  max_num = max(num1, num2)\n  min_num = min(num1, num2)\n\n  return max_num if max_num % min_num == 0 else None\n\nresult = get_larger_number_divisible_by_smaller(10, 20)\nprint(result) # 20",
        "1407": "def add_number(a, b):\n    try:\n        return a + b \n    except TypeError:\n        print(\"Please enter numeric values\")",
        "1408": "# This file is part of Buildbot.  Buildbot is free software: you can\n# redistribute it and\/or modify it under the terms of the GNU General Public\n# License as published by the Free Software Foundation, version 2.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n# details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51\n# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Copyright Buildbot Team Members\n\n\nimport copy\nimport sys\n\nfrom mock import Mock\n\nfrom twisted.internet import defer\nfrom twisted.trial import unittest\n\nfrom buildbot import config\nfrom buildbot.process.results import CANCELLED\nfrom buildbot.process.results import EXCEPTION\nfrom buildbot.process.results import FAILURE\nfrom buildbot.process.results import SUCCESS\nfrom buildbot.process.results import WARNINGS\nfrom buildbot.reporters.notifier import NotifierBase\nfrom buildbot.test.fake import fakedb\nfrom buildbot.test.fake import fakemaster\nfrom buildbot.test.util.config import ConfigErrorsMixin\nfrom buildbot.test.util.misc import TestReactorMixin\nfrom buildbot.test.util.notifier import NotifierTestMixin\n\npy_27 = sys.version_info[0] > 2 or (sys.version_info[0] == 2\n                                    and sys.version_info[1] >= 7)\n\n\nclass TestMailNotifier(ConfigErrorsMixin, TestReactorMixin,\n                       unittest.TestCase, NotifierTestMixin):\n\n    def setUp(self):\n        self.setUpTestReactor()\n        self.master = fakemaster.make_master(self, wantData=True, wantDb=True,\n                                             wantMq=True)\n\n    @defer.inlineCallbacks\n    def setupNotifier(self, *args, **kwargs):\n        mn = NotifierBase(*args, **kwargs)\n        mn.sendMessage = Mock(spec=mn.sendMessage)\n        mn.sendMessage.return_value = \"<message>\"\n        yield mn.setServiceParent(self.master)\n        yield mn.startService()\n        return mn\n\n    def test_init_enforces_tags_and_builders_are_mutually_exclusive(self):\n        with self.assertRaises(config.ConfigErrors):\n            NotifierBase(tags=['fast', 'slow'], builders=['a', 'b'])\n\n    def test_init_warns_notifier_mode_all_in_iter(self):\n        with self.assertRaisesConfigError(\n               \"mode 'all' is not valid in an iterator and must be passed in as a separate string\"):\n            NotifierBase(mode=['all'])\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_sends_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"passing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        mn.buildMessage.assert_called_with(\n            \"whole buildset\",\n            builds, SUCCESS)\n        self.assertEqual(mn.buildMessage.call_count, 1)\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_doesnt_send_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        # disable passing...\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        self.assertFalse(mn.buildMessage.called)\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_ignores_unspecified_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['slow']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['fast']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['checkin'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['some-random-scheduler'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['master'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['some-random-branch'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def run_simple_test_sends_message_for_mode(self, mode, result, shouldSend=True):\n        _, builds = yield self.setupBuildResults(result)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def run_simple_test_ignores_message_for_mode(self, mode, result):\n        return self.run_simple_test_sends_message_for_mode(mode, result, False)\n\n    def test_isMessageNeeded_mode_all_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", SUCCESS)\n\n    def test_isMessageNeeded_mode_all_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", FAILURE)\n\n    def test_isMessageNeeded_mode_all_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", WARNINGS)\n\n    def test_isMessageNeeded_mode_all_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_all_for_cancelled(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", CANCELLED)\n\n    def test_isMessageNeeded_mode_failing_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_failing_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"failing\", FAILURE)\n\n    def test_isMessageNeeded_mode_failing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_failing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_exception_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", SUCCESS)\n\n    def test_isMessageNeeded_mode_exception_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", FAILURE)\n\n    def test_isMessageNeeded_mode_exception_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", WARNINGS)\n\n    def test_isMessageNeeded_mode_exception_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"exception\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_warnings_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", SUCCESS)\n\n    def test_isMessageNeeded_mode_warnings_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", FAILURE)\n\n    def test_isMessageNeeded_mode_warnings_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", WARNINGS)\n\n    def test_isMessageNeeded_mode_warnings_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_passing_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"passing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_passing_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", FAILURE)\n\n    def test_isMessageNeeded_mode_passing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_passing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", EXCEPTION)\n\n    @defer.inlineCallbacks\n    def run_sends_message_for_problems(self, mode, results1, results2, shouldSend=True):\n        _, builds = yield self.setupBuildResults(results2)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        build = builds[0]\n        if results1 is not None:\n            build['prev_build'] = copy.deepcopy(builds[0])\n            build['prev_build']['results'] = results1\n        else:\n            build['prev_build'] = None\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def test_isMessageNeeded_mode_problem_sends_on_problem(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_problem_ignores_successful_build(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_problem_ignores_two_failed_builds_in_sequence(self):\n        return self.run_sends_message_for_problems(\"problem\", FAILURE, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_sends_on_change(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, SUCCESS, True)\n\n    def test_isMessageNeeded_mode_change_sends_on_failure(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build(self):\n        return self.run_sends_message_for_problems(\"change\", None, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build2(self):\n        return self.run_sends_message_for_problems(\"change\", None, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence2(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, FAILURE, False)\n\n    @defer.inlineCallbacks\n    def setupBuildMessage(self, **mnKwargs):\n\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        mn = yield self.setupNotifier(**mnKwargs)\n\n        mn.messageFormatter = Mock(spec=mn.messageFormatter)\n        mn.messageFormatter.formatMessageForBuildResults.return_value = {\"body\": \"body\", \"type\": \"text\",\n                                                                         \"subject\": \"subject\"}\n        yield mn.buildMessage(\"mybldr\", builds, SUCCESS)\n        return (mn, builds)\n\n    @defer.inlineCallbacks\n    def test_buildMessage_nominal(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",))\n\n        build = builds[0]\n        mn.messageFormatter.formatMessageForBuildResults.assert_called_with(\n            ('change',), 'mybldr', build['buildset'], build, self.master,\n            None, ['me@foo'])\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        mn.sendMessage.assert_called_with('body', 'subject', 'text', 'mybldr', SUCCESS, builds,\n                                          ['me@foo'], [], [])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addLogs(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addLogs=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the logs are send\n        self.assertEqual(mn.sendMessage.call_args[0][8][0]['logid'], 60)\n        # make sure the log has content\n        self.assertIn(\n            \"log with\", mn.sendMessage.call_args[0][8][0]['content']['content'])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatch(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the patch are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7],\n                         [{'author': 'him@foo',\n                           'body': b'hello, world',\n                           'comment': 'foo',\n                           'level': 3,\n                           'patchid': 99,\n                           'subdir': '\/foo'}])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatchNoPatch(self):\n        SourceStamp = fakedb.SourceStamp\n\n        class NoPatchSourcestamp(SourceStamp):\n\n            def __init__(self, id, patchid):\n                super().__init__(id=id)\n        self.patch(fakedb, 'SourceStamp', NoPatchSourcestamp)\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure no patches are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7], [])\n\n    @defer.inlineCallbacks\n    def test_workerMissingSendMessage(self):\n\n        mn = yield self.setupNotifier(watchedWorkers=['myworker'])\n\n        yield mn.workerMissing('worker.98.complete',\n                               dict(name='myworker',\n                                    notify=[\"workeradmin@example.org\"],\n                                    workerinfo=dict(admin=\"myadmin\"),\n                                    last_connection=\"yesterday\"))\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        text = mn.sendMessage.call_args[0][0]\n        recipients = mn.sendMessage.call_args[1]['users']\n        self.assertEqual(recipients, ['workeradmin@example.org'])\n        self.assertIn(\n            b\"has noticed that the worker named myworker went away\", text)\n",
        "1409": "#import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.svm import SVC\n\n#load the dataset\ndataset = datasets.load_iris()\n\n#split the data into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(dataset.data, dataset.target, \n                                                    test_size=0.2, random_state=42)\n\n#build the model\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\n#predict for test data\ny_pred = svc.predict(x_test)\n\n#evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)\n\nprint(classification_report(y_test, y_pred))",
        "1410": "def power_iterative(n, exponent):\n  # First, set an initial product value\n  product = 1\n  # Iterate up to the desired power\n  for _ in range(exponent):\n    product *= n\n  # Return the product\n  return product\n\npower = power_iterative(3, 4)\nprint(power)",
        "1411": "def classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\"",
        "1412": "\"\"\"\nDevelop a program to detect and remove a given pattern in a string\n\ndef remove_pattern(string, pattern):\n    # Replace the pattern in the string with an empty string \n    modified_string = string.replace(pattern, '')\n    \n    return modified_string\n\nif __name__ == '__main__':\n    string = 'I am learning Python programming'\n    pattern = 'learning'\n    print(remove_pattern(string, pattern))\n\"\"\"",
        "1413": "for num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x \/\/ 10\n        s += d ** order\n    if num == s:\n        print(num)",
        "1414": "class InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True",
        "1415": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the URL\nurl = \"https:\/\/www.reddit.com\/r\/ProgrammerHumor\/comments\/hfpmoo\/people_ask_me_why_i_learn_so_many_programming\/\"\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all the comments from the page\ncomments = []\nfor comment in soup.find_all(\"div\", class_=\"md\"):\n    comments.append(comment.text)\n\n# Print all the comments\nfor comment in comments:\n    print(comment)",
        "1416": "def sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 \/ 3) * math.pi * (radius ** 3)",
        "1417": "for i in range(5, 16): \n    print (i)",
        "1418": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list))",
        "1419": "class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name)",
        "1420": "def levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n# base cases \n    for i in range(m + 1): \n        dp[i][0] = i \n    for j in range(n + 1): \n        dp[0][j] = j\n  \n    # fill the dp table \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],        # Insert \n                                   dp[i - 1][j],        # Remove \n                                   dp[i - 1][j - 1])    # Replace \n  \n    return dp[m][n]",
        "1421": "def remove_duplicates(arr):\n  seen = set()\n  result = []\n\n  for item in arr:\n    if item not in seen:\n      seen.add(item)\n      result.append(item)\n\n  return result\n\narr = [1, 8, 10, 4, 1, 8, 8]\n\nprint(remove_duplicates(arr)) # Output: [1, 8, 10, 4]",
        "1422": "import numpy as np\n\nboard = np.array([[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]])\n\ndef is_valid(x, y):\n return 0 <= x < 3 and 0 <= y < 3\n\ndef make_move(player, x, y):\n if is_valid(x, y):\n board[x, y] = player\n else:\n raise ValueError(\"Invalid move\")\n\ndef check_victory():\n xs, ys = np.where(board == 0)\n # Check vertically\n vertical = board == board.T\n # Check diagonally\n diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all()\n \n if any(vertical) or diagonal:\n return True\n \n return False\n\ndef ai_make_move(player):\n xs, ys = np.where(board == 0)\n for x, y in zip(xs, ys):\n board[x, y] = player\n if check_victory():\n return\n board[x, y] = 0 # Reset\n\nif __name__ == \"__main__\":\n # Set the board state\n board = np.array([[1, 0, -1],\n [-1, 1, 0],\n [0, 0, 1]])\n\n # AI player\n ai_make_move(-1)\n print(board)",
        "1423": "import random\n\n# Create an empty list\ndata = []\n\n# Generate 20 names and ages\nfor i in range(20):\n name = 'Name ' + str(i)\n age = random.randint(18, 70)\n\n# Append the data to the list\n data.append([name, age])\n\n# Print out the list\nprint(data)\n\n# [['Name 0', 64],\n#  ['Name 1', 18],\n#  ['Name 2', 24],\n#  ['Name 3', 36],\n#  ['Name 4', 34],\n#  ['Name 5', 28],\n#  ['Name 6', 56],\n#  ['Name 7', 42],\n#  ['Name 8', 68],\n#  ['Name 9', 24],\n#  ['Name 10', 50],\n#  ['Name 11', 20],\n#  ['Name 12', 54],\n#  ['Name 13', 40],\n#  ['Name 14', 61],\n#  ['Name 15', 40],\n#  ['Name 16', 41],\n#  ['Name 17', 38],\n#  ['Name 18', 56],\n#  ['Name 19', 41]]",
        "1424": "import requests\nfrom bs4 import BeautifulSoup\n\n# define the url\nurl = \"https:\/\/www.example.com\/titles\"\n\n# send the request and get the response\nresponse = requests.get(url)\n\n# parse the response\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# find all the <h3> elements in the page\nh3_elements = soup.find_all('h3')\n\n# extract the titles from the <h3> elements and print them\nfor element in h3_elements:\n print(element.text)",
        "1425": "import requests\nfrom bs4 import BeautifulSoup\n\n# fetch the html from the BBC news website\nhtml = requests.get('https:\/\/www.bbc.co.uk\/news').content\nsoup = BeautifulSoup(html, 'html.parser')\n\n# extract the titles and URLs of the trending news stories\ntrending_stories = soup.find('div', {'aria-label': 'Top stories'})\nstories = trending_stories.find_all('div', class_='gs-container gs-u-ph-')\n\ntitles = [s.find('h3', {'class': 'gs-u-mb-0'}).get_text() for s in stories]\nurls = [s.find('a')['href'] for s in stories]\n\n# print the titles and URLs\nfor title, url in zip(titles, urls):\n print(title, url)",
        "1426": "def sortString(inputString): \n  \n    words = inputString.split() \n    words.sort() \n  \n    for i in words: \n        print(i) \n          \nsortString(inputString)",
        "1427": "def create_tree(max_depth):\n    depth = random.randint(0, max_depth)\n    if depth == 0:\n        return random.choice([0, 1])\n    else:\n        left = create_tree(depth - 1)\n        right = create_tree(depth - 1)\n        return (left, right)",
        "1428": "def avg(list): \n\tsum = 0\n\tfor item in list:\n\t\tsum += item \n\treturn sum \/ len(list) \n\nlist1 = [7, 8, 10, 4, 11]\nresult = avg(list1) \n  \nprint(\"Average of all items: \", result)",
        "1429": "def is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)",
        "1430": "list = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list)",
        "1431": "def sortArray(list): \n    for i in range(len(list)-1):\n        minIndex = i \n        for j in range(i+1, len(list)):\n            if list[minIndex] > list[j]:\n                minIndex = j \n        list[i], list[minIndex] = list[minIndex], list[i]\n    return list",
        "1432": "import numpy as np\n\nrandom_numbers = np.random.uniform(0, 1, 100000)",
        "1433": "def get_similarity_score(str1, str2):\n    str1_words = str1.split()\n    str2_words = str2.split()\n\n    common_words = set(str1_words).intersection(str2_words)\n    num_common_words = len(common_words)\n\n    score = num_common_words \/ len(str1_words) * len(str2_words)\n    return score",
        "1434": "import math\n\ndef square_root(num):\n    return math.sqrt(num)\n\nnum = 49\nprint(\"Square root of \", num, \" is: \", square_root(num))",
        "1435": "def Multiply(a, b):\n    product = 0\n    i = 0 \n    while i < b:\n        product = product + a\n        i = i + 1\n    return product",
        "1436": "x is an integer, name is a string, and y is a list.",
        "1437": "The purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called.",
        "1438": "# Load libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Load dataset\ndata = pd.read_csv('basketball_players.csv')\n\n# Split into features and target\nX = data.drop(columns=['position'])\ny = data['position'] \n\n# Split into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Fit Naive Bayes classifier\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)",
        "1439": "from sklearn.cluster import KMeans\nimport numpy as np\n\n# generate dataset\nX = np.array([[2, 34], [3, 4], [7, 24], [5, 14], [8, 22], [10, 21]])\n\n# train K-Means\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\n# assign clusters\nclusters = kmeans.predict(X)\n\n# print data with respective clusters\nprint(\"Data | Cluster\")\nfor i in range(len(X)):\n print(X[i], \"|\", clusters[i])",
        "1440": "#! \/usr\/bin\/env python\n\n# Written by Vasaant S\/O Krishnan Friday, 19 May 2017\n# Run without arguments for instructions.\n\nimport sys\nusrFile = sys.argv[1:]\n\nif len(usrFile) == 0:\n    print \"\"\n    print \"# Script to read in file of the CODA format and perform some basic\"\n    print \"# statistical computations. An index.txt and chain.txt file must be\"\n    print \"# provided and the script will automatically identify them for internal\"\n    print \"# use. Options are:\"\n    print \"\"\n    print \"# print = Outputs mean, std and confidence interval (default 95%).\"\n    print \"# var   = Specify your required variable for hist, trace.\"\n    print \"# per   = Specify your required confidence interval (requires var=).\"\n    print \"# hist  = Plot histogram (requires var=).\"\n    print \"# bins  = Choose bin size (default bins=100)\"\n    print \"# trace = Trace plot (requires var=).\"\n    print \"\"\n    print \" -->$ coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\"\n    print \"\"\n    exit()\n\nimport re\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n\n\n#=====================================================================\n#   Define variables.\n#\nints         = '\\s+?([+-]?\\d+)'              # Integers for regex\n#floats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?)'    # Floats or int\nfloats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?'    # Floats or int or scientific\ncodaFiles    = []                            # CODAindex and CODAchain files\nindexFileFnd = False                         # CODAindex file identified?\nchainFileFnd = False                         # CODAchain file identified?\nindexCodes   = {}                            # Dictionary containing CODAindex info.\n# chainIndx    = []                          # Indexes\/Column 1 of CODAchain.txt file\nchainData    = []                            #    Data\/Column 2 of CODAchain.txt file\npercentile   = 95.0                          # Default percentile\nbins         = 100                           # Default number of bins for histogram\nreqIndxCode  = ''                            # User requested varible for hist, trace\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine which are the CODAindex and CODAchain files and\n#   automatically assign them to their respective variables.\n#\nfor i in usrFile:\n    codaSearch = re.search('.txt',i)\n    if codaSearch:\n        codaFiles.append(i)\n\nif len(codaFiles) == 2:    # Assuming 1 index and 1 chain file\n    for j in codaFiles:\n        with open(j,'r') as chkTyp:    # Run a quick check on the first line only\n            firstLine = chkTyp.readline()\n            codaIndex = re.search('^(\\S+)' + ints   + ints + '$', firstLine)\n            codaChain = re.search('^(\\d+)' + floats +        '$', firstLine)\n            if codaIndex:\n                indexFile = j\n                indexFileFnd = True\n            if codaChain:\n                chainFile = j\n                chainFileFnd = True\nelse:\n    print \"Insfficient files of CODA*.txt format.\"\n    print \"Check your input files.\"\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine percentile\n#\nfor i in usrFile:\n    userPercentile = re.search('per=([+-]?\\d+(?:\\.\\d+)?)',i)\n    if userPercentile:\n        percentile = abs(float(userPercentile.group(1)))\n        usrFile.append('print')\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine user requested variable from CODAIndex file\n#\nfor i in usrFile:\n    userReqCodaIndx = re.search('var=(\\S+)',i)\n    if userReqCodaIndx:\n        reqIndxCode = str(userReqCodaIndx.group(1))\n\n#   ... same for number of bins:\nfor i in usrFile:\n    userReqBins = re.search('bins=(\\d+)',i)\n    if userReqBins:\n        bins = int(userReqBins.group(1))\n        usrFile.append('hist')\n#=====================================================================\n\n\n\nif indexFileFnd and chainFileFnd:\n    #=====================================================================\n    #    Harvest index file for the variable list and corresponding\n    #    [start,stop] coords:\n    #\n    for line in open(indexFile, 'r'):\n        reqIndex = re.search('^(\\S+)' + ints   + ints + '$', line)\n        if reqIndex:\n            key   =  str(reqIndex.group(1))\n            value = [int(reqIndex.group(2)), int(reqIndex.group(3))]\n        indexCodes[key] = value\n\n    maxElement = max(indexCodes, key = indexCodes.get)    # The key with the largest value\n    chainLen   = max(indexCodes[maxElement])              # The largest value (expected amt. of data)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    I thought that initialising the arrays before filling them\n    #    would be faster. It is not.\n    #\n    # chainIndx = np.zeros(chainLen)\n    # chainData = np.zeros(chainLen)\n    # with open(chainFile, 'r') as harvestVals:\n    #     for i in range(chainLen):\n    #         currLine = harvestVals.readline()\n    #         reqChain = re.search('^(\\d+)' + floats + '$', currLine)\n    #         if reqChain:\n    #             chainIndx[i] =   int(reqChain.group(1))\n    #             chainData[i] = float(reqChain.group(2))\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Harvest chain file\n    #\n    for line in open(chainFile, 'r'):\n        reqChain = re.search('^(\\d+)' + floats + '$', line)\n        if reqChain:\n            #chainIndx.append(  int(reqChain.group(1)))\n            chainData.append(float(reqChain.group(2)))\n    #chainIndx = np.array(chainIndx)\n    chainData = np.array(chainData)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Basic check on the harvest by comparing harvested vs. expected\n    #    no. of data.\n    #\n    if len(chainData) != chainLen:\n        print \"    Warning! \"\n        print \"    %10d lines expected  from %s.\"%(chainLen,indexFile)\n        print \"    %10d lines harvested from %s.\"%(len(chainData),chainFile)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Output some basic statistics to the terminal.\n    #\n    if 'print' in usrFile:\n        print \"\\n%20s %10s %10s\"%(\"mean\",\"std\",str(percentile)+\"%\")\n        for i in indexCodes:\n            strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n            stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n\n            npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])    # Numpy sorts internally\n            minPer    = npPerTile[0]\n            maxPer    = npPerTile[1]\n            print \"%8s  %10.4f %10.4f %6d, %6.3f\"%(i, chainData[strtIndx:stopIndx].mean(),\n                                                      chainData[strtIndx:stopIndx].std(),\n                                                     minPer,maxPer\n                                                  )\n        print \"\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Trace plot that gives the variable value as a function of its\n    #    rank (or position in the chain)\n    #\n    if 'trace' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    traceRank = range(stopIndx-strtIndx)\n                    plt.plot(traceRank,chainData[strtIndx:stopIndx])\n                    plt.xlabel('Rank')\n                    plt.ylabel('Variable: '+i)\n                    plt.show()\n        else:\n            print \"No variable selected by user for trace plot.\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Histogram\n    #\n    if 'hist' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    [n, bins, patches] = plt.hist(chainData[strtIndx:stopIndx],\n                                                  bins    =  bins,\n                                                  normed  =  True,\n                                                  histtype= 'step'\n                                                  )\n\n                    y = mlab.normpdf(bins, chainData[strtIndx:stopIndx].mean(),\n                                           chainData[strtIndx:stopIndx].std()\n                                     )\n\n                    npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])\n                    maxPer    = npPerTile[1]\n                    plt.axvline(x=maxPer, color='k', label=str(percentile)+'%',ls=':',lw=0.8)\n\n                    plt.plot(bins,y,'--')\n                    plt.ylabel('Variable: '+i)\n                    plt.legend(frameon=False)\n                    plt.show()\n        else:\n            print \"No variable selected by user for histogram.\"\n    #=====================================================================\n",
        "1441": "joined_string = 'Programmingpython'",
        "1442": "import random\n\ninput_string = \"Hello World\"\n\n#Split the given string\nstring_list = list(input_string)\nrandom.shuffle(string_list)\n\n#Form the scrambled string\nscrambled_string = \"\".join(string_list) \n\nprint(\"Scrambled string:\",scrambled_string)",
        "1443": "for i in range(5):\n  print(\"Welcome\")",
        "1444": "from spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}')",
        "1445": "import itertools\n\nset_ABC = set(list('ABC'))\nall_permutations = list(itertools.permutations(set_ABC))\n\n# print all obtained permutations\n{print(''.join(words)) for words in all_permutations}",
        "1446": "import statistics\ndef calculate_std_dev(arr):\n\treturn statistics.stdev(arr)",
        "1447": "import random\nimport string\n\ndef generate_password(length=8):\n password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n return password\n\nlength = int(input('Please enter a length for the passwords (minimum 8 characters): '))\nfor i in range(10):\n print(generate_password(length))",
        "1448": "def is_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    for i, char in enumerate(s1):\n        if char in s1_dict:\n            if s1_dict[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True",
        "1449": "from collections import Counter\n\ndef most_frequent(input_list):\n    count = Counter(input_list)\n    max_freq = max(count.values())\n    for num, freq in count.items():\n        if freq == max_freq:\n            most_frequent_element = num\n    return most_frequent_element\n\nresult = most_frequent([2, 3, 4, 2, 5, 3])\nprint(result)",
        "1450": "word = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')",
        "1451": "def get_sum_even_factors(n):\n    sum = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n# Test \ninput_num = 50\nprint(get_sum_even_factors(input_num)) # returns 196",
        "1452": "import random\n\n# Game Options\nROCK = 'rock'\nPAPER = 'paper'\nSCISSORS = 'scissors'\ngame_options = [ROCK, PAPER, SCISSORS]\n\n# Game logic which determines the winner\ndef find_winner(player_option, computer_option):\nif player_option == computer_option:\n return 'draw'\n\nif player_option == ROCK:\n if computer_option == PAPER:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == PAPER:\n if computer_option == SCISSORS:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == SCISSORS:\n if computer_option == ROCK:\n  return 'computer'\n else:\n  return 'player'\n\n# Main game loop\nwhile True:\n# Get user input\nplayer_option = input('Enter Rock, Paper, or Scissors: ').lower()\n\n# Check to make sure input is valid\nif player_option in game_options:\n\n# Get computer's option\ncomputer_option = random.choice(game_options)\n\n# Print out computer's option\nprint(f'Computer chose {computer_option}')\n\n# Determine the winner\nwinner = find_winner(player_option, computer_option)\n\n# Print out the winner\nif winner == 'computer':\n print('Computer won!')\nelif winner == 'player':\n print('Congratulations, you won!')\nelse:\n print('It was a draw!')\n\n# Check if player wants to play another game\nplay_again = input('Do you want to play again? [y\/n] ')\nif play_again == 'n':\n break\n\nelse:\n print('Please enter a valid option.')",
        "1453": "def odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count",
        "1454": "arr = [1, 2, 3, 4]\n\nprint(len(arr))",
        "1455": "def print_binary(n):\n if n == 0:\n  return\n \n print_binary(n-1)\n print(bin(n))\n \nprint_binary(3)\n \n# Output: \n# 0b1\n# 0b10\n# 0b11",
        "1456": "def remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])",
        "1457": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# read dataset\ndataset = pd.read_csv('customer_churn.csv')\n\n# separate features(X) and labels (y)\ny = dataset.churn\nX = dataset.drop('churn', axis=1)\n\n# split dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# create and train the model\nmodel = LogisticRegression(solver='liblinear').fit(X_train, y_train)\n\n# predict using the model\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)",
        "1458": "[\u2018Python\u2019, \u2018is\u2019, \u2018a\u2019, \u2018programming\u2019, \u2018language\u2019]",
        "1459": "import gym\nimport numpy as np\n\nfrom stable_baselines.common.policies import MlpPolicy\nfrom stable_baselines.common.vec_env import DummyVecEnv\nfrom stable_baselines import PPO2\n\n# Training hyperparameters\nn_timesteps = 500000\n\n# Create the environment\nenv = gym.make('Tetris-v0')\nenv = DummyVecEnv([lambda: env])\n\n# Create the agent\nmodel = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)\n\n# Train the agent\nmodel.learn(total_timesteps=n_timesteps)\n\n# Test the agent\nenv.reset()\nstate, done = env.reset(), False\ntotal_reward = 0\n\nwhile not done:\n    action, _states = model.predict(state)\n    state, reward, done, info = env.step(action)\n    total_reward += reward # accumulate the reward\n\nprint('Total Reward: ', total_reward)",
        "1460": "def area_triangle(base, height):\n    return (base * height) \/ 2",
        "1461": "# define the function\ndef calculate_probability(probability_data, event):\n # define the probability of the event\n probability = 0\n\n # iterate over each probability in the data\n for p in probability_data:\n # check if the event matches\n if event == p:\n # add the probability to the sum\n probability += p\n\n # return the calculated probability\n return probability\n\n# the input\nprobability_data = [0.4, 0.6, 0.2, 0.9]\nevent = \"A\"\n\n# call the function\nprobability = calculate_probability(probability_data, event)\n\n# print the result\nprint(f\"The probability of event {event} happening is {probability}\")",
        "1462": "# Import the necessary packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\n\n# Create the neural network\ndef build_model(input_dim):\n    model = Sequential()\n    model.add(Dense(64,input_dim=input_dim, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(2, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001),\n    metrics=['accuracy'])\n    return model\n\n# Load and prepare the data\nX = np.load(\"x_data.npy\")\ny = np.load(\"y_data.npy\")\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Initialize the model and train it\ninput_dim = X_train.shape[1]\nmodel = KerasClassifier(build_fn=lambda: build_model(input_dim))\nmodel.fit(X_train, y_train, epochs=22, batch_size=32, verbose=1)\n\n# Evaluate the model accuracy\naccuracy = model.score(X_test, y_test)\nprint(\"Accuracy: \", accuracy)\n##\n\n6. Instruction: Create a react app for a small business website. The app should include an About Us page, a Contact Us page, and pages for each of the services offered by the business.\n\n6. Input:\nNot applicable\n\n6. Output:\nimport React from 'react';\nimport {\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom';\n\nimport '.\/App.css';\nimport '.\/AboutUs.css';\nimport '.\/ContactUs.css';\nimport '.\/Services.css';\n\nimport AboutUs from '.\/AboutUs.js';\nimport ContactUs from '.\/ContactUs.js';\nimport Services from '.\/Services.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Business Name<\/h1>\n        <nav>\n          <Link to=\"\/\">Home<\/Link>\n          <Link to=\"\/about-us\">About Us<\/Link>\n          <Link to=\"\/contact-us\">Contact Us<\/Link>\n        <\/nav>\n      <\/header>\n      <Switch>\n        <Route path=\"\/\" exact>\n          <Services \/>\n        <\/Route>\n        <Route path=\"\/about-us\">\n          <AboutUs \/>\n        <\/Route>\n        <Route path=\"\/contact-us\">\n          <ContactUs \/>\n        <\/Route>\n      <\/Switch>\n    <\/div>\n  );\n}\n\nexport default App;",
        "1463": "def lcs(a, b): \n    lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)] \n    \n    # row 0 and column 0 are initialized to 0 already \n    for i, x in enumerate(a): \n        for j, y in enumerate(b): \n            if x == y: \n                lengths[i+1][j+1] = lengths[i][j] + 1\n            else: \n                lengths[i+1][j+1] = \\\n                    max(lengths[i+1][j], lengths[i][j+1]) \n  \n    # read the substring out from the matrix \n    result = \"\" \n    x, y = len(a), len(b) \n    while x != 0 and y != 0: \n        if lengths[x][y] == lengths[x-1][y]: \n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]: \n            y -= 1\n        else: \n            assert a[x-1] == b[y-1] \n            result = a[x-1] + result \n            x -= 1\n            y -= 1\n              \n    return result",
        "1464": "def detect_spam(email):\n  \"\"\"This function uses a combination of keyword matching, regex pattern matching \n  and machine learning algorithms to detect spam emails.\"\"\"\n  \n  # Keyword matching\n  spam_keywords = [\"unsubscribe\", \"offer\", \"discount\", \"special\"]\n  for keyword in spam_keywords:\n    if keyword in email:\n      return 1\n  \n  # Regex pattern matching\n  spam_pattern = r\"\\d{5}-\\d{5}-\\d{5}-\\d{5}\"\n  matches = re.search(spam_pattern, email)\n  if matches:\n    return 1\n  \n  # Machine learning\n  # Train a machine learning model and predict whether or not the given email is a spam\n  \n  return 0",
        "1465": "import random\nimport string\n\ndef generate_password():\n  password_length = 12\n  char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)\n  random.shuffle(char_list)\n  return ''.join(char_list[:password_length])\n\nprint(generate_password())",
        "1466": "def is_anagram(s1, s2):\n    # Sort the strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # If sorted strings are equal \n    return s1 == s2 \n  \n# Driver code \ns1 = \"listen\"\ns2 = \"silent\"\nif (is_anagram(s1, s2)): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings aren't anagrams.\")",
        "1467": "def reverse_string(string): \n    return string[::-1] \n    \n# Time Complexity: O(n)\n# Space Complexity: O(1)",
        "1468": "import re\n\ndef scrape_tags(text):\n regex = r\"<h1>(.*?)<\/h1>(.*?)<p>(.*?)<\/p>\"\n result = re.findall(regex, text)\n\n if result:\n return result[0][2]\n else:\n return None\n\ntext = '<h1>This is a title<\/h1>Some text before the tags<p>This should be scraped<\/p>Some text after the tags'\nprint(scrape_tags(text)) # This should be scraped",
        "1469": "\"\"\"\nHangman Game in Python\n\"\"\"\n \nimport random\n \ndef get_word(): \n\twords = [\"television\", \"hydrogen\", \"graduate\", \"programming\", \"python\", \"puppy\", \"application\"] \n\treturn random.choice(words) \n \ndef play(word): \n\tword_completion = \"_\" * len(word) \n\tguessed = False\n\tguessed_letters = [] \n\tguessed_words = [] \n\ttries = 6\n\tprint(\"Let's play Hangman!\") \n\tprint(display_hangman(tries)) \n\tprint(word_completion) \n\tprint(\"\\n\")\n\t\n\twhile not guessed and tries > 0: \n\t\tguess = input(\"Please guess a letter or word: \").lower() \n\t\tif len(guess) == 1 and guess.isalpha(): \n\t\t\tif guess in guessed_letters: \n\t\t\t\tprint(\"You already guessed the letter\", guess) \n\t\t\telif guess not in word: \n\t\t\t\tprint(guess, \"is not in the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_letters.append(guess) \n\t\t\telse: \n\t\t\t\tprint(\"Good job,\", guess, \"is in the word!\") \n\t\t\t\tguessed_letters.append(guess) \n\t\t\t\tword_as_list = list(word_completion) \n\t\t\t\tindices = [i for i, letter in enumerate(word) \n\t\t\t\t\t\t\tif letter == guess] \n\t\t\t\tfor index in indices: \n\t\t\t\t\tword_as_list[index] = guess \n\t\t\t\tword_completion = \"\".join(word_as_list) \n\t\t\t\tif \"_\" not in word_completion: \n\t\t\t\t\tguessed = True\n\t\telif len(guess) == len(word) and guess.isalpha(): \n\t\t\tif guess in guessed_words: \n\t\t\t\tprint(\"You already guessed the word\", guess) \n\t\t\telif guess != word: \n\t\t\t\tprint(guess, \"is not the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_words.append(guess) \n\t\t\telse: \n\t\t\t\tguessed = True\n\t\t\t\tword_completion = word \n\t\telse: \n\t\t\tprint(\"Not a valid guess.\") \n\t\t\t\n\t\tprint(display_hangman(tries)) \n\t\tprint(word_completion) \n\t\tprint(\"\\n\")\n \n\tif guessed: \n\t\tprint(\"Congrats, you guessed the word! You win!\")\n\telse: \n\t\tprint(\"Sorry, you ran out of tries. The word was \" + word + \". Maybe next time!\") \n\ndef display_hangman(tries): \n\tstages = [ \n\t\t\t\t\"  =========\\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |     | \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/| \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\",\n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |    \/  \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |    \/ \\\\ \\n  |        \\n  |        \\n  |        \\n__|__\"] \n\treturn stages[tries] \n \n \ndef main(): \n\tword = get_word() \n\tplay(word) \n\twhile input(\"Play Again? (Y\/N) \").upper() == \"Y\": \n\t\tword = get_word() \n\t\tplay(word) \n \nif __name__ == \"__main__\":\n\tmain()",
        "1470": "def convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal)",
        "1471": "import random\n\ndef find_max(lst):\n max_val = max(lst)\n\n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer)",
        "1472": "string1 = 'Inception'\nstring2 = 'Interstellar'\n\nif len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2)",
        "1473": "lst = sorted(lst, key=len)",
        "1474": "sorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True))\nprint(sorted_d)",
        "1475": "import random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list)",
        "1476": "import psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor()",
        "1477": "# Define Neural Network\nmodel = tf.keras.Sequential([\n    # First Hidden Layer \n    tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim),\n    # Second Hidden Layer \n    tf.keras.layers.Dense(40, activation='relu'),\n    # Third Hidden Layer \n    tf.keras.layers.Dense(30, activation='relu'),\n    # Output Layer \n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])",
        "1478": "class Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year\n\n  def get_make(self):\n    return self.make\n  \n  def get_model(self):\n    return self.model\n  \n  def get_year(self):\n    return self.year",
        "1479": "def is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False",
        "1480": "def sum_elements(arr):\n result = 0\n for i in arr:\n result += i\n return result\n\nprint(sum_elements([1,2,3,4,5]))",
        "1481": "import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)",
        "1482": "def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)",
        "1483": "def intersection_arr(arr1, arr2):\n    # create an empty list for storing the elements\n    result = []\n    \n    for element in arr1:\n        if element in arr2: \n            result.append(element)\n    \n    return result\n\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nintersect = intersection_arr(a, b)\nprint(intersect)",
        "1484": "def get_median(num_list):\n    sorted_list = sorted(num_list)\n    length = len(sorted_list)\n    if (length % 2 == 0):\n        median = (sorted_list[length\/\/2] + sorted_list[length\/\/2 -1])\/2.0\n    else:\n        median = sorted_list[length\/\/2]\n    return median",
        "1485": "from flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(name)\napi = Api(app)\n \nemployees = [\n {\n \"name\": \"John Doe\",\n \"salary\": 10000,\n \"experience\": 3\n },\n {\n \"name\": \"Alice Smith\",\n \"salary\": 12000,\n \"experience\": 4\n }\n]\n \nclass Employee(Resource):\n def get(self, name):\n for employee in employees:\n if(name == employee[\"name\"]):\n return employee, 200\n return \"Employee not found\", 404\n \n def post(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n return \"Employee with name {} already exists\".format(name), 400\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef put(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n employee[\"salary\"] = args[\"salary\"]\n employee[\"experience\"] = args[\"experience\"]\n return employee, 200\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef delete(self, name):\n global employees\n employees = [employee for employee in employees if employee[\"name\"] != name]\n return \"{} is deleted.\".format(name), 200\n \napi.add_resource(Employee, \"\/employee\/<string:name>\")\n \napp.run(debug=True)",
        "1486": "def stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr)",
        "1487": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the stock data\ndata = pd.read_csv('aapl_stock_data.csv')\n\n# Create the features and labels datasets\nX = data[['High', 'Low', 'Close', 'Volume']]\ny = data['Adj Close']\n\n# Create a linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Make predictions\npredictions = reg.predict(X)\n\n# Calculate the error between predictions and actual values\nerror = np.mean(np.abs((y - predictions) \/ y) * 100)\n\n# Print out the results\nprint('Mean Absolute Percent Error: {:.2f}%'.format(error))",
        "1488": "class Car:\n    def __init__(self, top_speed, make, color):\n        self.top_speed = top_speed\n        self.make = make\n        self.color = color",
        "1489": "def reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))",
        "1490": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Start by loading in the data\ndata = pd.read_csv('sales_data.csv')\n\n# Extract the inputs and the targets\ninputs = data[['date', 'time', 'price', 'category', 'discount']]\ntargets = data.sales\n\n# Create the model and train it\nmodel = LinearRegression()\nmodel.fit(inputs, targets)\n\n# Make predictions\npredictions = model.predict(inputs)",
        "1491": "def word_count(string):\n    words = string.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    output = word_count(\"The quick brown fox jumped over the lazy dog\")\n    print(output)",
        "1492": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits\n    string = ''.join(random.choice(chars) for _ in range(8))\n    return string",
        "1493": "def multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers",
        "1494": "word_lengths = [len(word) for word in words]\n\nprint(word_lengths) # [5, 5, 1, 4, 3]",
        "1495": "class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating",
        "1496": "strings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string)",
        "1497": "def classify_numbers(list):\n    '''This function will classify the list of numbers into positives and negatives'''\n\n    positives = []\n    negatives = []\n\n    for n in list:\n        if n >= 0:\n            positives.append(n)\n        else:\n            negatives.append(n)\n\n    return positives, negatives",
        "1498": "def bubble_sort(arr): \n    n = len(arr)\n  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [1, 9, 3, 8, 4]\n\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])",
        "1499": "# Python program to generate all prime numbers between two given numbers \n  \ndef generate_prime_numbers(low,high): \n    if low == 1: \n        low += 1\n    for num in range(low,high + 1):    # Iterating over the range \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                print(num) \n  \nlow = 1\nhigh = 10\n\ngenerate_prime_numbers(low,high)",
        "1500": "import nltk\n\ndef synonyms_words(text):\n    text_tokens = nltk.word_tokenize(text)\n    replacement_words = []\n    \n    for token in text_tokens:\n        synonyms = nltk.wordnet.synsets(token)\n        if synonyms:\n            replacement_words.append(synonyms[0].name().split('.')[0])\n        else:\n            replacement_words.append(token)\n\n    return ' '.join(replacement_words)\n\ntext = \"this is an example sentence\"\nprint(synonyms_words(text))",
        "1501": "import datetime\nimport pytz\n \ndef print_time(timezone):\n    tz = pytz.timezone(timezone)\n    current_time = datetime.datetime.now(tz)\n    print(\"Current time in {tz}: {time}\".format(tz=timezone, time=str(current_time)))\n \nif __name__ == '__main__':\n    print_time('America\/Chicago')",
        "1502": "import nltk\n\ndef process_sentence(sentence):\n \"\"\"\n A basic NLP pipeline for analyzing a given sentence.\n \"\"\"\n tokens = nltk.word_tokenize(sentence) # Tokenize the sentence\n tagged = nltk.pos_tag(tokens) # Assign part-of-speech labels\n parsed = nltk.parse.stanford.StanfordParser().raw_parse(sentence) # Parse the sentence\n return tokens, tagged, parsed",
        "1503": "class Counter:\n    def __init__(self):\n        self.counter = 0\n\n    def increase(self):\n        self.counter += 1\n\n    def decrease(self):\n        self.counter -= 1\n\n    def getter(self):\n        return self.counter",
        "1504": "def average(array):\n '''\n Finds the average of all numbers in an array\n\n Args:\n array (list): List of numbers\n\n Returns:\n float: The average of all values in the array\n '''\n\n total = 0\n for value in array:\n total += value\n\n return total \/ len(array)",
        "1505": "def roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))\/(2*a)\n    root2 = (-b - math.sqrt(disc))\/(2*a)\n    return root1, root2",
        "1506": "import json\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\n@app.route('\/query', methods=['GET'])\ndef get_data():\n query = request.args['query']\n users = db.session.execute(query)\n users_list = [dict(user) for user in users]\n return json.dumps({ \"users\": users_list })\n\nif name == 'main':\n app.run(debug=True)",
        "1507": "# Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area())",
        "1508": "list_x = [\"apples\", \"oranges\", \"bananas\", \"pineapples\"]\nfor item in list_x:\n if(len(item) % 2 == 0):\n  print(item)\n#output: apples, oranges, pineapples",
        "1509": "def get_hostname(url):\n    hostname = url.split(\"\/\")[2]\n    return hostname\n\nhostname  = get_hostname(url)\nprint(hostname)",
        "1510": "def generate_anagrams(s):\n    if len(s) == 1:\n        return s\n\n    anagrams = [] \n    for i, letter in enumerate(s):\n        for anagram in generate_anagrams(s[:i] + s[i+1:]):\n            anagrams.append(letter + anagram)\n    return anagrams",
        "1511": "def lis(arr):\n    n = len(arr)\n \n    # Initialize LIS values for all indices \n    lis = [1]*n\n \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1 : \n                lis[i] = lis[j]+1 \n \n    # Initialize maximum to 0 to get the maximum of all LIS \n    maximum = 0\n \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n \n    return maximum \n \narr = [3,4,-1,0,6,2,3]\nprint('Length of LIS is', lis(arr))",
        "1512": "class Triangle:\ndef __init__(self, side1, side2, side3):\n self.side1 = side1\n self.side2 = side2\n self.side3 = side3\n \ndef get_area(self):\n s = (self.side1 + self.side2 + self.side3) \/ 2\n return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n \ndef is_equilateral(self):\n return self.side1 == self.side2 == self.side3",
        "1513": "class MobilePhone:\n    def __init__(self, brand, model, year, display_size):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.display_size = display_size",
        "1514": "def replace_vowels(input_string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    output_string = ''\n    for s in input_string:\n        if s in vowels:\n            output_string += '_'\n        else:\n            output_string += s\n    return output_string\n\nresult = replace_vowels('teststring')\nprint(result)",
        "1515": "def findNearestSquares(n):\n  nearestSquareList = []\n  i = 1\n  # Find all the nearest squares\n  while i * i <= n:\n    nearestSquareList.append(i * i)\n    i += 1\n  \n  # Find the nearest 3 squares\n  nearest3Squares = nearestSquareList[-3:]\n  \n  return nearest3Squares\n\nnearest3Squares = findNearestSquares(30)\nprint(nearest3Squares)\n\n# Output:\n# [25, 28, 29]",
        "1516": "import json\n\nwith open('data.json', 'r') as f:\n data = json.load(f)\n\ndata_list = []\n\nfor item in data:\n data_list.append(item)\n\nprint(data_list)",
        "1517": "def word_frequency(string):\n    word_freq = {} \n  \n    for word in string.split(): \n        if word in word_freq: \n            word_freq[word] += 1\n        else: \n            word_freq[word] = 1\n  \n    return word_freq \n      \nstring = \"Hello world hello world\"\nprint(word_frequency(string))",
        "1518": "def remove_x(lst):\n    \"\"\"\n    Function to remove all occurrences of a character 'x' from a list.\n\n    Args:\n        lst (list): The list to process.\n\n    Returns:\n        A list with all occurrences of the character 'x' removed.\n    \"\"\"\n    \n    return [item for item in lst if item != 'x']",
        "1519": "class Queue:\n  def __init__(self):\n    self.items = []\n\n  def is_empty(self):\n    return self.items == []\n\n  def enqueue(self, item):\n    self.items.insert(0, item)\n  \n  def dequeue(self):\n    return self.items.pop()\n\n  def size(self):\n    return len(self.items)",
        "1520": "\"\"\"\nDevelop a neural network model in Python to recognize a hand-written number\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n#load the mnist dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n#discretize the images by flattening them\nx_train = x_train.reshape(-1, 784) \nx_test = x_test.reshape(-1, 784)\n\n#normalize the pixel values from 0 to 1\nx_train = x_train\/255.0\nx_test = x_test\/255.0\n\n#create a neural network model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#compile and train the model\nmodel.compile(\n    loss='sparse_categorical_crossentropy', metrics=['accuracy']\n)\nmodel.fit(x_train, y_train,  epochs = 10)\n\n#evaluate the model\nmodel.evaluate(x_test, y_test)",
        "1521": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass LinearRegression:\n def __init__(self):\n self.weights = None\n self.bias = None\n\n def fit(self, X, y):\n\"\"\"\nFit the linear regression model to the given data\n\nParameters\n----------\nX : array-like, shape (n_samples, n_features)\nTraining data\n\ny : array-like, shape (n_samples,)\nTarget values\n\nReturns\n-------\nself : returns an instance of self.\n\"\"\"\n \n # Compute the weights and bias\n X = np.array(X)\n y = np.array(y)\n weights = np.dot(np.linalg.pinv(X), y)\n bias = y - np.dot(X, weights)\n \n self.weights = weights\n self.bias = bias\n \n def predict(self, x):\n\"\"\"\nPredict the output value for a given input\n\nParameters\n----------\nx : array-like, shape (n_samples, n_features)\nInput data\n\nReturns\n-------\ny : array-like, shape (n_samples,)\nPredicted output value\n\"\"\"\n \n # Return the predictions using the weights and bias\n predictions = np.dot(np.array(x), self.weights) + self.bias\n return predictions",
        "1522": "def infix_to_postfix(expression):\n    # Separate the expression by tokens\n    tokens = expression.split(' ')\n    \n    # Create an operator stack\n    op_stack = []\n    \n    # Create a list for the postfix output\n    postfix_output = []\n    \n    # Iterate through the tokens\n    for token in tokens:\n        # If token is an operator\n        if token == '+' or token == '-' or token == '*':\n            # Append it to the operator stack\n            op_stack.append(token)\n        # If token is an operand\n        else:\n            # Append it to the postfix output\n            postfix_output.append(token)\n            # Pop operands from the stack while not empty\n            while op_stack:\n                # Append it to the postfix output\n                postfix_output.append(op_stack.pop())\n                \n    # Return the postfix output as a string\n    return ' '.join(postfix_output)",
        "1523": "A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:\n\narray_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],\n                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],\n                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])",
        "1524": "class GameController:\n    def __init__(self):\n        self.state = {'lives': 3, 'score': 0, 'level': 1}\n    \n    def update_game_state(self, lives, score, level):\n        self.state['lives'] = lives\n        self.state['score'] = score\n        self.state['level'] = level\n\n    def get_game_state(self):\n        return self.state",
        "1525": "def merge_dictionaries(d1, d2):\n    d3 = {}\n    \n    for key in d1:\n        d3[key] = d1[key]\n    for key in d2:\n        d3[key] = d2[key]\n        \n    return d3",
        "1526": "def break_sentence(sentence):  \n    return sentence.split(\" \")",
        "1527": "import string \n\ndef is_pangram(sentence): \n   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   for char in alphabet: \n      if char not in sentence.lower(): \n         return False\n   return True",
        "1528": "from bs4 import BeautifulSoup\nimport requests\n\ndef get_hyperlinks(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    links = []\n    for a in soup.find_all('a', href=True):\n        links.append(a['href'])\n    return links",
        "1529": "# Importing necessary libraries \nimport numpy as np \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n# Defining the function which takes the classifier object and optimizes it\ndef optimize_model(classifier, parameters):\n    # Create a GridSearchCV object, which will use 5-fold cross validation \n    clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5)\n\n    # Fit the model on the training data \n    clf.fit(X_train, y_train)\n\n    # Predict the values on the test dataset\n    y_pred = clf.predict(X_test)\n\n    # Calculate the accuracy score\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    # Print the accuracy\n    print('Accuracy: {:.2f}%'.format(accuracy*100)) \n\n    # Return the best parameters and the classifier\n    return clf.best_params_, clf",
        "1530": "def max_subarray_sum(arr):\n    current_sum = 0\n    max_sum = 0\n\n    for x in arr:\n        current_sum += x\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\nprint(result)",
        "1531": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "1532": "^\\(?\\d{3}\\)?\\s?\\-?\\d{8,12}$",
        "1533": "import random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list)",
        "1534": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)",
        "1535": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\nfor li in soup.find_all('li'):\n    data.append({\n        'name': li.text.split(\":\")[0],\n        'value': li.text.split(\":\")[1]\n    })\n\nprint(data)\n# Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}]",
        "1536": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(4))",
        "1537": "def rotateNodes(root): \n    # if node has a left child \n    if root.left is not None: \n        # we rotate clockwise \n        newRoot = root.left \n        root.left = newRoot.right \n        newRoot.right = root \n        root = newRoot \n  \n    # if node has a right child \n    if root.right is not None: \n        # we rotate counter clockwise \n        newRoot = root.right \n        root.right = newRoot.left  \n        newRoot.left = root \n        root = newRoot \n\n    return root",
        "1538": "import matplotlib.pyplot as plt \n \n# Data to plot\ndata = [1, 2, 3, 6, 5, 4, 7]\n \n# Create the graph object\nplt.bar(range(len(data)), data, align='center')\n \n# Label the graph\nplt.xticks(range(len(data)), range(1, len(data)+1))\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Bar Graph')\n \n# Display the graph\nplt.show()",
        "1539": "def filter_numbers(strings): \n    return [s for s in strings if not any(c.isdigit() for c in s)]\n\nif __name__ == '__main__':\n    strings = [\"apple\",\"hello123\",\"hi12345\", \"good15\"]\n    print (filter_numbers(strings))",
        "1540": "import string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password",
        "1541": "def contains(s1, s2):\n return s2 in s1\n\nstring1 = \"Hello World!\"\nstring2 = \"World\"\n\nprint(contains(string1, string2)) # True",
        "1542": "total_cost = 0\nfor order in orders: \n total_cost += order['price']\n\nprint('Total cost is', total_cost)",
        "1543": "def count_distinct_letters(string):\n   distinct_letters = set()\n   for word in string.split(' '):\n        distinct_letters.update(set(word))\n   return len(distinct_letters)\n\n# example\nstring = 'hello world'\nprint(count_distinct_letters(string)) # 6",
        "1544": "import random\n\ndef random_integer(start, end):\n  return random.randint(start, end)",
        "1545": "def countCharacters(string): \n    # Create dictionary to return  \n    # count of each character \n    str_dict = {} \n  \n    # Count frequency of each \n    # character of the string \n    for i in string: \n        if i in str_dict: \n            str_dict[i] += 1\n        else: \n            str_dict[i] = 1\n  \n    return str_dict \n\n# Driver code \nstring = \"String Counting\"\n\n# Print result \nprint(countCharacters(string))",
        "1546": "def test_gt_5(num):\n    return num > 5",
        "1547": "class Cube:\n    def __init__(self):\n        self.sideLengthA = 10\n        self.sideLengthB = 10\n        self.sideLengthC = 10",
        "1548": "my_obj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}",
        "1549": "Machine learning.",
        "1550": "def reverse_sentence(sentence):\n reversed_sentence = \" \".join(sentence.split()[::-1])\n return reversed_sentence\n\nprint(reverse_sentence(sentence))\n# Output: sentence test a is This",
        "1551": "def get_even_sum(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nnums = [2, 3, 6, 7, 13, 14]  \neven_sum = get_even_sum(nums)\nprint(even_sum)",
        "1552": "import requests\nfrom bs4 import BeautifulSoup\n\n# Website URL\nurl = 'LINK'\n \n# Make a request and get the HTML content\nr = requests.get(url) \nhtml_content = r.text\n\n# Parse the HTML content\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Price\nprice_tag = soup.find(class_='price')\nprice = price_tag.text\n\n# Description\ndescription_tag = soup.find(class_='product-description')\ndescription = description_tag.text\n\nprint('Price:', price)\nprint('Description:', description)",
        "1553": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL to scrape\nurl = \"https:\/\/www.nytimes.com\/\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# News Section\nnews_Section = soup.find(\"div\", class_=\"css-1qwxefa esl82me1\")\n# print(news_Section)\n\n# News Articles\narticles = news_Section.find_all(\"h2\", class_=\"e1xfvim30\")\n# print(articles)\n\n# Empty list to store all news articles\nnews_list = []\n\n# Loop over each article\nfor article in articles:\n    # Extract the title of the article\n    title = article.find(\"a\").text\n\n    # Extract the author of the article\n    author = article.find(\"span\", class_=\"css-1n7hynb\").text\n    \n    # Extract the date the article was published\n    date = article.find(\"time\").text\n    \n    # Extract the URL of the article\n    link = article.find(\"a\")[\"href\"]\n    \n    # Store all the information in one dictionary\n    news_dict = {\n        \"title\": title,\n        \"author\": author,\n        \"date\": date,\n        \"link\": link\n    }\n    \n    # Append the dictionary to the list\n    news_list.append(news_dict)\n\n# Print the list\nprint(news_list)",
        "1554": "def search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False",
        "1555": "import urllib.request\nfrom bs4 import BeautifulSoup\n\nurls = [\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\nfor url in urls:\n html = urllib.request.urlopen(url).read()\n soup = BeautifulSoup(html)\n title = soup.title.string\n print(title)",
        "1556": "array = [3, 4, 2, 8, 5, 6]\nsum = 10\n\ndef find_pair(array,sum):\n for i in range (len(array)-1):\n  for j in range (i+1, len(array)):\n   if array[i] + array[j] == sum:\n    print(\"Pair found:\",array[i], array[j])\n\nfind_pair(array,sum)",
        "1557": "def reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)",
        "1558": "a = 5\nb = 10\nc = a + b\nprint(c)",
        "1559": "# Python script to validate an email address\n# Ask the user to enter an email address\nemail = input(\"Please enter your email address:\")\n\n# Define a regular expression to validate the email address\nvalid_email_regex = r\"^[\\w-]+@([\\w-]+\\.)+[\\w]+$\"\n# Check whether the given email address is valid\nif re.search(valid_email_regex, email):\n    # If valid display success message\n    print(\"The entered email address is valid\")\nelse:\n    # Otherwise display an error message\n    print(\"The entered email address is invalid!\")",
        "1560": "# Python3 program to find frequency table \nfrom collections import Counter \ndef freq_table(arr):\n    return dict(Counter(arr))",
        "1561": "def closest_to_zero(arr):\n    closest_val = 0\n    closest_diff = float('inf')\n    \n    for val in arr:\n        if abs(val) < abs(closest_diff):\n            closest_diff = val\n            closest_val = val\n\n    return closest_val\n\narr1 = [-2, 4, -5, -1]\nresult = closest_to_zero(arr1)\nprint(result)",
        "1562": "def FibonacciGenerator(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n \n# Driver Program \nprint(FibonacciGenerator(10))",
        "1563": "import json\n\ndef convert_json_to_dict(json_object):\n    return json.loads(json_object)",
        "1564": "import random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")",
        "1565": "import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the website content\nlink = \"https:\/\/example.com\"\ndata = requests.get(link)\n\n# Parse the HTML content\nsoup = BeautifulSoup(data.text, 'html.parser')\n\n# Extract all the <p> tags\ncontent = soup.find_all('p')\n\n# Print the content\nfor item in content:\n    print(item.text)",
        "1566": "avg = lambda a,b : (a + b)\/2",
        "1567": "import random\n\nnumber = random.randint(10, 20)\nwhile (number == 14):\n  number = random.randint(10, 20)\n\nprint(number)",
        "1568": "def normalize(numbers):\n avg = sum(numbers) \/ len(numbers)\n variance = sum((x - avg) ** 2 for x in numbers) \/ len(numbers)\n stdev = variance ** 0.5\n return [(x - avg) \/ stdev for x in numbers]",
        "1569": "def extract_data(dataset):\n    name_list = []\n    age_list = []\n    hobby_list = []\n    \n    for entry in dataset:\n        name_list.append(entry[\"name\"])\n        age_list.append(entry[\"age\"])\n        hobby_list.append(entry[\"hobby\"])\n    \n    return name_list, age_list, hobby_list",
        "1570": "def generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem",
        "1571": "def sort(list):\n    \"\"\"\n    Implements a comparison sorting algorithm using Python.\n    Sorts the given list in ascending order.\n    \"\"\"\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nif __name__ == '__main__':\n    list = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(sort(list))",
        "1572": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nurl = \"https:\/\/www.example.com\/\"\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all links in the page\ntitles_list = soup.find_all(\"a\")\ntitles_urls = [(title.text, title[\"href\"]) for title in titles_list]\n\n# Print all titles and their corresponding links\nfor title, url in titles_urls:\n    print(\"Title:\", title)\n    print(\"URL:\", url)\n    print()",
        "1573": "list1 = [3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]\n\ncommon_elements = set(list1) & set(list2)\nprint(list(common_elements)) \n# Output: [3, 4, 5, 6]",
        "1574": "import random\nimport spacy\nimport nltk\n\n# load the English language model\nnlp = spacy.load('en_core_web_sm')\n\n# define some sample conversations\nconversations = [ \n       ['Hello', 'Hi there'], \n       ['How are you?', 'I am doing great!'], \n       ['Bye', 'Goodbye!'], \n]\n\n# define an answer generator\ndef answer(text):\n    doc = nlp(text)\n    tokens = [token.text for token in doc]\n    for conversation in conversations:\n        if conversation[0] in tokens:\n            return random.choice(conversation[1:])\n    return ''\n\n# create a loop to run the chatbot\nwhile True:\n    text = input('You: ')\n    response = answer(text)\n    print('Bot: ', response)\n    if response == 'Goodbye!':\n        break",
        "1575": "import json\n \ndef reformat_json(json_string):\n    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)",
        "1576": "def remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr",
        "1577": "\"\"\"\nRemove duplicates from an array\n\"\"\"\n\ndef remove_duplicates(arr):\n    # Create a set \n    seen = set()\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        if arr[i] not in seen:\n            seen.add(arr[i])\n            \n    return seen\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 3, 3, 4, 5, 6]\n    print(remove_duplicates(arr))",
        "1578": "import xml.etree.ElementTree as ET\n \n# Read the XML file\ntree = ET.parse('items.xml')\n \n# Get the root element\nroot = tree.getroot()\n \n# Iterate over each item\nfor item in root.findall('item'):\n # Get the title\n title = item.find('title').text\n # Get the description\n description = item.find('description').text\n \n print('Title: ', title)\n print('Description: ', description)",
        "1579": "import collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price)",
        "1580": "import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt_string(plain_text, key, iv):\n # convert strings to bytes\n plain_text_bytestring = bytes(plain_text, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # encrypt the message using the cipher object\n encrypted_string = cipher.encrypt(plain_text_bytestring)\n\n # base64 encode the encrypted message\n base64_encrypted_string = base64.b64encode(encrypted_string)\n\n # return the base64 encoded message\n return base64_encrypted_string.decode('utf-8')\n\ndef decrypt_string(base64_encrypted_string, key, iv):\n # convert strings to bytes\n base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # decode the base encoded message\n encrypted_string = base64.b64decode(base64_encrypted_string)\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # decrypt the message using the cipher object\n decrypted_string = cipher.decrypt(encrypted_string)\n\n # return the decrypted message in string format\n return decrypted_string.decode('utf-8')",
        "1581": "def prime_numbers(n):\n for i in range(2,n+1):\n prime = True\n for j in range(2,i):\n if i % j == 0:\n prime = False\n if prime:\n print(i)\n \nprime_numbers(10) # Output: 2, 3, 5, 7",
        "1582": "def find_max(nums):\n    max_num = 0\n    for num in nums:\n        str_num = str(num)\n        mul_res = 1\n        for digit in str_num:\n            mul_res *= int(digit)\n        max_num = max(max_num, mul_res)\n    return max_num",
        "1583": "def classify_number_data(data):\n    numbers_below_15 = []\n    numbers_above_15 = []\n\n    for number in data:\n        if number <= 15:\n            numbers_below_15.append(number)\n        else:\n            numbers_above_15.append(number)\n    \n    return numbers_below_15, numbers_above_15",
        "1584": "def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))",
        "1585": "def word_count(text_list):\n    result = {}\n    for word in text_list:\n        if word in result.keys():\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\ntext_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\ncounts = word_count(text_list)\nprint(counts)  # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}",
        "1586": "def remove_vowels(strings):\n vowels = ['a', 'e', 'i', 'o', 'u']\n result = []\n for string in strings:\n result.append(''.join(c for c in string if c not in vowels))\n return result",
        "1587": "import requests\nfrom bs4 import BeautifulSoup\n \ndef get_page_word_count(url):\n  r = requests.get(url)\n  soup = BeautifulSoup(r.content, 'html.parser')\n  words = soup.find_all(text=True)\n  count = 0 \n  for w in words:\n    count += len(w.split())\n  return count\n  \nurl = \"http:\/\/example.com\"\nword_count = get_page_word_count(url)\nprint(\"word count = \", word_count)",
        "1588": "def string_to_int(string):\n    num = 0 \n    for char in string:\n        num = num * 10 + (ord(char) - ord('0')) \n    return num",
        "1589": "def get_maximum_item(arr):\n    if len(arr) == 0:\n        return float('-infinity')\n    \n    maximum_number = arr[0]\n\n    for item in arr[1:]:\n        if item > maximum_number:\n            maximum_number = item \n            \n    return maximum_number",
        "1590": "def bubbleSort(arr): \n    n = len(arr) \n  \n     # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 3, 2, 4, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "1591": "word_dict = {}\n\n# Count frequency of each word\nfor word in input_list:\n if word in word_dict.keys():\n word_dict[word] += 1\n else:\n word_dict[word] = 1\n\nprint(word_dict)\n# Output: {'word': 2, 'words': 1, 'python': 1}",
        "1592": "def bubble_sort(lst):\n n = len(lst)\n    \n for i in range(n-1):\n for j in range(0, n-i-1):\n if lst[j] > lst[j+1]:\n lst[j], lst[j+1] = lst[j], lst[j+1]\n \n sorted_list = bubble_sort(unsorted_list)",
        "1593": "def print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word)",
        "1594": "from lxml import html\nimport requests\n\nurl = \"https:\/\/www.tripadvisor.com\/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html\"\npage = requests.get(url)\n\ntree = html.fromstring(page.content)\nuser_names = tree.xpath('\/\/a[@class=\"scrname\"]\/text()')\nreview_texts = tree.xpath('\/\/p[@class=\"partial_entry\"]\/text()')\n\n# print user names and comments\nfor user_name, review_text in zip(user_names, review_texts):\n print(user_name, '\\n', review_text, '\\n\\n')",
        "1595": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)\/\/2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1",
        "1596": "def reverse_string(str):\n    \"\"\" Reverses a given string \"\"\"\n\n    rev_str = \"\"\n\n    for c in str:\n        rev_str = c + rev_str\n\n    return rev_str\n\nstr = \"Hello World\"\nrev_str = reverse_string(str)\n\nprint(rev_str)",
        "1597": "result = set(seq)\nprint(result)",
        "1598": "def is_prime(n):\n    '''\n    Function to check if the given number is a prime\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True",
        "1599": "\"\"\"\nCreate a stack with basic push and pop operations\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        return self.stack.pop()\n    def peek(self):\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0",
        "1600": "import numpy as np\n \n# Number of sample points\nN = 600\n \n# sample spacing\nT = 1.0 \/ 800.0\nx = np.linspace(0.0, N*T, N)\ny = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\nyf = np.fft.fft(y)\nxf = np.fft.fftfreq(N, T)\n \nimport matplotlib.pyplot as plt\nplt.plot(xf, 2.0\/N * np.abs(yf[0:N\/\/2]))\nplt.grid()\nplt.show()",
        "1601": "my_name_is_ryan",
        "1602": "def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False",
        "1603": "import speech_recognition as sr\n\nr = sr.Recognizer()\n\nwith sr.Microphone() as source:\n    print(\"Say something!\")\n    audio = r.listen(source)\n\ntry:\n    print(\"You said: \" + r.recognize_google(audio))\n    if r.recognize_google(audio) == 'Good morning':\n        print('correct')\n    else:\n        print('incorrect')\nexcept:\n    pass",
        "1604": "import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch HTML page\nresponse = requests.get('http:\/\/example.com\/table.html')\n\n# Create BeautifulSoup object\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract table\ntable = soup.find('table')\n\n# Extract columns\ncolumns = [col.text for col in table.find_all('td')]\n\n# Extract rows\nrows = [row.find_all('td') for row in table.find_all('tr')]\n\n# Iterate over each row and store data in a dict\ndata = []\nfor row in rows:\n     data.append([col.text for col in row])\n\n# Print the data\nprint(data)\n# [['Name', 'Email'], ['John Doe', 'john@example.com']]",
        "1605": "def time_in_words(hours, mins):\n    # Create phrase string corresponding to time\n    phrase = \"\"\n    if hours == 0:\n        phrase += \"twelve\"\n    elif hours == 1:\n        phrase += \"one\"\n    elif hours == 2:\n        phrase += \"two\"\n    elif hours == 3:\n        phrase += \"three\"\n    elif hours == 4:\n        phrase += \"four\"\n    elif hours == 5:\n        phrase += \"five\"\n    elif hours == 6:\n        phrase += \"six\"\n    elif hours == 7:\n        phrase += \"seven\"\n    elif hours == 8:\n        phrase += \"eight\"\n    elif hours == 9:\n        phrase += \"nine\"\n    elif hours == 10:\n        phrase += \"ten\"\n    elif hours == 11:\n        phrase += \"eleven\"\n    elif hours == 12:\n        phrase += \"twelve\"\n        \n    if mins == 0:\n        phrase += \" o'clock\"\n    elif mins == 1:\n        phrase += \" o'one\"\n    elif mins == 2:\n        phrase += \" o'two\"\n    elif mins == 3:\n        phrase += \" o'three\"\n    elif mins == 4:\n        phrase += \" o'four\"\n    elif mins == 5:\n        phrase += \" o'five\"\n    elif mins == 6:\n        phrase += \" o'six\"\n    elif mins == 7:\n        phrase += \" o'seven\"\n    elif mins == 8:\n        phrase += \" o'eight\"\n    elif mins == 9:\n        phrase += \" o'nine\"\n    elif mins == 10:\n        phrase += \" ten\"\n    elif mins == 11:\n        phrase += \" eleven\"\n    elif mins == 12:\n        phrase += \" twelve\"\n    elif mins == 13:\n        phrase += \" thirteen\"\n    elif mins == 14:\n        phrase += \" fourteen\"\n    elif mins == 15:\n        phrase += \" fifteen\"\n    elif mins == 16:\n        phrase += \" sixteen\"\n    elif mins == 17:\n        phrase += \" seventeen\"\n    elif mins == 18:\n        phrase += \" eighteen\"\n    elif mins == 19:\n        phrase += \" nineteen\"\n    elif mins == 20:\n        phrase += \" twenty\"\n    elif mins == 30:\n        phrase += \" thirty\"\n    else:\n        tens = int(mins\/10)\n        ones = mins - tens * 10\n        phrase += \" \" + str(tens) + \"ty\"\n        phrase += \" \" + str(ones)\n        \n    return phrase",
        "1606": "def relative_prediction_model():\n    # Variables\n    features = [\"age\", \"gender\", \"race\", \"income\", \"location\", \"origin\", \"religion\", \"political views\", \"marital status\", \"education level\", \"occupation\"]\n    target = \"relation\"\n    # Defining model, training and predicting\n    model = MLPClassifier()\n    model.fit(features, target)\n    return model",
        "1607": "import requests\n\ndef check_for_broken_links(url):\n    # Request webpage\n    response = requests.get(url)\n\n    # Parse webpage for all links\n    links = response.html.find_all('a')\n    \n    # Check response code of each link\n    for link in links:\n        link_url = link['href']\n        response = requests.get(link_url)\n        if not response.ok:\n            # Link is broken\n            print('Broken link found:', link_url)\n\ncheck_for_broken_links('http:\/\/example.com')",
        "1608": "Create a React application that sends user queries to a Python backend, which runs the queries against a MongoDB database. The backend will communicate results back to the React application. The React application will then display the results to the user.",
        "1609": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentence(text):\n    sid = SentimentIntensityAnalyzer()\n    ss = sid.polarity_scores(text)\n    if ss['compound'] >= 0.05:\n        return 'positive'\n    elif ss['compound'] <= -0.05:\n        return 'negative'\n    else:\n        return 'neutral'",
        "1610": "import pandas as pd\n\ndf = pd.DataFrame(data_dict)",
        "1611": "The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.",
        "1612": "import json \n\n# Convert the string to an object \ndata = json.loads('{\"a\": 3, \"b\": 1, \"c\": 2}')\n\n# Sort the object by keys \nsorted_data = {k: data[k] for k in sorted(data.keys())}\n\n# Print the object in a formatted way \nprint(json.dumps(sorted_data, indent=4))",
        "1613": "def printPattern(n):\n    for i in range(0,n):\n        for j in range(0, i + 1): \n            print(\"* \", end=\"\") \n        print(\"\\r\")\n \nn = 5\nprintPattern(n)",
        "1614": "import textblob\n\ndef predict_sentiment(text):\n    sentiment = textblob.TextBlob(text).sentiment\n    sentiment_value = sentiment.polarity\n    sentiment_class = 'positive' if sentiment_value >= 0 else 'negative'\n    return sentiment_value, sentiment_class\n\nsentiment_value, sentiment_class = predict_sentiment('This is a great article!')\nprint(sentiment_value, sentiment_class)\n# Output: 0.8 positive",
        "1615": "def list_to_dict(lst):\n    res = {}\n    for item in lst:\n        res[item] = True\n    return res",
        "1616": "[x * 3 for x in (1, 2, 3, 4)]",
        "1617": "def find_prime_numbers(num):\n    prime_numbers = []\n \n    # Traverse through all numbers \n    for i in range(2, num + 1):\n        count = 0\n        for j in range(2, i \/\/ 2 + 1):\n            if (i % j == 0):\n                count += 1\n                break\n \n        # If the number is prime then print it \n        if (count == 0 and i != 1):\n            prime_numbers.append(i)\n            \n    return prime_numbers",
        "1618": "import requests\nimport praw\nfrom textblob import TextBlob\n\n# Initializing the Reddit instance\nreddit = praw.Reddit(client_id=YOUR_CLIENT_ID,\n client_secret=YOUR_CLIENT_SECRET,\n user_agent='YOUR_USER_AGENT')\n\n# Inputting the subreddit to analyze\nsubreddit = reddit.subreddit(\"AskReddit\")\n\n# Getting the 50 top posts\nposts = subreddit.top(limit=50)\n\n# Iterating over the posts\nfor post in posts:\n # Fetching the post data\n post_data = requests.get(url=post.url).json()\n \n # Calculating the sentiment \n sentiment = TextBlob(post_data['data']['title']).sentiment\n \n # Printing the sentiment\n print('Post Title: {0} --> Sentiment: {1}'.format(post_data['data']['title'], sentiment))",
        "1619": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))",
        "1620": "import random\nrand_nums = [None] * 10\nfor i in range(10):\n rand_nums[i] = random.random()\nprint(rand_nums)",
        "1621": "from tldextract import extract\nimport requests\n\nquery_string = input(\"Enter a query string: \")\n\n# Get the top-level domain from the query string\ntld = extract(query_string).suffix\n\n# Construct the API request URL\nurl = \"https:\/\/api.\" + tld + \"\/v1\/domains\"\n\n# Send the request and store the response\nresponse = requests.get(url, params={\n \"q\": query_string,\n \"fields\": \"domain_name\",\n})\n\n# Extract all the domain names from the response data\ndata = response.json()\ndomain_names = [d[\"domain_name\"] for d in data[\"domains\"]]\n\n# Print the list of domain names\nprint(domain_names)",
        "1622": "A simple algorithm to generate a string of random numbers is to use the Python standard library's random module to generate n number of random numbers in the range [0, 9]. The generated random numbers can then be appended to a string to form the desired string of random numbers.\n\ndef generateRandomNumberString(length):\n    # Generate a random string of length N\n    import random\n    string = ''\n    for i in range(0,length):\n        x = random.randint(0,9)\n        string += str(x)\n    return string",
        "1623": "def print_histogram(nums):\n  for num in nums:\n    output = ''\n    times = num\n    while(times > 0):\n      output += '#'\n      times = times - 1\n    print(output)",
        "1624": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http:\/\/www.imdb.com\/search\/title?count=10&sort=user_rating,desc\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitle_list = soup.find_all('div', {'class': 'lister-item-content'})\nfor title in title_list:\n    # get title\n    movie_title = title.h3.a.get_text()\n    # get score\n    score = title.find('span', {'class': 'value'}).get_text()\n    print(movie_title + ': ' + score)",
        "1625": "def calculate_distance(p1, p2):\n  x1, y1 = p1\n  x2, y2 = p2\n  return ((x2 - x1)**2 + (y2 - y1)**2)**0.5",
        "1626": "print(datetime.datetime.now().strftime('%b %d %Y, %H:%M'))",
        "1627": "def remove_duplicates(array):\n    new_array = []\n    for element in array:\n        if element not in new_array:\n            new_array.append(element)\n    return new_array",
        "1628": "def concatenate_lists(list1, list2):\n    return list1 + list2",
        "1629": "import sys\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\n\nclass Editor(QDialog):\n    def __init__(self, parent=None):\n        super(Editor, self).__init__(parent)\n        self.text = QTextEdit()\n        self.initUI()\n\n    def initUI(self):\n        layout = QVBoxLayout()\n        layout.addWidget(self.text)\n        self.setLayout(layout)\n        self.setWindowTitle(\"Text Editor\")\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = Editor()\n    window.resize(350, 250)\n    window.show()\n    sys.exit(app.exec_())",
        "1630": "def levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    \n    # Create a table for storing results \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # Fill d[][] in bottom-up manner \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If first string is empty, only option is to \n            # insert all characters of second string \n            if i == 0: \n                dp[i][j] = j    # Min. operations = j \n  \n            # If second string is empty, only option is to \n            # remove all characters of second string \n            elif j == 0: \n                dp[i][j] = i    # Min. operations = i \n  \n            # If characters in both strings are same, no operations required \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n  \n            # If characters are not same, consider all operations \n            # on \"left-hand\" side and pick minimum \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[m][n] \n  \n# Driver program \nstr1 = \"kitten\"\nstr2 = \"sitting\"\nprint(levenshteinDistance(str1, str2))",
        "1631": "def remove_index(my_list, remove_index):\nmy_list.remove(my_list[remove_index])\nreturn my_list",
        "1632": "def is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\nif is_divisible_by_3(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')",
        "1633": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    # Fetch the page\n    res = requests.get(url)\n    # Parse the HTML\n    html_doc = res.text\n    soup = BeautifulSoup(html_doc, 'html.parser')\n    \n    # Extract all links from the page\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links",
        "1634": "a = [0] * 10\nb = [0] * 10\n\nfor j in range(1, 6):\n    for i in range(10):\n        a[i] = a[i] + j\n        b[i] = b[i] + b[i - 1] + a[i]\n\nfor i in range(10):\n    print(b[i], end=\" \")",
        "1635": "import random\n\nwords = [\"hello\", \"world\", \"hi\", \"moon\", \"sun\"]\n\nrandom_word = random.choice(words)\n\nprint(\"Random word: \" + random_word)",
        "1636": "def average_of_period(arr):\n    return sum(arr) \/ len(arr)\n\nresult = average_of_period([1, 3, 4, 5, 3, 9, 6])\nprint(result)",
        "1637": "def heapify(arr, n, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]  # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0) \n  \n# Driver code to test above \narr = [2, 4, 5, 1, 7, 6, 0, 8] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),",
        "1638": "class StringFormatter():\n    def __init__(self, string):\n        self.string = string\n\n    def format_string(self):\n        new_string = \"\".join([c for c in self.string if (c.isalnum() or c == '_')])\n        return new_string.replace(\" \", \"_\")\n\nif __name__ == '__main__':\n    formatter = StringFormatter(\"Hello, World!\")\n    print(formatter.format_string())",
        "1639": "def solve(grid): \n  \n    \"\"\"solves a 9x9 sudoku grid   \n    \"\"\"\n    row = 0\n    col = 0\n  \n# Initially searching for an unassigned position \n    while row<9: \n        while col<9: \n            # If the entry is empty \n            if grid[row][col]==0: \n                for num in range(1,10): \n                    if check(grid, row, col, num): \n                        grid[row][col] = num     \n  \n                        # recursively checking \n                        if solve(grid):   \n                            return True\n                        else:\n                            grid[row][col]=0\n            # If the entry is not empty, go to the next position \n            col += 1  \n            if col >= 9: \n                col = 0 \n                row += 1 \n   \n# returning true when the whole grid is assigned with numbers\n    return True\n  \ndef check(grid, row, col, num): \n    # checking row and column \n    for i in range(0, 9): \n        # To check whether this num is  \n        # already present in the row \n        if grid[row][i] == num:  \n            return False\n  \n        # To check whether this num is \n        # already present in the column \n        if grid[i][col] == num: \n            return False\n  \n        \n    # now checking in its block (3x3) \n    r = row - row%3\n    c = col - col%3\n  \n    for i in range(3): \n        for j in range(3): \n            if grid[i+r][j+c] == num: \n                return False\n  \n    # If everything checks out, \n    # return true (num is not being used) \n    return True\n\n# Driver program to test above function \nif __name__ == '__main__': \n  \n    grid = [ \n        [7,8,0,4,0,0,1,2,0], \n        [6,0,0,0,7,5,0,0,9], \n        [0,0,0,6,0,1,0,7,8], \n        [0,0,7,0,4,0,2,6,0], \n        [0,0,1,0,5,0,9,3,0], \n        [9,0,4,0,6,0,0,0,5], \n        [0,7,0,3,0,0,0,1,2], \n        [1,2,0,0,0,7,4,0,0], \n        [0,4,9,2,0,6,0,0,7] \n    ]\n    if solve(grid):\n        for row in grid:\n            print (*row, sep=' ')\n    else: \n        print(\"No solution exists!\")",
        "1640": "def max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23",
        "1641": "import re\n\ndef search_string(search, string_list):\n    \"\"\"Search for a given string in a list of strings.\"\"\"\n    matches = []\n    for s in string_list:\n        if re.search(search, s):\n            matches.append(s)\n    return matches\n\n# Usage Example\nstring_list = [\"example1\", \"example2\", \"example3\", \"other1\", \"other2\"]\nmatches = search_string(\"example\", string_list)\nprint(matches)  # ['example1', 'example2', 'example3']",
        "1642": "def sort_by_grade(roster):\n    sorted_roster = sorted(roster, key=lambda x: x[1])\n    return sorted_roster\n\nif __name__ == \"__main__\":\n    roster = [(\"Person 1\", 75), (\"Person 2\", 82), (\"Person 3\", 95), (\"Person 4\", 76),\n              (\"Person 5\", 65), (\"Person 6\", 70), (\"Person 7\", 82), (\"Person 8\", 93),\n              (\"Person 9\", 68), (\"Person 10\",80)]\n    print(sort_by_grade(roster))",
        "1643": "import pandas as pd\n\n# read the table\ntable = pd.read_csv('table_name.csv')\n\n# Extract the 10th row\nrow = table.loc[9, :]\n\n# Print the row\nprint('The 10th row is: ', row)",
        "1644": "import praw\nimport sqlite3\n\nconn = sqlite3.connect('RedditScraper.db')\nc = conn.cursor()\n\nc.execute(\"\"\"CREATE TABLE comments (\n comment_id text,\n comment_body text\n)\"\"\") \n\nreddit = praw.Reddit(\n client_id='YOUR_CLIENT_ID',\n client_secret='YOUR_CLIENT_SECRET',\n user_agent='YOUR_USER_AGENT'\n)\n\nfor comment in reddit.subreddit('all').stream.comments():\n c.execute(\"INSERT INTO comments VALUES (?, ?)\",\n (comment.id, comment.body))\n conn.commit()\n\nconn.close()",
        "1645": "words_dict = {\n \"hello\": {},\n \"world\": {},\n \"foo\": {},\n \"bar\": {}\n}",
        "1646": "import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\n\n# Loading the data\ndata = pd.read_csv('housing.csv')\n\n# Feature selection & Data Splitting\nX = data[['square_feet', ' bedrooms', 'bathrooms', 'location']]\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model & Training\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Testing & Evaluating\ny_pred = model.predict(X_test)\n\n# Visualizing the results\nplt.scatter(y_test, y_pred)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.show()",
        "1647": "def reverse_words(sentence):\n words = sentence.split()\n reversed_words = words[::-1]\n return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test sentence\"))\n\n# Output: \"sentence test a is This\"",
        "1648": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\nreviews = pd.read_csv('reviews.csv')\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(reviews.text)\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, reviews.sentiment, test_size=0.25, random_state=1)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))",
        "1649": "import random\n\nwhile True:\n user_message = input('User: ')\n \nif user_message == 'hello':\n response_options = ['Hi', 'Hi there', 'Hello, how are you?', 'Hey there']\n bot_response = random.choice(response_options)\n print(bot_response)\n \nelif user_message == 'exit':\n break",
        "1650": "def is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False",
        "1651": "def remove_duplicates(items):\n  unique = []\n  for item in items:\n    if item not in unique:\n      unique.append(item)\n  return unique\n\nlist = [1, 2, 2, 3]\nresult = remove_duplicates(list)\nprint(result) # Output: [1, 2, 3]",
        "1652": "def generate_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = [0] * n\n        for j in range(n):\n            if i == j:\n                row[j] = 1\n        matrix.append(row)\n    return matrix",
        "1653": "def extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result",
        "1654": "# Import Libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\nX_train, X_test, y_train, y_test = load_data()\n\n# Create a Machine Learning Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', LogisticRegression(solver='lbfgs', random_state=42))\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, y_train)\n\n# Evaluate the pipeline on the test data\npredicted = pipeline.predict(X_test)\nprint('Test Accuracy:', accuracy_score(predicted, y_test))",
        "1655": "SELECT title, author\nFROM BlogPost\nWHERE content LIKE '%Python%';",
        "1656": "def random_array(n):\n    import random\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0,9))\n    return arr\n    \narr = random_array(10)\nprint(arr)",
        "1657": "n = 10\n\ndef func(n):\n    # Use range to only loop through half of the values\n    res = 0\n    for i in range(n\/\/2 + 1):\n        for j in range(n):\n            res = res + i + j\n    # Double the result by multiplying with 2\n    return res*2\n\nfunc(n)",
        "1658": "def permutations(items): \n    if len(items) <=1: \n        yield items \n    else: \n        for i in range(len(items)): \n            for p in permutations(items[:i] + items[i+1:]): \n                yield (items[i],)+p",
        "1659": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the page\nurl = <provided_url>\nresponse = requests.get(url)\n\n# Parse the page content\nsoup = BeautifulSoup(response.text, \u2018html.parser\u2019)\n\n# Find all links\nlinks = []\nfor link in soup.find_all(\u2018a\u2019):\n    links.append(link.get(\u2018href\u2019))\n\n# Print out the list of links\nfor link in links:\n    print(link)",
        "1660": "def sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr",
        "1661": "import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n \n# Read the whole text.\ntext = 'The quick brown fox jumps over the lazy dog.'\n \n# Generate a word cloud image\nwordcloud = WordCloud().generate(text)\n \n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()",
        "1662": "def Fibonacci(n):\n  \n  # Setting up the base cases\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  \n  # Calculating the Fibonacci sequence\n  num1, num2 = 0, 1\n  for i in range(2, n+1):\n    num1, num2 = num2, num1 + num2\n    \n  return num2\n\n# Driver Code\nn = 10\nprint(Fibonacci(n))",
        "1663": "import datetime\n\ndef convert_to_date(input_date):\n    date_obj = datetime.datetime.strptime(input_date,\"%d\/%m\/%Y\")\n    return date_obj",
        "1664": "def sum_numbers(x, y):\n    return x + y\n  \nprint(sum_numbers(5, 8))",
        "1665": "import numpy as np\ndef knn(data,x, k): \n    # calculate the Euclidean Distance of the x from the training data\n    distances = np.sqrt(-2 * np.dot(data, x) + np.sum(data**2, axis=1) + np.sum(x**2))\n    # get the k closest neighbours \n    ind = np.argpartition(distances, k)[:k]\n    labels = np.array([0, 0, 1, 1]).astype(float) \n    return np.argmax(np.bincount(labels[ind]))",
        "1666": "def generate_combinations(list1, list2):\n    combinations = []\n    for x in list1:\n        for y in list2:\n            combination = (x, y)\n            combinations.append(combination)\n    return combinations",
        "1667": "function stringToNumList(string) {\n    let numbers = [];\n    for (let letter of string) {\n        numbers.push(letter.charCodeAt(0));\n    }\n    return numbers;\n}",
        "1668": "def most_frequent_words(s):\n    # Split string into list of words\n    words = s.split(' ')\n    # Create empty dictionary to store word frequencies\n    word_frequencies = {}\n    # Iterate through words in list\n    for word in words:\n        # If word is already in the dictionary, increment its frequency\n        if word in word_frequencies:\n            word_frequencies[word] += 1\n        # Otherwise, set frequency to 1\n        else:\n            word_frequencies[word] = 1\n    # Sort words by frequency\n    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)\n    # Return a list of the most frequent words\n    return [item[0] for item in sorted_words]",
        "1669": "import math\n\ndef hypotenuse_length(a, b):\n    \"\"\" Calculates the hypotenuse of a right triangle given its side lengths \"\"\"\n    \n    return math.sqrt(a**2 + b**2)\n  \nlength = hypotenuse_length(3, 4)\nprint(length)",
        "1670": "import re\n\ndef contains_tensorflow_code(docstring):\n    \"\"\"\n    Detects if the given docstring contains Tensorflow code\n    :param docstring: The docstring to check\n    :type docstring: string\n    \"\"\"\n    # check if there are any TensorFlow import statements\n    has_import_tf = False\n    lines = docstring.split('\\n')\n    for line in lines:\n        if re.search('^import\\s+tensorflow', line):\n            has_import_tf = True\n\n    # check for the presence of any TensorFlow related strings\n    has_tf_string = False\n    for line in lines:\n        if re.search('^tf.', line):\n            has_tf_string = True\n\n    return has_import_tf or has_tf_string",
        "1671": "def calc_sum(*args):\n    result = 0\n    for num in args:\n        result += num\n    return result\n\nresult = calc_sum(1, 2, 3, 4, 5)\nprint(result)",
        "1672": "from collections import Counter\n\ndef top_3_words(str):\n  word_list = list(str.split())\n  word_dict = Counter(word_list)\n  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)\n  top_3 = sorted_words[:3]\n  return [word for word, count in top_3]\n\ntop_3_words('This is a sample string')",
        "1673": "def permutations(nums):\n permutations_list = []\n for permutation in itertools.permutations(nums):\n permutations_list.append(list(permutation))\n \n return permutations_list\n \n print(permutations([1, 2]))\n# Output: [[1, 2], [2, 1]]",
        "1674": "sentence = 'The quick brown fox jumped over the lazy dog'\nwords = sentence.split()\n\nfor i in range(len(words)):\n if len(words[i]) == 5:\n words[i] = '_____'\n\nmodified_sentence = ' '.join(words)\nprint(modified_sentence)\n# Output: The _____ brown _____ jumped over the _____ _____",
        "1675": "import random\nrand_num = random.randint(5,10)\nprint(rand_num)",
        "1676": "import tkinter as tk\nfrom tkinter import Canvas\nimport requests\n\n# Window\nwindow = tk.Tk()\nwindow.title('Data Display')\nwindow.geometry('800x600')\n\n# Canvas and Frame\ncanvas = Canvas(window, bg='white')\ncanvas.pack()\n\n# Retrieve data\nresponse = requests.get('http:\/\/example.com\/data.json')\ndata = response.json()\n\n# Render data onto canvas\n# ...\n\nwindow.mainloop()",
        "1677": "# Python program to detect cycle in a graph \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def printList(self): \n        head_node = self.head \n        while head_node != None: \n            print(head_node.data) \n            head_node = head_node.next\n  \n    # Function to detect and remove loop \n    # in a LinkedList \n    def detectAndRemoveLoop(self): \n        # If list is empty or has only one node \n        # without loop \n        if self.head is None or self.head.next is None: \n            return\n  \n        slow_ptr = fast_ptr = self.head \n        while (fast_ptr and fast_ptr.next): \n            fast_ptr = fast_ptr.next.next\n            slow_ptr = slow_ptr.next\n  \n            if slow_ptr == fast_ptr: \n                self.removeLoop(slow_ptr) \n  \n    # Function to remove loop \n    def removeLoop(self, loop_ptr): \n        ptr1 = self.head \n        while (1): \n            ptr2 = loop_ptr\n            while (ptr2.next != loop_ptr and ptr2.next != ptr1): \n                ptr2 = ptr2.next\n  \n            # If ptr2 has found ptr1 then there is a  \n            # loop. So break the loop \n            if ptr2.next == ptr1: \n                break \n  \n            ptr1 = ptr1.next \n  \n        # If a loop is found then set the next  \n        # node of ptr2 to None \n        ptr2.next = None \n  \nif __name__ == '__main__': \n    # Driver program \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second \n    second.next = third \n  \n    # loop \n    llist.head.next.next.next = llist.head \n  \n    llist.detectAndRemoveLoop() \n  \n    print(\"Linked List after removing loop\") \n    llist.printList()",
        "1678": "def merge_sort(arr):\n    if len(arr) > 1:\n        m = len(arr) \/\/ 2\n        L = arr[:m]\n        R = arr[m:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j] \n            j += 1\n            k += 1\n    return arr\n\narray = [4, 2, 3, 6, 1]\nresult = merge_sort(array)\nprint(result) # prints [1, 2, 3, 4, 6]",
        "1679": "# Define the function \ndef random_number(min_val, max_val):\n # Generate a random number\n rnd = np.random.randint(min_val, max_val+1)\n \n return rnd\n\n# Call the function\nrandom_num = random_number(5, 10)\n\n# Print the random number\nprint('Random number between 5 and 10:', random_num)",
        "1680": "import nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Define the training set\nreviews_train = [('The food was amazing!', 'positive'),\n ('I was not happy with the customer service.', 'negative'),\n ('The quality of the food was fantastic!', 'positive')]\n\n# Train Naive Bayes Classifier\nclassifier = NaiveBayesClassifier.train(reviews_train)\n\n# Make Predictions\nreviews_test = ['The food was not good.']\nprediction = classifier.classify(reviews_test)\n\nprint('Predicted sentiment is:', prediction)",
        "1681": "# Python3 program to return the sum of three numbers\n\ndef sum_three(a,b,c): \n    return a + b + c",
        "1682": "import string\nimport random\n\ndef gen_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = \"\"\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nresult = gen_password(3)\nprint(result)",
        "1683": "import tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()",
        "1684": "def longestSubstringWithoutRepeatingCharacters(str):\n    maxLength = 0\n    hashMap = dict()\n    start = 0\n\n    for i in range(len(str)):\n        if str[i] in hashMap:\n            start = max(hashMap[str[i]], start)\n\n        maxLength = max(maxLength, i - start + 1)\n        hashMap[str[i]] = i + 1\n\n    return maxLength",
        "1685": "number = 5\nfor i in range(1, 11): \n    print(number, 'x', i, '=', number*i)",
        "1686": "import json\n\n# Load the JSON string\njson_string = '{\"name\": \"John Smith\", \"age\": 33, \"address\": {\"street\": \"123 Main Street\", \"city\": \"New York\", \"state\": \"NY\", \"zip\": \"10001\"}, \"phone_numbers\": [{\"type\": \"work\", \"number\": \"212 555-1234\"}, {\"type\": \"cell\", \"number\": \"646 555-4567\"}]}'\n\n# Parse the JSON string\ndata = json.loads(json_string)\n\n# Extract data\nname = data[\"name\"]\nage = data[\"age\"]\nstreet = data[\"address\"][\"street\"]\ncity = data[\"address\"][\"city\"]\nstate = data[\"address\"][\"state\"]\nzip_code = data[\"address\"][\"zip\"]\nwork_phone_number = data[\"phone_numbers\"][0][\"number\"]\ncell_phone_number = data[\"phone_numbers\"][1][\"number\"]\n\nprint(f'Name: {name}')\nprint(f'Age: {age}')\nprint(f'Street: {street}')\nprint(f'City: {city}')\nprint(f'State: {state}')\nprint(f'Zip Code: {zip_code}')\nprint(f'Work Phone Number: {work_phone_number}')\nprint(f'Cell Phone Number: {cell_phone_number}')",
        "1687": "import scrapy\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.linkextractors import LinkExtractor\n\nclass MySpider(CrawlSpider):\n name = 'crawler'\n allowed_domains = ['example.com']\n start_urls = ['http:\/\/example.com\/']\n \n rules = [\n Rule(LinkExtractor(allow=()), follow=True, callback='parse_item', process_links='filter_links', max_depth=2)\n ]\n\ndef filter_links(self, links):\n # Filter the links to follow\n filtered_links = []\n for link in links:\n if link.url not in self.visited_urls and link.url.startswith(self.domain):\n filtered_links.append(link)\n return filtered_links\n\ndef parse_item(self, response):\n # Parse the page\n pass",
        "1688": "class Node:\n    def __init__(self, val):\n      self.right = None\n      self.data = val\n      self.left = None\n\ndef insert(node, data): \n  if node is None:\n    return Node(data)\n  else:\n    if data <= node.data:\n      node.left = insert(node.left, data)\n    else:\n      node.right = insert(node.right, data)\n  return node",
        "1689": "from Bio.Seq import Seq\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)",
        "1690": "# Importing the essential library \nimport nltk\n \n# Defining a function to tokenize a sentence\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    tok_words = [tok for tok in tokens if tok.isalpha()]\n    tok_punct = [tok for tok in tokens if not tok.isalpha()]\n    return tok_words, tok_punct\n \nif __name__ == '__main__':\n    text = \"This is a sample sentence.\"\n    words, puncts = tokenize(text)\n    print(\"Words:\", words)\n    print(\"Punctuations:\", puncts)",
        "1691": "import bcrypt\n\nname = \"John\"\npassword = \"J0hnP455w0rd\"\npassword_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n# Create user account in the database\n# with the given name and hashed password\n# ----------\n# Code to store username and \n# hashed password in the database \n# ----------",
        "1692": "import argparse\nimport sys\n\ndef permutation(string):\n if len(string) == 1:\n return [string]\n \n result = []\n \n for i in range(len(string)):\n s = string[i]\n remString = string[:i] + string[i+1:]\n \n for p in permutation(remString):\n result.append(s + p)\n \n return result\n \nif __name__ == '__main__':\n parser = argparse.ArgumentParser()\n parser.add_argument('--string', default=None, help='string to permutate')\n args = parser.parse_args()\n\n if (args.string is None):\n print('Please provide a valid string as command line argument!')\n sys.exit(1)\n \n result = permutation(args.string)\n print(result)",
        "1693": "def factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)",
        "1694": "\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)",
        "1695": "class Trie:\n    def __init__(self):\n        self.root = {}\n    \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie\n        \"\"\"\n        curr_node = self.root\n        for letter in word:\n            # if letter is not in the current branch\n            if letter not in curr_node:\n                # add letter to the branch\n                curr_node[letter] = {}\n            # move to the next branch\n            curr_node = curr_node[letter]\n        # when word is fully parsed, set node name to True\n        curr_node['name'] = True",
        "1696": "def print_hello_world(n): \n    for i in range(n):\n        print(\"Hello, World!\")\n\nprint_hello_world(3)\n# Output:\nHello, World!\nHello, World!\nHello, World!",
        "1697": "class Car:\n def __init__(self, make, model, year, color):\n  self.make = make\n  self.model = model\n  self.year = year\n  self.color = color\n  \n def get_info(self):\n  return f'This car is a {self.color} {self.year} {self.make} {self.model}.'",
        "1698": "import random\n\ndef generateEncryptionKey():\n    key = \"\"\n    for _ in range(32):\n        key += str(random.randint(0,9))\n    return key",
        "1699": "numbers = [1, 2, 3, 4, 5]\nresult = [num * 2 for num in numbers]",
        "1700": "from sklearn.naive_bayes import MultinomialNB \n\n# Initializing the model\nmodel = MultinomialNB()\n\n# Training the model\nmodel.fit(X_train,y_train)\n\n# Testing the model\ny_pred = model.predict(X_test)\n\n# Evaluating the model\naccuracy = model.score(X_test,y_test)",
        "1701": "def main():\n numbers = [3, 5, 2, 4, 9, 7]\n numbers.sort()\n \n print('The 2nd largest number is', numbers[-2])\n print('The 3rd smallest number is', numbers[2])\n \nif __name__ == '__main__':\n main()",
        "1702": "def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    pivot = A[0]\n    left = [item for item in A if item < pivot]\n    right = [item for item in A if item > pivot]\n\n    return sort_array(left) + [pivot] + sort_array(right)",
        "1703": "def fibonacci(n):\n a, b = 0, 1\n fibonacci_list = [a]\n \n for _ in range(n):\n a, b = b, a + b\n fibonacci_list.append(b)\n \n return fibonacci_list\n\nprint(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
        "1704": "import email\nfrom collections import defaultdict\n\n# function to group emails by their subject\ndef group_emails(emails):\n    # dictionary to store emails with same subject\n    grouped_emails = defaultdict(list)\n\n    # loop through emails\n    for email in emails:\n        # get subject\n        subject = email.get('Subject', '')\n        # add to dict\n        grouped_emails[subject].append(email)\n\n    # return grouped emails\n    return grouped_emails\n\n# function to merge emails with the same subject into one single email\ndef merge_emails(grouped_emails):\n    merged_emails = []\n\n    # loop through grouped emails\n    for subject, emails in grouped_emails.items():\n        # list to store all email bodies\n        email_bodies = []\n\n        # loop through emails in the group\n        for email in emails:\n            # get email body\n            body = email.get_body()\n            # add it to the list\n            email_bodies.append(body)\n\n        # combine the email bodies\n        combined_body = \"\\n\\n\".join(email_bodies)\n\n        # create new email\n        merged_email = email.Address.new_message(subject, combined_body)\n\n        # add the merged eail to the list\n        merged_emails.append(merged_email)\n\n    # return the merged emails\n    return merged_emails",
        "1705": "def find_min_max(numbers):\n \n min_num = float('inf')\n max_num = float('-inf')\n \n for num in numbers:\n  if num < min_num:\n   min_num = num\n  if num > max_num:\n   max_num = num\n \n return [min_num, max_num]\n\nnumbers = [1, 10, 3, 8, 6]\nprint(find_min_max(numbers))\n\n# Output: [1, 10]",
        "1706": "def search_string(string, search):\n    count = 0 \n    for i in range(len(string)):\n        if string[i] == search:\n            count += 1\n    return count\n\nsearched_string = search_string(\"Hello World!\", \"l\") \nprint(searched_string)",
        "1707": "class ShoppingCart:\n def __init__(self, products):\n self.products = products\n self.total_price = 0\n\n def add_product(self, product):\n self.products.append(product)\n\n def calculate_total_price(self):\n self.total_price = 0\n for product in self.products:\n self.total_price += product['price']\n return self.total_price\n\n def make_purchase(self):\n self.total_price = self.calculate_total_price()\n print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price))",
        "1708": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = input(\"Enter the URL of the webpage:\")\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, \"html.parser\")\n\n# Get all the text\ntext = soup.get_text()\n\n# Split text into words\nwords = text.split()\n\n# Count words\nword_count = {}\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\n# Sort word counts\nsorted_words = sorted(word_count, key=word_count.get, reverse=True)\n\n# Print top ten words\nprint(sorted_words[:10])",
        "1709": "import random \n  \ndef generate_password(length): \n    password_str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\"\n    password =  \"\".join(random.sample(password_str,length )) \n    return password\n\n# Driver Code \nlength = 20\nprint(generate_password(length))",
        "1710": "def evaluate(expression):\n    return eval(expression)\n\nprint(evaluate(expression))\n\n# Output\n16",
        "1711": "def get_common_items(list_1, list_2):\n    common_items = []\n  \n    for i in list_1:\n        for j in list_2:\n            if i == j:\n                common_items.append(i)\n    return common_items\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8]\n\nprint(get_common_items(list_1, list_2))",
        "1712": "import string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(str(letter)+str(j))\n    return result",
        "1713": "def sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)",
        "1714": "def get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)",
        "1715": "def convert_str_list(x):\n    return x.split()\n\nprint(convert_str_list(\"This is a test\"))",
        "1716": "def find_limits(numbers):\n    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return largest, smallest",
        "1717": "from flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/wikipedia', methods=['GET'])\ndef search_wikipedia():\n query = request.args.get('query')\n response = requests.get(\n 'https:\/\/en.wikipedia.org\/w\/api.php',\n params={\n 'action': 'query',\n 'list': 'search',\n 'format': 'json',\n 'srsearch': query\n}).json()\n\n return response\n\nif __name__ == '__main__':\n app.run()",
        "1718": "def sum_to(num):\n    sum = 0\n    for i in range(num+1):\n        sum += i\n    return sum\n \nnum = 5\nprint(sum_to(num))   # 15",
        "1719": "def HammingDistance(str1,str2): \n    # find out the length of the longest string \n    l1 = len(str1) \n    l2 = len(str2) \n  \n    # create a matrix of size l1 x l2 \n    m = [[None]*(l2+1) for i in range(l1+1)] \n  \n    # initialize the first row of the matrix \n    for i in range(l2+1): \n        m[0][i] = i \n  \n    # initialize the first column \n    for i in range(l1+1): \n        m[i][0] = i \n  \n    # traverse the matrix row by row \n    for i in range(1,l1+1): \n        for j in range(1, l2+1):\n            if str1[i-1] == str2[j-1]: \n                m[i][j] = m[i-1][j-1] \n            else:\n                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) \n  \n    return m[l1][l2] \n  \n# Driver code \nstr1,str2 = \"Random String1\", \"This is a random string\"\nprint(HammingDistance(str1,str2))",
        "1720": "def max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr))",
        "1721": "n = 20\nprimes = []\nfor num in range(2, n+1):\n    is_prime = True\n    for div in range(2, num):\n        if (num % div == 0):\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nprint(primes)",
        "1722": "def is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    l = len(s)\n    for i in range(l \/\/ 2):\n        if s[i] != s[l-1-i]:\n            return False\n    return True",
        "1723": "def factorial(n): \n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact",
        "1724": "import matplotlib.pyplot as plt\n \n# Create lists of data to plot\n# Current year's temperatures\ntemperatures = [10, 12, 14, 13, 14, 14, 15]\n \n# Create a chart of average temperatures\nplt.plot(temperatures)\n \n# Label the chart\nplt.title('Average Temperatures in Celcius')\nplt.xlabel('Month')\nplt.ylabel('Temperature (Celsius)')\n \n# Show the chart\nplt.show()",
        "1725": "BeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML\/XML parsers like html5lib, lxml and html.parser.",
        "1726": "# import the necessary packages\nimport pygame\nimport requests\nfrom gtts import gTTS\n\n# define an API call to scrape website text\nurl = 'example.com'\ncontent = requests.get(url).text\n\n# initialize the pygame module\npygame.mixer.init()\n\n# generate the text-to-speech audio\ntts = gTTS(content)\n\n# save the text-to-speech audio\ntts.save('text.mp3')\n\n# play the audio\npygame.mixer.music.load('text.mp3')\npygame.mixer.music.play()\n\n# wait for the audio to finish\nwhile pygame.mixer.music.get_busy(): \n    pygame.time.Clock().tick(10)",
        "1727": "def euclidean_distance(point_a, point_b):\n    sum_squares = 0\n    for i in range(len(point_a)):\n        sum_squares += (point_a[i] - point_b[i]) ** 2\n    return (sum_squares ** 0.5)\n\npoint_a = (1, 2, 3)\npoint_b = (4, 5, 6)\n\ndistance = euclidean_distance(point_a, point_b)\nprint(\"Distance between points: {}\".format(distance)) #5.19615",
        "1728": "def cosine_similarity(list1, list2):\n sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0\n for i in range(len(list1)):\n sum1 += list1[i]\n sum2 += list2[i]\n sum_sq1 += list1[i]**2\n sum_sq2 += list2[i]**2\n p_sum += list1[i] * list2[i]\n num = p_sum - (sum1 * sum2 \/ len(list1))\n den = (sqrt(sum_sq1 - pow(sum1, 2) \/ len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) \/ len(list1))))\n if den == 0:\n return 0\n return num\/den",
        "1729": "def calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)",
        "1730": "# function to calculate edit distance\ndef edit_distance(s1, s2):\n  if len(s1) == 0:\n  return len(s2)\n  if len(s2) == 0:\n  return len(s1)\n  if s1[-1] == s2[-1]:\n  cost = 0\n  else:\n  cost = 1\n\n  res = min([edit_distance(s1[:-1], s2)+1,\n            edit_distance(s1, s2[:-1])+1,\n            edit_distance(s1[:-1], s2[:-1]) + cost])\n  return res\n\n# example\ns1 = 'cat'\ns2 = 'cot'\nprint(edit_distance(s1, s2))  # output: 1",
        "1731": "def findMax(l): \n    max = l[0] \n    for x in l: \n        if x > max: \n            max = x \n    return max \n  \n# Driver code \nl = [2, -1, 15, 8, 9, 10] \nprint(findMax(l))",
        "1732": "def factorial(num): \n    if num == 0: \n        return 1 \n  \n    return num * factorial(num - 1) \n  \nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num))",
        "1733": "def list_sum(nums): \n total = 0\n \n for num in nums:\n   total += num\n \n return total\n\nlist_sum([1, 3, 5, 8]) # output: 17",
        "1734": "def parse_json(json_string):\n    return json.loads(json_string)",
        "1735": "import csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result\/counter",
        "1736": "#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import MagicMock\nimport json\nimport urllib\nimport urllib2\nimport sys\nimport os\nsys.path.append(os.getcwd())\n\nimport interactivespaces\n\nTEST_ACTIVITY_DATA = {\n                      \"id\":\"53\",\n                      \"bundleContentHash\":\"hjkl\",\n                      \"identifyingName\":\"com.endpoint.lg.browser\",\n                      \"lastUploadDate\":1398288057444,\n                      \"description\":\"Browser Activity to present \\\"webui\\\" activties to the user\",\n                      \"name\":\"Browser Activity\",\n                      \"lastStartDate\":1401901320867,\n                      \"metadata\":{},\n                      \"version\":\"1.0.0.dev\"\n}\n\nTEST_LIVEACTIVITY_DATA = {\n                          \"lastDeployDate\":\"Mon May 05 12:50:36 PDT 2014\",\n                          \"outOfDate\":False,\n                          \"id\":\"110\",\n                          \"description\":\"\",\n                          \"name\":\"Evdev Demuxer on 42-a\",\n                          \"active\": {\n                            \"numberLiveActivityGroupRunning\":1,\n                            \"runtimeState\":\"ACTIVE\",\n                            \"deployState\":\"UNKNOWN\",\n                            \"lastStateUpdate\":\"Wed Jun 04 11:17:21 PDT 2014\",\n                            \"runtimeStateDescription\":\"space.activity.state.active\",\n                            \"directRunning\":False,\n                            \"directActivated\":False,\n                            \"numberLiveActivityGroupActivated\":1,\n                            \"deployStateDescription\":\"space.activity.state.unknown\",\n                            \"deployStateDetail\":None,\n                            \"runtimeStateDetail\":\"<p>foo<\/p>\"\n                          },\n                          \"controller\": {\n                            \"id\":\"2\",\n                            \"name\":\"ISCtlDispAScreen00\",\n                            \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\"\n                          },\n                          \"uuid\":\"88816d20-22f6-4f78-95ba-7843696c6bc5\",\n                          \"activity\": {\n                            \"id\":\"61\",\n                            \"bundleContentHash\":\"qwerty\",\n                            \"identifyingName\":\"com.endpoint.lg.evdev.demuxer\",\n                            \"lastUploadDate\":1398288062862,\n                            \"description\":\"Separates and aggregates different types of input events.\",\n                            \"name\":\"Event Device Demuxer\",\n                            \"lastStartDate\":1401905841864,\n                            \"metadata\":{},\n                            \"version\":\"1.0.0.dev\"\n                          },\n                          \"metadata\":{}\n}\n\nTEST_LIVEACTIVITYGROUP_DATA = {\n                               \"id\":\"301\",\n                               \"description\":\"\",\n                               \"name\":\"Google Earth\",\n                               \"metadata\":{}\n}\n\nTEST_SPACE_DATA = {\n                   \"id\":\"401\",\n                    \"description\":\"\",\n                    \"name\":\"LG Express\",\n                    \"metadata\":{}\n}\n\nTEST_CONTROLLER_DATA = {\n                        \"state\":\"RUNNING\",\n                        \"hostId\":\"ctldispascreen00\",\n                        \"mode\":\"ENABLED\",\n                        \"id\":\"2\",\n                        \"stateDescription\":\"space.controller.state.running\",\n                        \"modeDescription\":\"space.controller.mode.enabled\",\n                        \"description\":\"Controller for Screen 00 on Display Node A\",\n                        \"lastStateUpdateDate\":\"Wed Jun 04 12:25:57 PDT 2014\",\n                        \"name\":\"ISCtlDispAScreen00\",\n                        \"dataBundleStateDescription\":\"space.controller.dataBundle.state.none\",\n                        \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\",\n                        \"dataBundleState\":\"NO_REQUEST\",\n                        \"lastDataBundleStateUpdateDate\":None,\n                        \"metadata\":{}\n}\n\nTEST_NAMEDSCRIPT_DATA = {\n                        \"id\":\"3\",\n                        \"name\":\"foo\",\n                        \"description\":\"bar\"\n}\n\nTEST_POST = {\"foo\":\"bar\"}\nTEST_QUERY = {\"zot\":\"zing\"}\nTEST_SESSION = 'e2s1'\n\nTEST_HOST = '1.2.3.4'\nTEST_PORT = 12345\n\ndef test_get_collection(data, method_to_test, expected_type, path_name):\n    \"\"\"Helper for testing collection getters.\"\"\"\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._api_get_json = MagicMock(return_value=[data])\n\n    result = method_to_test(master)\n    master._api_get_json.assert_called_once_with('{}\/all'.format(path_name))\n\n    return result\n\nclass MasterTests(unittest.TestCase):\n    def test_constructor(self):\n        \"\"\"Test construction with valid arguments.\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n        self.assertEqual(master.host, TEST_HOST)\n        self.assertEqual(master.port, TEST_PORT)\n\n    def test_api_get_json(self):\n        \"\"\"Test a valid call to Master._api_get_json().\"\"\"\n        class MockResponse(object):\n            def read():\n                return '{\"result\":\"success\",\"data\":{\"foo\":\"bar\"}}'\n            def getcode():\n                return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity\/all'\n    response = master._api_get_json(command)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.json'.format(TEST_HOST, TEST_PORT, command)\n    )\n    self.assertEqual('bar', response['foo'])\n\n    def test_api_get_html(self):\n        \"\"\"Test a valid call to Master._api_get_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    \n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity\/new'\n    response = master._api_get_html(command, {\"foo\":\"bar\"})\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      )\n    )\n    self.assertEqual('asdf', response.read())\n    self.assertEqual(200, response.getcode())\n\n    def test_api_post_json(self):\n        \"\"\"Test a valid call to Master._api_post_json().\"\"\"\n    \n\nclass MockResponse(object):\n    def read():\n        return '{\"result\":\"success\"}'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'liveactivity\/42\/configure'\n    master._api_post_json(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.json?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_api_post_html(self):\n        \"\"\"Test a valid call to Master._api_post_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'namescript\/new'\n    master._api_post_html(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_get_all_activities(self):\n        \"\"\"Test Master.get_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.Activity\n        result = test_get_collection(\n                                     data=TEST_ACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_activities,\n                                     expected_type=expected_type,\n                                     path_name='activity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activities(self):\n        \"\"\"Test Master.get_live_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivity\n        result = test_get_collection(\n                                     data=TEST_LIVEACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_live_activities,\n                                     expected_type=expected_type,\n                                     path_name='liveactivity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activity_groups(self):\n        \"\"\"Test Master.get_live_activity_groups() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivityGroup\n        test_get_collection(\n                            data=TEST_LIVEACTIVITYGROUP_DATA,\n                            method_to_test=interactivespaces.Master.get_live_activity_groups,\n                            expected_type=expected_type,\n                            path_name='liveactivitygroup'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_spaces(self):\n        \"\"\"Test Master.get_spaces() with no pattern.\"\"\"\n        expected_type = interactivespaces.Space\n        test_get_collection(\n                            data=TEST_SPACE_DATA,\n                            method_to_test=interactivespaces.Master.get_spaces,\n                            expected_type=expected_type,\n                            path_name='space'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_controllers(self):\n        \"\"\"Test Master.get_controllers() with no pattern.\"\"\"\n        expected_type = interactivespaces.Controller\n        test_get_collection(\n                            data=TEST_CONTROLLER_DATA,\n                            method_to_test=interactivespaces.Master.get_controllers,\n                            expected_type=expected_type,\n                            ath_name='spacecontroller'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_named_scripts(self):\n        \"\"\"Test Master.get_named_scripts() with no pattern.\"\"\"\n        expected_type = interactivespaces.NamedScript\n        test_get_collection(\n                            data=TEST_NAMEDSCRIPT_DATA,\n                            method_to_test=interactivespaces.Master.get_named_scripts,\n                                expected_type=expected_type,\n                                path_name='namedscript'\n                                )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_new_live_activity(self):\n        \"\"\"Test a valid call to Master.new_live_activity().\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n\nclass MockFirstResponse():\n    def getcode():\n        return 200\n    def geturl():\n        return 'http:\/\/{}:{}\/liveactivity\/new.html?execution={}'.format(\n                                                                        TEST_HOST,\n                                                                        TEST_PORT,\n                                                                        TEST_SESSION\n                                                                        )\n\nclass MockSecondResponse():\n    def getcode():\n        return 200\n\n    master._api_get_html = MagicMock(return_value=MockFirstResponse())\n    master._api_post_html = MagicMock(return_value=MockSecondResponse())\n\n\nclass MockActivity():\n    self.id = TEST_LIVEACTIVITY_DATA['activity']['id']\n\n\nclass MockController():\n    self.id = TEST_LIVEACTIVITY_DATA['controller']['id']\n\n    test_live_activity = master.new_live_activity(\n                                                  TEST_LIVEACTIVITY_DATA['name'],\n                                                  TEST_LIVEACTIVITY_DATA['description'],\n                                                  MockActivity(),\n                                                  MockController()\n                                                  )\n    master._api_get_html.assert_called_once_with(\n      'liveactivity\/new',\n      {\"mode\": \"embedded\"}\n    )\n    master._api_post_html.assert_called_once_with(\n      'liveactivity\/new',\n      {\"execution\": TEST_SESSION},\n      {\n        \"liveActivity.name\": TEST_LIVEACTIVITY_DATA['name'],\n        \"liveActivity.description\": TEST_LIVEACTIVITY_DATA['description'],\n        \"activityId\": TEST_LIVEACTIVITY_DATA['activity']['id'],\n        \"controllerId\": TEST_LIVEACTIVITY_DATA['controller']['id'],\n        \"_eventId_save\": \"Save\"\n      }\n    )\n\n    self.assertIsInstance(\n      test_live_activity,\n      interactivespaces.LiveActivity\n    )\n\ndef main():\n  unittest.main()\n\nif __name__ == '__main__':\n  main()\n",
        "1737": "def search(query, text):\n  n = len(query)\n  result = []\n  # Loop through the text\n  for i in range(len(text)): \n    # Compare the current n characters of the text \n    # with the query string\n    if text[i: i + n] == query: \n      # If matches, append the current index of text to \n      # the result \n      result.append(i) \n  # Return the list of indices  \n  return result",
        "1738": "list_of_integers = [x for x in range(0, 101)]",
        "1739": "def filter_names(names):\n valid_names = []\n for name in names:\n if re.match('[a-zA-Z]{3,20}', name):\n valid_names.append(name)\n return valid_names\n\nprint(filter_names(['Alex', 'Mark', 'John21', '12345']))\n# Output: ['Alex', 'Mark']",
        "1740": "# Define the Employee class\nclass Employee:\n    def __init__(self, name, email, id, salary):\n        self.name = name \n        self.email = email\n        self.id = id\n        self.salary = salary\n# Create an empty dictionary to store employee details\nemployee_details = {}",
        "1741": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n links.append(link.get('href'))\n\nprint(links)",
        "1742": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data frame from input\ndf = pd.DataFrame([{\n \u201cdescription\u201d: \u201cGently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!\u201d\n}])\n\n# Create feature columns\ndf['Length'] = df['description'].apply(len)\n\n# Create target column\ndf['Sale Price'] = np.nan\n\n# Split data into X (features) and y (target)\nX = df[['Length']]\ny = df['Sale Price']\n\n# Create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make prediction\ndf.loc[0, 'Sale Price'] = model.predict(X)[0]\n\nprint('Predicted Sale Price:', df.loc[0, 'Sale Price'])",
        "1743": "import random\n\n# define the size of the array\nx, y = 10, 10\n\n# create an empty array of the given size\narr = [[0 for j in range(x)] for i in range(y)]\n\n# fill the array with random numbers\nfor i in range(x):\n for j in range(y):\n arr[i][j] = random.randint(0, 9)\n\n# print the array\nfor i in range(x):\n print(arr[i])",
        "1744": "def common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements",
        "1745": "import random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)",
        "1746": "# import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text)",
        "1747": "A static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on.",
        "1748": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the data\ndata = {'Monthly Income': [1900, 2300, 2800, 3500],\n        'Monthly Expenses': [750, 850, 950, 1250]}\ndf = pd.DataFrame(data)\n\n# Train the model\nx = df['Monthly Income'].values.reshape(-1, 1)\ny = df['Monthly Expenses'].values\nreg = LinearRegression().fit(x, y)\n\n# Create the prediction\nprediction = reg.predict([[2300]])\nprint('Predicted total monthly expenses: ', prediction)",
        "1749": "i = 0\n\nwhile i <= 20:\n    if i % 2 == 0:\n        print(i)\n    i += 1",
        "1750": "def check_duplicate_in_array(arr):\n    result = False\n    for i in range(len(arr) - 2):\n        if arr[i] == arr[i + 1] == arr[i + 2]:\n            result = True\n            break\n    return result\n\narr = [4, 2, 8, 2, 1, 4, 19, 4]\nprint(check_duplicate_in_array(arr)) # Output: True",
        "1751": "class BankAccount:\n    def __init__(self):\n        self._balance = 0\n\n    def get_balance(self):\n        return self._balance\n\n    def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n\n        self._balance += amount\n\n    def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n        if amount > self._balance:\n            raise ValueError(\"Insufficient funds\")\n\n        self._balance -= amount",
        "1752": "#Import necessary libraries\nimport cv2\nimport numpy as np\n\n#Load the classifier for frontal face detection\nhaar_face_cascade = cv2.CascadeClassifier(\"haarcascade_frontal_face.xml\")\n\n#Create a VideoCapture object\ncapture = cv2.VideoCapture(\"Sample_image.jpg\")\nimg = capture.read()\n\n#Convert the image into grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n#Detect facial features\nfaces = haar_face_cascade.detectMultiScale(gray, 1.3, 5)\n\n#Draw a rectangle around the faces\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,0), 2)\n\n#Write the image into a file\ncv2.imwrite('face_detect.jpg',img)",
        "1753": "def gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)",
        "1754": "def remove_duplicates(list_a):\n    result = []\n    for a in list_a:\n        if a not in result:\n            result.append(a)\n    return result",
        "1755": "def classify_rain(temp, humidity):\n    if temp < 70 and humidity > 0.7:\n        return 'raining'\n    else:\n        return 'not raining'",
        "1756": "def greedy_algorithm(solutions):\n best_solution = None\n best_solution_value = float(\"-inf\")\n for solution in solutions:\n # calculate value of current solution\n    current_solution_value = calculate_solution_value(solution)\n # update best solution if current solution is better\n    if current_solution_value > best_solution_value:\n        best_solution = solution\n        best_solution_value = current_solution_value\n \n return best_solution",
        "1757": "import nltk\nimport random\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import movie_reviews\n\n# Create a list of the tuples needed for training the model\ndocuments = []\n\nfor category in movie_reviews.categories():\n    for fileid in movie_reviews.fileids(category):\n        documents.append( (list(movie_reviews.words(fileid)), category) )\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Get all words in all documents\nall_words = []\n\nfor w in movie_reviews.words():\n    all_words.append(w.lower())\n\n# Get a frequency distribution of all words\nall_words = nltk.FreqDist(all_words)\n\n# Extract the 2000 most common words\nword_features = list(all_words.keys())[:2000]\n\n# Define a function to find the 2000 most common words in a document\ndef find_features(document):\n    words = set(document)\n    features = {}\n    for w in word_features:\n        features[w] = (w in words)\n\n    return features\n\n# Create a feature set \nfeaturesets = [(find_features(rev), category) for (rev, category) in documents]\n\n# Train the Naive Bayes model\ntraining_set = featuresets[:1900]\ntesting_set = featuresets[1900:]\n\nclassifier = NaiveBayesClassifier.train(training_set)\n\n# Check accuracy\nprint(\"Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set)) * 100)\nclassifier.show_most_informative_features(15)",
        "1758": "import json\n\nusers = {\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"age\": 26\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 32\n        },\n        {\n            \"name\": \"Alice\",\n            \"age\": 21\n        }\n    ]\n}\n\nsearch_term = \"Alice\"\n\nfor user in users[\"users\"]:\n    if user[\"name\"] == search_term:\n        print(\"Found user with name '{}' and age {}\".format(user[\"name\"], user[\"age\"]))",
        "1759": "def normalize(lst):\n return [word.lower() for word in lst]",
        "1760": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = [[120, 250], [110, 200], [140, 300]]\n\n# Convert data to a numpy array\ndata = np.array(data)\n\n# Train the KMeans model with the data\nkmeans = KMeans(n_clusters=2).fit(data)\n\n# Generate centroid coordinates\ncentroids = kmeans.cluster_centers_\n\n# Plot the centroids for the clusters\nplt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=3, c='r')\n\n# Plot all datapoints\nplt.scatter(data[:, 0], data[:, 1], marker='*', s=100)\n\nplt.show()",
        "1761": "def isAnagram(word1, word2): \n  \n    # Get lengths of both strings \n    n1 = len(word1) \n    n2 = len(word2) \n  \n    # If both strings have different lengths, they \n    # cannot be anagrams \n    if (n1 != n2): \n        return False\n  \n    # Sort both strings \n    word1 = sorted(word1) \n    word2 = sorted(word2) \n  \n    # Compare sorted strings \n    for i in range(n1): \n        if word1[i] != word2[i]: \n            return False\n  \n    return True\n  \n# Driver program \nwords = (\"dear\", \"read\")\n  \nif isAnagram(words[0], words[1]): \n    print(\"The word\", words[0], \"and\", words[1], \"are anagrams\") \nelse: \n    print(\"The word\", words[0], \"and\", words[1], \"are not anagrams\")",
        "1762": "def insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are\n        # greater than key, to one position ahead\n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n##\n5. Instruction: Create a Python program to detect a cycle in a linked list.\n5. Input:\nNot applicable\n5. Output:\ndef detectLoop(head): \n    slowPtr = head \n    fastPtr = head \n  \n    while(slowPtr and fastPtr and fastPtr.next): \n        slowPtr = slowPtr.next\n        fastPtr = fastPtr.next.next\n  \n        if slowPtr == fastPtr: \n            return True\n  \n    return False ## No cycle detected",
        "1763": "import requests\n\ndef send_request(url):\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        print(\"Success! The website responded with: \")\n        print(response.text)\n    else:\n        print(\"Error! The website responded with: \")\n        print(\"Status code: \", response.status_code)",
        "1764": "def replace_words(string, target, new): \n    words = string.split(' ')\n    result = []\n\n    for word in words:\n        if word == target:\n            result.append(new)\n        else:\n            result.append(word)\n    \n  return \" \".join(result)\n\nresult = replace_words(\"Hello, how are you today? How is your day going?\", \"how\", \"what\")\nprint(result)",
        "1765": "import string\nimport nltk \nnltk.download('punkt')\n\n# remove punctuation and capitalization \ndef remove_punctuation_and_make_lowercase(data):\n  table = str.maketrans({key: None for key in string.punctuation})\n  data_without_punctuation = data.translate(table).lower()\n  return data_without_punctuation\n\ndata = \"The product was good, but customer service was slow\"\n\ndata_without_punctuation = remove_punctuation_and_make_lowercase(data)\nprint(data_without_punctuation)\n\n# tokenize\ndata_tokenized = nltk.word_tokenize(data_without_punctuation)\nprint(data_tokenized)",
        "1766": "# take a number \nnumber = int(input(\"Please enter a number: \")) \n  \n#initialize sum\nsum = 0\n  \n#Find the sum of the digits of the number\ntemp = number\nwhile temp > 0: \n   digit = temp % 10\n   sum += digit \n   temp \/\/= 10\n  \n# print the output\nprint(\"The sum of the digits of the given number is\", sum)",
        "1767": "#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)",
        "1768": "def common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)",
        "1769": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Training data\nx = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])\ny = np.array([12, 18, 24, 30])\n\n# Create model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Predicted age for height 1.6m and weight 65kg\nmodel.predict([[1.6, 65]]) # output: [16.7]",
        "1770": "arr = [i for i in range(11) if i % 2 == 0]",
        "1771": "def classify_object(features, classes):\n    max_feature = max(features)\n    index = features.index(max_feature)\n    return classes[index]\n\nprint(classify_object([2.5, 4.5, 2.5], [\"apple\", \"orange\", \"pear\"]))",
        "1772": "def bin_to_dec(binary_str):\n # Initialize the result\n result = 0\n \n # Iterate through the string and add each digit to the result\n for d in binary_str:\n  # Multiply the result by 2 for each digit of the string\n  result = result * 2\n  # Add the current digit to the result\n  result += int(d)\n \n # Return the result\n return result\n\nbinary_str = '10101'\nprint(bin_to_dec(binary_str))\n# Output: 21",
        "1773": "def fibonacci(n):\n a, b = 0, 1\n for _ in range(n):\n a, b = b, a + b\n return b\n \nprint(fibonacci(10))",
        "1774": "class Calculator(object):\n    def __init__(self):\n        pass\n    \n    def add(self, x, y):\n        return x + y\n   \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x \/ y\n\n#Main Program\nc = Calculator()\nprint(c.add(4, 8))\nprint(c.subtract(4, 8))\nprint(c.multiply(4, 8))\nprint(c.divide(4, 8))",
        "1775": "\"\"\"\nFind the minimum element in a Python list called 'nums'\n\"\"\"\n\ndef find_min(nums):\n    min = nums[0]\n    for num in nums:\n        if num < min:\n            min = num\n    return min\n    \nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 7, 8, 5]\n    print(find_min(nums))",
        "1776": "def maxProfit(prices):\n maxProfit = 0\n minPrice = float('inf')\n\n for price in prices:\n minPrice = min(minPrice, price)\n maxProfit = max(maxProfit, price - minPrice)\n\n return maxProfit\n\n# example\nmaxProfit([5, 7, 1, 3, 6, 8]) # returns 7",
        "1777": "def median(lst):\n    lst = sorted(lst)\n    if len(lst) % 2 == 0:\n        mid = int(len(lst) \/ 2)\n        return (lst[mid] + lst[mid-1]) \/ 2\n    else:\n        mid = int(len(lst) \/ 2)\n        return lst[mid]\n\nmedian([3, 4, 1, 2, 5])",
        "1778": "def fibonacci_series(n): \n    # Creating an array to store fibonacci numbers till 10th index \n    fibonacci = [0, 1] \n      \n    # Append the next number in the series till 10th index \n    while(len(fibonacci) < n + 1): \n        fibonacci.append(fibonacci[-1] + fibonacci[-2]) \n      \n    # return the value at 10th index \n    return fibonacci[n]",
        "1779": "def sortByDivisible(numbers, integer):\n sortedList = []\n\n for num in numbers:\n if (num % integer == 0):\n sortedList.append(num)\n\n for num in numbers:\n if (num % integer != 0):\n sortedList.append(num)\n\n return sortedList\n\nnumbers = [10, 7, 3, 9, 12, 15]\ninteger = 3\n\nprint(sortByDivisible(numbers, integer))\n# Output: [9, 12, 3, 10, 7, 15]",
        "1780": "def add_numbers(numbers):\n    \"\"\"\n    Find the sum of a given list of numbers.\n    Args:\n        numbers: a list of numbers.\n    Returns:\n        The sum of the numbers.\n    \"\"\"\n    sum = 0\n\n    # Iterate over numbers\n    for num in numbers:\n        # Add number to total\n        sum += num\n\n    return sum\n\ntotal = add_numbers([4, 7, 6, 2])\n\nprint(total)",
        "1781": "def countValues(dataframe):\n counts = {}\n for column in dataframe.columns:\n counts[column] = dataframe[column].count()\n return counts",
        "1782": "import json\n\njson_object = { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }\n\ndict = json.loads(json.dumps(json_object))\n\nprint(dict)",
        "1783": "#Defining the sentence and keyword\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n#Counting the occurences\ncount = sentence.count(keyword)\n\n#Printing the result\nprint(\"The keyword appears \" + str(count) + \" time(s) in the sentence.\")",
        "1784": "def is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str",
        "1785": "def add_two_numbers(a, b):\n    return a + b",
        "1786": "# Naive Bayes Classifier\n\nimport numpy as np\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample data\n# Each item is a string of text\nX = [\"I am spam\", \"Help me now\", \"You won the lottery\", \"Buy this product now\", \n    \"Don't miss this great offer\", \"Open an account with us\", \"Get rich quick\",\n    \"This is not a scam\", \"Don't believe this offer\", \"Invest with us now\"]\n\n# Labels for the example data\n# 1: Spam, 0: Ham\ny = np.array([1,0,1,1,1,0,1,0,1,0])\n\n# Create the classifier\nclf = MultinomialNB()\n\n# Train the classifier\nclf.fit(X, y)\n\n# Test the classifier\ntest_example = \"Claim your prize now\"\ntest_example_label = clf.predict([test_example])\nprint(\"Test example classified as:\", test_example_label[0])",
        "1787": "def Fibonacci(a): \n    if a<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif a==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif a==2: \n        return 1\n    else: \n        return Fibonacci(a-1)+Fibonacci(a-2) \n  \n# Driver Program \n\nlimit = int(input('Enter the limit of fibonacci series:'))\nfor i in range(1,limit+1): \n    print(Fibonacci(i))",
        "1788": "# import the required libraries \nimport base64 \nfrom cryptography.hazmat.backends import default_backend \nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC \n  \n# message to be encrypted \nmessage = \"This is an example\" \n  \n# encode the message in UTF-8 format \nencoded_message = message.encode('utf-8') \n  \n# generate a random salt \nsalt = os.urandom(16) \n  \n# derive an encryption key from the message, \n# salt and number of iterations \nkdf = PBKDF2HMAC( \n    algorithm=hashes.SHA256(), \n    length=32, \n    salt=salt, \n    iterations=100000, \n    backend=default_backend() \n) \nkey = base64.urlsafe_b64encode(kdf.derive(message)) \n  \n# encode the message \nencoded_message = base64.b64encode(message.encode('utf-8')) \n  \n# encrypt the message  \nencrypter = Cipher(algorithms.AES(key), modes.GCM(salt), backend=default_backend()).encryptor() \n  \n# finally calculate the encrypted message \nct = encrypter.update(encoded_message) + encrypter.finalize() \n\nprint(ct)",
        "1789": "def find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res)",
        "1790": "\"\"\"\nCreate a virtual environment in Python to manage project dependencies\n\"\"\"\n\n# Create the virtual environment\npython3 -m venv env\n\n# Activate the virtual environment\nsource env\/bin\/activate\n\n# Install project requirements\npip install -r requirements.txt",
        "1791": "input_list = [1,2,3]\n\nnum_elements = len(input_list)\n\ndef create_symmetric_matrix(input_list):\n    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]\n    \n    for i in range(num_elements):\n        for j in range(num_elements):\n            if i == j:\n                matrix[i][j] = input_list[i]\n            else:\n                matrix[i][j] = input_list[j]\n                \n    return matrix\n\nres = create_symmetric_matrix(input_list)\nprint(res)",
        "1792": "from sklearn.cluster import KMeans\n\n# create KMeans object\nkmeans = KMeans(n_clusters=3)\n\n# fit the data\nkmeans.fit(data)\n\n# predict the clusters\npredicted_clusters = kmeans.predict(data)",
        "1793": "import mysql.connector\n\n# Connect to local MySQL Server\nconn = mysql.connector.connect(\n    user='root',\n    password='root',\n    host='localhost',\n    database='test'\n)\ncursor = conn.cursor()\n\n# Execute SQL Query\nsql = \"SELECT * FROM users\"\ncursor.execute(sql)\n\n# Fetch and print results\ndata = cursor.fetchall()\nfor record in data:\n    print(record)",
        "1794": "#!\/usr\/bin\/python\n\n# Get the input number\ninput_num = int(input(\"Enter a number: \"))\n\n# Convert to binary \nbinary_num = bin(input_num)\n\n# Print the result\nprint(\"The binary of {} is {}\".format(input_num, binary_num))",
        "1795": "def sum_of_numbers(n):\n    return int(n * (n + 1) \/ 2)",
        "1796": "def calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum \/ len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) \/ 2)] + arr[int(len(arr) \/ 2) - 1]) \/ 2\n else:\n median = arr[int(len(arr) \/ 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]",
        "1797": "def count_differences(str1, str2): \n    differences = 0 \n    for letter1, letter2 in zip(str1, str2): \n        if letter1 != letter2: \n            differences +=1 \n    return differences",
        "1798": "def bubble_sort(arr): \n    # go through each element in the list\n    for elem in arr: \n        # compare one elem with each of the successive elements\n        for i in range(len(arr)-1): \n            if arr[i] > arr[i+1]: \n                temp = arr[i] \n                arr[i] = arr[i+1] \n                arr[i+1] = temp \n  \n    return arr \n  \narr = [7,2,5,1,3]\nsorted_arr = bubble_sort(arr)\nprint(\"Sorted array:\",sorted_arr)\n\nOutput: Sorted array: [1,2,3,5,7]",
        "1799": "def item_freq(list_input):\n    freq = {} \n  \n    for item in list_input: \n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n  \n    for key, value in freq.items(): \n        print (\"% s : % d\"%(key, value))",
        "1800": "def preorder_traversal(root):\n    if root is None: \n        return\n    \n    print (root.data, end = ' ')\n    \n    preorder_traversal(root.left) \n    preorder_traversal(root.right)",
        "1801": "import sklearn\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nX_new = np.array([[5.2,3.5,1.4,0.2]])\nprediction = knn.predict(X_new)\n\nif int(prediction) == 0:\n print('The flower is a Setosa.')\nelif int(prediction) == 1:\n print('The flower is a Versicolor.')\nelse:\n print('The flower is a Virginica.')",
        "1802": "def count_even_numbers(list1):\n    count = 0\n    for item in list1:\n        if item % 2 == 0:\n            count += 1\n    return count\n\nprint(count_even_numbers(list1))",
        "1803": "def oddNumbers(n):\n    for i in range(0, n + 1):\n        if i % 2 != 0:\n            yield i\n\nn = 10\nfor num in oddNumbers(n):\n    print(num)",
        "1804": "# Pass command line arguments to a function\n\nimport sys\n \ndef command_line_args():\n    args = []\n    # Loop over the command line arguments\n    for arg in sys.argv[1:]:\n        args.append(arg)\n    return args\n \nargs = command_line_args()\nprint(args)",
        "1805": "def greeting(name, age):\n \u00a0 \u00a0print(\"Hi, my name is \", name, \"and I'm\", age, \"years old.\")\n\ngreeting(\"John\", 28)",
        "1806": "class Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n return self.stack.pop()\n \n def peek(self):\n return self.stack[-1]\n \n def is_empty(self):\n return self.stack == []\n \n def size(self):\n return len(self.stack)",
        "1807": "import random \n  \n# Function to scramble a given word \ndef scramble(word):  \n    # Define all the possible chars in the word \n    chars = list(word)  \n  \n    # Get a random permutation of the characters \n    random.shuffle(chars) \n  \n    # Construct the scrambled word \n    scramble_word = ''.join(chars)  \n  \n    return scramble_word \n\n# Driver code \nword = 'listen'\nscrambled = scramble(word) \n  \nprint(word + \" scrambled becomes: \" + scrambled)",
        "1808": "import json\n\ndata = '{\"type\": \"error\", \"message\": \"An error occurred\"}'\n\njson_data = json.loads(data)\nprint(json_data[\"type\"]) # prints \"error\"\nprint(json_data[\"message\"]) # prints \"An error occurred\"",
        "1809": "query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'",
        "1810": "def binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) \/\/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1",
        "1811": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "1812": "import numpy as np \nfrom sklearn.cluster import KMeans \n\ndataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]\n\nX = np.array(dataset) \n\nkmeans = KMeans(n_clusters=3, random_state=0).fit(X)\n\nlabels = kmeans.labels_\n\nfor i in range(len(X)):\n print(\"datapoint:\", X[i], \"belongs to cluster\", labels[i])",
        "1813": "def search(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\nindex = search(arr, target)\nif index != -1:\n print(\"Found at index: \" + str(index))\nelse:\n print(\"Not Found\")",
        "1814": "import string \n  \n# Remove punctuations from string \ndef remove_punctuations(s): \n    s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) \n    return s \n  \n# Driver Code \nif __name__ == \"__main__\" : \n  \n    text = \"This is a great world - let's start coding!\"\n    print(remove_punctuations(text))",
        "1815": "def combine_strings(s1, s2):\n if s1 < s2:\n print(s1+s2)\n else:\n print(s2+s1)\n\ncombine_strings(\"Hello\", \"World\")\n# Output: HelloWorld",
        "1816": "def encode_string(encoding_string):\n    encoded_string = \"\"\n    for char in encoding_string : \n        encoded_string += str(ord(char)) + \" \"\n    return encoded_string",
        "1817": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))",
        "1818": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n      \n    while low <= high: \n        mid = (high + low) \/\/ 2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \narr = [2, 8, 10, 17, 19, 25, 28]\nx = 19\nresult = binary_search(arr, x)\nprint(result)",
        "1819": "def recommend_option(options):\n  best_option = {}\n\n  for option in options:\n    if (best_option == {}) or (option['cost']\/option['rating'] < best_option['cost']\/best_option['rating']):\n      best_option = option\n\n  return best_option['name']",
        "1820": "def frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))",
        "1821": "def random_int(a, b):\n    random_number = random.randint(1, a**b)\n    return random_number",
        "1822": "class TwoStringObject:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2",
        "1823": "def remove_multiple_occurrences(arr):\n seen = set([]) # stores all the numbers we've seen before\n new_arr = [] # stores the numbers that occurred only once or twice\n\nfor num in arr:\n if num not in seen:\n  seen.add(num) # add to the numbers we've seen\n  new_arr.append(num)\n elif num in seen:\n  seen.remove(num) # remove from the \"seen\" set\n\nreturn new_arr\n\narr = [1,2,1,3,4,2,2,2,3,1]\nprint(remove_multiple_occurrences(arr))\n# Prints [4]",
        "1824": "The benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources.",
        "1825": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    # other methods, such as get_title(), set_title(), get_author(), set_author(), etc. could go here",
        "1826": "import string\nfrom random import *\n\ndef generate_username():\n    letters = string.ascii_letters\n    numbers = string.digits\n    username = \"\"\n    for _ in range(10):\n        username += choice(letters) + choice(numbers)\n    return username\n\nprint(generate_username())",
        "1827": "import datetime\n\ndef generate_calendar(tasks, appointments):\n    day = datetime.datetime.now().strftime('%A')\n    calendar = {day: {}}\n\n    for task in tasks:\n        calendar[day]['tasks'] = {'name': task['name'], 'time': task['time']}\n\n    for appointment in appointments:       \n        calendar[day]['appointments'] = {'name': appointment['name'], 'time': appointment['time']}  \n    return calendar\n\nif __name__ == '__main__':\n    tasks = [{'name': 'Write code', 'time': '8pm'}, {'name': 'Complete project', 'time': '9pm'}]\n    appointments = [{'name': 'Meeting with Bob', 'time': '2pm'}, {'name': 'Meeting with Alice', 'time': '4pm'}]\n    result = generate_calendar(tasks, appointments)\n    print(result)",
        "1828": "def find_max(nums):\n    max_value = nums[0] \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    return max_value\n\nnums = [1, 8, 2, 4, 10]\nprint(find_max(nums))",
        "1829": "\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))",
        "1830": "def is_anagram(str1, str2): \n    # Create lists of characters in each string\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # Compare the two lists \n    if list1 == list2:\n        return True\n    else:\n        return False",
        "1831": "import random\n \nnums = []\nfor i in range(10):\n nums.append(random.randint(1, 100))\n \nprint(nums)",
        "1832": "table = dict()\n\ntable['one'] = 1\ntable['two'] = 2\ntable['three'] = 3",
        "1833": "keys = [\"Stud1\", \"Roll No\", \"Class\", \"Stud2\"]",
        "1834": "def char_count(text):\n  chars = {}\n  for char in text:\n    if char in chars:\n      chars[char] += 1\n    else:\n      chars[char] = 1\n  return chars",
        "1835": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n   def get_name(self):\n        return self.name\n\n   def get_age(self):\n        return self.age\n\n   def get_salary(self):\n        return self.salary",
        "1836": "import collections\nimport sys\n\ndef count_words(text):\n word_counts = collections.Counter(text.split())\n top_five = word_counts.most_common(5)\n for word, count in top_five:\n print(f'{word} occurred {count} times')\n\nif __name__ == '__main__':\n text = sys.stdin.read()\n count_words(text)",
        "1837": "import random\n\n# A list of words, that the program can use to generate lyrics\nwords = [\"Love\", \"Life\", \"Dreams\", \"Happiness\", \"Joy\", \"Home\",\n\"Friends\", \"Family\", \"Success\", \"Believe\", \"Magic\", \"Laughter\",\n\"Together\", \"Memories\", \"Adventure\", \"Appreciate\", \"Peace\",\n\"Passion\", \"Courage\", \"Forever\"]\n\n# Generate a song with 8 lines\nfor i in range(8):\n # Choose random words to form the line\n line = \"\"\n for j in range(4):\n line += random.choice(words) + \" \"\n # Capitalize the line and add punctuation\n line = line.capitalize() + \".\\n\"\n print(line)\n\n# Print the result\nprint(\"That is all I need to be complete.\")",
        "1838": "def convert_to_boolean(expression):\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    \n    tokens = expression.split(\"+\")\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].replace(\"-\",\"+-\")\n    \n    expression = \"\".join(tokens)\n    expression = expression.replace(\" > 0\", \"\")\n    expression = expression.split(\"+\")\n    \n    boolean_expression = \" \".join(expression)\n    boolean_expression = boolean_expression.replace(\" x\", \"True\")\n    boolean_expression = boolean_expression.replace(\"y\", \"True\")\n    boolean_expression = boolean_expression.replace(\"z\", \"False\")\n    \n    return boolean_expression",
        "1839": "function checkStringContains(str1, str2) {\n  let occurs = 0;\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j <= str2.length; j++) {\n      if (str1[i] === str2[j]) {\n        occurs++;\n        break;\n      }\n    }\n  }\n  return occurs === str2.length;\n}\n\nconst result = checkStringContains('python', 'ono');\nconsole.log(result);",
        "1840": "def most_common(lst):\n  return max(set(lst), key=lst.count)",
        "1841": "def str_to_list(string):\n    return string.split(' ')",
        "1842": "def fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2, n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(9)) \n# 21",
        "1843": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "1844": "def keyword_detector(string, keywords):\n for i in keywords:\n if i in string:\n return True\n return False\n\nprint(keyword_detector(\"I love ice cream\", [\"chocolate\", \"vanilla\"]))",
        "1845": "numbers = [80, 85, 90, 75, 95]\n\ntotal = 0\nfor number in numbers:\n total += number\n\nclass_average = total \/ len(numbers)\nprint(class_average)",
        "1846": "# Initalize a shopping cart dictionary\nshopping_cart = {}\n\n# Function to add an item to the shopping cart\ndef add_item_to_cart(item, quantity):\n    if item in shopping_cart:\n        shopping_cart[item] += quantity\n    else:\n        shopping_cart[item] = quantity\n\n# Function to remove an item from the shopping cart\ndef remove_item_from_cart(item):\n    if item in shopping_cart:\n        del shopping_cart[item]\n\n# Function to calculate the total price\ndef calculate_total():\n    total = 0\n    for item, quantity in shopping_cart.items():\n        total += item.price * quantity\n        \n    return total\n\n# Function to clear the shopping cart\ndef clear_cart():\n    shopping_cart.clear()",
        "1847": "def reverse_words(string): \n    words = string.split(' ') \n    reverse = words[::-1] \n    return ' '.join(reverse)",
        "1848": "def hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0",
        "1849": "# importing libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# making the request\nurl = \"https:\/\/www.example.com\/products\"\nr = requests.get(url)\n\n# extracting the data with BeautifulSoup\nsoup = BeautifulSoup(r.content)\nproducts = soup.find_all(\"div\", {\"class\": \"product\"})\n\nfor product in products:\n    product_name = product.find(\"h3\").text\n    product_price = product.find(\"span\", {\"class\": \"price\"}).text\n    print(\"Found product: %s %s\" % (product_name, product_price))",
        "1850": "import pandas as pd\nfrom google.cloud import automl\n\n# Create an Automl Client\nclient = automl.TablesClient(project='PROJECT_ID', region='us-central1')\n\ndef predict_team(player_name, position):\n \"\"\"\n Generates a team recommendation using AutoML based on player's name and position.\n \"\"\"\n # Create tables client\n model_display_name = 'YOUR_MODEL_DISPLAY_NAME'\n table_spec_name = f'projects\/PROJECT_ID\/locations\/us-central1\/tables\/{model_display_name}'\n\n # Create the dataframe with player data\n data = {\n 'player_name': player_name,\n 'position': position\n }\n df = pd.DataFrame(data, index=[0])\n\n # Create a prediction object\n pred_bt = client.predict(\n model_display_name=model_display_name,\n inputs=df[['player_name', 'position']],\n table_spec_name=table_spec_name\n )\n\n # Format into team recommendation\n team_name = pred_bt.payload[0].tables.value.string_value\n return team_name\n\ntarget_player = 'Yadiel Rivera'\ntarget_position = 'Shortstop'\nresult = predict_team(target_player, target_position)\nprint(f'For player {target_player} playing {target_position}: {result}')",
        "1851": "def max_val(num1, num2):\n    # function to find the maximum value of two numbers\n    if(num1 > num2):\n        return num1\n    else:\n        return num2\n\n# get the input values from the user\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\n# call the max_val() function\nmax_val = max_val(a,b)\n\nprint(\"The maximum value is:\", max_val)",
        "1852": "\"\"\"\nA Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N\n\"\"\"\n\nN = 10\nmy_dict = {}\n\n# Generate the dictionary\nfor i in range(1, N+1):\n    my_dict[i] = i * i\n\n# Print the dictionary\nprint(my_dict)",
        "1853": "# Initialize a variable for the maximum count\nmax_count = 0\n\n# Initialize a variable for the most frequent word\nmost_frequent_word = \"\"\n\n# Loop the dictionary\nfor key, value in d.items():\n    if value > max_count:\n        max_count = value\n        most_frequent_word = key\n\n# Print the most frequent word\nprint(\"The most frequent word is '{}'\".format(most_frequent_word))",
        "1854": "def pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)",
        "1855": "def to_upper(string):\n return string.upper()\n \nprint(to_upper(string))  # THIS IS A SAMPLE STRING",
        "1856": "for x in range(1, 10):\n    for y in range(1, 10):\n        print('{} x {} = {}'.format(x, y, x*y))",
        "1857": "from IPython.core.magic import register_cell_magic\n\n@register_cell_magic\ndef if_(line, cell):\n    _, condition = line.split(\" \", 1)\n    result = f\"if {condition}:\"\n    return f\"{result}\\n    {cell}\"\n\n@register_cell_magic\ndef for_(line, cell):\n    _, condition = line.split(' ', 1)\n    result = f\"for {condition}:\"\n    return f\"{result}\\n    {cell}\"",
        "1858": "class MyList(list):\n  def __init__(self):\n    super().__init__()\n  def some_method(self):\n    pass",
        "1859": "# A simple Python program to add two numbers\na = 1.5\nb = 6.3\n\n# Use more descriptive variable names\nnum1 = a\nnum2 = b\n\n# Use the in-built sum() function\nsum = sum([a, b])\n\n# Use f-strings to reduce the amount of code\nprint(f'The sum of {a} and {b} is {sum}')",
        "1860": "import torch.nn as nn\n\nclass ANN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Input layer\n        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer\n        self.relu1 = nn.ReLU()\n        # Hidden layer 1\n        self.fc2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        # Hidden layer 2\n        self.fc3 = nn.Linear(32, 16)\n        self.relu3 = nn.ReLU()\n        # Output layer\n        self.fc4 = nn.Linear(16, 3)\n        self.sigmoid = nn.Sigmoid()\n \n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu1(x)\n        x = self.fc2(x)\n        x = self.relu2(x)\n        x = self.fc3(x)\n        x = self.relu3(x)\n        x = self.fc4(x)\n        x = self.sigmoid(x)\n        return x"
    },
    "prompt": {
        "0": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the sum of a sequence of integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "1": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for crawling a website for a specific type of data.\n\n### Input:\nwebsite: www.example.com \ndata to crawl: phone numbers\n\n### Output:\nimport requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))",
        "2": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].\n\n### Input:\n\n\n### Output:\n[x*x for x in [1, 2, 3, 5, 8, 13]]",
        "3": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to perform this action.\n\n### Input:\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"\n\n### Output:\ndef remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)",
        "4": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generates random numbers between 0 and 9 that are divisible by 3.\n\n### Input:\n\n\n### Output:\ndef generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process",
        "5": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to get the third largest element in a given row.\n\n### Input:\n[12, 13, 13, 45, 22, 99]\n\n### Output:\ndef third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]",
        "6": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('\/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('\/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('\/records\/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('\/records\/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)",
        "7": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n\n### Input:\n'This is a test', ['test', 'this', 'is']\n\n### Output:\ndef contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
        "8": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat should this Python program do?\n\n### Input:\ndef is_palindrome(s):\n    '''Write your code here.'''\n\n### Output:\ndef is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.",
        "9": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort and print out the elements of an array of integers.\n\n### Input:\n[17, 41, 5, 22, 54, 6, 29, 3, 13]\n\n### Output:\narr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",
        "10": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that adds two then doubles the result.\n\n### Input:\n\n\n### Output:\ndef double_add(num1, num2): \n    return (num1 + num2) * 2",
        "11": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to extract the non-vowel words in a sentence.\n\n### Input:\nThis machine learning project is challenging.\n\n### Output:\ndef extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words",
        "12": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the average of a list of positive integers and output the result.\n\n### Input:\nList of positive integers: [1, 5, 6, 7, 8]\n\n### Output:\nlist_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total\/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))",
        "13": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that prints out the Pascal's triangle for a given number of rows.\n\n### Input:\n\n\n### Output:\ndef pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)",
        "14": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision-making algorithm for a rock-paper-scissors game using Python.\n\n### Input:\n\n\n### Output:\n# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)",
        "15": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCollate a machine learning model in Python that distinguishes between cats and dogs.\n\n### Input:\nA dataset of 800 images of cats and dogs\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1.\/255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '\/path\/to\/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)",
        "16": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the numbers divisible by a certain number within a certain range.\n\n### Input:\nint m=36, int n=74, int divisor=6\n\n### Output:\ndef find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers",
        "17": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function that will take two strings and return true if the first string contains the second.\n\n### Input:\nquery = \"catering\"\nword = \"cat\"\n\n### Output:\ndef check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)",
        "18": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python 3 that calculates the factorial of a number.\n\n### Input:\nNot applicable\n\n### Output:\ndef factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)",
        "19": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to predict the class labels of a given set of data.\n\n### Input:\nThe dataset contains 4 features: Length, Width, Height and Weight.\n\n### Output:\n# Load the dataset\nimport pandas as pd\ncsv_url = 'http:\/\/test.test\/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label",
        "20": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate random passwords that consist of 8 characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)",
        "21": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list using a while loop in Python and appends the current number to the list.\n\n### Input:\n\n\n### Output:\nmy_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)",
        "22": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to query Twitter to get the most recent tweets from a user.\n\n### Input:\nusername: @elonmusk\n\n### Output:\nimport tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)",
        "23": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.\n\n### Input:\n[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")",
        "24": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a way to encrypt a message using a key in Python.\n\n### Input:\nmessage = \"Hello world!\"\nkey = \"secret\"\n\n### Output:\nimport hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)",
        "25": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters and prints out the larger of them.\n\n### Input:\nparameter_1 = 7\nparameter_2 = 9\n\n### Output:\ndef printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)",
        "26": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code by introducing list comprehensions.\n\n### Input:\neven_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)\n\n### Output:\neven_numbers = [i for i in range(1, 21) if i % 2 == 0]",
        "27": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to print Fibonacci series up to a given number.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))",
        "28": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle\n\n### Input:\nboard = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]\n\n### Output:\ndef solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row\/\/3)*3 + i\/\/3][(col\/\/3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")",
        "29": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the sum of the digits in a given number.\n\n### Input:\n\n\n### Output:\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num \/\/ 10\n    return total",
        "30": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the list of people below and create a Python dictionary with the names as keys and the ages as values.\n\n### Input:\nJohn (20), Jane (40), Alex (18), Peter (45)\n\n### Output:\npeople_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}",
        "31": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to clearly understand the concept of recursion.\n\n### Input:\n\n\n### Output:\n# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120",
        "32": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 6-digits number in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(100000, 999999)\nprint(number)",
        "33": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python to sort strings by their length.\n\n### Input:\n[\"cat\", \"dog\", \"apple\", \"banana\"]\n\n### Output:\ndef sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)",
        "34": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the maximum and minimum values in a given list.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "35": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in Python to iterate over a list of numbers and print only the even numbers.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\nfor num in my_list:\n    if num % 2 == 0:\n        print(num)",
        "36": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?\n\n### Input:\n\n\n### Output:\nmyArray = [float(i) for i in range(0,11)]",
        "37": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network model in Python to classify the MNIST data set correctly.\n\n### Input:\n\n\n### Output:\nimport keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
        "38": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for categorizing user input.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction",
        "39": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.\n\n### Input:\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\n### Output:\ndef merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]",
        "40": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for finding the longest common subsequence between two strings.\n\n### Input:\n\"ABCDF\", \"ABECD\"\n\n### Output:\ndef longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "41": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given Python program to a C# program.\n\n### Input:\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)\n\n### Output:\npublic int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}",
        "42": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in a different programming language.\n\n### Input:\n\/\/ JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});\n\n### Output:\n# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
        "43": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TicTacToe game in Python.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False",
        "44": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.\n\n### Input:\n\n\n### Output:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
        "45": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the inputs provided, write Python code to check if two integers are equal.\n\n### Input:\nFirst Integer: 10\nSecond Integer: 10\n\n### Output:\nif int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")",
        "46": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition",
        "47": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average of five numbers entered by a user.\n\n### Input:\n\n\n### Output:\nnums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) \/ len(nums)\n\n#Print average\nprint(\"The average is \", average)",
        "48": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Markov chain given a text input.\n\n### Input:\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\n### Output:\nimport random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))",
        "49": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine if a number provided by the user is prime or not.\n\n### Input:\n17\n\n### Output:\n# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')",
        "50": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the difference between the lowest and highest value for an array of integers.\n\n### Input:\n[12, 24, 3, 8, -1]\n\n### Output:\ndef diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25",
        "51": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code snippet to find prime numbers using Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)",
        "52": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n### Output:\nd = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)",
        "53": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of all even numbers less than or equal to n.\n\n### Input:\n\n\n### Output:\ndef sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result",
        "54": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the Fibonacci numbers up to a given number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)",
        "55": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.\n\n### Input:\n[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%\n\n### Output:\nitems = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)",
        "56": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function to find the maximum value within a nested dictionary.\n\n### Input:\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}\n\n### Output:\ndef findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))",
        "57": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00",
        "58": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication on two given matrices.\n\n### Input:\n\n\n### Output:\ndef matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result",
        "59": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to read an array from the user and then determine the mean and median of the array.\n\n### Input:\narr = [10, 15, 20, 25, 30, 35]\n\n### Output:\ndef mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum\/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)\/2)] \n      else: \n            median = (arr[len(arr)\/\/2] + arr[len(arr)\/\/2 - 1]) \/ 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)",
        "60": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check whether an array has even or odd number of elements.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "61": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to calculate the Gini coefficient of a given dataset.\n\n### Input:\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\n\n### Output:\ndef gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum \/ n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 \/ n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605",
        "62": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"\/tmp\/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples\/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c \/ total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))",
        "63": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate a prime number sequence using Python.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)",
        "64": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that removes duplicates from a list.\n\n### Input:\nInput List: [1, 2, 3, 4, 3, 2, 1]\n\n### Output:\ndef remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]",
        "65": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to sort the given list of words.\n\n### Input:\n['bubble', 'selection', 'quicksort', 'insertion']\n\n### Output:\n# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']",
        "66": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function for calculating the average of a list of numbers in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum \/ count\n return avg",
        "67": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that compares two binary trees to check if they are similar.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)",
        "68": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program for solving a quadratic equation in Python.\n\n### Input:\nEquation: x2 + 3x - 4 = 0\n\n### Output:\nimport math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b\/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) \/ (2*a); \n        x2 = (-b - math.sqrt(discriminant)) \/ (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}",
        "69": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code for adding two matrices.\n\n### Input:\n\n\n### Output:\ndef add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result",
        "70": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.\n\n### Input:\n\n\n### Output:\ndef substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))",
        "71": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function which takes an array and a value and returns the index at which this value is present in the array.\n\n### Input:\narr = [2, 5, 9, 15], x = 5\n\n### Output:\ndef find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))",
        "72": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the common elements in two lists.\n\n### Input:\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]\n\n### Output:\ncommon_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]",
        "73": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.\n\n### Input:\ns1 = \"abcd\", s2 = \"bae\"\n\n### Output:\ndef num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)",
        "74": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert a string to its lowercase version.\n\n### Input:\n\n\n### Output:\ndef str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string",
        "75": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate a function in Python that shuffles a given list?\n\n### Input:\n\n\n### Output:\nimport random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list",
        "76": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.\n\n### Input:\nmail_list = [\"example.user@gmail.com\", \"bad@example\"]\n\n### Output:\ndef validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True",
        "77": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.\n\n### Input:\nint1 = 10\nint2 = 5\n\n### Output:\nint1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 \/ int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)",
        "78": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)",
        "79": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to clean up a list of emails and put them into a new list.\n\n### Input:\nThe original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\n### Output:\noriginal_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']",
        "80": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.\n\n### Input:\nNot applicable\n\n### Output:\nfrom faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))",
        "81": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to classify positive and negative sentiment in tweets.\n\n### Input:\n\n\n### Output:\ndef sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results",
        "82": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the given URL and print out the protocol, domain name, and path using Python.\n\n### Input:\nhttps:\/\/www.example.com\/path\/to\/file\n\n### Output:\nimport urllib.parse\n\nurl = 'https:\/\/www.example.com\/path\/to\/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: \/path\/to\/file",
        "83": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive Python function to generate Fibonacci numbers.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))",
        "84": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Kubernetes pod setup that publishes a tweet every 5 minutes.\n\n### Input:\nNot applicable\n\n### Output:\napiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*\/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: \/crontab\/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"",
        "85": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\n### Input:\nRow = 3, Column = 3\n\n### Output:\n\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "86": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\n### Output:\nnumbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)",
        "87": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
        "88": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the square root of a user-defined positive number.\n\n### Input:\nn = 100\n\n### Output:\nimport math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')",
        "89": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width",
        "90": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data visualization dashboard in Python using Matplotlib.\n\n### Input:\n\n\n### Output:\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()",
        "91": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.\n\n### Input:\n\n\n### Output:\n# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)",
        "92": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to identify the longest word in a sentence.\n\n### Input:\n\u201cThe rain in Spain stays mainly in the plain.\u201d\n\n### Output:\ndef find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str",
        "93": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that can convert degrees Fahrenheit to degrees Celsius.\n\n### Input:\n\n\n### Output:\ndef FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5\/9\n    return temp_celsius",
        "94": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks if a given number is an Armstrong number.\n\n### Input:\n\n\n### Output:\ndef is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp \/\/= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False",
        "95": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to print the following pattern:\n\n### Input:\n\n\n### Output:\nfor i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")",
        "96": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a web scraper in Python to extract the latest stock prices from specific websites.\n\n### Input:\n[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https:\/\/finance.yahoo.com\/quote\/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')",
        "97": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.\n\n### Input:\n\n\n### Output:\n\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n    _, _, _op = _op_def_lib._apply_op_helper(\n        \"DecodeLibsvm\", input=input, num_features=num_features, dtype=dtype,\n        label_dtype=label_dtype, name=name)\n    _result = _op.outputs[:]\n    _inputs_flat = _op.inputs\n    _attrs = (\"dtype\", _op.get_attr(\"dtype\"), \"label_dtype\",\n              _op.get_attr(\"label_dtype\"), \"num_features\",\n              _op.get_attr(\"num_features\"))\n    _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n    _result = _DecodeLibsvmOutput._make(_result)\n    return _result\n\n  else:\n    try:\n      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n        _ctx._context_handle, _ctx._eager_context.device_name, \"DecodeLibsvm\",\n        name, _ctx._post_execution_callbacks, input, \"dtype\", dtype,\n        \"label_dtype\", label_dtype, \"num_features\", num_features)\n      _result = _DecodeLibsvmOutput._make(_result)\n      return _result\n    except _core._FallbackException:\n      return decode_libsvm_eager_fallback(\n          input, dtype=dtype, label_dtype=label_dtype,\n          num_features=num_features, name=name, ctx=_ctx)\n    except _core._NotOkStatusException as e:\n      if name is not None:\n        message = e.message + \" name: \" + name\n      else:\n        message = e.message\n      _six.raise_from(_core._status_to_exception(e.code, message), None)\n\n\ndef decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function decode_libsvm\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  num_features = _execute.make_int(num_features, \"num_features\")\n  if dtype is None:\n    dtype = _dtypes.float32\n  dtype = _execute.make_type(dtype, \"dtype\")\n  if label_dtype is None:\n    label_dtype = _dtypes.int64\n  label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n  input = _ops.convert_to_tensor(input, _dtypes.string)\n  _inputs_flat = [input]\n  _attrs = (\"dtype\", dtype, \"label_dtype\", label_dtype, \"num_features\",\n  num_features)\n  _result = _execute.execute(b\"DecodeLibsvm\", 4, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n  _result = _DecodeLibsvmOutput._make(_result)\n  return _result\n\n_ops.RegisterShape(\"DecodeLibsvm\")(None)\n\ndef _InitOpDefLibrary(op_list_proto_bytes):\n  op_list = _op_def_pb2.OpList()\n  op_list.ParseFromString(op_list_proto_bytes)\n  _op_def_registry.register_op_list(op_list)\n  op_def_lib = _op_def_library.OpDefLibrary()\n  op_def_lib.add_op_list(op_list)\n  return op_def_lib\n# op {\n#   name: \"DecodeLibsvm\"\n#   input_arg {\n#     name: \"input\"\n#     type: DT_STRING\n#   }\n#   output_arg {\n#     name: \"label\"\n#     type_attr: \"label_dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_indices\"\n#     type: DT_INT64\n#   }\n#   output_arg {\n#     name: \"feature_values\"\n#     type_attr: \"dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_shape\"\n#     type: DT_INT64\n#   }\n#   attr {\n#     name: \"dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_FLOAT\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"label_dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_INT64\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"num_features\"\n#     type: \"int\"\n#     has_minimum: true\n#     minimum: 1\n#   }\n# }\n_op_def_lib = _InitOpDefLibrary(b\"\\n\\311\\001\\n\\014DecodeLibsvm\\022\\t\\n\\005input\\030\\007\\032\\024\\n\\005label\\\"\\013label_dtype\\032\\023\\n\\017feature_indices\\030\\t\\032\\027\\n\\016feature_values\\\"\\005dtype\\032\\021\\n\\rfeature_shape\\030\\t\\\"\\033\\n\\005dtype\\022\\004type\\032\\0020\\001:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"!\\n\\013label_dtype\\022\\004type\\032\\0020\\t:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"\\027\\n\\014num_features\\022\\003int(\\0010\\001\")\n",
        "98": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of the values of a given dictionary\n\n### Input:\ndictionary = {'A':5, 'B':6, 'C':10}\n\n### Output:\ndef dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "99": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python that can be used to delete an item from a list.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('\/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('\/items\/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})",
        "100": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead a given list of strings and create a new list of all strings that are longer than 5 characters long.\n\n### Input:\n['Python', 'is', 'Fun']\n\n### Output:\ndef filter_long_strings(string_list):\n long_strings = []\n for string in string_list:\n if len(string) > 5:\n long_strings.append(string)\n return long_strings\n\nstring_list = ['Python', 'is', 'Fun']\n\nlong_strings = filter_long_strings(string_list)\nprint(long_strings)",
        "101": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCraft an algorithm in Python to move all zeroes in a list to the end of the list.\n\n### Input:\n[3, 0, 1, 0, 5, 0, 2]\n\n### Output:\ndef move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)",
        "102": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)",
        "103": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print out an array backwards.\n\n### Input:\n\n\n### Output:\ndef print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])",
        "104": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm.\n\n### Input:\n\n\n### Output:\ndef sieve_eratosthenes(n): \n    prime_list = [True] * (n+1) \n    prime_list[0] = False\n    prime_list[1] = False\n    primes = [] \n      \n    for i in range(2, n+1): \n        if prime_list[i] == True: \n            primes.append(i) \n            for j in range(i*i, n+1, i): \n                prime_list[j] = False\n    return primes \n  \nn = 100\nprint(\"The Prime numbers from 1 to 100 are:\")\nprint(sieve_eratosthenes(n))",
        "105": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function named \"Transpile\" that takes in four arguments: \"src_dir\", \"dst_dir\", \"model_filename\", and \"params_filename\". Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the \"src_dir\", \"exe\", \"model_filename\", and \"params_filename\" arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to \"dst_dir\" using fluid.io.save_persistables() and the \"inference_transpiler_program\" and \"params_filename\" arguments. If \"dst_dir\" does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the \"Transpile\" function with the parsed arguments.\n\n### Input:\n\n\n### Output:\nimport os\nimport sys\nimport argparse\nimport paddle.fluid as fluid\n\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = fluid.CPUPlace()\n    exe = fluid.Executor(place)\n\n    inference_scope = fluid.core.Scope()\n    with fluid.scope_guard(inference_scope):\n        print \"Loading inference_program from \", src_dir\n        [inference_program, feed_target_names,\n         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)\n\n        inference_transpiler_program = inference_program.clone()\n        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.\n        t = fluid.InferenceTranspiler()\n        # Under the with statement, inference_scope is the global scope.\n        t.transpile(inference_transpiler_program, place)\n\n        #print inference_transpiler_program\n\n        print \"Saving the optimized inference_program to \", dst_dir\n        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.\n        if not os.path.isdir(dst_dir):\n            os.makedirs(dst_dir)\n        model_path = os.path.join(dst_dir, model_filename)\n        with open(model_path, \"wb\") as f:\n            f.write(inference_transpiler_program.desc.serialize_to_string())\n        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', help='Source directory of inference model')\n    parser.add_argument('--dst_dir', help='Dstination directory of inference model')\n    parser.add_argument('--model_filename', default=None, help='The name of model file')\n    parser.add_argument('--params_filename', default=None, help='The name of params file')\n    args = parser.parse_args()\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\n\nif __name__ == '__main__':\n    main()\n",
        "106": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.\n\n### Input:\nmarks = [87, 56, 99, 54]\nmark = 4\n\n### Output:\ndef add_marks(marks, mark):\n return [m + mark for m in marks]",
        "107": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a positive feedback loop for the following python program.\n\n### Input:\nfor i in range(10):\n    print(\"hello\")\n\n### Output:\nfor i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")",
        "108": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that prints out the numbers from 1 to 50 in python\n\n### Input:\n\n\n### Output:\ndef print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()",
        "109": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address.\n\n### Input:\nrecipient_emails = [\"email1@example.com\",\"email2@example.com\"]\n\n### Output:\nimport smtplib\n\nsender_email = 'example@gmail.com'\npassword = 'example_password'\n\nfor email in recipient_emails:\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        server.ehlo()\n        server.starttls()\n        server.login(sender_email, password)\n\n        subject = 'Automated Email from Program'\n        message = 'Message body'\n \n        server.sendmail(sender_email, email, 'Subject: ' + subject + '\\n\\n' + message)\n        server.quit()\n        print('Email sent successfully.')",
        "110": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class which represents a 3D Vector\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"",
        "111": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, write a Python program to find the total number of common characters present in both strings\n\n### Input:\n\n\n### Output:\ndef num_common_chars(str1, str2):\n    common = 0\n    for c in str1:\n        if c in str2:\n            common += 1\n    return common",
        "112": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to handle errors.\n\n### Input:\ndef read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data\n\n### Output:\ndef read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")",
        "113": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze a given Python code and write a function that checks if a given number is prime.\n\n### Input:\ndef primeCheck(num):\n\n### Output:\ndef primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True",
        "114": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to filter out all the even numbers from a given list.\n\n### Input:\n[3, 4, 5, 6, 7]\n\n### Output:\ndef filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)",
        "115": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a Huffman tree and drop all its leaf nodes.\n\n### Input:\n(1)\n      \/      \\\n    (2)      (3)\n    \/ \\      \/ \\\n  (4) (5)  (6) (7)\n\n### Output:\ndef dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head",
        "116": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef crawl(url):\n visited = set()\n queue = [url] \n \n while queue:\n curr = queue.pop(0)\n visited.add(curr) \n response = requests.get(curr)\n \n if response.ok:\n soup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the page here \n\n# find all the links\n links = soup.find_all('a', href=re.compile('^http')) \n \n for link in links:\n if link['href'] not in visited:\n queue.append(link['href'])",
        "117": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the maximum, minimum and mean number of elements in a given string.\n\n### Input:\n\n\n### Output:\ndef get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) \/ num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))",
        "118": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the compound interest.\n\n### Input:\ninvestment_amount = 1000, time = 5, rate_of_interest = 5\n\n### Output:\ndef compoundInterest(investment_amount, rate_of_interest, time):\n    compound_interest = investment_amount * (pow((1 + rate_of_interest \/ 100), time))\n    return compound_interest\n\nci = compoundInterest(1000, 5, 5)\nprint(ci)",
        "119": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line application in Python that stores customer data and allows customer to query by customer name\n\n### Input:\n\n\n### Output:\nimport sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")",
        "120": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to calculate the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Code \nprint(fibonacci(9))",
        "121": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes two sets of integers as input and outputs the intersection of those sets.\n\n### Input:\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n### Output:\ndef intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)",
        "122": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the smallest number in a given list.\n\n### Input:\n[4, 5, 6, 7, 8]\n\n### Output:\ndef smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)",
        "123": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program for printing a Pascal triangle.\n\n### Input:\nNumber of rows= 5\n\n### Output:\ndef PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)",
        "124": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that filters out all negative numbers from the given matrix\n\n### Input:\n[[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]]\n\n### Output:\nimport numpy as np\n\ndef filter_out_negative(matrix):\n  # Convert matrix to numpy array\n  matrix = np.array(matrix)\n  # Find all negative numbers and set them to 0\n  matrix[matrix < 0] = 0\n  return matrix\n\nresult = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])\nprint(result)",
        "125": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic REST API using Python and Flask to list all the countries in the world.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(name)\n\n@app.route('\/countries', methods=['GET'])\ndef get_countries():\nwith open('data.json', 'r') as f:\n countries = json.load(f)\n return jsonify(countries)\n\nif name == 'main':\n app.run()",
        "126": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that can extract hotel reviews from TripAdvisor.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL and the headers\nurl = '<url>'\nheaders = {'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/81.0.4044.138 Safari\/537.36'}\n\n# Make a request and get HTML in response\nresponse = requests.get(url, headers=headers)\n\n# Parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find all reviews\nreviews = soup.find_all('div', {'class': 'review-container'})\n\n# Go through every review and extract the data\nfor review in reviews:\n    # Get the title\n    title = review.find('span', {'class': 'noQuotes'}).text\n\n    # Get the text\n    text = review.find('p', {'class': 'partial_entry'}).text\n\n    # Print for demo\n    print(title)\n    print(text)\n    print('-' * 50)",
        "127": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to identify the author of a given article.\n\n### Input:\n\n\n### Output:\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')",
        "128": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum.\n\n### Input:\n[2, 3, 4, 5, 6, 7]\n\n### Output:\ndef divide_in_two_equal_parts(lst):\n    target = sum(lst) \/\/ 2\n    part1 = []\n    part2 = []\n    left_sum = 0\n    right_sum = 0\n    \n    for num in lst:\n        if left_sum <= right_sum:\n            left_sum += num\n            part1.append(num)\n        else:\n            right_sum += num\n            part2.append(num)\n         \n    return part1, part2\n\npart1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7])\n\nprint(\"Part 1:\", part1)\nprint(\"Part 2:\", part2)",
        "129": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to detect and fix Python syntax errors in a given code snippet.\n\n### Input:\ndef test ():\n    x = 5\n    y = 3 \n    z\n\n### Output:\ndef test():\n    x = 5\n    y = 3\n    try:\n        z\n    except NameError:\n        print(\"NameError: Name 'z' is not defined\")",
        "130": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to store integer values.\n\n### Input:\n\n\n### Output:\nclass IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)",
        "131": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.\n\n### Input:\nArray: [5, 3, 7, 2]\nSearch value: 7\n\n### Output:\ndef linearSearch(arr, value):\n  for i in range(len(arr)):\n    if arr[i] == value:\n      return i  # value found, return index\n  return -1  # value not found\n\narr = [5, 3, 7, 2]\nsearchValue = 7\n\nresult = linearSearch(arr, searchValue)\n\nif result == -1:\n  print(\"Element not found\")\nelse:\n  print(\"Element present at index\", result)",
        "132": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python function to remove all the whitespaces from each string.\n\n### Input:\n['Hello  World  ', 'Hi  there', 'Good  Morning']\n\n### Output:\ndef remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)",
        "133": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm.\n\n### Input:\n\n\n### Output:\ndef randomized_list(num_list):\n    for i in range(len(num_list)-1,0,-1):\n        j = random.randint(0,i)\n        num_list[i],num_list[j] = num_list[j],num_list[i]\n    return num_list",
        "134": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a system in Python for generating natural language responses.\n\n### Input:\nA sample utterance \"What time is it?\"\n\n### Output:\nfrom tensorflow.keras.layers import Input, Dense, Embedding, GRU\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\n\n# Create inputs\ninputs1 = Input(shape=(20,))\nx1 = Embedding(1000, 64)(inputs1)\nx1 = GRU(128)(x1)\n\n# Create outputs\ny1 = Dense(1000, activation='softmax')(x1)\n\n# Create model\nmodel = Model(inputs=[inputs1], outputs=[y1])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit([inputs], [outputs],  epochs=10, batch_size=32)\n\n# Generate the response to the sample utterance\nquery = \"What time is it?\"\nprediction = model.predict(query)\n\nprint(prediction)",
        "135": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python that collects the title and content from the homepage of a given website.\n\n### Input:\nhttps:\/\/www.example.com as the target website.\n\n### Output:\nimport requests\nimport bs4\n\nurl = 'https:\/\/www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)",
        "136": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that finds the total surface area of a cuboid, given its three dimensions.\n\n### Input:\n2, 3, 4\n\n### Output:\ndef find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52",
        "137": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to clean a string of HTML tags.\n\n### Input:\nExample Input: \"<p>This is a <b>test<\/b> string<\/p>\".\n\n### Output:\nimport re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test<\/b> string<\/p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string",
        "138": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes an integer array as input and returns the number of unique elements in the array.\n\n### Input:\n[1, 2, 3, 2, 1, 4, 7, 8, 9, 8]\n\n### Output:\ndef num_unique_elements(arr):\n    unique_arr = set(arr)\n    return len(unique_arr)\n\nprint(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))",
        "139": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to scrape an online news website to get the headlines.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https:\/\/www.news.com\/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)",
        "140": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python program to print 'Happy Holidays' 10 times.\n\n### Input:\nfor i in range(10):\n    print('Hello World')\n\n### Output:\nfor i in range(10):\n    print('Happy Holidays')",
        "141": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCombine 2 strings and reverse the result in Python.\n\n### Input:\nwords = \"Hello \"\nwords2 = \"world!\"\n\n### Output:\nwords = \"Hello \"\nwords2 = \"world!\"\n\ncombined = words + words2\nresult = combined[::-1]\n\nprint(result)",
        "142": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to represent a bank account in Python.\n\n### Input:\n\n\n### Output:\nclass BankAccount:\n    \n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return True\n        else:\n            return False\n        \n    def get_balance(self):\n        return self.balance",
        "143": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.\n\n### Input:\nunsorted_list = [2, 6, 3, 8, 4]\n\n### Output:\ndef sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_elem = min(unsorted_list)\n        unsorted_list.remove(min_elem)\n        sorted_list.append(min_elem)\n    return sorted_list",
        "144": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to perform linear regression for predicting the numbers in a given dataset.\n\n### Input:\nX = [1,2,3,4,5]\nY = [3,5,7,9,13]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1,2,3,4,5]).reshape(-1,1)\nY = np.array([3,5,7,9,13])\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# Predicts the value of y\nprint(model.predict([[7]]))",
        "145": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python object that contains two attributes, \"Name\" and \"Age\".\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)",
        "146": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.\n\n### Input:\n[{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}]\n\n### Output:\ndef sort_by_attr(objects, attr):\n return sorted(objects, key=lambda item: item[attr])\n \nsort_by_attr([{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}], \"age\")",
        "147": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.\n\n### Input:\nTable name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int)\n\n### Output:\nimport sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title<\/th><th>Author<\/th><th>Genre<\/th><th>Sales<\/th><\/tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}<\/td><td>{author}<\/td><td>{genre}<\/td><td>{sales}<\/td><\/tr>'\n\nhtml += '<\/table>'\n\n# display the results\nprint(html)",
        "148": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to filter out all the vowels from a string.\n\n### Input:\n\n\n### Output:\ndef filter_vowels(string):\n     vowels = ('a', 'e', 'i', 'o', 'u')\n     return ''.join(c for c in string if c not in vowels)",
        "149": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a script to sort the list items in descending order.\n\n### Input:\nlist_items = [3, 7, 5, 8, 10]\n\n### Output:\nlist_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]",
        "150": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.\n\n### Input:\nA quick brown fox jumps over the lazy dog\n\n### Output:\ndef words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)",
        "151": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented structure to solve a maze by using python.\n\n### Input:\n\n\n### Output:\nimport collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1",
        "152": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a piece of code to print the length of a given string.\n\n### Input:\n\"Python\"\n\n### Output:\nstring = \"Python\"\nprint(\"Length of the given string is:\", len(string))",
        "153": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to calculate the maximum possible revenue from the items with given weights and values.\n\n### Input:\nweights = [2, 1, 3], values = [4, 2, 3]\n\n### Output:\n\"\"\"\nCalculate the maximum possible revenue from the items with given weights and values\n\"\"\"\n\n# given  weights and values \nweights = [2, 1, 3] \nvalues = [4, 2, 3] \n\n# number of items \nn = len(weights) \n  \n# function to calculate the maximum revenue \ndef knapsack(weights, values, n): \n  \n    # total capacity of knapsack \n    W = 5\n  \n    # matrix to store solution matrix \n    K = [[0 for x in range(W+1)] for x in range(n+1)] \n  \n    # build the solution matrix in bottom up manner \n    for i in range(n+1): \n        for w in range(W+1): \n            if i==0 or w==0: \n                K[i][w] = 0\n            elif weights[i-1] <= w: \n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w]) \n            else: \n                K[i][w] = K[i-1][w] \n  \n    return K[n][W] \n  \nprint (knapsack(weights, values, n))",
        "154": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read in a tweet and remove all punctuation, special characters and stopwords.\n\n### Input:\n\"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\n\n### Output:\nimport re\nimport string\nfrom nltk.corpus import stopwords\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\ntweet_clean = re.sub(r'[^\\w\\s]','',tweet) #remove punctuation\ntokens = tweet_clean.split() #split string into individual words \nstop_words = set(stopwords.words(\"english\")) #get list of stopwords\nfiltered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords\nprint(filtered_tokens)",
        "155": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraper in Python to extract the top ten trending YouTube videos.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https:\/\/www.youtube.com\/feed\/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))",
        "156": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a code in Python to find the mode of the given set of values.\n\n### Input:\n1, 2, 3, 2, 4, 2\n\n### Output:\ndef find_mode(list):\n  max_count = 0\n  mode = list[0]\n  count = {}\n  for item in list:\n    if (item in count):\n      count[item] += 1\n    else:\n      count[item] = 1\n    if (count[item] > max_count):\n      max_count = count[item]\n      mode = item\n  return mode",
        "157": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API with Python and Flask to give the current date and time.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('\/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()",
        "158": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list containing fruit names and returns the most common fruit name.\n\n### Input:\n['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']\n\n### Output:\ndef most_common_fruit(fruit_list):\n \n    # Dictionary to get count of each fruit\n    freq_dict = {}\n \n    # Count frequency of each fruit\n    for fruit in fruit_list:\n        if fruit in freq_dict:\n            freq_dict[fruit] += 1\n        else:\n            freq_dict[fruit] = 1\n \n    # Get maximum frequency \n    max_freq = 0\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n \n    # Get the most common fruit\n    most_common_fruit = None\n    for fruit, freq in freq_dict.items():\n        if freq == max_freq:\n            most_common_fruit = fruit\n            break\n \n    return most_common_fruit",
        "159": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.\n\n### Input:\nphrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n\n### Output:\nresult = \"A bird in the hand (17)is worth two in the bush (25)\"\n \ncode:\ninput_phrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n \nresult = \"\"\nfor phrase in input_phrases:\n result += phrase + ' (' + str(len(phrase)) + ')'\n \nprint(result)",
        "160": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.\n\n### Input:\nli = [4, 6, 17, 24, 5, 9]\n\n### Output:\ndef divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24",
        "161": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a number from the user and prints all the divisors of the number.\n\n### Input:\n\n\n### Output:\ndivisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')",
        "162": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an HTML page containing a table with some employee data.\n\n### Input:\nEmployee Data:\nName: John Doe\nJob Title: Senior Developer\nDepartment: IT\nSalary: $120,000\n\nName: Jane Doe\nJob Title: Manager\nDepartment: Finance\nSalary: $95,000\n\nName: Tim Smith\nJob Title: Junior Developer\nDepartment: IT\nSalary: $55,000\n\n### Output:\n<html>\n  <head>\n    <title>Employee Data<\/title>\n  <\/head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>Name<\/th>\n          <th>Job Title<\/th>\n          <th>Department<\/th>\n          <th>Salary<\/th>\n        <\/tr>\n      <\/thead>\n      <tbody>\n        <tr>\n          <td>John Doe<\/td>\n          <td>Senior Developer<\/td>\n          <td>IT<\/td>\n          <td>$120,000<\/td>\n        <\/tr>\n        <tr>\n          <td>Jane Doe<\/td>\n          <td>Manager<\/td>\n          <td>Finance<\/td>\n          <td>$95,000<\/td>\n        <\/tr>\n        <tr>\n          <td>Tim Smith<\/td>\n          <td>Junior Developer<\/td>\n          <td>IT<\/td>\n          <td>$55,000<\/td>\n        <\/tr>\n      <\/tbody>\n    <\/table>\n  <\/body>\n<\/html>",
        "163": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to select all rows from a table where the 'status' is 'approved'\n\n### Input:\n\n\n### Output:\ndef select_approved_rows():\n   sql = \"SELECT * FROM table WHERE status = 'approved'\"\n   cur.execute(sql)\n   return cur.fetchall()",
        "164": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number.\n\n### Input:\n\n\n### Output:\nfrom random import choice\nimport string\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password = ''.join(choice(chars) for i in range(8))\n    if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n        return password\n    else: \n        return generate_password()\n\nif __name__ == '__main__':\n    print(generate_password())",
        "165": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a solution to translate a text from English to French using Python.\n\n### Input:\n\n\n### Output:\n# install the module \n# in command prompt\npip install googletrans\n\n# import module\nfrom googletrans import Translator\n\n# create an object\ntranslator = Translator()\n\n# define text\ntext = \"Hello, this is a sample text to translate.\"\n\n# call the function and pass the text\ntranslation = translator.translate(text, dest='fr') \n\n# print the translation \nprint(translation.text)",
        "166": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate a unique 6 digit number.\n\n### Input:\n\n\n### Output:\n# Python program to generate \n# a unique 6 digit number \nimport random \ndef generate_number(): \n      \n    # Choose a random number \n    # between 10000 and 99999 \n    random_number = random.randint(10000, 99999) \n  \n    # Return the random number \n    return random_number \n  \n# Driver Code \nif __name__ == \"__main__\": \n    print(generate_number())",
        "167": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate 10 random numbers and put them in a list.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)",
        "168": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all occurrences of a given string with an alternate string.\n\n### Input:\n\"Hello World!\", \"World\", \"Python\"\n\n### Output:\ndef replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))",
        "169": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for an online store item that includes fields for ID, name, price, and description.\n\n### Input:\nNot applicable\n\n### Output:\nclass StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }",
        "170": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a virtual assistant using Python and Dialogflow to answer a basic set of questions.\n\n### Input:\nNot applicable\n\n### Output:\nimport dialogflow_v2 as dialogflow\nimport requests\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(project_id, 'session-id')\n\nwhile True:\n text = input('User: ')\n text_input = dialogflow.types.TextInput(text=text, language_code='en-US')\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n\n print('Assistant:', response.query_result.fulfillment_text)",
        "171": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem.\n\n### Input:\n\n\n### Output:\ndef solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)",
        "172": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an api response in Python for the provided data.\n\n### Input:\nData = {\n\"name\" : \"John\",\n\"age\" : 28\n}\n\n### Output:\nresponse = {\n  \"status\": 200,\n  \"data\": {\"name\": \"John\",\"age\":28},\n  \"message\": \"Success\"\n}",
        "173": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a webscraper using Python\u2019s Selenium that retrieves data from an online store.\n\n### Input:\nNot applicable\n\n### Output:\nfrom selenium import webdriver\n\n# create a new Firefox session\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(30)\ndriver.maximize_window()\n\n# navigate to the application home page\ndriver.get(\"https:\/\/www.example.com\/\")\n\n# get the search textbox\nsearch_field = driver.find_element_by_name(\"q\")\nsearch_field.clear()\n\n# enter search keyword and submit\nsearch_field.send_keys(\"shoes\")\nsearch_field.submit()\n\n# get the list of elements which are displayed after the search\n# currently on result page using find_elements_by_class_name\nproduct_list = driver.find_elements_by_class_name(\"product\")\n\n# iterate through each element and print the text that is\n# name of the product\nfor product in product_list:\n    print(product.text)\n\n# close the browser window\ndriver.quit()",
        "174": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper with Python BeautifulSoup to scrape data from an online web store.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http:\/\/web-store.com').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Get the product data\nproducts = soup.find_all('div', attrs={\"itemprop\": \"product\"})\nfor product in products:\n    name = product.find(\"span\", attrs={\"itemprop\": \"name\"}).text\n    price = product.find(\"span\", attrs={\"itemprop\": \"price\"}).text\n    description = product.find(\"span\", attrs={\"itemprop\": \"description\"}).text\n    print(name, price, description)",
        "175": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic algorithm in Python to calculate the nth Fibonacci number.\n\n### Input:\n6\n\n### Output:\ndef fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(6)) \/\/ 8",
        "176": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.\n\n### Input:\nNot applicable\n\n### Output:\nclass StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance \/ max_length < threshold",
        "177": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to evaluate the accuracy of a machine-learning model.\n\n### Input:\nfrom sklearn.svm import SVC\nclf = SVC(kernel='poly', degree=2, gamma=0.05)\n\n### Output:\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\n# Calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy: \" + str(accuracy))",
        "178": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all occurrences of a character in a string with the provided replacement character.\n\n### Input:\nstr = \"Hello World!\"\n\nreplacement = \u2018X'\n\n### Output:\ndef replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))",
        "179": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the largest prime factor of a number.\n\n### Input:\nNumber: 331\n\n### Output:\nimport math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n\/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))",
        "180": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if an element exists within a given list of integers.\n\n### Input:\n\n\n### Output:\ndef element_exists(elem, list_int):\n  return elem in list_int",
        "181": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a sentence and converts it to Morse code.\n\n### Input:\nNot applicable\n\n### Output:\nMORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '\/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -..",
        "182": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to sort a list of numbers\n\n### Input:\narray = [4, 2, 6, 7, 1]\n\n### Output:\ndef sort_list(array): \n    n = len(array) \n  \n    for i in range(n): \n  \n        min_idx = i \n        for j in range(i+1, n): \n            if array[min_idx] > array[j]: \n                min_idx = j \n        array[i], array[min_idx] = array[min_idx], array[i]\n\nif __name__ == \"__main__\":\n    array = [4, 2, 6, 7, 1]\n    sort_list(array)\n    print(array)",
        "183": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to remove all the occurrences of an item from a list.\n\n### Input:\nList: [1, 2, 3, 4, 2, 5, 2]\nItem to Remove: 2\n\n### Output:\ndef removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]",
        "184": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCould you build a web scraper in Python that collects all the links from a website?\n\n### Input:\n\n\n### Output:\n# Python program to scrape a webpage\nimport requests as req \nfrom bs4 import BeautifulSoup \n  \nURL = \"http:\/\/www.example.com\/\"\n  \n# GET request \nr = req.get(URL) \n  \n# parse the downloaded homepage and grab all text\nsoup = BeautifulSoup(r.text, \"html.parser\") \n  \n# find and print all links \nlinks = soup.find_all('a') \nfor link in links: \n    print(link.get('href'))",
        "185": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to delete a given key from a dictionary.\n\n### Input:\ndictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\n\n### Output:\ndictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\n\ndef delete_key(dic, k):\n  if k in dic:\n    del dic[k]\n\ndelete_key(dictionary, key)\n\nprint(dictionary)",
        "186": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze the following Python function to detect any potential errors.\n\n### Input:\ndef expand_list(list):\n    for item in list:\n        list *= 2\n\n### Output:\nThe function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: \n\ndef expand_list(list):\n    list_copy = list[:]   # make a copy of the list\n    for item in list_copy:\n        list *= 2",
        "187": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same.\n\n### Input:\n\n\n### Output:\ndef reverse_words(string):\n  words = string.split(\" \")\n  reversed_words = []\n  for word in words:\n    reversed_words.insert(0, word)\n  return ' '.join(reversed_words)\n\nstring = 'This is a sentence.'\nreverse_words = reverse_words(string)\nprint(reverse_words)",
        "188": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPort a Java code snippet to Python 3.\n\n### Input:\npublic class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n}\n\n### Output:\ndef foo(a, b):\n return a + b",
        "189": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a list of strings as input and prints the strings in alphabetical order.\n\n### Input:\n['cat', 'dog', 'apple', 'banana']\n\n### Output:\nstrings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)",
        "190": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program that extracts all email addresses from a given string.\n\n### Input:\n\"This is an example with two emails: john@example.com, and jane@example.com\"\n\n### Output:\nimport re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)",
        "191": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to generate a random string of length 8 made of uppercase letters and numbers.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\nlength = 8\nchars = string.ascii_uppercase + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint (password)",
        "192": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command \".\/rRNA_MT_count.py --gtf \/path\/to\/GTF\/file --htseq \/path\/to\/HTseq_counts\/file\". The script will extract all the identifiers of genes\/transcripts mapping to the rRNA and MT genes and store them in two arrays. Then, it will count reads matching the rRNA identifiers and write the output files. The summary output file will be named \"HTseq_counts_file_rRNAmtRNACounts.txt\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n# Malwina Prater, mn367@cam.ac.uk,  2017, Copyright\n# Centre for Trophoblast Research, University of Cambridge\n#\n# Script version: v01.\n#\n# Script to calculate the percent of transcripts mapping to rRNA\n#\n#  INPUTS :\n# 1. HTseq_counts file\n# 2. Original reference transcriptome alignned to\n#\n#  USAGE :    \n#  For producing table(s) with rRNA and MT counts for each sample use commands like that:\n#\n#    .\/rRNA_MT_count.py --gtf \/Users\/malwina\/Documents\/CTR-Data\/genomes\/Mus_musculus\/mm10\/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt\n#\n\n\n# import modules: \nimport os,sys\nfrom optparse import OptionParser\nimport re\n\n# parse in the user options:\n\nparser = OptionParser(usage=\"%prog [-x Excel [-i imagefile] [-s squares]\",\n                      version=\"%prog 0.1\")\n\nparser.add_option(\"--htseq\", dest=\"FileName\", type=\"string\", action=\"store\")\nparser.add_option(\"--gtf\", dest=\"GTF\", type=\"string\", action=\"store\")\n\n(options, args) = parser.parse_args()\n\n\n#files = sys.argv[]\nHTSEQ_COUNTS = options.FileName\nGTF = options.GTF\n\n\n# check if files supplied exist:\ntry:\n    handle = open(GTF, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tGTF File: %s does not exist\\n\" % GTF\n    sys.exit()\n\ntry:\n    handle = open(HTSEQ_COUNTS, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tFile: %s does not exist\\n\" % HTSEQ_COUNTS\n    sys.exit()\n\n\n#\n# First job is to extract all the identifiers of genes\/transcripts mapping to the rRNA and MT genes and store in 2 arrays\n#\n\nrRNA_identifiers = {}\nMT_identifiers = {}\n\n\nwith open(GTF, \"rU\") as handle:\n    #line = handle.readline()\n    for line in handle:\n    \tline.rstrip('\\n')\n    \tif 'gene_biotype \"rRNA\"' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            rRNA_identifiers[identifier] = 1\n        if 'MT' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            MT_identifiers[identifier] = 1    \nhandle.close()    \n\n#print(\"rRNA:\")\n#print(rRNA_identifiers.keys())\n#print(\"MT:\")\n#print(MT_identifiers.keys())\n\n\n#\n# Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers\n#\nCummulative_rRNA_Count = 0\nrRNA_genes = 0\nReadCount = 0\nline_number = 0\nMT_genes = 0;\nCummulative_MT_Count = 0;\n\nwith open(HTSEQ_COUNTS, \"rU\") as handle:\n    for line in handle:\n    \tline.rstrip('\\n')            \n\n        split_line = line.split(\"\\t\")\n        if line_number > 0:\n       \t    if split_line[0] in rRNA_identifiers.keys():  # if rRNA_identifiers[gene_id]\n                rRNA_genes += 1\n                Cummulative_rRNA_Count += int(split_line[1])\n            if split_line[0] in MT_identifiers.keys():\n                MT_genes += 1\n                Cummulative_MT_Count += int(split_line[1])\n            ReadCount += int(split_line[1])\n        line_number += 1\nhandle.close()    \n#print(Cummulative_MT_Count)\n#print(Cummulative_rRNA_Count)\n\n\n#\n# wiritng the output files:\n#              \nout = HTSEQ_COUNTS + '_rRNAmtRNACounts.txt'; \nout = re.sub('.txt_', '_', out)\n\nprint \"Summary output file:\t\t\", out, \"\\n\"\n\nOUT = open(out, \"w\")\nOUT.write('HT-SEQ file name: \\t' + HTSEQ_COUNTS + '\\n\\n')\nOUT.write('GTF file name: \\t\\t' + GTF + '\\n\\n\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('  rRNA and MT identifiers\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('No. of rRNA identifiers: ' + str(len(rRNA_identifiers.keys())) + '\\n') # PRINT size of this hash\nOUT.write('No. of MT identifiers: ' + str(len(MT_identifiers.keys())) + '\\n') # PRINT size of this hash\nOUT.write('\\n\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('  HTSEQ mapping summary\\n')\nOUT.write('---------------------------------------------------------------------------------' + '\\n')\nOUT.write('ReadCount: ' + str(ReadCount) + '\\n\\n')\n#OUT.write('  Number of rRNA genes: ' + str(rRNA_genes) + '\\n')\nOUT.write('Total no. of rRNA transcripts: ' + str(Cummulative_rRNA_Count) + '\\n')\nperc_rRNA = 100*float(Cummulative_rRNA_Count)\/float(ReadCount)\nperc_rRNA = str(round(perc_rRNA, 3))\nOUT.write('Percent rRNA mapped reads: ' + str(Cummulative_rRNA_Count) + ' \/ ' + str(ReadCount) + ' * 100 = ' + perc_rRNA + '%\\n\\n')\n#OUT.write('\\n  Number of MT genes: ' + str(MT_genes) + '\\n')\nOUT.write('Total no. of MT transcripts: ' + str(Cummulative_MT_Count) + '\\n')\nperc_MT = 100*float(Cummulative_MT_Count)\/float(ReadCount)\nperc_MT = str(round(perc_MT, 3))\nOUT.write('Percent MT mapped reads: ' + str(Cummulative_MT_Count) + ' \/ ' + str(ReadCount) + ' * 100 = ' + perc_MT + '%\\n\\n')\nOUT.close()\n\n\n",
        "193": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to raise an exception if the input value is not an integer\n\n### Input:\ndef square_root(x):\n    return x**0.5\n\n### Output:\ndef square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5",
        "194": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that extracts titles of all YouTube videos from a URL.\n\n### Input:\nhttps:\/\/www.youtube.com\/user\/Thexvid\/videos\n\n### Output:\nimport requests\nimport re\n\nurl = \"https:\/\/www.youtube.com\/user\/Thexvid\/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"\/watch\\?v=([^\"]+)\">(.+?)<\\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])",
        "195": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to list the contents of a directory.\n\n### Input:\n\n\n### Output:\n# get the list of contents\nimport os\ndirectory_contents = os.listdir()\n\n# print the contents\nfor content in directory_contents:\n    print(content)",
        "196": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-powered Python script to optimize any given code.\n\n### Input:\nExample code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}\n\n### Output:\n# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))",
        "197": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two strings and returns true if the first string is a subsequence of the second.\n\n### Input:\nString 1: abc\nString 2: qaxbcy\n\n### Output:\ndef is_subsequence(str1, str2):\n    i = 0\n    j = 0\n\n    while(i < len(str1) and j < len(str2)):\n        if str1[i] == str2[j]:\n            i += 1\n        j += 1\n\n    return i == len(str1)",
        "198": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network class in Python to model a linear regression function.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out",
        "199": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')",
        "200": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.\n\n### Input:\n\"2 3 + 4 5 * *\"\n\n### Output:\ndef evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46",
        "201": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to identify the words that contain more than one vowel in a given sentence.\n\n### Input:\nSentence: The quick brown fox jumped over the lazy dog.\n\n### Output:\nimport re\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']",
        "202": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a Python API for KB SRU. To use it, you can create an instance of the \"sru\" class and call its \"search\" method, passing in a query string and optionally a collection name, start record number, maximum number of records to return, and record schema. The method will return a \"response\" object containing the results of the search. You can then use the various properties of the \"response\" object to extract specific information from the search results, such as titles, creators, and subjects.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http:\/\/jsru.kb.nl\/sru\/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http:\/\/www.loc.gov\/zing\/srw\/'\ntel_ns = 'http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html'\nxsi_ns = 'http:\/\/www.w3.org\/2001\/XMLSchema-instance'\ndc_ns = 'http:\/\/purl.org\/dc\/elements\/1.1\/'\ndcterms_ns = 'http:\/\/purl.org\/dc\/terms\/'\ndcx_ns = 'http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():\n            if r.tag == tagName:\n                if attributeName != '':\n                    try:\n                        if r.attrib[attributeName] == attributeValue:\n                            textFields.append(r.text)\n                    except KeyError:\n                        pass\n                else:\n                    textFields.append(r.text)\n        return textFields\n\n    @property\n    def records(self):\n        if self.sru.nr_of_records == 0:\n            record_data = \"<xml><\/xml>\"\n        else:\n            ns = {'zs': 'http:\/\/www.loc.gov\/zing\/srw\/'}\n            record_data = self.record_data.xpath(\"zs:records\/zs:record\",\n                                                 namespaces=ns)[0]\n        return record(record_data, self.sru)\n\n    # Below property functions all return a list with all instances that satisfy\n    # criteria\n\n    @property\n    def typesDutch(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}type',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'nl'))\n\n    @property\n    def typesDCMI(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}type',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'DCMIType'))\n\n    @property\n    def identifiersISBN(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:ISBN'))\n\n    @property\n    def identifiersBrinkman(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def identifiersURI(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def identifiersOCLC(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}identifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'OCLC'))\n\n    @property\n    def languagesDutch(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'nl'))\n\n    @property\n    def languagesEnglish(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'en'))\n\n    @property\n    def languagesFrench(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/XML\/1998\/namespace}lang',\n                                   'fr'))\n\n    @property\n    def languagesISO639(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}language',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:ISO639-2'))\n\n    @property\n    def dates(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}date',\n                                   '',\n                                   ''))\n\n    @property\n    def extents(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/terms\/}extent',\n                                   '',\n                                   ''))\n\n    @property\n    def creators(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}creator',\n                                   '',\n                                   ''))\n\n    @property\n    def contributors(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}contributor',\n                                   '',\n                                   ''))\n\n    @property\n    def titles(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '',\n                                   ''))\n\n    @property\n    def titlesMain(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:maintitle'))\n\n    @property\n    def titlesIntermediate(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}title',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:intermediatetitle'))\n\n    @property\n    def publishers(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}publisher',\n                                   '',\n                                   ''))\n\n    @property\n    def countries(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}country',\n                                   '',\n                                   ''))\n\n    @property\n    def subjectsBrinkman(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def subjectsISO9707(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'ISO_9707_[Brinkman]'))\n\n    @property\n    def subjectsUNESCO(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/elements\/1.1\/}subject',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'UNESCO'))\n\n    @property\n    def collectionIdentifiers(self):\n        return(self.getElementText('{http:\/\/purl.org\/dc\/terms\/}isPartOf',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcx:collectionIdentifier'))\n\n    @property\n    def recordIdentifiersURI(self):\n        return(self.getElementText('{http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html}recordIdentifier',\n                                   '{http:\/\/www.w3.org\/2001\/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def annotations(self):\n        # Note that annotations sometimes contain language or itenID attibutes;\n        # ignored for now (collect everything).\n        return(self.getElementText('{http:\/\/krait.kb.nl\/coop\/tel\/handbook\/telterms.html}annotation',\n                                   '',\n                                   ''))\n\n\nclass record():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def __iter__(self):\n        return self\n\n    # This works under Python 2.7\n    def next(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n    # This works under Python 3\n    def __next__(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n\nclass sru():\n    DEBUG = False\n\n    collection = False\n    maximumrecords = 50\n    nr_of_records = 0\n    query = \"\"\n    recordschema = False\n    sru_collections = SETS\n    startrecord = 0\n\n    def search(self, query, collection=False,\n               startrecord=1, maximumrecords=1, recordschema=False):\n\n        self.maximumrecords = maximumrecords\n        if sys.version.startswith('3'):\n            self.query = urllib.parse.quote_plus(query)\n        elif sys.version.startswith('2'):\n            self.query = urllib.quote_plus(query)\n        self.startrecord = startrecord\n\n        if collection not in self.sru_collections:\n            raise Exception('Unknown collection')\n\n        self.collection = self.sru_collections[collection]['collection']\n\n        if not self.collection:\n            raise Exception('Error, no collection specified')\n\n        if not recordschema:\n            self.recordschema = self.sru_collections[collection]['recordschema']\n        else:\n            self.recordschema = recordschema\n\n        record_data = self.run_query()\n\n        nr_of_records = [i.text for i in record_data.iter() if\n                         i.tag.endswith('numberOfRecords')][0]\n\n        self.nr_of_records = int(nr_of_records)\n\n        if self.nr_of_records > 0:\n            return response(record_data, self)\n\n        return False\n\n    def run_query(self):\n        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,\n                             self.recordschema, self.collection, self.query)\n        if self.DEBUG:\n            sys.stdout.write(url)\n\n        r = requests.get(url)\n\n        if not r.status_code == 200:\n            raise Exception('Error while getting data from %s' % url)\n\n        record_data = etree.fromstring(r.content)\n\n        return record_data\n",
        "203": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing numpy, create a Python code which would return an array with the running total of numbers in a given list.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef runningTotal(arr):\n    return np.cumsum(arr)",
        "204": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network in Python that can perform basic regression.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n \n# Load the data\ndata = pd.read_csv('data.csv')\n \n# Split the data into features and labels\nX = data.drop(['label'], axis=1).values\ny = data['label'].values\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Create the neural network\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(12, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n \n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n \n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)\n \n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test score:', score)",
        "205": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to take in two strings as input, and output a list of all thewords in both strings.\n\n### Input:\nString 1: I want to make a difference\nString 2: The journey to success is long\n\n### Output:\ndef string_to_list(s1, s2):\n    s1_list = s1.split()\n    s2_list = s2.split()\n    output_list = s1_list + s2_list\n    return output_list\n\nwords = string_to_list(\"I want to make a difference\", \"The journey to success is long\")\nprint(words)",
        "206": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python that retrieves the 10 most recent articles from a news website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \n# URL to scrap \nURL = 'http:\/\/example.com\/news'\n  \n# get the source code \nhtml_content = requests.get(URL).text \n  \n# parse the html content \nsoup = BeautifulSoup(html_content, \"lxml\") \n  \n# get all the articles  \narticles = soup.find_all('article') \n  \n# print the first 10 articles \nfor article in articles[:10]: \n    print(article.text)",
        "207": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert HTML to plain text without using any libraries.\n\n### Input:\n\n\n### Output:\ndef html_to_text(html_string):\n    output = ''\n    in_tag = False\n    for char in html_string:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            output += char\n    return output",
        "208": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert the given temperature from Celsius to Fahrenheit.\n\n### Input:\n0\u00b0C\n\n### Output:\n\"\"\"\nConvert the given temperature from Celsius to Fahrenheit\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9\/5) + 32\n    return fahrenheit\n\nif __name__ == '__main__':\n    celsius = 0\n    print(celsius_to_fahrenheit(celsius))",
        "209": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a lambda expression in Python to filter a list of integer greater than 50.\n\n### Input:\n[45, 12, 52, 89, 33, 99]\n\n### Output:\nlist1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list)",
        "210": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to evaluate and compare the performance of two different heuristics algorithms.\n\n### Input:\n\n\n### Output:\nimport time\nimport heuristics_algorithm1\nimport heuristics_algorithm2\n\n#input data for algorithms\ndata1 = ...\ndata2 = ...\n\n#Evaluate and compare the performance of two different heuristics algorithms\nstart = time.time()\nresult1 = heuristics_algorithm1.run(data1)\nend = time.time()\ntime1 = end - start\n\nstart = time.time()\nresult2 = heuristics_algorithm2.run(data2)\nend = time.time()\ntime2 = end - start\n\nif time1 < time2:\n    print(\"Algorithm 1 is faster than algorithm 2\")\nelif time2 < time1:\n    print(\"Algorithm 2 is faster than algorithm 1\")\nelse:\n    print(\"Both algorithms have the same performance time\")",
        "211": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes in a dictionary (string \u2192 integer) and returns the sum of all values in the dictionary.\n\n### Input:\nmy_dict = {\n   \"a\": 5,\n   \"b\": 10,\n   \"c\": 15\n}\n\n### Output:\ndef compute_dict_sum(input_dict):\n    result = 0\n    for val in input_dict.values():\n        result += val\n    return result\n\nprint(compute_dict_sum(my_dict))",
        "212": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that filters a list of integers and returns only even numbers.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef filter_even_numbers(lst):\n    # Filter out even numbers from the given list \n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(list)\nprint(result)",
        "213": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a sentence as input and prints out only the verbs.\n\n### Input:\nThe cat jumped over the moon.\n\n### Output:\nimport nltk\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs)",
        "214": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-based system in Python for predicting stock market movements.\n\n### Input:\nNot applicable\n\n### Output:\n#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)",
        "215": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON.\n\n### Input:\nNone\n\n### Output:\nimport json \nimport sqlite3\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__) \n  \ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d \n  \n@app.route('\/', methods=['GET'])\ndef index(): \n    connection = sqlite3.connect('database.db')\n    connection.row_factory = dict_factory\n    cur = connection.cursor() \n    all_users = cur.execute('SELECT * FROM users;').fetchall() \n    return jsonify(all_users) \n  \nif __name__ == '__main__': \n    app.run(debug = True)",
        "216": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary that contains the count of the characters in a given string.\n\n### Input:\n\"Hello World\"\n\n### Output:\ndef count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",
        "217": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to store and querying user data.\n\n### Input:\nuser_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}\n\n### Output:\nimport json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)",
        "218": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are required to write a Python program to optimize an equation.\n\n### Input:\nx + x + y + y + y\n\n### Output:\ndef optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))",
        "219": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string.\n\n### Input:\n[\"Hello world\", \"This is a test\"]\n\n### Output:\ndef get_word_lists(strings):\n    word_lists = []\n    for string in strings:\n        words = string.split(\" \")\n        word_list = []\n        for i in range(len(words)):\n            word_list.append(words[i:])\n        word_lists.append(word_list)\n    return word_lists\n\nword_lists = get_word_lists([\"Hello world\", \"This is a test\"])\nprint(word_lists) # prints \"[[\"Hello\", \"world\"], [\"This\", \"is\", \"a\", \"test\"]]\"",
        "220": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper that extracts specific data from a given website.\n\n### Input:\n\n\n### Output:\nThe web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))",
        "221": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a script in Bash that can install a given software.\n\n### Input:\nPython 3.8.5\n\n### Output:\n#!\/bin\/bash\n\n# Download latest version of Python\ncurl -O https:\/\/www.python.org\/ftp\/python\/3.8.5\/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n.\/configure\n\n# Compile and install\nmake\nmake install",
        "222": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of integers and returns a new list containing only odd numbers.\n\n### Input:\n[3, 8, 6, 10, 17]\n\n### Output:\ndef odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]",
        "223": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that adds two numbers together and prints the result.\n\n### Input:\n\n\n### Output:\ndef add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)",
        "224": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the most common elements in an array of integers.\n\n### Input:\n[3, 4, 1, 2, 5, 3, 3]\n\n### Output:\ndef most_common(nums):\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements\n    for num in nums:\n        # If the element is not present in the dictionary, add it\n        if num not in counts:\n            counts[num] = 0\n\n        # Update the count\n        counts[num] += 1\n\n    # Get the maximum count\n    max_count = max(counts.values())\n\n    # Return the elements that have maximum count\n    return [num for num, count in counts.items() if count == max_count]",
        "225": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].\n\n### Input:\nNot applicable\n\n### Output:\narray = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50",
        "226": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to analyze the sentiment of a text.\n\n### Input:\n\n\n### Output:\nimport re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score",
        "227": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.\n\n### Input:\nlist = [\"john@gmail.com\", \"sarah@yahoo.com\", \"bob@microsoft.com\", \"sophie@gmail.com\"]\n\n### Output:\nfiltered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]",
        "228": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to execute a valid insertion sort on a given list of integers.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(arr):\n for i in range(1, len(arr)):\n key = arr[i]\n j = i -1\n while j >= 0 and key < arr[j] :\n    arr[j + 1] = arr[j]\n    j = j - 1\n arr[j + 1] = key\n\nreturn arr",
        "229": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to sort a list of numbers using Insertion Sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef insertionSort(arr):\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj =i-1\n\t\twhile j>=0 and arr[j]>current:\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj-=1\n\t\tarr[j+1] = current\n\treturn arr\n\nif __name__ == '__main__':\n\tarr = [2, 4, 7, 3, 8, 6, 1]\n\tprint(insertionSort(arr))",
        "230": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Python function that takes a string containing a numerical expression and returns the result.\n\n### Input:\n\n\n### Output:\ndef eval_expr(expr):\n   return eval(expr)",
        "231": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a json-formatted string, create a python program to parse it into a dict.\n\n### Input:\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\n### Output:\nimport json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data)",
        "232": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compress a given string by replacing all repeating characters with a single instance and its count.\n\n### Input:\nString: aabbbbbbcccc\n\n### Output:\ndef compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c",
        "233": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic CRUD API for the BlogPost model with Python\/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:\/\/\/test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(200))\n  content = db.Column(db.Text)\n\n  def __repr__(self):\n    return '<BlogPost %r>' % self.title\n\n@app.route('\/post', methods=['POST'])\ndef create_post():\n  data = request.get_json()\n  post = BlogPost(title=data['title'], content=data['content'])\n  db.session.add(post)\n  db.session.commit()\n  return jsonify(post.id)\n\n@app.route('\/posts', methods=['GET'])\ndef get_posts():\n  posts = BlogPost.query.all()\n  return jsonify([post.serialize() for post in posts])\n\n@app.route('\/post\/<id>', methods=['GET'])\ndef get_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  return jsonify(post.serialize())\n\n@app.route('\/post\/<id>', methods=['PUT'])\ndef edit_post(id):\n  data = request.get_json()\n  post = BlogPost.query.filter_by(id=id).first()\n  post.title = data['title']\n  post.content = data['content']\n  db.session.commit()\n  return jsonify(post.serialize())\n\n@app.route('\/post\/<id>', methods=['DELETE'])\ndef delete_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  db.session.delete(post)\n  db.session.commit()\n  return jsonify({ 'message' : 'Post deleted' })\n\nif __name__ == '__main__':\n  app.run(debug=True)",
        "234": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the distance between two points on a two-dimensional plane.\n\n### Input:\nPoint1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2)\n\n### Output:\n#include <iostream>\n#include <math.h>\n\nint main() \n{ \n    int x1 = 3; \n    int y1 = 4; \n\n    int x2 = -9; \n    int y2 = -2;\n\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \n\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \n\n    return 0; \n}",
        "235": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-based chatbot in Python that can answer simple queries about a product or service.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!')",
        "236": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to read the contents from a given URL\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None",
        "237": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python that takes a list of integers (denoted by `lst`) and returns a list of booleans where each element of the output list is `True` if the corresponding element in the input list is a prime number, and `False` otherwise.\n\n### Input:\nlst = [7, 8, 12, 19, 22, 23]\n\n### Output:\ndef is_prime(n):\n # check if n is divisible by any of the numbers\n # between 2 and n-1\n for i in range(2, n):\n if n % i== 0:\n return False\n\n return True \n\ndef check_lst(lst):\n # generate a list of booleans \n # where each element corresponds to the corresponding\n # element of lst\n result_lst = []\n for i in range(len(lst)):\n if is_prime(lst[i]):\n result_lst.append(True)\n else:\n result_lst.append(False)\n\n return result_lst\n\nlst = [7, 8, 12, 19, 22, 23]\nprint(check_lst(lst))\n\n# Output: \n# [True, False, False, True, False, True]",
        "238": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to output the top 3 numbers from an array of integers\n\n### Input:\n[7, 13, 5, 8, 50, 11, 64, 48]\n\n### Output:\ndef top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))",
        "239": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.\n\n### Input:\nn = 10\n\n### Output:\nmy_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)",
        "240": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to make a correct API request and parse the response.\n\n### Input:\nimport requests\n\nurl = 'https:\/\/api.example.com\/users'\n\nresponse = requests.get(url)\n\nprint(response.json())\n\n### Output:\nimport requests\n\nurl = 'https:\/\/api.example.com\/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application\/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user)",
        "241": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in text input from the user and searches a given list of strings to find any matches.\n\n### Input:\nstrings = [\"First\",\"Second\",\"Third\"]\n\n### Output:\nimport re \n  \n# input string \nstrings = [\"First\",\"Second\",\"Third\"]\n\n# Get the string \ninp_str = input(\"Please enter your string :\") \n\n# Initialize the flag \nfound = False\n  \n# Search the string \nfor i in strings: \n    if re.search(i, inp_str):\n        found = True\n\n# Print result \nif found == True: \n    print(\"String matches\") \nelse: \n    print(\"String doesn't matches\")",
        "242": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to convert all characters of a string in lowercase.\n\n### Input:\nString = \"HELLO\"\n\n### Output:\ndef to_lower(string):\n    return string.lower()",
        "243": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to use a dictionary instead of a list.\n\n### Input:\nitems = [1, 2, 3, 4]\n\nfor item in items:\n print(item)\n\n### Output:\nitems = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value)",
        "244": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a prime number sieve in Python which returns a list of all primes up to a given number.\n\n### Input:\nn = 10\n\n### Output:\ndef primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7]",
        "245": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to print all prime numbers between 1 and a given number n.\n\n### Input:\n\n\n### Output:\n# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)",
        "246": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the optimal solution to solve a knapsack problem using dynamic programming.\n\n### Input:\nGiven Items (with values and weights): [(60, 10), (100, 20), (120, 30)] \nCapacity of Knapsack: 50\n\n### Output:\n\/\/ A Naive recursive Python \n\/\/ program for 0-1 Knapsack problem \n \n# Returns the maximum value  \n# that can be put in a knapsack of  \n# capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more \n    # than Knapsack capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n  \n# end of function knapSack",
        "247": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that calculates the objective function of a linear equation.\n\n### Input:\nax + by = c\n\na = 3, b = 5, c = 7\n\n### Output:\ndef linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)",
        "248": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an insertion sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(list):\n    for i in range(1,len(list)):\n        key = list[i]\n        j = i - 1\n        while j>=0 and key < list[j]:\n            list[j+1] = list[j]\n            j-=1\n        list[j+1] = key\n    return list",
        "249": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate a random password given a set of letters, numbers, and characters.\n\n### Input:\nNo input\n\n### Output:\nimport random \n  \n  \n# All the possible characters \n# that could go into the password \nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n  \n# Using the choice function of the \n# random module choose any \n# character randomly from the set of characters \npassword =  \"\".join(random.sample(string, 8)) \nprint(password)",
        "250": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python module to generate random numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)]",
        "251": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do we use recursion to solve a given problem in Python?\n\n### Input:\n\n\n### Output:\nRecursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself.",
        "252": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application using Python and Flask to submit form data and store it in a database.\n\n### Input:\nForm elements: Name, Email, Phone\n\n### Output:\nfrom flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef home():\n return render_template('index.html')\n\n@app.route('\/submit', methods=['POST'])\ndef submit():\n name = request.form.get('name')\n email = request.form.get('email')\n phone = request.form.get('phone')\n \n conn = sqlite3.connect('data.db')\n cur = conn.cursor()\n \n cur.execute(\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\", (name, email, phone))\n conn.commit()\n \n return redirect('\/')\n\t\nif __name__ == '__main__':\n app.run(debug=True)",
        "253": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program that processes a 2d array and stores the transpose output in a new array.\n\n### Input:\nNot applicable\n\n### Output:\ndef transpose(A):\n n = len(A)\n m = len(A[0])\n\n B = [[0 for x in range(n)] for x in range(m)]\n\n for i in range(n):\n for j in range(m):\n B[j][i] = A[i][j]\n\n return B",
        "254": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes any number of integer arguments and returns their sum.\n\n### Input:\n3 5 7\n\n### Output:\ndef sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))",
        "255": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a list as input and returns the sum of the items in the list.\n\n### Input:\n\n\n### Output:\ndef sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum",
        "256": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Selenium script in Python to automate the login process in a given website.\n\n### Input:\nTarget website: www.example.com\n\n### Output:\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http:\/\/www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close()",
        "257": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)",
        "258": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the following SQL query in Python.\n\n### Input:\nSELECT * FROM Movies WHERE category = 'horror';\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()",
        "259": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.\n\n### Input:\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\n\n### Output:\n# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]",
        "260": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a correct approach to optimize the following python program.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5, 6]\n\nfor x in numbers:\n    print(x)\n\n### Output:\nnumbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')",
        "261": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to detect the vowel in a given string.\n\n### Input:\nHello World\n\n### Output:\ndef vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x",
        "262": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given SQL statement into a Python Pandas DataFrame.\n\n### Input:\nSELECT * FROM book;\n\n### Output:\nimport pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn)",
        "263": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the data provided, generate a histogram in Python.\n\n### Input:\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show()",
        "264": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to populate an array with random numbers from 1-100.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef populateArray(array_length):\n array = []\n for i in range(array_length):\n array.append(random.randint(1, 100))\n return array",
        "265": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an natural language processing application in Python that extracts the top 10 most frequent words from a given text.\n\n### Input:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n### Output:\nfrom collections import Counter\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Split the text into individual words\nwords = text.split()\n\n# Create a counter object\ncounter = Counter(words)\n\n# Get the top 10 most frequent words\ntop_words = counter.most_common(10)\n\nprint(top_words)\n\n# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]",
        "266": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of strings, write a Python function to remove all duplicates and return the resulting array.\n\n### Input:\nExample array: ['a', 'b', 'a', 'c', 'c', 'd']\n\n### Output:\ndef removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result",
        "267": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to find the longest common substring in two strings.\n\n### Input:\n\"Helwallomst\", \"Welcome\"\n\n### Output:\ndef longest_common_substring(str1, str2):\n    match = 0\n    substr = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            l = 0\n            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):\n                l += 1\n            if l > match:\n                substr = str1[i:i + l]\n                match = l\n    return substr\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result)",
        "268": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to search for a character in a given string.\n\n### Input:\nString: \u201cHello\u201d\nCharacter: \u2018l\u2019\n\n### Output:\ndef serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True\n  return False",
        "269": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse an XML document and return a list of tag objects.\n\n### Input:\n<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      <\/subchild1>\n      <subchild2 value=\"b\">\n      <\/subchild2>\n    <\/child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      <\/subchild3>\n      <subchild4 value=\"d\">\n      <\/subchild4>\n    <\/child2>\n  <\/root>\n<\/xml>\n\n### Output:\ndef parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)",
        "270": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBased on a given input, create a function in Python to generate a random string of length 6.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6)",
        "271": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to average the elements of a 2-dimensional array.\n\n### Input:\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\n### Output:\ndef averageMatrix(matrix):\n sum = 0\n for row in matrix:\n  for e in row:\n   sum += e\n\n return sum \/ (len(matrix) * len(matrix[0]))\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(averageMatrix(a)) # 4.77",
        "272": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to convert a number into binary format.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num \/\/ 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010",
        "273": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes an integer and then prints out the factorial of it?\n\n### Input:\n7\n\n### Output:\ndef factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))",
        "274": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.\n\n### Input:\n\n\n### Output:\ndef convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)",
        "275": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a simple blockchain system in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport hashlib\nimport json\n\n# Define the Block class\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n # Create the hash of the block contents\n def hash_block(self):\n sha = hashlib.sha256()\n sha.update((str(self.index) + \n str(self.timestamp) + \n str(self.data) + \n str(self.previous_hash)).encode('utf-8'))\n return sha.hexdigest()\n\n# Create the blockchain\ndef create_blockchain():\n blockchain = [create_genesis_block()]\n previous_block = blockchain[0]\n\n # Add blocks for each item in the list of transactions\n for i in range(1, len(blockchain_transactions)):\n block_to_add = next_block(previous_block, blockchain_transactions[i])\n blockchain.append(block_to_add)\n previous_block = block_to_add\n\n# Print the blockchain\ndef print_blockchain():\n for block in blockchain:\n block_index = str(block.index)\n block_timestamp = str(block.timestamp)\n block_data = str(block.data)\n block_hash = block.hash",
        "276": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the GCD of two numbers.\n\n### Input:\n1000, 500\n\n### Output:\ndef findGCD(a, b): \n   if (b == 0): \n       return a\n   return findGCD(b, a % b)\n    \na = 1000\nb = 500\nprint(\"GCD of number is: \", findGCD(a, b))",
        "277": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the number of occurrences of an element x in a list y.\n\n### Input:\n[3, 5, 2, 7, 4, 3, 2], x = 2\n\n### Output:\ndef count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count",
        "278": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert ratings in a list of strings to a float.\n\n### Input:\n['4.5', '3.0', '2.5', '4.0']\n\n### Output:\ndef str_to_float(ratings):\n    return [float(x) for x in ratings]",
        "279": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that encrypts a message using a Caesar cipher.\n\n### Input:\n\n\n### Output:\ndef caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for c in message:\n        encrypted_c = ord(c) + shift\n        if encrypted_c > 126:\n            encrypted_c -= 94\n        encrypted_message += chr(encrypted_c)\n    return encrypted_message",
        "280": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the largest three numbers in a list.\n\n### Input:\n1, 6, 3, 8, 7, 4\n\n### Output:\nmy_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)",
        "281": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two binary trees, check if the first tree is subtree of the second tree.\n\n### Input:\n\n\n### Output:\n# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))",
        "282": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to swap the values of two variables.\n\n### Input:\n\n\n### Output:\nx = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y)",
        "283": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to use built-in functions.\n\n### Input:\ndef removeDuplicates(array): \n    for i in range (len(array)): \n        for j in range (i + 1, len(array)): \n            if array[i] == array[j]: \n                array.pop(j)\n\n### Output:\ndef removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray",
        "284": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.\n\n### Input:\nwords =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3\n\n### Output:\nfrom collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']",
        "285": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python program to determine whether a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "286": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a basic blockchain system in Python.\n\n### Input:\n\n\n### Output:\nimport hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)",
        "287": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures.\n\n### Input:\n[21, 22, 20]\n\n### Output:\n\"\"\"\nThis code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.\n\"\"\"\n\ndef predict_temperature(temperature_list):\n    alpha = 0.5 #Confidence value\n    predicted_temperature = temperature_list[-1] # Initializing prediction\n    for temperature in temperature_list[:-1]:\n        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature\n    return predicted_temperature\n\nif __name__ == '__main__':\n    temperature_list = [21, 22, 20]\n    print(predict_temperature(temperature_list))",
        "288": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to sort a dictionary according to its values, in descending order.\n\n### Input:\ndictionary = {'apple': 2, 'banana': 3, 'mango': 1}\n\n### Output:\ndef sortDictionary(dictionary):\n  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n  sorted_dictionary = dict(sorted_list)\n  return sorted_dictionary\n\nsorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})\nprint(sorted_dictionary)",
        "289": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a multiplication table with numbers in a range given start and end parameters.\n\n### Input:\nstart = 5\nend = 10\n\n### Output:\ndef multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)",
        "290": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to identify if a string s has matching parentheses\n\n### Input:\n\n\n### Output:\ndef matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "291": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to take as input two array of integers and swap their elements.\n\n### Input:\narr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8]\n\n### Output:\ndef swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp",
        "292": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design a function in Python for reversing a list?\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef reverse_list(list): \n    return list[::-1]",
        "293": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to build a dictionary from string to string of the given samples.\n\n### Input:\nSamples:\napple->red\nbanana->yellow\ncherry->red\n\n### Output:\ndef build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)",
        "294": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the average of numbers stored in an array.\n\n### Input:\n[10, 20, 30]\n\n### Output:\ndef calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum \/ len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))",
        "295": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes two lists as input and returns a new list containing only the common elements.\n\n### Input:\n[1, 2, 3, 4, 8], [2, 6, 8, 10]\n\n### Output:\ndef common_elements(list1, list2): \n    common_list=[]\n    for element in list1: \n        if element in list2: \n            common_list.append(element) \n    return common_list\n  \nlist1 = [1, 2, 3, 4, 8] \nlist2 = [2, 6, 8, 10]\n\ncommon_list = common_elements(list1, list2) \n\nprint(common_list)",
        "296": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python to print out all the odd numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    if i % 2 != 0:\n        print(i)",
        "297": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that predecits customer lifetime value given a customer's past transactions.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Preprocessing\ndf = pd.read_csv('transactions.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Model Training\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Prediction\ncustomer_input = np.array([[10,100,5,...]]) # provide data related to past transactions\ntrans_scaled = scaler.transform(customer_input)\npredicted_LTV = model.predict(trans_scaled)[0]\nprint('Predicted customer lifetime value', predicted_LTV)",
        "298": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.\n\n### Input:\nInput List: [1, 2, 3, 4, 4, 5, 6]\nTarget: 8\n\n### Output:\ndef find_pair(lst, target):\n    for i in range(len(lst)):\n        if (target - lst[i]) in lst[i+1:]:\n            return [lst[i], target-lst[i]]\n\nfind_pair([1,2,3,4,4,5,6], 8)",
        "299": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose.\n\n### Input:\n\n\n### Output:\nclass Matrix: \n    def __init__(self, m, n, lst): \n        self.m = m             \n        self.n = n             \n        self.mat = [] \n  \n        c = 0\n        for i in range(self.m): \n            a =[] \n            for j in range(self.n): \n                    a.append(lst[c]) \n                    c += 1\n            self.mat.append(a) \n  \n    def __str__(self): \n        output = \"\"\n        for i in self.mat: \n            for j in i: \n                output += str(j) + \" \"\n            output += '\\n'\n        return output \n  \n    def add(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] += mat2.mat[i][j] \n  \n    def sub(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] -= mat2.mat[i][j]\n    \n    def mul(self, mat2): \n        result = [] \n        for i in range(self.m): \n            a =[] \n            for j in range(mat2.n): \n                s = 0\n                for k in range(self.n): \n                    s += self.mat[i][k] * mat2.mat[k][j] \n                a.append(s) \n            result.append(a) \n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) \n  \n    def transpose(self):\n        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]\n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0])",
        "300": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random number between 0 and 9.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_num = random.randint(0,9)\nprint(random_num)",
        "301": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask app that listens for POST requests on the '\/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started on port 5000 and run in debug mode.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding=utf-8\nimport requests\nimport urllib2\nimport json\nimport os\nfrom flask import Flask\nfrom flask import request\nfrom flask import make_response\nfrom bs4 import BeautifulSoup \n\n\n# Flask app should start in global layout\napp = Flask(__name__)\n\n\n@app.route('\/webhook', methods=['POST'])\ndef webhook():\n\treq = request.get_json(silent=True, force=True)\n\tres = makeWebhookResult(req)\n    \tres = json.dumps(res, indent=4)\n    \tprint(res)\n    \tr = make_response(res)\n    \tr.headers['Content-Type'] = 'application\/json'\n    \treturn r\n\ndef makeWebhookResult(req):\n\tresult = req.get(\"result\")\n\tparameters = result.get(\"parameters\")\n\t\n\tif req.get(\"result\").get(\"action\") == \"productos.sura\":\n        \tcliente = parameters.get(\"tipo_cliente\")\n       \t\tspeech = \"Buscando productos para \" + cliente\n\t\t\n\telif req.get(\"result\").get(\"action\") == \"producto.info\":\n        \tproducto = parameters.get(\"producto\")\n\t\tif (producto==\"hogar\"):\n\t\t\turl = \"https:\/\/www.sura.com\/soluciones-personas\/seguro-hogar.aspx\"\n\t\t\tr = urllib2.urlopen(url).read()\n\t\t\tsoup = BeautifulSoup(r, 'html.parser')\n\t\t\tprint soup\n\t\t\tcontenido = soup.find_all(\"div\",class_=\"textRightColumn\")\n\t\t\tif (len(contenido)==0):\n\t\t\t\tspeech = \"No encontrado\"\n\t\t\telse:\n\t\t\t\tspeech = contenido[0]\n\t\t\t\n\t\telse:\n       \t\t\tspeech = \"Buscando informacion del producto \" + producto\n        \n    \telif req.get(\"result\").get(\"action\") == \"planes.salud\":\n        \turl = \"https:\/\/api.segurossura.com.co\/public\/v1\/directory\/products\"\n        \tmyResponse = requests.get(url)\n\n        \tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\t\n\t\tspeech = \"Seguros Sura Colombia ofrece los siguientes planes de salud: \\n\"\n\t\t\n        \tfor plan in jData:\n\t       \t\tspeech = speech + \"\\n\" + plan[\"nombreField\"].title()\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"info.especialistas\":\n\t\tproducto = parameters.get(\"plan-salud\")\n\t\tciudad = parameters.get(\"ciudad\")\n\t\tespecialidad = parameters.get(\"especialidad\")\n\t\t\n\t\turl = \"https:\/\/api.segurossura.com.co\/public\/v1\/directory\/search\/\" + producto + \"\/\" + ciudad + \"?speciality=\" + especialidad + \"&firstname=&secondname=&firstlastname=&secondlastname=\"\n\t\tmyResponse = requests.get(url)\n\n\t\tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\n\t\tspeech = \"Los profesionales que coinciden con tu busqueda son: \\n\"\n\n\t\tfor medico in jData:\n\t       \t\tspeech = speech + \"\\n\" + medico[\"nombreField\"] + \"\\n Direccion: \" + medico[\"direccionField\"].title() + \"\\n Telefono: \" + medico[\"telefonoField\"] + \"\\n\"\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"coberturas.producto\":\n\t\tproducto = parameters.get(\"productos\")\n\t\tspeech = \"Buscando coberturas del producto: \" + producto\n\telse:\n        \tspeech =\" \"\n\n\treturn {\n        \"speech\": speech,\n        \"displayText\": speech,\n        #\"data\": {},\n        # \"contextOut\": [],\n        \"source\": \"apiai-onlinestore-shipping\"\n    \t}\n\n\nif __name__ == '__main__':\n\tport = int(os.getenv('PORT', 5000))\n   \tprint \"Starting app on port %d\" % port\n   \tapp.run(debug=True, port=port, host='0.0.0.0')\n",
        "302": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify an existing Python function to eliminate any redundancies\n\n### Input:\ndef just_me(name):\n    print(\"Hi, my name is \"+name+\".\")\n    print(\"I am special and nothing else matters.\")\n    print(\"What about you?\")\n\n### Output:\ndef just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")",
        "303": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple chatbot using Python and state diagrams.\n\n### Input:\nNot applicable\n\n### Output:\n# Create the states\nstate0 = {\n     'name': 'state0',\n     'message': 'Hello! How can I help you?',\n     'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'}\n}\n\nstate1 = {\n     'name': 'state1',\n     'message': 'Sure, what kind of advice do you need?',\n     'replies': {'Career advice': 'state3','Health advice': 'state4'}\n}\n\nstate2 = {\n     'name': 'state2',\n     'message': 'Yes, I'll do my best! What do you want to know?',\n     'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'}\n}\n\nstate3 = {\n     'name': 'state3',\n     'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.',\n     'replies': {}\n}\n\nstate4 = {\n     'name': 'state4',\n     'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.',\n     'replies': {}\n}\n\nstate5 = {\n     'name': 'state5',\n     'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.',\n     'replies': {}\n}\n\nstate6 = {\n     'name': 'state6',\n     'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.',\n     'replies': {}\n}\n\n\n# Initialize the state\ncurrent_state = state0\n\n# Keep a record of conversation\nconversation = []\n\nwhile True:\n # Print the current state message\n print(current_state['message'])\n conversation.append(current_state['message'])\n\n # Get the user input\n user_input = input('>> ')\n conversation.append(user_input)\n\n # Update the state\n if user_input in current_state['replies']:\n  current_state = eval(current_state['replies'][user_input])\n else:\n  print(\"I don't understand what you mean. Please try again.\")\n\n# End the conversation when the state is terminal\n if not bool(current_state['replies']):\n  print('Goodbye!')\n  break\n\nprint(\"=========================\")\nprint(\"Conversation:\")\nfor message in conversation:\n print(message)",
        "304": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 program that takes an integer input from the user and prints its cube.\n\n### Input:\n\n\n### Output:\nnumber = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))",
        "305": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the first non-repeating character in a given list.\n\n### Input:\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\n\n### Output:\ndef first_non_repeating_char(lst):\n    dct = {}\n    \n    for l in lst:\n        if l in dct:\n            dct[l] += 1\n        else:\n            dct[l] = 1\n            \n    for l in lst:\n        if dct[l] == 1:\n            return l\n            \n    return None\n\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\nprint(first_non_repeating_char(lst))",
        "306": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids",
        "307": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet that produces the following output:\n\n### Input:\n\n\n### Output:\nfor i in range(7):\n    for j in range(7):\n        if (i + j) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()",
        "308": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class that takes a given number and calculates the sum of the digits.\n\n### Input:\n6342\n\n### Output:\nclass SumOfDigits:\n    \n    def __init__(self, num):\n        self.num = num\n    \n    def calculate_sum_of_digits(self):\n        total = 0\n        for ch in str(self.num):\n            total += int(ch)\n        return total\n\ndigit_sum = SumOfDigits(6342)\nresult = digit_sum.calculate_sum_of_digits()\nprint(result)",
        "309": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order.\n\n### Input:\n\n\n### Output:\ndef sort_ascending(nums):\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i] \n    return nums",
        "310": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a feature extraction function in Python to extract data from a json string.\n\n### Input:\n{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"}\n\n### Output:\ndef feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features",
        "311": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to combine the elements of two lists into a list of tuples.\n\n### Input:\n[1, 2, 3], [4, 5, 6]\n\n### Output:\ndef combine_list(array1, array2):\n    return list(zip(array1, array2))",
        "312": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a neural network in Python to predict the price of a house given a set of features.\n\n### Input:\n[0.8, 0.4, 0.7]\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)",
        "313": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.\n\n### Input:\n[1,2], [3,4]\n\n### Output:\ndef dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11",
        "314": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import request, jsonify\n\n# Creating the application app\napp = flask.Flask(__name__)\n\n\n@app.route('\/calculate', methods=['POST'])\ndef calculate():\n    # Get the input data from the user\n    data = request.get_json()\n\n    age = data['age']\n    gender = data['gender']\n    car_model = data['car_model']\n\n    # Calculate the insurance price\n    # ...\n    insurance_price = 0.00\n\n    # Return the calculated insurance price in JSON format\n    return jsonify({'insurance_price': insurance_price})\n\t\napp.run(host='0.0.0.0', port=8006)",
        "315": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers\n\n### Input:\nStart=1, End=20\n\n### Output:\ndef sieve_of_eratosthenes(start, end):\n    prime = [True] * (end + 1)\n    p = 2\n    while p * p <= end:\n        if prime[p]:\n            for i in range(p * p, end + 1, p):\n                prime[i] = False\n        p += 1\n    prime_numbers = []\n\n    for p in range (start, end):\n        if prime[p]:\n            prime_numbers.append(p)\n\n    return prime_numbers\n\nprint (sieve_of_eratosthenes(1, 20))",
        "316": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.\n\n### Input:\nRange: 10-20\n\n### Output:\ndef sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673",
        "317": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, build a program that can remove all vowels from a given string.\n\n### Input:\n\n\n### Output:\ndef remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string",
        "318": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the following function by using Python built-in functions:\n\n### Input:\ndef sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    total = 0\n    for num in array:\n        total = total + num\n    return total\n\n### Output:\ndef sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)",
        "319": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code for sorting n distinct integers using insertion sort.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], \n        # that are greater than key, \n        # to one position ahead of \n        # their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key",
        "320": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for a django-like ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete.\n\n### Input:\nModel. name - string\n\n### Output:\nimport sqlite3\n\nclass Model:\n\n  def __init__(self):\n    self.conn = sqlite3.connect(\":memory:\")\n    self.cursor = self.conn.cursor()\n\n  def create(self,name):\n    self.cursor.execute(\n\t\t\t\"CREATE TABLE IF NOT EXISTS Models (name TEXT)\"\n\t\t)\n    self.cursor.execute(\n\t\t\t\"INSERT INTO Models(name) VALUES (?)\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()\n\n  def read(self):\n    self.cursor.execute(\"SELECT * FROM Models\")\n    return self.cursor.fetchall()\n\n  def update(self,name):\n    self.cursor.execute(\n\t\t\t\"UPDATE Models SET name = ? WHERE name = ?\", \n\t\t\t(name, name,),\n\t\t)\n    self.conn.commit()\n  \n  def delete(self, name):\n    self.cursor.execute(\n\t\t\t\"DELETE FROM Models WHERE name = ?\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()",
        "321": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python script to sort a list of strings alphabetically?\n\n### Input:\n[\"Hello\", \"Yes\", \"No\", \"World\"]\n\n### Output:\nstrings = [\"Hello\", \"Yes\", \"No\", \"World\"]\n\nstrings.sort()\n\nprint(strings)",
        "322": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that can find the median of an unsorted list of numbers.\n\n### Input:\n\n\n### Output:\nclass MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)\/\/2] + data[n\/\/2])\/2",
        "323": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array of random numbers in Python.\n\n### Input:\nsize: 10\n\n### Output:\nimport numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)",
        "324": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the edit distance between two strings in Python.\n\n### Input:\nstring1 = \u201ckitten\u201d\nstring2 = \u201csitting\u201d\n\n### Output:\ndef editDistance(string1, string2, m, n):\n    # Create an empty matrix\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Filling the first column of the matrix\n    for i in range(m+1): \n        dp[i][0] = i \n  \n    # Filling the second column of the matrix \n    for j in range(n+1): \n        dp[0][j] = j \n  \n    # Populate the matrix\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n  \n            if string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert\n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace\n  \n    return dp[m][n] \n  \n  \n# Driver program \nstring1 = \"kitten\"\nstring2 = \"sitting\"\nm = len(string1) \nn = len(string2) \nprint(editDistance(string1, string2, m, n))",
        "325": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a 3-layer artificial neural network using Python and print the outcome.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# define the 3 layers #\ninput_layer = np.array([2, 3])\nhidden_layer = np.array([[0.1, 0.4],\n                         [0.8, 0.6],\n                         [0.3, 0.9]])\noutput_layer = np.array([0.3, 0.7])\n\n# compute the output of the 3-layer network #\nhidden_layer_output = np.dot(input_layer, hidden_layer)\noutput = np.dot(hidden_layer_output, output_layer)\n\nprint(output)",
        "326": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read in 15 integers and print the sum of them.\n\n### Input:\n[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\n\n### Output:\ndef sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)",
        "327": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('\/users\/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)",
        "328": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the approach for solving a linear programming problem using the Simplex method in Python.\n\n### Input:\n\n\n### Output:\nThe Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. \n\nTo solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau.",
        "329": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.\n\n### Input:\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]\n\n### Output:\ndef get_greatest_2(items):\n max1 = max2 = float('-inf')\n for item in items:\n if item > max1:\n max1, max2 = item, max1\n elif item > max2:\n max2 = item\n return max1, max2\n\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]\nprint('The greatest 2 numbers from the array:', get_greatest_2(myList))\n\nOutput:\nThe greatest 2 numbers from the array: (9, 8)",
        "330": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code that takes in a list of integers and removes all the duplicate elements from it.\n\n### Input:\n[1, 2, 3, 2, 4, 5, 6, 3]\n\n### Output:\nfinal_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)",
        "331": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np \n\na = np.random.randint(1, 6, size=(3,3)) \nprint(a)",
        "332": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?\n\n### Input:\n[\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\n### Output:\nwords = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)",
        "333": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify the sentiment of movie reviews using Natural Language Processing.\n\n### Input:\nThe movie was terrible. It felt like it would never end!\n\n### Output:\nimport nltk\nfrom nltk.sentiment import vader\n\nsentence = 'The movie was terrible. It felt like it would never end!'\n\nsid = vader.SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(sentence)\n\nif scores['neg'] > scores['pos']:\n  print('The sentiment of the sentence is negative!')\nelse:\n  print('The sentiment of the sentence is positive!')",
        "334": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.\n\n### Input:\n\n\n### Output:\n\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)",
        "335": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which matches the following criteria.\n\n### Input:\nA class Song with two instance variables, title and artist, and three methods, str(), eq(), and length().\n\n### Output:\nclass Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n  \n    def __str__(self):\n        return f'Title: {self.title}\\nArtist: {self.artist}'\n    \n    def __eq__(self, other):\n        return self.artist == other.artist and self.title == other.title\n\n    def length(self):\n        return len(self.title)",
        "336": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....",
        "337": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate objects of type Student in Python containing relevant attributes.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender",
        "338": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a Python program to extract all public email addresses from a given string\n\n### Input:\n\"My email is john@example.com and yours is john@gmail.com.\"\n\n### Output:\nimport re\n\ndef extract_emails(text):\n  emails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\n  return emails\n\nextracted_emails = extract_emails(\"My email is john@example.com and yours is john@gmail.com\")\nprint(extracted_emails)",
        "339": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a basic REST API with authentication and endpoints in Python.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '\/item\/<string:name>')\napi.add_resource(ItemList, '\/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)",
        "340": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.\n\n### Input:\n[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}]\n\n### Output:\ndef calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]",
        "341": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse an input string using Python.\n\n### Input:\nHello World!\n\n### Output:\ndef rev_string(s): \n   return s[::-1] \n  \ns = \"Hello World!\"\nprint(rev_string(s))",
        "342": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the longest common subsequence of two sequences.\n\n### Input:\nx = \"abcdaf\";\ny = \"acbcf\";\n\n### Output:\n#Function to find the LCS of two strings\ndef find_lcs(x, y): \n    # Find lengths of the two strings \n    m = len(x) \n    n = len(y) \n    \n    #To store the lengths of longest common subsequences\n    lcs = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    #Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                lcs[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else: \n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n  \n    #To store one of the possible common subsequence\n    index = lcs[m][n] \n    lcs_str = [\"\"] * (index+1) \n    lcs_str[index] = \"\"\n  \n    #Following loop code is used to find one of the longest common subsequence\n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        #If current character in X and Y are same,then\n        # reduce both the count and add the character to the result string\n        if x[i-1] == y[j-1]: \n            lcs_str[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        # If not same, move to the left, top or corner (diagonal) cell \n        #Whichever has the max value\n        elif lcs[i-1][j] > lcs[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    # Return the longest common subsequence\n    return \"\".join(lcs_str)\n\n# Main function\nx = \"abcdaf\"\ny = \"acbcf\"\nres = find_lcs(x,y)\nprint(\"The Longest Common Subsequence is:\")\nprint(res)\n\n# Output: The Longest Common Subsequence is: \n# abcf",
        "343": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    pwd_length = 8\n\n    password = ''\n    for i in range(pwd_length):\n        password += random.choice(chars)\n    \n    # Check if at least one special character exists in the password\n    if any([char in string.punctuation for char in password]):\n        return password\n    else:\n        return generate_password()\n\nprint(generate_password())",
        "344": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])",
        "345": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python program to sort words in a given string by their length in decreasing alphabetical order.\n\n### Input:\nmy_string = \"This is the string which is to be sorted\"\n\n### Output:\nmy_string = \"This is the string which is to be sorted\"\n  \nwords = my_string.split(' ') # split string into list of words \n  \n# create a list of tuples where the first element \n# is the length of the word and the second element \n# is the word itself  \nwords_with_length = [(len(word), word) for word in words] \n  \n# sort list of tuples according to 1st element of tuple i.e. length of word \nwords_with_length.sort(reverse = True) \n  \n# wl contains list words in decreasing order of their length \n# now use join() to join all words whith \" \" \nsorted_string = \" \".join([i[1] for i in words_with_length]) \n  \n# print sorted string \nprint(sorted_string)",
        "346": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate maximum revenue.\n\n### Input:\nprices = [10, 7, 5, 8, 11, 9]\n\n### Output:\ndef max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff",
        "347": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the following output pattern\n\n### Input:\n\n\n### Output:\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(j, end=\"\")\n    print()",
        "348": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a loop that prints a python array from the end to the beginning.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef printArrayReverse(arr): \n    for i in range(len(arr) - 1, -1, -1): \n        print(arr[i], end = \" \")\n\nprintArrayReverse(arr)",
        "349": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of phone numbers, extract only the ones that start with 08 using Python.\n\n### Input:\n['0834567', '0945678', '07123456', '08901234', '07890123']\n\n### Output:\nphone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\nresult = [number for number in phone_numbers if number.startswith('08')]\nprint(result)",
        "350": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.\n\n### Input:\nlist = [\"apple\", \"banana\", \"peach\", \"orange\", \"grape\"]\nsearch_query = \"apple\"\n\n### Output:\ndef search_list(list, search_query):\n    result = []\n    for i in range(len(list)):\n        if list[i] == search_query:\n            result.append(i)\n    return result\n\nsearch_list(list, search_query) # returns [0]",
        "351": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an array of integer values and reverses the order of the values.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order",
        "352": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to create a random string of 10 characters.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_string(string_length):\n    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.choices(random_characters, k=string_length))\n    return random_string\n\nprint(generate_string(10)) # Length: 10",
        "353": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Tic Tac Toe game in Python.\n\n### Input:\n\n\n### Output:\n# define the board\nboard = [\" \" for i in range(9)]\n\ndef print_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# define player turn\ndef player_turn(icon):\n\n    if icon == \"X\":\n        number = 1\n    elif icon == \"O\":\n        number = 2\n        \n    print(\"Your turn player {}\".format(number))\n    \n    choice = int(input(\"Enter your move (1-9): \").strip())\n    if board[choice -1] == \" \":\n        board[choice -1] = icon\n    else:\n        print()\n        print(\"That space is taken!\")\n\n# check win\ndef is_victory(icon):\n    if (board[0] == icon and board[1] == icon and board[2] == icon) or \\\n        (board[3] == icon and board[4] == icon and board[5] == icon) or \\\n        (board[6] == icon and board[7] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[3] == icon and board[6] == icon) or \\\n        (board[1] == icon and board[4] == icon and board[7] == icon) or \\\n        (board[2] == icon and board[5] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[4] == icon and board[8] == icon) or \\\n        (board[2] == icon and board[4] == icon and board[6] == icon):\n        return True\n    else:\n        return False\n        \n# define main function\ndef main():\n    print(\"Welcome to Tic Tac Toe!\")\n    print_board()\n    \n    while True:\n        player_turn(\"X\")\n        print_board()\n        if is_victory(\"X\"):\n            print(\"X Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n        player_turn(\"O\")\n        print_board()\n        if is_victory(\"O\"):\n            print(\"O Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n\nmain()",
        "354": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to merge two sorted lists.\n\n### Input:\nLists A and B contain the elements [2,4,6] and [3,5,7] respectively.\n\n### Output:\ndef merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list",
        "355": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the longest common subsequence between two strings.\n\n### Input:\nstring 1 = \"ABACEDF\"\nstring 2 = \"ABDCF\"\n\n### Output:\n# Program to find the longest common subsequence between two strings \ndef lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n\n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n\n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABACEDF\"\nY = \"ABDCF\"\n\nprint(\"Length of LCS is \", lcs(X, Y))",
        "356": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a naive bayes classifier using python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit(X_train, y_train)\n\n# Predict Output \ny_pred = model.predict(X_test)",
        "357": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com\/stefantkeller\/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '..\/24_LL_ev\/20150211_sample21-1-d6\/spot333um.csv'\n    calib_folder = '..\/24_LL_ev\/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot\n    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)\n    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)\n    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis\n    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.\n    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot\n    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate\n    llow0 = {}\n    lhigh0 = {}\n    texty1 = {}\n    for T in Temperatures:\n        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity\n        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops\n        texty1[T] = float(instr['texty1[{0}]'.format(T)])\n\n    \n    \n    #\n    #\n    #------------------------------------\n    #------------------------------------\n    # plot\n    cols = varycolor(3*len(Temperatures))\n\n\n    plt.subplot(3,1,1)\n    cnt = 0 # color counter\n\n    q0,m0 = {},{} # for linreg\n    for T in Temperatures:\n\n        # linreg\n        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].e()[llow0[T]:lhigh0[T]],\n                                overwrite_zeroerrors=True)\n\n        emax,emaxi = ev.max(emitted[T],True)\n        amax = absorbed[T][emaxi]\n        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)\n        # plot\n        plt.errorbar(absorbed[T].v(),emitted[T].v(),\n                     xerr=absorbed[T].e(),yerr=emitted[T].e(),\n                     c=cols[cnt],linestyle=' ')\n        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])\n\n        plt.text(textx,texty1[T],\n                 '${0}$$^\\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),\n                 color=cols[cnt],fontsize=fontsize)\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Emited power (W)')\n    plt.xlim(xlim)\n    plt.ylim(ylim1)\n    plt.grid('on')\n    \n    #plt.show()\n\n    \n    #------------------------------------\n    plt.subplot(3,1,2)\n    cnt = 0 # reset color counter\n\n    q1,m1 = {},{}\n    for T in Temperatures:\n        relref = reflected[T]\/pumped[T]*100\n        \n        # plot\n        plt.errorbar(absorbed[T].v(),relref.v(),\n                     xerr=absorbed[T].e(),yerr=relref.e(),\n                     c=cols[cnt],linestyle=' ')\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Reflectivity (%)')\n    plt.xlim(xlim)\n    plt.ylim(ylim2)\n    plt.grid('on')\n\n    #plt.show()\n    \n    #------------------------------------\n    # plot dissipation and spectra\n    plt.subplot(3,1,3)\n    cnt = 0 # reset\n    \n    q3,m3 = {},{}\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            # lambda_short\n            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), \n            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),\n            #             c=cols[cnt],linestyle=' ')\n        \n            # lambda_long\n            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1\n            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],\n                                    overwrite_zeroerrors=True)\n            \n            # show only a part, not to confuse reader\n            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], \n            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],\n            #             c=cols[cnt],linestyle=' ')\n            \n            # show the whole range\n            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), \n                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),\n                         c=cols[cnt],linestyle=' ')\n            \n        cnt += 3\n\n    plt.title(title)\n    plt.xlim(xlim3)\n    plt.ylim(ylim3)\n    plt.xlim()\n    plt.xlabel('Dissipated power (W)')\n    plt.ylabel('Wavelength (nm)')\n    plt.grid('on')\n    cnt = 0 # reset\n    \n    \n    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets\n    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes\n    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])\n    \n    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th\n    R_th = dldD\/dldT\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])\n        cnt+=3\n    \n    plt.text(textx3,texty3[0],\n             '$\\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),\n             color='k')\n    \n    R_th = R_th.round(2)\n    therm_imp = 'Thermal impedance: $({0})$ K\/W'.format(R_th)\n    plt.text(textx3,texty3[1],\n             therm_imp,color='k')\n    print therm_imp\n\n    \n    for T in Temperatures:\n        print meantemp[T]\n    \n    plt.show()\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "358": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you return two values from a Python function?\n\n### Input:\n\n\n### Output:\nThere are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)",
        "359": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to count the number of pairs with given sum x\n\n### Input:\nX = 10\n\n### Output:\ndef count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count",
        "360": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Celery task in Python to send an email.\n\n### Input:\nrecipient_name = 'John Smith'\nrecipient_email = 'john@example.com'\nsubject = 'Hello World'\nmessage = 'This is a test email.'\n\n### Output:\nfrom celery import Celery\nfrom flask_mail import Message\n\napp = Celery('tasks', backend='redis:\/\/localhost')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n msg = Message(subject, sender='example@example.com', recipients=[recipient_email])\n msg.body = message\n mail.send(msg)",
        "361": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following python code using best practices\n\n### Input:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n### Output:\ndef linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1",
        "362": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the nth Fibonacci number\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
        "363": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify the largest number in the given list.\n\n### Input:\n[1000, 506, 299, 620, 35]\n\n### Output:\nmax_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)",
        "364": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find a substring in a string.\n\n### Input:\n\n\n### Output:\ndef find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1",
        "365": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, create a Python script to print all the elements greater than 50.\n\n### Input:\n[2, 60, 5, 4, 78, 32, 99]\n\n### Output:\nnums = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in nums:\n    if num > 50:\n        print(num)",
        "366": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given array in ascending order using bubble sort.\n\n### Input:\n[3,7,4,1]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "367": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes a number and prints its factors.\n\n### Input:\nNot applicable\n\n### Output:\ndef print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n<\/form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application\/json'\n    }\n  };\n\n  fetch('\/my-api\/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n<\/script>",
        "368": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate an array of random numbers between two specified values.\n\n### Input:\nmin = 0\nmax = 50\n\n### Output:\nimport random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))",
        "369": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter out words containing five characters or less from a list of words.\n\n### Input:\n[\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n### Output:\n# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)",
        "370": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to identify the number of even numbers present in a given list of numbers.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Output:\ndef countEvenNum(list):\n    return len([x for x in list if x % 2 == 0])\n\nlist = [1, 2, 3, 4, 5]\nprint(countEvenNum(list))",
        "371": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random string of length 8 containing alphanumeric characters.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))",
        "372": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve a linear equation system of the form: ax + by = c.\n\n### Input:\na, b, c = 2, 1, 4\n\n### Output:\ndef solve_linear_equation_system(a, b, c):\n x = (c - b) \/ a\n y = (c - a*x) \/ b\n return x, y\n\nx, y = solve_linear_equation_system(a, b, c)\nprint(\"x = {}, y = {}\".format(x, y)) # x = 2.0, y = 2.0",
        "373": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models\/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))",
        "374": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to determine the most efficient order of tasks from an array of given tasks.\n\n### Input:\ntasks = [Task1, Task2, Task3, Task4, Task5]\n\n### Output:\ndef most_efficient_order(tasks):\n    \"\"\"\n    This method takes a list of tasks and produces the most efficient order for completing the tasks.\n\n    Parameters\n    ----------\n    tasks: List\n        A list of tasks to be performed.\n\n    Returns\n    -------\n    List\n        An ordered list of tasks representing the most efficient order for completing the tasks.\n    \"\"\"\n    tasks_to_complete = tasks.copy()\n    order = [] \n    while tasks_to_complete:\n        min_time = float(\"inf\")\n        task_index = None\n        for i, task in enumerate(tasks_to_complete):\n            if task.get_time() < min_time:\n                min_time = task.get_time()\n                task_index = i\n        order.append(tasks_to_complete.pop(task_index))\n    return order",
        "375": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python script that reverse a string.\n\n### Input:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]",
        "376": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML form with a submit button to send information to a Python program.\n\n### Input:\n\n\n### Output:\n<form action=\"action.py\" method=\"post\">\n    <input type=\"submit\" value=\"Submit\">\n<\/form>",
        "377": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that contains a function with two parameters and returns the sum of the two parameters.\n\n### Input:\nNot applicable\n\n### Output:\ndef add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y",
        "378": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read an array of integers and calculate their sum.\n\n### Input:\n[1, 3, 5, 7]\n\n### Output:\ndef calculate_sum(arr):\n  sum = 0\n\n  for i in arr:\n    sum += i\n\n  return sum\n\ninput_array = [1, 3, 5, 7]\n\nresult = calculate_sum(input_array)\n\nprint(result) # prints 16",
        "379": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that multiplies two input numbers and prints the result.\n\n### Input:\na = 3\nb = 4\n\n### Output:\ndef multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)",
        "380": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc').\n- To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.\n\n### Input:\n\n\n### Output:\nimport os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~\/jsub\/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tdata_str = f.read()\n\n\t\ttry:\n\t\t\treturn json.loads(data_str)\n\t\texcept ValueError as e:\n\t\t\traise RepoReadError('JSON decode error on task %s: %s' % (task_id, e))\n\n#\tdef __create_repo_dir(self):\n#\t\tsafe_mkdir(self.__jsub_dir)\n\n\tdef __new_task_id(self):\n\t\ttask_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\tif not task_ids:\n\t\t\treturn 1\n\t\ttask_ids.sort(key=int, reverse=True)\n\t\treturn(task_ids[0]+1)\n\n\tdef __json_str(self, data):\n\t\tif self.__json_format == 'pretty':\n\t\t\treturn json.dumps(data, indent=2)\n\t\treturn json.dumps(data, separators=(',', ':'))\n",
        "381": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.\n\n### Input:\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()",
        "382": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a single Python line to create a list that contains elements from another list.\n\n### Input:\ngiven_list = [1, 2, 3, 4, 5]\n\n### Output:\nnew_list = [element for element in given_list]",
        "383": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum of three numbers.\n\n### Input:\n3, 4, 5\n\n### Output:\ndef max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nresult = max_of_three(3, 4, 5)\nprint(result)",
        "384": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).\n\n### Input:\nURL: https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)",
        "385": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store data about a student.\n\n### Input:\n\n\n### Output:\nstudent_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}",
        "386": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to remove duplicate entries from a list.\n\n### Input:\n[1,2,2,3,3,4]\n\n### Output:\ndef removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))",
        "387": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following array of numbers, write a Python program to find the maximum element.\n\n### Input:\nnumbers = [1, 43, 78, 3, 92, 42]\n\n### Output:\n#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92",
        "388": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compress a given data sequence.\n\n### Input:\nData sequence: 9, -2, 6, 0, -7\n\n### Output:\ndef compress_sequence(nums):\n    output = []\n    temp = []\n\n    for i in range(1, len(nums)):\n        if nums[i-1] * nums[i] >= 0:\n            temp.append(nums[i-1])\n        else:\n            temp.append(nums[i-1])\n            output.append(temp)\n            temp = []\n    temp.append(nums[i])\n    output.append(temp)\n\n    return output\n\nprint(compress_sequence([9, -2, 6, 0, -7]))",
        "389": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in python to split an given array into two parts with equal sum.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef split_equal_sum(arr):\n    n = len(arr) \n    leftsum = 0\n    rightsum = sum(arr)\n    \n    for i in range(n): \n        rightsum -= arr[i]\n        if leftsum == rightsum:\n            return True \n        leftsum += arr[i] \n    return False",
        "390": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in Python to calculate the total sum of all elements in the given list.\n\n### Input:\ndata = [1, 9, 3, 5]\n\n### Output:\ntotal = 0\nfor element in data:\n    total = total + element\nprint(total)",
        "391": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix.\n\n### Input:\ndictionnary = [ \"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\" ]\nprefix = \"d\"\n\n### Output:\ndef auto_complete(dictionary, prefix):\n    # list for words with the given prefix\n    prefix_words = []\n\n    # iterate through the dictionary\n    for word in dictionary:\n        # if the word starts with given prefix, \n        # add it to the list\n        if word.startswith(prefix):\n            prefix_words.append(word)\n\n    return prefix_words\n\n\ndictionary = [\"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\"]\nprefix = \"d\"\n\nprefix_words = auto_complete(dictionary, prefix)\nprint(prefix_words)\n\n# Output:\n# ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']",
        "392": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to predict a customer\u2019s annual income based on their age and education level.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport keras \nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Build model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim = 2, activation = 'relu'))\nmodel.add(Dense( 1))\n\n# Compile the model\nmodel.compile(loss = 'mean_squared_error',\n              optimizer = 'adam')\n\n# Obtain some data - age (years), education level (high school, college, university)\nx_train = np.array([[25, 0], [30, 0], [35, 0], \n\t\t    [40, 0], [45, 1], [45, 2],\n\t\t    [50, 1], [50, 2], [55, 1],\n\t\t    [55, 2], [50, 3], [60, 3]])\n\n# Labels - annual income\ny_train = [15000, 20000, 25000, 30000,\n           40000, 45000, 50000, 60000, \n\t   65000, 70000, 80000, 90000]\n\n# Fit the model\nmodel.fit(x_train, y_train, epochs = 150, batch_size = 2)\n\n# Calculate the predicted annual income\nage = 50\neducation = 3\nannualIncome = model.predict(np.array([[age, education]]))\nprint(annualIncome)\n# output: [[80000]]",
        "393": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to classify text documents into two classes: positive and negative.\n\n### Input:\npositiveText = \"This is a great movie!\"\nnegativeText = \"This movie was terrible\"\n\n### Output:\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier \n  \ndef label_words(words): \n    return dict([(word, True) for word in words]) \n\npositive_tokens = nltk.word_tokenize(positiveText) \nnegative_tokens = nltk.word_tokenize(negativeText)\n\npositive_data = [(label_words(positive_tokens), 'positive')] \nnegative_data = [(label_words(negative_tokens), 'negative')]\n \ntrain_data = positive_data + negative_data \nclassifier = NaiveBayesClassifier.train(train_data) \n  \n# classify \nclassifier.classify( \n\tlabel_words(nltk.word_tokenize(\"This movie was ok\")))",
        "394": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to filter out the odd numbers from a list.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5, 6]\n\n### Output:\ndef filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]",
        "395": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes.\n\n### Input:\nNot applicable\n\n### Output:\nimport psycopg2\nfrom datetime import datetime, timedelta\nimport schedule\nimport time\n\nconn = psycopg2.connect(\n host=\"localhost\", \n database=\"db\", \n user=\"user\", \n password=\"password\"\n)\n\ndef refresh_data():\n cur = conn.cursor()\n query = 'REFRESH TABLE \"TableName\";'\n cur.execute(query)\n conn.commit()\n\n# run the refresh_data job every 5 minutes\nschedule.every(5).minutes.do(refresh_data)\n\nwhile True:\n schedule.run_pending()\n time.sleep(1)",
        "396": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following Python code snippet more efficient.\n\n### Input:\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate\n\n### Output:\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05",
        "397": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that computes the area of a circle with the given radius.\n\n### Input:\nradius = 5\n\n### Output:\nimport math\n\ndef area_circle(radius):\n return math.pi * (radius ** 2)\n\narea = area_circle(radius)\nprint('The area of the circle is %.2f' % area)",
        "398": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic version control system in Python that keeps track of changes in the code.\n\n### Input:\n\n\n### Output:\nclass VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()",
        "399": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve the Towers of Hanoi game.\n\n### Input:\nstarting = [(1, \"A\"), (4, \"A\"), (7, \"A\"), (2, \"A\"), (5, \"A\"), (8, \"A\"), (3, \"A\"), (6, \"A\")]\n\n### Output:\ndef hanoi(n, source, spare, target):\n    if n == 1:\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n    else:\n        hanoi(n-1, source, target, spare)\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n        hanoi(n-1, spare, source, target)\n\nn = 8\nsource = [(i, \"A\") for i in range(1, n+1)]\ntarget = []\nspare = []\n\nhanoi(n, source, spare, target)",
        "400": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze a dataset of customers and create a classification model in scikit-learn to determine customer churn.\n\n### Input:\nNot applicable\n\n### Output:\n# Python code\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data set\ndata = pd.read_csv(\"customer_data.csv\")\n\n# Select features\nX = data.drop(['churn'], axis=1)\n\n# Select targets\ny = data['churn']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions and measure accuracy\npredictions = model.predict(X_test)\nprint(model.score(X_test, y_test))",
        "401": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django application with a model that stores the name, address, and email of a user.\n\n### Input:\n\n\n### Output:\n# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate",
        "402": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to convert a given number into its Roman form.\n\n### Input:\nnumber = 15\n\n### Output:\ndef int_to_Roman(number): \n  \n    val = [ \n        1000, 900, 500, 400, \n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ] \n    syb = [ \n        \"M\", \"CM\", \"D\", \"CD\", \n        \"C\", \"XC\", \"L\", \"XL\", \n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ] \n    roman_num = '' \n    i = 0\n    while  number > 0:\n        for_val = number \/\/ val[i]\n        roman_num += syb[i] * for_val\n        number -= val[i] * for_val\n        i += 1\n    return roman_num",
        "403": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked-list in Python that can traverse in both directions.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev",
        "404": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a python code to convert Celsius to Fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsiusToFahrenheit(temp):\n    return round((temp * 9\/5) + 32, 2)",
        "405": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning algorithm in Python to categorize a dataset of records.\n\n### Input:\n[\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n### Output:\nimport numpy as np\nfrom sklearn.svm import SVC \n\n# Dataset \ntraining_data = [\n {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n# Feature extraction \nX = []\ny = []\nfor data in training_data:\n X.append(data['features'])\n y.append(data['label'])\n\n# Model \nclf = SVC()\nclf.fit(X, y) \n\n# Prediction \npredict_data = [1, 0, 1]\npredicted_label = clf.predict([predict_data])\n\nprint(predicted_label[0])",
        "406": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.\n\n### Input:\nNot applicable\n\n### Output:\nfrom Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\n\ndef encrypt(plaintext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(plaintext)\n\ndef decrypt(ciphertext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.decrypt(ciphertext)",
        "407": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a valid Python syntax to calculate the sum of two variables using lambda\n\n### Input:\na = 3, b = 4\n\n### Output:\nsum = lambda a, b : a + b\nprint(sum(3,4))",
        "408": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9\n\n### Input:\nNot applicable\n\n### Output:\n# Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import to_categorical\n\n# Loading data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Defining the neural network model\n\n# Input layer\ninputs = Input(shape=(28,28,))\n\n# Hidden layer\nh1 = Dense(64, activation='relu')(inputs)\nh2 = Dropout(0.5)(h1)\n\n# Output layer\noutputs = Dense(10, activation='softmax')(h2)\n\n# Compiling the model\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(loss='categorical_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\n# Data pre-processing\n\n# Reshape inputs from (60000, 28, 28) to (60000, 784)\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Normalize pixel values\nX_train = X_train.astype('float32')\nX_train \/= 255\nX_test = X_test.astype('float32')\nX_test \/= 255\n\n# One-hot encode labels\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)\n\n# Fitting the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)",
        "409": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the difference between a ``list`` and a ``tuple`` in Python.\n\n### Input:\n\n\n### Output:\nThe difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.",
        "410": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the Fibonacci number at a given position.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))",
        "411": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)",
        "412": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract all the words starting with a specific letter\n\n### Input:\nThe letter is 's'\n\n### Output:\n\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))",
        "413": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a hash table in Python that supports insert, delete and retrieve operations.\n\n### Input:\n\n\n### Output:\nclass HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]",
        "414": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search engine in Python to quickly search through a given array.\n\n### Input:\nArray: ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n### Output:\n# Define the array\narray = ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n# Function to perform linear search\ndef linearSearch(search_item):\n    # Loop through array\n    for i in range(len(array)):\n        # If search item is found, return its position\n        if array[i] == search_item:\n            return i\n    # If item is not found, return -1\n    return -1\n\n# Input search item\ns = input(\"Enter the item to be searched: \")\n\n# Search the item\nresult = linearSearch(s)\n\n# Print result\nif result == -1:\n    print(\"Item not found.\")\nelse:\n    print(\"Item is found at position \"+str(result))",
        "415": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that prints out the largest value from a given list of numbers.\n\n### Input:\nlist = [2, 4, 1, 6]\n\n### Output:\ndef get_max_value(numbers): \n    return max(numbers)\n\nprint(get_max_value(list))  # 6",
        "416": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that takes a list of numbers from 1 to 8  and prints its cubic values.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\nlist_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor num in list_numbers:\n    print(num**3)",
        "417": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary in Python with key-value pairs\n\n### Input:\nKey: \"FirstName\"\nvalue: \"John\"\n\n### Output:\nmy_dict = {\n    \"FirstName\": \"John\"\n}",
        "418": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the number of unique paths from a given source to a destination.\n\n### Input:\n\n\n### Output:\ndef num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]",
        "419": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to display a Fibonacci sequence of first n numbers.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n):\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\nn = 10\nfor i in range(1, n):\n    print(Fibonacci(i))",
        "420": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"list\", \"help\", and \"version\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http:\/\/RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['exist']:\n        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['test']:\n        test_engines(args['<engines>'])\n    elif args['--list']:\n        for sub_site in SUBTITLE_SITE_LIST.keys():\n            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)\n            print sub_dict.get('class_name')\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "421": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program to find the maximum number in a list.\n\n### Input:\nlist = [9, 2, 5, 6, 4, 1]\n\n### Output:\ndef max_num(list):\n  max_num = list[0]\n\n  for num in list:\n    if num > max_num:\n      max_num = num\n  \n  return max_num",
        "422": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.\n\n### Input:\nList of Strings: [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\n\n### Output:\ndef sortAlphabetically(strings): \n    strings.sort() \n    return strings \n\n#Test \nstrings = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_strings = sortAlphabetically(strings) \nprint(*sorted_strings)",
        "423": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print a formatted table of grades for a given set of students.\n\n### Input:\nStudents = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n]\n\n### Output:\ndef print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))",
        "424": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python code snippet that deletes all duplicates in a given list of numbers.\n\n### Input:\n\n\n### Output:\ndef deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list",
        "425": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to visually summarize the Twitter data.\n\n### Input:\nTwitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.\n\n### Output:\nimport matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()",
        "426": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes in a string of sentences and removes all the punctuations.\n\n### Input:\n\"This is a sample string!\"\n\n### Output:\nimport string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))",
        "427": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.\n\n### Input:\ndata = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]]\n\n### Output:\nimport numpy as np\nfrom sklearn import linear_model\n\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([75000, 43000, 59000, 32000, 85000])\n\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\n\nprediction = model.predict([[2200, 3]])",
        "428": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python that prints each item of the following list with a message:\n\n### Input:\nmy_list = ['A', 'B', 'C', 'D']\n\n### Output:\nmy_list = ['A', 'B', 'C', 'D']\n\nfor item in my_list:\n    print(\"The item is: {}\".format(item))",
        "429": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a regular expression in Python to match all numeric strings.\n\n### Input:\n\n\n### Output:\nimport re \n  \n# Regular expression to match all numeric strings \npattern = '^[0-9]+$'\n  \n# Input string \nstring = '123456789'\n  \n# Matching a pattern \nresult = re.match(pattern, string) \nif result: \n    print(\"String is a valid numeric string\") \nelse: \n    print(\"String isn't a valid numeric string\")",
        "430": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretar\u00eda Ejecutiva, Presidencia, and Presupuesto\/Administraci\u00f3n, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administraci\u00f3n and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named \"proc4.png\" and a DOT file named \"proc4.dot\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n#  -*- coding: utf-8 -*-\n\n\"\"\"\nBPMN diagram for FOMDES process 1\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom bpmn_pgv import *\nimport pygraphviz as pgv\n\n__author__ = 'mapologo'\n\nPROCESS_LABEL = \"Liquidaci\u00f3n de Cr\u00e9ditos\"\n# A graph for FOMDES processes\nF = pgv.AGraph(strict=False, directed=True)\n\nF.graph_attr.update(label=\"\", rankdir=\"TB\", splines=\"ortho\", labelloc=\"b\",\n                    size=\"8, 7.5\", forcelabels=\"true\", ranksep=\"0.25\", fontname=\"Liberation Sans Narrow Condensed\")\nF.node_attr.update(fontname=\"Liberation Sans Narrow Condensed\")\nF.edge_attr.update(fontname=\"Liberation Sans Narrow Condensed\", fontsize=\"10\")\n\nse_cluster = {\"se7\": (\"Recibir el documento protocolizado\", \"start\"),\n              \"se8\": (\"Revisar el documento protocolizado\", \"human\"),\n              \"se9\": (\"\", \"end\")}\n\nse_edges = {\"se7\": {\"se8\": {}},\n            \"se8\": {\"se9\": {\"style\": \"invis\"}}}\n\nSE = add_cluster(F, \"se\", \"Secretar\u00eda Ejecutiva\", se_cluster, se_edges)\n\np_cluster = {\"p1\": (\"Firma del cheque\", \"human\"),\n             \"p2\": (\"Entregar cheque a beneficiario\", \"message\")}\n\np_edges = {\"p1\":{\"p2\": {}}}\n\nP = add_cluster(F, \"p\", \"Presidencia\", p_cluster, p_edges)\n\npr_cluster = {\"pr2\": (\"Verificar documentaci\u00f3n legal y elaborar certificaci\u00f3n de disponibilidad\", \"human\"),\n              \"pr3\": (\"Crear las cuentas por cobrar\", \"human\"),\n              \"pr4\": (\"Generar tablas de amortizaci\u00f3n\", \"human\"),\n              \"pr5\": (\"Imprimir y firmar orden de liquidaci\u00f3n y cheque\", \"human\")}\n\npr_edges = {\"pr2\": {\"pr3\": {}},\n            \"pr3\": {\"pr4\": {}},\n            \"pr4\": {\"pr5\": {}}}\n\nPR = add_cluster(F, \"pr\", \"Presupuesto\/Administraci\u00f3n\", pr_cluster, pr_edges)\n\nF.add_node(\"SIGEFOMDES Administraci\u00f3n\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SIGEFOMDES Administraci\u00f3n\")\nF.add_node(\"SISAC\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SISAC\")\n\nglobal_edges = {\"Beneficiario\":  {\"se7\": {\"style\": \"dashed\"}},\n                \"se8\": {\"pr2\": {\"style\": \"dashed\"}},\n                \"pr3\": {\"SIGEFOMDES Administraci\u00f3n\": {\"style\": \"dashed\"}},\n                \"pr4\": {\"SISAC\": {\"style\": \"dashed\"}},\n                \"pr5\": {\"p1\": {\"style\": \"dashed\"}},\n                \"p2\": {\"se9\": {\"style\": \"dashed\"}, \"Beneficiario\": {\"style\": \"dashed\"}}}\n\nadd_edges(F, global_edges)\n\nF.draw(\"proc4.png\", prog='dot')\nF.write(\"proc4.dot\")\n",
        "431": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to calculate an exponential series\n\n### Input:\n\n\n### Output:\ndef exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum",
        "432": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to add two large numbers represented as strings.\n\n### Input:\nThe two numbers: \"111\" and \"1337\"\n\n### Output:\ndef add_large_numbers(num1, num2):\n    num1 = num1[::-1]\n    num2 = num2[::-1] \n    carry = 0\n    result = \"\" \n   \n    # Iterate over the length of the length of larger string  \n    for i in range(max(len(num1), len(num2))): \n        if i < len(num1):\n            digit1 = int(num1[i])\n        else:\n            digit1 = 0\n\n        if i < len(num2):\n            digit2 = int(num2[i])\n        else:\n            digit2 = 0\n       \n        sum_total = digit1 + digit2 + carry  \n        carry = sum_total \/\/ 10  \n\n        result += str(sum_total % 10) \n\n    # Add remaining carry  \n    if carry > 0:  \n        result += str(carry) \n\n    return result[::-1]\n\nprint(add_large_numbers(\"111\", \"1337\"))\n# Output: 1448",
        "433": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python, that takes an array and sort it in ascending order.\n\n### Input:\n[10, 3, 9, 1, 15, 2]\n\n### Output:\ndef sort_ascending(array):\n  array.sort()\n  return array\n\nsort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",
        "434": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the Python class below so that it can calculate the sum of two integers.\n\n### Input:\nclass Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n### Output:\nclass Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y",
        "435": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code to check if a given number is an Armstrong number.\n\n### Input:\ndef is_armstrong_number(num):\n\n### Output:\ndef is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp \/\/= 10\n  if num == sum:\n    return True  \n  else:\n    return False",
        "436": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.\n\n### Input:\nlimit = 10\narray = [1, 3, 5, 4, 2, 6]\n\n### Output:\ndef findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum",
        "437": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate n-grams of the given text with a window size of 3.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nfrom collections import Counter\n\n\ndef generate_ngrams(text, window_size):\n    text = text.lower().split(' ')\n    ngrams = []\n    for n in range(window_size, len(text)+1):\n        for i in range(len(text)-n+1):\n            ngrams.append(' '.join(text[i:i+n]))\n    return Counter(ngrams)\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nwindow_size = 3\n\nngrams_count = generate_ngrams(text, window_size)\n\nprint('\\nNGRAMS COUNT:',ngrams_count)\n\n# Output\n# NGRAMS COUNT: Counter({'the quick brown': 3,\n#            'quick brown fox': 2,\n#            'over the lazy': 1,\n#            'brown fox jumps': 1,\n#            'fox jumps over': 1,\n#            'the lazy dog': 1,\n#            'jumps over the': 1,\n#            'quick brown fox jumps': 1})",
        "438": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the Fibonacci sequence as a list of integers in Python\n\n### Input:\n\n\n### Output:\ndef fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list",
        "439": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning algorithm in Python to identify apples from bananas.\n\n### Input:\nNo Input\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)",
        "440": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.\n\n### Input:\nlist1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"]\n\n### Output:\ndict1 = {}\nfor lst in [list1, list2]:\n key = lst[0]\n val = lst[1:]\n dict1[key] = val\n\nprint(dict1)\n# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}",
        "441": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a fuzzy search algorithm in Python that can match strings with near similarities.\n\n### Input:\n\n\n### Output:\ndef find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches",
        "442": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)\n\n### Input:\nNo input\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()",
        "443": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to create a HTML page that displays a table of contents from the data stored in a database?\n\n### Input:\n\n\n### Output:\nYes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.",
        "444": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.\n\n### Input:\nsalary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000\n\n### Output:\nimport csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total\/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0",
        "445": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a supervised learning algorithm in Python for a classification task using the iris dataset.\n\n### Input:\nNot applicable\n\n### Output:\n# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\n\n# Load and explore the data\ndataset = pd.read_csv('iris.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Preprocess the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Define the model\nclf = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model to the training set\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\n\n# Evaluate the model's performance\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)",
        "446": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the following Python code to check if a number is in the range of 1 to 10 (inclusive).\n\n### Input:\ndef check_number(num):\nif num >= 1 and num <= 10:\n   return True\n\n### Output:\ndef check_number(num):\n  if (num > 0 and num < 11):\n    return True\n  else:\n    return False",
        "447": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to generate the first n elements of the Sierpinski triangle.\n\n### Input:\nn = 6\n\n### Output:\ndef sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)",
        "448": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to count the number of vowels in a string.\n\n### Input:\n\n\n### Output:\ndef count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count",
        "449": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function f() in Python that takes an argument n and prints the multiplication table of n\n\n### Input:\n\n\n### Output:\ndef f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))",
        "450": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to optimize the given objective function.\n\n### Input:\n\n\n### Output:\nfrom scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())",
        "451": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python generator that returns numbers from a given list.\n\n### Input:\n[1,3,5,7,9]\n\n### Output:\ndef list_generator(input_list):\n    for item in input_list:\n        yield item\n\ngen = list_generator([1,3,5,7,9])\nfor item in gen:\n    print(item)",
        "452": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to create an autocomplete system that predicts words based on the input text.\n\n### Input:\n\n\n### Output:\ndef autocomplete(input_text):\n    # Generate the word candidates\n    word_candidates = generate_candidates(input_text)\n    # Filter the word candidates \n    filtered_words = filter_candidates(word_candidates)\n    # Rank the words and return the top 5 \n    sorted_words = rank_words(filtered_words)\n    return sorted_words[:5]",
        "453": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to print the unique elements of a given list.\n\n### Input:\n\n\n### Output:\ndef print_unique(my_list):\n    seen = set()\n    for x in my_list:\n        if x not in seen:\n            print(x)\n            seen.add(x)",
        "454": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that convert a given string to a list of integers.\n\n### Input:\n\n\n### Output:\ndef to_int_list(s):\n    return [int(x) for x in s.split(',')]",
        "455": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic blockchain in Python using only the core modules\n\n### Input:\nNot applicable\n\n### Output:\nimport hashlib\nimport json\n\nclass Blockchain:\n\n def __init__(self):\n self.chain = []\n self.transactions = []\n\n def create_block(self, nonce, previous_hash):\n block = {\n 'block_number': len(self.chain) + 1,\n 'timestamp': self._current_timestamp(),\n 'nonce': nonce,\n 'previous_hash': previous_hash\n }\n self.chain.append(block)\n return block\n\n def _current_timestamp(self):\n return round(time.time() * 1000)\n\n def hash_block(self, block):\n string_object = json.dumps(block, sort_keys=True)\n block_string = string_object.encode()\n raw_hash = hashlib.sha256(block_string)\n hex_hash = raw_hash.hexdigest()\n return hex_hash",
        "456": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all duplicate elements from a list and preserving the original order.\n\n### Input:\n[1, 3, 3, 5, 5, 7]\n\n### Output:\n# Program to remove duplicate elements\n\ndef remove_duplicates(nums):\n new_list = []\n for num in nums:\n if num not in new_list:\n new_list.append(num)\n \nreturn new_list\n\n# Main program\nnums = [1, 3, 3, 5, 5, 7]\ndedup_nums = remove_duplicates(nums)\nprint(dedup_nums) # [1, 3, 5, 7]",
        "457": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a voltage signal with random noise using a Python script.\n\n### Input:\nA signal of frequency 250 Hz and amplitude 1 V.\n\n### Output:\nimport numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",
        "458": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes an array of numbers and returns an array with the greatest and smallest values.\n\n### Input:\n[3, 4, 2, 8, 15, 6]\n\n### Output:\ndef min_max(arr):\n  min_val = min(arr)\n  max_val = max(arr)\n  return [min_val, max_val]\n\nresult = min_max([3, 4, 2, 8, 15, 6])\nprint(result)",
        "459": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code that accepts a string as an input and returns the total number of vowels in the string\n\n### Input:\n\n\n### Output:\ndef count_vowels(string): \n    vowels = \"aeiou\"\n    count = 0\n    for s in string:\n        if s.lower() in vowels:\n            count += 1\n    return count",
        "460": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(11):\n print(i*2)",
        "461": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string and indicates whether it is a palindrome or not.\n\n### Input:\n\"racecar\"\n\n### Output:\ndef is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))",
        "462": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python using scikit-learn for classifying digits in the MNIST dataset.\n\n### Input:\nmnist dataset\n\n### Output:\n# Import the necessary libraries \nfrom sklearn.datasets import fetch_openml\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n#Load the dataset\nmnist = fetch_openml('mnist_784')\n\n# Split into features and labels\nX = mnist.data\ny = mnist.target\n\n# Reshape data to be valid\nX = X.reshape((X.shape[0], -1))\nprint(X.shape, y.shape)\n\n# Create a Logistic Regression classifier \nclf = LogisticRegression()\n\n# Fit the model to the data \nclf.fit(X, y)",
        "463": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to generate an RSA public\/private key pair.\n\n### Input:\nNot applicable\n\n### Output:\nfrom Crypto.PublicKey import RSA\n\ndef generate_key_pair():\n key = RSA.generate(2048)\n pub_key = key.publickey().export_key().decode()\n with open('public.pem', 'w') as file:\n  file.write(pub_key)\n \n priv_key = key.export_key().decode()\n with open('private.pem', 'w') as file:\n  file.write(priv_key)\n\ngenerate_key_pair()",
        "464": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python using Flask that will take user input and generate an HTML page with the input.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        input_text = request.form.get('input_text')\n        return render_template('result.html', input_text=input_text)\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n\/\/ result.html file\n<html>\n <body>\n  <h1>Your Input: <\/h1>\n  <p>{{input_text}}<\/p>\n <\/body>\n<\/html>",
        "465": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic machine learning model in Python that performs binary classification on the given data.\n\n### Input:\n[\n [0.3, 0.2, 0.6],\n [0.3, 0.1, 0.4],\n [0.2, 0.3, 0.4],\n [0.7, 0.4, 0.2],\n [0.5, 0.2, 0.1]\n]\n\n### Output:\nfrom sklearn import linear_model\nfrom sklearn.metrics import accuracy_score\n\nX = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]\ny = [1, 0, 0, 1, 0]\n\nmodel = linear_model.LogisticRegression()\nmodel.fit(X, y)\n\ny_pred = model.predict(X)\naccuracy = accuracy_score(y, y_pred)\n\nprint('Model accuracy:', accuracy)",
        "466": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.\n\n### Input:\n\n\n### Output:\nimport re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative",
        "467": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions, as well as the ability to add additional global variables. The environment can execute Python code and analyze it for variable usage and imports. The environment also includes a stdout object that can be used to capture and display output from executed code.\n\n### Input:\n\n\n### Output:\nimport os\nimport ast\nimport traceback\nimport time\nimport sys\nimport types\nimport builtins\nimport collections\nimport astor\nimport weakref\nfrom .jsonify import jsonify, jsonify_print, jsonify_print_expr\nfrom .datalayer import Analysis, Execution, FileEdit\nfrom .router import send\nfrom . import stdlib\n\ndef now():\n    return int(time.time() * 1000)\n\nclass Environment:\n\n    extra_globals = {}\n\n    active = weakref.WeakSet()\n\n    def __init__(self, path):\n        self.path = path\n        self.globals = {\n            \"print\": jsonify_print,\n            \"print_expr\": jsonify_print_expr,\n            \"jsonify\": jsonify,\n            \"jsonify_print\": jsonify_print,\n            \"listdir\": stdlib.listdir,\n            \"__builtins__\": __builtins__,\n            \"FILES\": stdlib.FilesDict(self.path),\n        }\n        for name in stdlib.builtin_names:\n            self.globals[name] = getattr(stdlib, name)\n        self._cached_analysis = {}\n        self.active.add(self)\n\n    predefined_names = set([\"parsed\"])\n\n    def init_commands(self):\n        \"\"\"Returns a list of commands that represent the existing state of the\n        filesystem\"\"\"\n        for path in os.listdir(self.path):\n            if path.endswith(\".json\"):\n                continue\n            if not os.path.isfile(os.path.join(self.path, path)):\n                continue\n            try:\n                with open(os.path.join(self.path, path), \"r\") as fp:\n                    content = fp.read()\n                yield FileEdit(filename=path, content=content, external_edit=True)\n            except UnicodeDecodeError:\n                pass\n\n    def fixup_globals(self):\n        for name, value in self.extra_globals.items():\n            self.globals.setdefault(name, value)\n\n    def execute(self, filename, content, subexpressions=False):\n        print(\"Executing\", filename, subexpressions)\n        self.fixup_globals()\n        stdout = Stdout()\n        compiled = None\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            RewriteExprToPrint(subexpressions).walk(parsed)\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n            print(\"varsed used:\", sorted(var_inspect.used), \"set:\", sorted(var_inspect.set), \"imported:\", var_inspect.imports)\n            compiled = compile(parsed, filename, 'exec')\n        except:\n            stdout.write(traceback.format_exc())\n\n        def displayhook(value):\n            stdout.write_repr(value)\n\n        orig_displayhook = sys.displayhook\n        sys.displayhook = displayhook\n        orig_stdout = sys.stdout\n        orig_stderr = sys.stderr\n        sys.stdout = stdout\n        sys.stderr = stdout\n        self.globals[\"parsed\"] = parsed\n        self.globals[\"ast\"] = ast\n        globals_before = self.globals.copy()\n        start = time.time()\n        try:\n            try:\n                if compiled:\n                    exec(compiled, self.globals)\n            except:\n                traceback.print_exc()\n        finally:\n            end = time.time()\n            sys.dipslayhook = orig_displayhook\n            sys.stdout = orig_stdout\n            sys.stderr = orig_stderr\n        local_scope = dict(\n            (name, value)\n            for name, value in self.globals.items()\n            if name not in globals_before or globals_before[name] is not value)\n        defines = dict(\n            (key, {\n                \"json\": jsonify(local_scope[key]),\n                \"type\": str(type(local_scope[key])),\n            })\n            for key in local_scope\n            if not isinstance(local_scope[key], types.ModuleType))\n        command = Execution(\n            filename=filename,\n            content=content,\n            emitted=stdout.emitted,\n            defines=defines,\n            start_time=int(start * 1000),\n            end_time=int(end * 1000),\n            exec_time=int((end - start) * 1000),\n            with_subexpressions=subexpressions,\n        )\n        send(command)\n\n    def analyze(self, filename, content):\n        print(\"Analyzing\", filename)\n        properties = {}\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n        except:\n            return\n            properties[\"parse_error\"] = jsonify(traceback.format_exc())\n        else:\n            properties = var_inspect.json\n        if properties != self._cached_analysis.get(filename):\n            self._cached_analysis[filename] = properties\n            send(Analysis(filename=filename, content=content, properties=properties))\n\n\nclass VariableInspector(astor.TreeWalk):\n\n    builtin_names = dir(builtins)\n\n    def init_variables(self):\n        self.used = set()\n        self.set = set()\n        self.imports = set()\n        self.in_target = False\n\n    @property\n    def json(self):\n        used = set(self.used)\n        for key in self.builtin_names:\n            used.discard(key)\n        for key in self.set:\n            used.discard(key)\n        for key in Environment.predefined_names:\n            used.discard(key)\n        return {\n            \"variables_used\": list(used),\n            \"variables_set\": list(self.set),\n            \"imports\": list(self.imports)\n        }\n\n    def pre_arg(self):\n        self.set.add(self.cur_node.arg)\n\n    def pre_Name(self):\n        if self.in_target:\n            # Actually this is a set\n            self.set.add(self.cur_node.id)\n        else:\n            self.used.add(self.cur_node.id)\n\n    def pre_For(self):\n        self.process_assignment(self.cur_node.target)\n\n    def pre_Assign(self):\n        self.process_assignment(self.cur_node.targets)\n\n    def pre_withitem(self):\n        self.process_assignment(self.cur_node.optional_vars)\n\n    def pre_ExceptHandler(self):\n        if self.cur_node.name:\n            self.set.add(self.cur_node.name)\n\n    def pre_alias(self):\n        # Used in imports\n        name = self.cur_node.asname or self.cur_node.name\n        name = name.split(\".\")[0]\n        self.set.add(name)\n        self.imports.add(name)\n\n    def pre_FunctionDef(self):\n        self.set.add(self.cur_node.name)\n\n    def pre_ListComp(self):\n        self.process_assignment(self.cur_node.elt)\n\n    def process_assignment(self, item):\n        if isinstance(item, list):\n            for x in item:\n                self.process_assignment(x)\n            return\n        old_in_target = self.in_target\n        self.in_target = True\n        try:\n            self.walk(item)\n        finally:\n            self.in_target = old_in_target\n\nclass RewriteExprToPrint(astor.TreeWalk):\n\n    expr_node_types = \"\"\"\n    UnaryOp\n    BinOp\n    BoolOp\n    Compare\n    Call\n    IfExp\n    Attribute\n    Subscript\n    ListComp SetComp GeneratorExp DictComp\n    \"\"\".split()\n    # Skipped:\n    #  UAdd USub Not Invert\n    #  Add Sub Mult Div FloorDiv Mod Pow LShift RShift BitOr BitXor BitAnd MatMult\n    #  And Or\n    #  Eq NotEq Lt Gt GtE Is IsNot In NotIn\n    #  Index Slice ExtSlice\n\n    def __init__(self, subexpressions=False):\n        self.subexpressions = subexpressions\n        self.id_counter = 0\n        astor.TreeWalk.__init__(self)\n        if self.subexpressions:\n            for method in self.expr_node_types:\n                self.pre_handlers[method] = self.save_node_name\n                self.post_handlers[method] = self.fixup_subexpressions\n            del self.post_handlers['Module']\n\n    def post_Name(self):\n        if not self.subexpressions:\n            return\n        if isinstance(self.cur_node.ctx, ast.Load):\n            self.replace(self.rewrite_expr(self.cur_node))\n\n    def post_Module(self):\n        node = self.cur_node\n        node.body = [\n            self.rewrite_expr(n) if isinstance(n, ast.Expr) else n\n            for n in node.body]\n\n    def save_node_name(self):\n        self.cur_node.astor_repr = astor.to_source(self.cur_node)\n\n    def fixup_subexpressions(self):\n        new_node = self.rewrite_expr(self.cur_node, self.cur_node.astor_repr)\n        self.replace(new_node)\n\n    def rewrite_expr(self, node, expr_string=None):\n        if expr_string is None:\n            expr_string = astor.to_source(node)\n        node_string = ast.Str(s=expr_string)\n        self.id_counter += 1\n        if isinstance(node, ast.Expr):\n            new_node = ast.Expr(\n                ast.Call(\n                    func=ast.Name(id='print_expr', ctx=ast.Load()),\n                    args=[node_string, node.value, ast.Num(n=self.id_counter)],\n                    keywords=[],\n                    starargs=None,\n                )\n            )\n            new_node.is_print_expr = True\n        else:\n            new_node = ast.Call(\n                func=ast.Name(id='print_expr', ctx=ast.Load()),\n                args=[node_string, node, ast.Num(n=self.id_counter)],\n                keywords=[],\n                starargs=None,\n            )\n            new_node.is_print_expr = True\n        ast.fix_missing_locations(new_node)\n        return new_node\n\n\nclass Stdout:\n\n    total_exprs_limit = 100\n    expr_limit = 10\n\n    def __init__(self):\n        self.emitted = []\n        self.total_exprs_printed = 0\n        self.exprs_printed = collections.Counter()\n\n    def write(self, content):\n        self.emitted.append({\n            \"type\": \"print\",\n            \"time\": now(),\n            \"parts\": [{\"type\": \"str\", \"str\": content}],\n        })\n\n    def writejson(self, json):\n        assert json.get(\"type\"), \"JSON objects must have a type\"\n        json.setdefault(\"time\", now())\n        self.emitted.append(json)\n\n    def write_repr(self, o):\n        self.emitted.append(jsonify(o))\n\n    def flush(self):\n        pass\n\ndef add_global(name, value):\n    Environment.extra_globals[name] = value\n    Environment.predefined_names.add(name)\n    for env in Environment.active:\n        env.globals.setdefault(name, value)\n",
        "468": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to modify the case of the string\n\n### Input:\nA String with the text: \"Hello World\"\n\n### Output:\nclass StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())",
        "469": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to reverse the order of words in a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_words(str):\n    return \" \".join(str.split()[::-1])",
        "470": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace a given string with another string.\n\n### Input:\nsentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\n### Output:\nsentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nnew_sentence = sentence.replace(old_word, new_word)\n\nprint(\"The new sentence is: '{}'\".format(new_sentence))",
        "471": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to merge two lists of integers into one sorted list without using the in-built sort function.\n\n### Input:\nlist1 = [3, 5, 9, 1, 8];\nlist2 = [4, 11, 7, 2];\n\n### Output:\ndef merge_sort(list1, list2): \n    merged_list = list1 + list2 \n    for i in range(len(merged_list)): \n        min_idx = i           \n        for j in range(i+1, len(merged_list)): \n            if merged_list[min_idx] > merged_list[j]: \n                min_idx = j \n        merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] \n    return merged_list \n  \nlist1 = [3, 5, 9, 1, 8] \nlist2 = [4, 11, 7, 2]\n  \nprint(merge_sort(list1, list2))",
        "472": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary with three keys named \"Name\", \"Address\" and \"Phone\".\n\n### Input:\nName = 'John';\nAddress = '212 Smith Street';\nPhone = '732-123-4567';\n\n### Output:\ninfo = {\n 'Name':Name,\n 'Address':Address,\n 'Phone':Phone\n}",
        "473": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a chatbot in Python that can provide customer support in a restaurant.\n\n### Input:\nrandom_user_question.txt\nWhat meals do you serve?\n\n### Output:\nimport random\n\n# list of possible answers\npossible_responses = [\n 'We serve a variety of dishes - from salads to pizzas to steaks!',\n 'Check out our menu for a full list of options',\n 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?',\n 'We have a great selection of meals! What kind of dish are you looking for?',\n 'We have a unique selection of meals - have you checked out our menu?'\n]\n\n# read the user's question\nwith open('random_user_question.txt') as user_question:\n    question = user_question.read()\n\n# choose a random response\nresponse = random.choice(possible_responses)\n\n# display the response to the user\nprint(response)",
        "474": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to simulate a simple ATM machine.\n\n### Input:\n\n\n### Output:\n# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)",
        "475": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which will take in a list of strings, and print out the longest string in the list.\n\n### Input:\n['foo', 'test', 'longstring', 'bar']\n\n### Output:\ndef longest_string(str_list): \n    longest_str = '' \n    for str in str_list: \n        if len(str) > len(longest_str): \n            longest_str = str \n  \n    return longest_str \n\nstring_list = ['foo', 'test', 'longstring', 'bar'] \nlong_string = longest_string(string_list) \n\nprint(long_string)",
        "476": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that will find the smallest number in a list of numbers.\n\n### Input:\n[5, 4, 12, 17, 9]\n\n### Output:\ndef find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))",
        "477": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to compute the moving average of time-series data points.\n\n### Input:\nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n### Output:\ndef moving_average(data_points, window):\n     moving_average = []\n     for index in range(len(data_points)):\n       start = 0 if index-window+1 < 0 else index-window+1\n       window_data = data_points[start:index+1]\n       average = sum(window_data)\/len(window_data)\n       moving_average.append(average)\n \n     return moving_average\n \nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\nmoving_average = moving_average(time_series, window)\nprint(moving_average)",
        "478": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter an array by a given criteria.\n\n### Input:\ncriteria = x % 5 == 0\narray = [1, 2, 5, 10, 15, 20, 25, 30]\n\n### Output:\n# Function to filter an array by a given criteria\ndef filter_array(array, criteria):\n # Create an empty list\n filtered_array = []\n # Iterate through the array\n for value in array:\n  # Check if it matches the criteria\n  if criteria(value):\n   # If it matches, add it to the list\n   filtered_array.append(value)\n\n # Return the filtered array\n return filtered_array\n\n# Input criteria\ndef criteria(x):\n return x % 5 == 0\n\nresult = filter_array(array, criteria)\nprint(result) # Outputs [5, 10, 15, 20, 25, 30]",
        "479": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find the maximum number from a list of non-negative integers.\n\n### Input:\nlist = [1, 3, 12, 5, 8, 10]\n\n### Output:\ndef find_max(list): \n  max_num = 0\n  for i in list: \n    if i > max_num: \n      max_num = i\n  \n  return max_num\n\nlist = [1, 3, 12, 5, 8, 10]\nmax_num = find_max(list)\nprint(\"Maximum number is:\", max_num)",
        "480": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of strings and returns the concatenation of all the elements with a separator\/delimiter.\n\n### Input:\nstrings = [\"Sample\",\"Text\",\"Hello\"]\n\n### Output:\ndef concatenate_strings(strings, separator):\n return separator.join(strings)",
        "481": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a code in Python to find the union of two lists.\n\n### Input:\nList 1: [1, 2, 3, 4, 5]\nList 2: [3, 4, 5, 6, 7]\n\n### Output:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ndef unionList(list1, list2):\n    return set(list1 + list2)\n\nresult = unionList(list1, list2)\nprint(result)",
        "482": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python dictionary containing student names and marks as key-value pairs.\n\n### Input:\n\n\n### Output:\nstudent_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}",
        "483": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet for a simple linear regression model in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()",
        "484": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to implement a linked list using classes.\n\n### Input:\n\n\n### Output:\nclass Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()",
        "485": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an XML document using Python which contains the following data.\n\n### Input:\nItem1, Item2, Item3\n\n### Output:\nimport xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')",
        "486": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program generating numbers\n\n### Input:\n\n\n### Output:\ndef generate_numbers():\n    numbers = []\n    for i in range(10):\n        numbers.append(random.randint(0,10))\n    return numbers",
        "487": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this sql query into a python program\n\n### Input:\nSELECT * FROM orders\nWHERE YEAR(order_date) = 2020\n\n### Output:\nimport datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)",
        "488": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation on the data, applies a threshold to remove small values, and generates three plots: a histogram, an interpolated image, and a contour plot. To use this code, make sure to have the necessary files and libraries in the correct paths, and adjust the parameters as needed for your data.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n\nimport os, sys\nprint(\"CWD: \" + os.getcwd() )\n\n# Load configuration file before pyplot\nconfig_path = os.path.abspath('..\/matplotlib\/')\nsys.path.append(config_path)\nimport configuration as config\n\n# Library path\nlib_path = os.path.abspath('..\/..\/lib')\nsys.path.append(lib_path)\nimport framemanager_python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.interpolate\n\n\n# Color map\n# Define \"bds_highcontrast\" color map by Britton Smith <brittonsmith@gmail.com> from http:\/\/yt-project.org\/ \ncdict = {'red':   ((0.0, 80\/256., 80\/256.),\n                   (0.2, 0.0, 0.0),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 256\/256., 256\/256.),\n                   (0.95, 256\/256., 256\/256.),\n                   (1.0, 150\/256., 150\/256.)),\n         'green': ((0.0, 0\/256., 0\/256.),\n                   (0.2, 0\/256., 0\/256.),\n                   (0.4, 130\/256., 130\/256.),\n                   (0.6, 256\/256., 256\/256.),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 80\/256., 80\/256.),\n                   (0.2, 220\/256., 220\/256.),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 20\/256., 20\/256.),\n                   (1.0, 0.0, 0.0))}\n\nplt.register_cmap(name='bds_highcontrast', data=cdict) \n\n# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1\n#row i:    x  y0  y1\n#               \/\n#              \/\n#row i+1:  x  y0  y1\ncdict = {'red':   ((0.0, 0.9, 0.9),\n                   (1.0, 0.9, 0.9)),\n         'green': ((0.0, 0.9, 0.9),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 0.0, 0.0),\n                   (1.0, 0.0, 0.0))}\nplt.register_cmap(name='YELLOW_RED', data=cdict) \n#cmap=plt.get_cmap('YELLOW_RED')\n#cmap=plt.get_cmap('autumn')\n#cmap=plt.get_cmap('gist_heat')\n#cmap=plt.get_cmap('Spectral_r')\n#cmap.set_under([0.0, 0.0, 0.0])\n\n\n\n# Load profile\nprofileName = os.path.abspath(\"foam_ball_short.dsa\")\nframeID = 230\n\nframeManager = framemanager_python.FrameManagerWrapper()\nframeManager.load_profile(profileName);\nnumTSFrames = frameManager.get_tsframe_count();\n\nmatrixID = 1\n\n# Load single frame\ntsframe = np.copy( frameManager.get_tsframe(frameID, matrixID) );\n\ncols = tsframe.shape[1]\nrows = tsframe.shape[0]\n\n# Add padding on border\npadding = 2\nv_padding = np.empty((padding, cols)); v_padding.fill(-50)\nh_padding = np.empty((rows+2*padding, padding)); h_padding.fill(-50)\nzs = np.vstack([v_padding, tsframe]) # Top\nzs = np.vstack([zs, v_padding]) # Bottom\nzs = np.hstack([h_padding, zs]) # Left\nzs = np.hstack([zs, h_padding]) # Right\n\n# Update matrix size with padding\ncols = zs.shape[1]\nrows = zs.shape[0]\n\n# Coordinates of sampled data points\nxs = np.arange(0, cols, 1)\nys = np.arange(0, rows, 1)\n\n# Coordinates of interpolation points\nscaleFactor = 10;\nxi = np.linspace(xs.min(), xs.max(), cols*scaleFactor)\nyi = np.linspace(ys.min(), ys.max(), rows*scaleFactor)\n\n\n\n\n\n#------------------------------------------------------\n# Interpolate with cubic splines\nspline = scipy.interpolate.RectBivariateSpline(ys, xs, zs, kx=3, ky=3, s=0)\n\n# Evaluate splines\nzi = spline(yi, xi)\n\n#------------------------------------------------------\n\n\n'''\n#------------------------------------------------------\n# Polynomial interpolation: \u2018linear\u2019, \u2018nearest\u2019, \u2018cubic\u2019\ncoordinates = [(y, x) for y in ys for x in xs]\nzs_flattened = np.ravel(zs, order='C')\ncoordinates_interpolated = [(y, x) for y in yi for x in xi]\n\n# Interpolate with griddata\nzi_flattened= scipy.interpolate.griddata(coordinates, zs_flattened, coordinates_interpolated, method='cubic')\n\n# Reshape flattened array to 2D\nzi = zi_flattened.reshape((rows*scaleFactor, cols*scaleFactor))\n#------------------------------------------------------\n'''\n\n\n\n\n#------------------------------------------------------\n# Old API\n# Set up a regular grid of sampled data points\n#ys, xs = np.meshgrid(xs, ys)\n\n# Set up a regular grid of interpolated points\n#yi, xi = np.meshgrid(xi, yi)\n\n# Interpolate\n#tck = scipy.interpolate.bisplrep(xs2, ys2, zs, kx=3, ky=3, s=0)\n\n# Evaluate splines\n#zi = scipy.interpolate.bisplev(xi2[:,0], yi2[0,:], tck)\n#------------------------------------------------------\n\n\n\n\n# Apply threshold to level out small values (interpolation ripples)\nmin_threshold = 25\nzi[zi < min_threshold ] = 0 \n\n\n\n#########################################\n# Plotting\n#########################################\nfig, ax = plt.subplots()\n\n\n############\n# Histogram\n############\nplt.hist(zi.flatten(), 128, range=(min_threshold, zi.max()), fc='k', ec='k')\nplt.savefig(\"histogram.pdf\", format='pdf')\nplt.close() \n\n########################\n# Interpolated image\n########################\nfig, ax = plt.subplots()\n\n# Interpolated image\n#cmap=plt.get_cmap('gray')\ncmap=plt.get_cmap('bds_highcontrast')\ncax = ax.imshow(zi, cmap=cmap, vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()])\n\n# Colorbar with countour levels\ncbar = fig.colorbar(cax)\ncbar.set_label('Raw sensor value', rotation=90)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\nax.invert_yaxis()\nax.xaxis.tick_top()\nplt.axis('off')\n\nplt.savefig(\"interpolation.pdf\", format='pdf')\nplt.close() \n\n\n\n############\n# Contour\n############\nfig, ax = plt.subplots()\n\n# Nearest-Neighbor Image\ncax = ax.imshow(zs, interpolation='nearest', cmap=plt.get_cmap('gray'), vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) \n\n#------------------------------------------------------\n# Contour lines: contour()\n#------------------------------------------------------\ncountour_threshold = 50\nlevels = np.linspace(countour_threshold, zs.max(), 10)\n#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(0.0, 0.0, 0.0)], origin='upper') # black contour\ncontour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(1.0, 0.0, 0.0)], origin='upper') # Red contour\n#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') # Colormap\n\n#plt.clabel(contour, inline=True, fontsize=9)\n\n# Colorbar with countour levels\ncbar = fig.colorbar(cax)\ncbar.add_lines(contour)\ncbar.set_label('Raw sensor value', rotation=90)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\n'''\n#------------------------------------------------------\n# Filled contours: contourf()\n#------------------------------------------------------\n\n# Background image\nbackground = np.empty((rows, cols)); background.fill(0)\ncax = ax.imshow(background, cmap=plt.get_cmap('gray'), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()] )\n\n# Filled contour\ncountour_threshold = 100 # Ignore \"ripples\" from spline extrapolation\nmax_threshold = 0 # Boost the upper limit to avoid truncation error\nlevels = np.linspace(countour_threshold, zs.max(), num=10, endpoint=True)\n\n# Levels correspond to midpoint of layers:\n# Extend level range to enlarge top layer (avoid ugly hole)\nlevels[-1] = levels[-1] + (levels[-1] - levels[-2])\/2\n\ncontour = ax.contourf(xi, yi, zi, levels=levels, cmap=plt.get_cmap('bds_highcontrast'), origin='upper')      \n\ncbar = fig.colorbar(contour, format='%.0f')\ncbar.set_label('mV', rotation=0)\ncbar.solids.set_edgecolor(\"face\") # set the color of the lines\n\n# Restore old levels\n#levels[-1] = zs.max() \n#cbar.set_ticks(levels)\n#------------------------------------------------------\n'''\n\n\nax.invert_yaxis()\nax.xaxis.tick_top()\nplt.axis('off')\n\nplt.savefig(\"contour.pdf\", format='pdf')\nplt.show() \n\n\n\n \n",
        "489": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate a set of random numbers in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_randoms(n):\n  # generate a set of n random numbers\n  rands = []\n  for _ in range(n):\n    rands.append(random.randint(1,100))\n  return rands\n\ngenerate_randoms(10)",
        "490": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to check if a given string contains any numbers\n\n### Input:\n\n\n### Output:\ndef string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None",
        "491": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python for storing movie information including the name, year of release, genre and rating.\n\n### Input:\n\n\n### Output:\nclass Movie:\n    def __init__(self, name, release_year, genre, rating):\n        self.name = name\n        self.release_year = release_year\n        self.genre = genre\n        self.rating = rating\n\nmovie = Movie(\"Interstellar\", 2014, \"Sci-Fi\", 8.4)\nprint(movie.name, movie.release_year, movie.genre, movie.rating)",
        "492": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input string, write a Python program to count the occurrence of each character in the string.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef char_occurrences(a_string):\n char_count = {}\n for char in a_string:\n if char in char_count:\n char_count[char] += 1\n else:\n char_count[char] = 1\n return char_count\n\nstring = \"Hello, World!\"\nprint(char_occurrences(string))\n\n# Output\n# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",
        "493": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n length = 8\n chars = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(chars) for i in range(length))\n \n return password\n\npassword = generate_password()\nprint(password)",
        "494": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate an even number between 10 and 200 that is divisible by 5.\n\n### Input:\nNot applicable\n\n### Output:\ndef generate_even_number():\n# Generate a random number between 10 and 200\n num = random.randint(10, 200)\n# Check if the number is even\n if num % 2 == 0:\n# Check if the number is divisible by 5\n  if num % 5 == 0:\n   return num\n# If number not divisible by 5, increment number\n  else:\n   return generate_even_number(num+1)\n# If number not even, increment number\n else:\n   return generate_even_number(num+1)",
        "495": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find the closest value to a given number in a given array.\n\n### Input:\n[5, 4, 8, 7], 5\n\n### Output:\ndef closest_num(arr, num):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n \n    if arr[right] <= num:\n        return arr[right]\n    elif arr[left] >= num:\n        return arr[left]\n    while right-left > 1:\n        mid = (right+left)\/\/2\n        if arr[mid] == num:\n            return arr[mid]\n        elif arr[mid] > num:\n            right = mid\n        else:\n            left = mid\n    return sorted([arr[right], arr[left]])[0]\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest = closest_num(arr, num)\nprint(closest)",
        "496": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to store and print the multiplication table of a given number.\n\n### Input:\nnum = 5\n\n### Output:\n# Function to print the multiplication table\ndef print_multiplication_table(num):\n    # Iterate over numbers from 1 to 10\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(num, i, num*i))\n\nprint_multiplication_table(5)",
        "497": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFound and fix any bugs with the following python code.\n\n### Input:\ndef sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum\n\n### Output:\ndef sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list",
        "498": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes two parameters: \u2018x\u2019 and \u2018y\u2019 and prints the output as \u201cx is greater than y\u201d when x is greater than y, otherwise \u201cy is greater than or equal to x\u201d.\n\n### Input:\nNot applicable\n\n### Output:\ndef print_comparison(x, y):\n if x > y:\n print(f'{x} is greater than {y}')\n else:\n print(f'{y} is greater than or equal to {x}')",
        "499": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.\n\n### Input:\n[2, 3, 4]\n\n### Output:\ndef sum_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total\n\narr = [2, 3, 4]\n\ntotal = sum_squares(arr)\nprint(total) # 29",
        "500": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for finding out the factorial of a given number.\n\n### Input:\n7\n\n### Output:\ndef factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact",
        "501": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class in Python which implements two methods to add two numbers.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n def __init__(self):\n   pass\n    \n def add_two_numbers(self, a, b):\n   return a + b\n\n def add(self, a, b, c):\n   return a + b + c\n\ncalculator = Calculator()\nresult = calculator.add_two_numbers(1, 2)\nprint(result)",
        "502": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.\n\n### Input:\n6\n\n### Output:\nnum = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")",
        "503": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI Tic-Tac-Toe game using Python.\n\n### Input:\nNot appliccable\n\n### Output:\nimport random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame()",
        "504": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of series 1 + \u00bd + \u2153 + ... + 1\/n.\n\n### Input:\nn = 5\n\n### Output:\ndef seriesSum(n):\n    # set the initial sum to 0\n    total = 0\n\n    # loop over the range\n    for i in range(1, n+1):\n        total += 1 \/ i\n\n    return total\n\nprint(seriesSum(5))",
        "505": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a decision tree classifier in Python to predict a fourth feature from three other features.\n\n### Input:\nFeatures: A, B, C\n\n### Output:\nimport pandas as pd\n\n#importing the dataset \ndataset = pd.read_csv('data.csv')\n\n#splitting the dataset into features and labels \nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, 3].values\n\n#importing DecisionTreeClassifier \nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier(criterion = 'entropy')\n\n#fitting the classifier to the dataset\nclassifier.fit(X,y)",
        "506": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a string argument and returns the characters of the string in reverse order.\n\n### Input:\n\n\n### Output:\ndef reverse_string(input_string):\n    reversed_string = ''\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string",
        "507": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOnce the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.\n\n### Input:\n\n\n### Output:\ndef check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "508": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Program to print out the first n prime numbers.\n\n### Input:\n\n\n### Output:\ndef sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    prime_numbers = []\n    for i in range(len(primes)):\n        if primes[i]:\n            prime_numbers.append(i) \n    return prime_numbers",
        "509": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes a dictionary as an argument and returns an inverted dictionary.\n\n### Input:\nNot applicable\n\n### Output:\ndef invert_dictionary(d):\n inverted_d = {}\n\n for key, value in d.items():\n if value not in inverted_d:\n inverted_d[value] = []\n inverted_d[value].append(key)\n\n return inverted_d",
        "510": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to implement Gradient Descent Algorithm.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1\/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2\/n)*sum(x*(y-y_predicted))\n        bd = -(2\/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr",
        "511": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBinary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.\n\n### Input:\nnums = [3, 4, 5, 6, 7, 8, 9]\nval = 8\n\n### Output:\ndef binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1",
        "512": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a nested loop in Python to print out the following elements in a new line.\n\n### Input:\n[1,2,3], [4,5,6], [7,8,9]\n\n### Output:\nfor x in [1,2,3]:\n  for y in [4,5,6]:\n      for z in [7,8,9]:\n          print(x,y,z)",
        "513": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning program in Python that will classify text data into 3 different categories.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))",
        "514": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a list and prints a dictionary with the elements and the product of each element.\n\n### Input:\nlist = [7, 8, 5]\n\n### Output:\ndef product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5]))",
        "515": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print the Fibonacci series.\n\n### Input:\n\n\n### Output:\ndef printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next",
        "516": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the longest common substring in two strings.\n\n### Input:\n\n\n### Output:\ndef longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring",
        "517": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to shuffle a list of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nimport random\n\ndef shuffle_list(nums):\n random.shuffle(nums)\n return nums\n\nshuffled_list = shuffle_list([1, 2, 3, 4, 5])\nprint(shuffled_list) #[3, 5, 2, 4, 1]",
        "518": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat Python code can you write that takes two strings and returns whether they are anagrams?\n\n### Input:\nstr1 = \"abcd\"\nstr2 = \"cbda\"\n\n### Output:\ndef is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True",
        "519": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that computes the sum of two variables and stores the result in a third variable.\n\n### Input:\nx = 5\ny = 8\n\n### Output:\n# compute the sum of x and y\nresult = x + y\n\n# store the result in a third variable\nz = result\n\n#print the result\nprint(z) # Output: 13",
        "520": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of unique random numbers in the range 0-10 using Python.\n\n### Input:\n\n\n### Output:\nimport random\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers)",
        "521": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to search for a given word in a large document. The function should return the line number of the document where the word is found.\n\n### Input:\nlargeDocument = 'This is the first line of the document.\\nThis is the second line of the document.\\nThis is the third line of the document.';\nword = 'second'\n\n### Output:\ndef findWord(document, word):\n lines = document.split('\\n')\n line_number = -1\n for i, line in enumerate(lines):\n if word in line:\n line_number = (i + 1)\n break\n return line_number\n\nfindWord(largeDocument, word) # 2",
        "522": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a script in Python to scrape photos and captions from a given website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https:\/\/example.com\/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')",
        "523": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that prints \"Hello World!\" five times.\n\n### Input:\n\n\n### Output:\nfor x in range(5):\n    print(\"Hello World!\")",
        "524": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the common elements between two given lists.\n\n### Input:\n[1, 2, 3], [2, 3, 4]\n\n### Output:\ndef find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common",
        "525": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.\n\n### Input:\n\n\n### Output:\nmy_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]",
        "526": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to create a linked list in python nodes.\n\n### Input:\n\n\n### Output:\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None",
        "527": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('\/getTemp', methods=['POST'])\ndef get_temp():\n city = request.json['city']\n url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID=xxxxxx'\n r = requests.get(url.format(city))\n weather = json.loads(r.text)\n return {'temperature': weather['main']['temp']}\n\nif name == 'main':\n app.run(debug=True)",
        "528": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the following Python program to reduce its time complexity.\n\n### Input:\ndef find_max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)): \n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n### Output:\ndef find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum",
        "529": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to format a given piece of text (input) with different options for font-style, size, and color.\n\n### Input:\nGiven text:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.\n\n### Output:\ndef format_text(text, font=\"Times New Roman\", size='14px', color='#000000'):\n  return \"<span style='font-family: {} font-size: {} color: {}'>{}<\/span>\".format(font, size, color, text)\n\nprint(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.'))",
        "530": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.\n\n### Input:\nnums = [1, 2, 3, 4, 5]\n\n### Output:\ndef square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]",
        "531": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that takes two numbers as input, and generates a random number between them.\n\n### Input:\n2 and 5\n\n### Output:\ndef random_number_generator(min, max):\n    return random.randint(min, max)",
        "532": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to demonstrate a sorting algorithm.\n\n### Input:\n\n\n### Output:\ndef sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
        "533": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to delete a certain element from a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None",
        "534": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine the total sum of all elements of a list.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef calculate_sum_of_list(arr):\n    total_sum = 0\n    for item in arr:\n        total_sum += item\n    return total_sum\n\nlist1 = [1, 2, 3, 4]\nsum_of_list = calculate_sum_of_list(list1)\nprint(sum_of_list)",
        "535": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to compete in a Kaggle competition.\n\n### Input:\nNot applicable\n\n### Output:\n# Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ...",
        "536": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?\n\n### Input:\nlst = [1,3,5,7,9]\nk = 10\n\n### Output:\ndef find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7]",
        "537": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic chatbot in Python for responding to casual inquiries.\n\n### Input:\n\n\n### Output:\nimport random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))",
        "538": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the top 5 most frequent words in a given sentence.\n\n### Input:\n\"Python is an interpreted, high-level, general-purpose programming language.\"\n\n### Output:\nimport collections\n \nsentence = \"Python is an interpreted, high-level, general-purpose programming language.\"\n \n# Split sentence into words\nwords = sentence.split()\n \n# Set the counter for words\ncounter = collections.Counter(words)\n \n# Find top 5 most frequent words\nresult = counter.most_common(5)\nprint(result)",
        "539": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program in Python to print a staircase of height 'n', where n is an integer.\n\n### Input:\n5\n\n### Output:\ndef staircase(n): \n    for i in range(0, n): \n        for j in range(0, n - i - 1): \n            print(end=\" \") \n        for j in range(0, i + 1): \n            print(\"#\", end=\"\") \n        print(\"\\r\") \n  \n# Driver code \nn = 5\nstaircase(n)",
        "540": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite python code to return the maximum number in a list.\n\n### Input:\nnums = [1, 15, 20, 6]\n\n### Output:\ndef find_max(nums):\n    '''Returns the maximum number in the list.'''\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    \n    return max_val",
        "541": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to identify the characters in a given alphabet\n\n### Input:\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n### Output:\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef identify_characters(alphabet):\n    char_list = []\n    for c in alphabet:\n        char_list.append(c)\n    return char_list",
        "542": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Flask application for efficient performance.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here",
        "543": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to take a list of integers and return the sum of the even numbers in the list.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef sum_even_numbers(numbers):\n \n result = 0\n \n for number in numbers:\n  if number % 2 == 0:\n   result += number\n \n return result\n \nprint(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "544": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the maximum number from a given list.\n\n### Input:\n[5, 4, 2, 7, 12]\n\n### Output:\ndef max_num(nums):\n    max = nums[0]\n    for num in nums[1:]:\n        if num > max:\n            max = num\n    return max\n\nnums = [5, 4, 2, 7, 12]\nprint(max_num(nums))",
        "545": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of dictionaries by a key in each dictionary.\n\n### Input:\nmy_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}]\n\n### Output:\ndef sort_list_of_dicts_by_key(my_list, key):\n    return sorted(my_list, key=lambda k: k[key])",
        "546": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all occurrences of the given element in a given array.\n\n### Input:\narr = [2, 4, 5, 7, 4, 2], element = 4\n\n### Output:\ndef remove_element(arr, element):\n    arr = [x for x in arr if x != element]\n    return arr",
        "547": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to optimize a given multivariate function.\n\n### Input:\n\n\n### Output:\nimport scipy.optimize as opt \n  \ndef optimize_function(function, initial_guess): \n    result = opt.minimize(function, initial_guess) \n    return result.x",
        "548": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python class to identify if a provided number is prime or composite.\n\n### Input:\n10\n\n### Output:\nclass PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        for i in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\nif obj.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\")",
        "549": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to format a two-dimensional array as a table.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef printTable(array):\n    # find the longest string in each of the inner lists\n    # so we can format the output\n    col_width = [max(len(str(x)) for x in col) for col in array]\n    for row in array:\n        print(\"  \".join(str(x).ljust(col_width[i]) for i, x in enumerate(row)))\n\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprintTable(array)\n\n# Output: \n# 1   2   3\n# 4   5   6\n# 7   8   9",
        "550": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to check whether a string contains only digits.\n\n### Input:\n\"0123\"\n\n### Output:\ndef is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n\nprint(is_digit_only(\"0123\"))",
        "551": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to remove all the duplicates from a linked list in Python.\n\n### Input:\nlist_nodes = [7, 14, 28, 28, 28, 35, 49]\n\n### Output:\nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    def remove_duplicates(self, list_nodes):\n        curr_node= self.head \n        new_list=[]\n        while curr_node != None: \n            if curr_node.data not in new_list: \n                new_list.append(curr_node.data) \n            curr_node = curr_node.next\n                \n        # creating a linked list from the unique elements of list_nodes  \n        self.head=None\n        for i in new_list:\n            self.insert_node(i)\n    \n    def insert_node(self, data): \n    # Create a new node \n        new_node = Node(data) \n        # Check if list is empty\n        if self.head is None: \n            self.head = new_node \n            return\n        # Otherwise, traverse to the end of list before \n        # inserting the new Node \n        last = self.head \n        while (last.next): \n            last = last.next\n        last.next =  new_node",
        "552": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers.\n\n### Input:\n\n\n### Output:\n# Function to calculate the maximum, minimum, and average values\ndef calculate_metrics(list):\n    # Calculate the maximum value\n    maximum = max(list)\n    \n    # Calculate the minimum value\n    minimum = min(list)\n   \n    # Calculate the average\n    n = len(list)\n    total = 0\n    for num in list:\n        total += num\n    average = total\/n\n    \n    return maximum, minimum, average\n\n# Main Program \nlist = [3, 4, 5, 6, 21, 8]\n\nmaximum, minimum, average = calculate_metrics(list)\n\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)\nprint(\"Average value:\", average)",
        "553": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Deep Learning Program in Python to Predict Stock Price.\n\n### Input:\n\n\n### Output:\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))",
        "554": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that performs an edit distance calculation using dynamic programming.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n]",
        "555": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in python that calculates the sum of squares of all the numbers from 1 to N.\n\n### Input:\nN = 10\n\n### Output:\ndef sum_of_squares(n):\n    result = 0\n    for i in range(n+1):\n        result += i**2\n    return result",
        "556": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a string and capitalizes the first character of each word.\n\n### Input:\n\"this is an example\"\n\n### Output:\ndef capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\ncapitalized_string = capitalize_string(\"this is an example\")\nprint(capitalized_string)",
        "557": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program which takes in input the size of a jagged array and prints it(no values).\n\n### Input:\n<noInpit>\n\n### Output:\ndef print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size)",
        "558": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('\/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()",
        "559": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for constructing a decision tree algorithm for predicting the value of a stock.\n\n### Input:\nA csv file containing stock data from the last 3 months.\n\n### Output:\n# Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv(\"stockdata.csv\")\n\n# Split data\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train\/Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclf.fit(X_train, y_train)\n\n# Model Accuracy\ny_pred = clf.predict(X_test)\nprint('Model accuracy: ',clf.score(X_test, y_test))",
        "560": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class with the given attributes and functions.\n\n### Input:\nAttributes: name (string), age (integer), email address (string)\nFunction: toString() - return a string with the formatted attributes\n\n### Output:\nclass Person:\n    \n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def toString(self):\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\"",
        "561": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you create a class in Python to store and process data in a Car object?\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, color, mileage):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.mileage = mileage\n\n    def accelerate(self, speed):\n        self.speed = speed\n\n    def decelerate(self, speed):\n        self.speed = speed",
        "562": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the Fibonacci series up to n numbers where n is a user input.\n\n### Input:\nUser input n = 10\n\n### Output:\n# Python Program to print the Fibonacci series up to n numbers\n\nn = int(input(\"Enter the value of 'n': \"))\n\n# first two numbers\na = 0\nb = 1\n\nprint(\"Fibonacci Series:\") \nprint(a, b, end=\" \") \n  \nfor i in range(2,n):\n               \n    c = a + b\n    a = b\n    b = c\n    print(c, end = \" \")\n    \nprint()",
        "563": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to return true if the following string contains the word \"Hello\".\n\n### Input:\ndef check_hello(s):\n\n### Output:\ndef check_hello(s):\n    return 'Hello' in s",
        "564": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to find the index of the largest number.\n\n### Input:\n[5, 10, 20, 6, 8]\n\n### Output:\nnums = [5, 10, 20, 6, 8]\nmax_num = max(nums)\nmax_index = nums.index(max_num)\n\nprint(max_index)",
        "565": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to handle an array with the following rules:\nIf the element is divisible by 3, the element should be replaced with \"Fizz\".\nIf the element is divisible by 5, the element should be replaced with \"Buzz\".\nIf the element is divisible by 3 and 5, the element should be replaced with \"FizzBuzz\".\n\n### Input:\narr = [2, 3, 4, 5, 6, 15]\n\n### Output:\ndef fizz_buzz(arr):\n    new_arr = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            new_arr.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            new_arr.append(\"Fizz\")\n        elif element % 5 == 0:\n            new_arr.append(\"Buzz\")\n        else:\n            new_arr.append(element)\n    return new_arr\n\nprint(fizz_buzz([2, 3, 4, 5, 6, 15]))",
        "566": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two strings as arguments and returns the longest common sub-string between them.\n\n### Input:\nstr_1 = \"abcdabcdabde\"\nstr_2 = \"defabcdabcd\"\n\n### Output:\ndef longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub)",
        "567": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to reverse a given string.\n\n### Input:\nPython\n\n### Output:\ndef reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string))",
        "568": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to calculate the minimum and maximum values in an array\n\n### Input:\n\n\n### Output:\ndef min_max(array):\n    min = array[0]\n    max = array[0]\n\n    for val in array[1:]:\n        if val > max:\n            max = val\n        if val < min:\n            min = val\n    return min, max",
        "569": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings.\n\n### Input:\nlist = [\"this\", \"is\", \"an\", \"example\"]\n\n### Output:\ndef convertToCamelCase(list):\n    camelCaseList = []\n\n    for string in list:\n        string = string.capitalize()\n        camelCaseList.append(string)\n\n    return ''.join(camelCaseList)",
        "570": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm that finds the longest contiguous sequence of increasing numbers within an array.\n\n### Input:\n[3, 2, 1, 4, 5, 6, 7, 8]\n\n### Output:\ndef find_longest_increasing_sequence(arr):\n longest_start = 0\n longest_length = 0\n\n current_start = 0\n current_length = 0\n\n for i in range(1, len(arr)):\n prev_val = arr[i - 1]\n curr_val = arr[i]\n\n if curr_val > prev_val:\n current_length += 1\n else:\n current_start = i\n current_length = 1\n\n if current_length > longest_length:\n longest_start = current_start\n longest_length = current_length\n\n longest_sequence = arr[longest_start:longest_start + longest_length]\n return longest_sequence\n\narr = [3, 2, 1, 4, 5, 6, 7, 8]\nlongest_seq = find_longest_increasing_sequence(arr)\nprint(longest_seq) \/\/ Output: [4, 5, 6, 7, 8]",
        "571": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to parse a JSON data structure.\n\n### Input:\ndata = {\n \"name\": \"John\",\n \"age\": 18,\n \"occupation\": \"Software Engineer\"\n}\n\n### Output:\nimport json\n\ndef parse_json(data):\n data = json.loads(data)\n return data['name'], data['age'], data['occupation']\n\nname, age, occupation = parse_json(data)\nprint(name, age, occupation)\n# Output: John 18 Software Engineer",
        "572": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an improvement for the following python code for finding the sum of elements of a list\n\n### Input:\ndef sum_elements(arr):\n    sum_value = 0\n    for num in arr:\n        sum_value += num\n    return sum_value\n\n### Output:\ndef sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code.",
        "573": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a 3-dimensional vector.\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5",
        "574": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWork out a solution to the Towers of Hanoi game using Python.\n\n### Input:\nThe game consists of 3 rods and 4 disks.\n\n### Output:\ndef TowersOfHanoi(n, fromRod, toRod, auxRod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",fromRod,\"to rod\",toRod) \n        return\n    TowersOfHanoi(n-1, fromRod, auxRod, toRod) \n    print(\"Move disk\", n, \"from rod\", fromRod, \"to rod\", toRod) \n    TowersOfHanoi(n-1, auxRod, toRod, fromRod) \n\nn = 4\nTowersOfHanoi(n, 'A', 'C', 'B')",
        "575": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm using Python to calculate the Euclidean distance between 2 points.\n\n### Input:\n\n\n### Output:\ndef euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5",
        "576": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the absolute difference between two given numbers.\n\n### Input:\n9, 5\n\n### Output:\ndef absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))",
        "577": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recommendation system in Python using Pandas to recommend new products to customers based on past purchases.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('product_data.csv')\n\n# Create an item-based collaborative filter\ncf = NearestNeighbors(metric='cosine', algorithm='brute')\ncf.fit(data)\n\n# Make recommendations\ndistances, indices = cf.kneighbors(data, n_neighbors=3)\n\n# Print results \nfor i in range(len(data)):\n print('Recommendations for item {}:'.format(i), indices[i])",
        "578": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to filter out a list of numbers and keep only those that are prime\n\n### Input:\nnums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes",
        "579": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages.\n\n### Input:\n['The Hobbit', 'J.R.R. Tolkien', 295], ['The Catcher in the Rye', 'J.D. Salinger', 223]\n\n### Output:\nbook_list = [\n  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},\n  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},\n]",
        "580": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAssume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page.\n\n### Input:\nNot applicable\n\n### Output:\nimport pymysql\nfrom pymongo import MongoClient\nimport psycopg2\n\n# connect to MySQL\nconnection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')\n\n# connect to MongoDB\nclient = MongoClient('mongodb:\/\/localhost:27017')\n\n# connect to PostgreSQL\nconnection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')\n\n# define a query for each database\nquery_mysql = 'SELECT * FROM table_name'\nquery_mongodb = {'name': 'John Doe'}\nquery_postgresql =  'SELECT * FROM table_name WHERE age > 18'\n\n# execute the query and fetch the results\nresult_mysql = connection_mysql.execute(query_mysql)\nresult_mongodb = client.db_name.collection_name.find(query_mongodb)\nresult_postgresql = connection_postgresql.execute(query_postgresql)\n\n# close the connections\nconnection_mysql.close()\nclient.close() \nconnection_postgresql.close()\n\n# render the results on webpage\ndef render_page(request):\n    return render(request, 'template.html', {\n        'data_mysql': result_mysql, \n        'data_mongodb': result_mongodb,\n        'data_postgresql': result_postgresql\n    })",
        "581": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a complex number.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary)",
        "582": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an\nPython program that takes a list of integers and returns the sublist consisting of the prime numbers from the list.\n\n### Input:\n[2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\n\n### Output:\ndef is_prime(num):\n for i in range(2, num \/\/ 2 + 1):\n if num % i == 0:\n return False\n return True\n\ndef prime_list(lst):\n prime_lst = []\n for num in lst:\n if is_prime(num):\n prime_lst.append(num)\n return prime_lst\n\nlst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\nprime_lst = prime_list(lst)\nprint(prime_lst) # Output: [2, 3, 7, 11, 17]",
        "583": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the most efficient path for a robot to take from its current location to the destination\n\n### Input:\nstart = (4, 2) \nend = (9, 9)\n\n### Output:\n# Function to find the most efficient path\ndef find_path(start, end):\n    # Current location of the robot\n    x = start[0]\n    y = start[1] \n    # Destination coordinates\n    goal_x = end[0] \n    goal_y = end[1] \n    # set to record the cells already visited\n    visited = set() \n    # define a queue to store the tuple of current position and the path\n    queue = [([x, y], [])] \n    # define a neighbor list \n    neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] \n    # define a maximum tries\n    max_tries = 100 \n    # define a while loop\n    while queue:\n        # get current position and current path\n        position, path = queue.pop(0) \n        # check if the goal is reached\n        if position[0] == goal_x and position[1] == goal_y:\n            return path + [position]\n        # check if the current position is out of maximum tries and not visited before\n        if position not in visited and max_tries > 0:\n            visited.add(position)\n            max_tries = max_tries - 1 \n            #get all neighbors of the current position\n            for neighbor_x, neighbor_y in neighbor:\n                next_x = position[0] + neighbor_x\n                next_y = position[1] + neighbor_y\n                # add to the queue\n                queue.append(([next_x, next_y], path + [position]))\n    return None\n \nstart = (4, 2) \nend = (9, 9) \n# most efficient path from start to end\npath = find_path(start, end) \nprint(path)",
        "584": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this python code to be more efficient.\n\n### Input:\ndata = [1, 2, 3, 4]\nresult = []\nfor x in data:\n if x > 2:\n result.append(x)\n\n### Output:\ndata = [1, 2, 3, 4]\n\nresult = [x for x in data if x > 2]",
        "585": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following Python code\n\n### Input:\ndef f1 (x):\n y = x + 1\ndef f2(x):\n return f1(x)*f1(x)\n\nf2(2)\n\n### Output:\n# define f1 #\ndef f1(x):\n    return x + 1\n\n# define f2 #\ndef f2(x):\n    return f1(x) * f1(x)\n\n# call f2 #\nprint(f2(2)) #Output: 9",
        "586": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following Python program which raises a SyntaxError.\n\n### Input:\n\n\n### Output:\ndef func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)",
        "587": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSet up GPIO pins, import necessary modules, define operating modes, prompt for password and mode selection, check license validity and user registration, calculate BAC, open solenoid to dispense beer if valid license and BAC below threshold, record swipe data in appropriate file.\n\n### Input:\n\n\n### Output:\n# bin\/usr\/python\n\n# Setting up GPIO pins\nfrom time import sleep\nimport RPi.GPIO as GPIO\n\nGPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi\nGPIO.setwarnings(False)\n\nGPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet\nGPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off\n\nimport time\ntimestr = time.strftime(\"%Y%m%d %H%M%S\")\n\n# Import functions to analyze license validity from CheckLicense.py\nfrom CheckLicense import check_license, calc_BAC\n\n                                 \nimport getpass\nimport sys\nimport re\n\n# Operating modes\nwhile True:\n    #try:\n    mode_req=raw_input(\"Enter Mode(normal, party, barkeep): \")\n\n    if mode_req==\"party\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"party\"\n                 \n    if mode_req==\"normal\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"normal\"\n\n    if mode_req==\"barkeep\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"barkeep\"\n\n            \n#Normal mode operations--------------------------------------------------------------------------------------------\n    while mode=='normal':\n            #try:\n        print '{0} mode!' .format(mode)\n\n        raw_text=getpass.getpass('Swipe card now:   ').strip() \n\n        check_license_out=check_license(raw_text)\n            \n        valid_license=check_license_out[0] \n        first_name=check_license_out[1]\n        last_name=check_license_out[2]\n        DL_num=check_license_out[3]\n        \n# Check to see if person is registered user\n\n        users=open(\"users_list.txt\", 'r')\n        hit=0\n        print DL_num\n        \n        if valid_license=='Yes':\n              for line in users:\n                      if re.search(DL_num, line, re.IGNORECASE):\n                              hit=hit+1\n              if hit>=1:\n                      valid_license='Yes'\n              else: \n                      print 'Not registered user'\n                      valid_license='No'\n# Calculating the BAC\n    \n        BAC=calc_BAC(raw_text)\n        print BAC\n\n    # Opening the solenoid \n        if valid_license=='Yes':\n              GPIO.setup(3, GPIO.HIGH)\n              print 'Beer time!'\n              sleep(2);\n              GPIO.setup(3, GPIO.LOW)\n              with open(\"swipes.txt\", \"a\") as myfile:\n                      myfile.write(last_name+\",\"+first_name+\" \")\n                      myfile.write(DL_num+\" \")\n                      myfile.write(mode+\" \")\n                      myfile.write(time.strftime(\"%Y-%m-%d\")+\" \")\n                      myfile.write(str(time.time())+\"\\n\")\n\n       # except (NameError, IndexError, ValueError):\n        #    print \"error\"\n        #    continue\n\n    #Party mode operations--------------------------------------------------------------------------------------------\n                                     \n    while mode==\"party\":\n        try:\n         print '{0} mode!' .format(mode)\n\n         raw_license_text=getpass.getpass('Swipe card now:   ').strip()\n         check_license_out=check_license(raw_license_text) \n\n         valid_license=check_license_out[0] \n         first_name=check_license_out[1]\n         last_name=check_license_out[2] \n\n\n        # Opening the solenoid \n\n         if valid_license=='Yes':\n                 GPIO.setup(3, GPIO.HIGH)\n                 print 'Beer time!'\n                 sleep(2);\n                 GPIO.setup(3, GPIO.LOW)\n                 with open(\"swipes_normal.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\",\")\n                         myfile.write(time.strftime(\"%Y%m%d%H%M%S\\n\"))\n\n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                                  \n    #Barkeep mode operations-------------------------------------------------------------------------------------------\n     \n    while mode==\"barkeep\":\n        try:\n            print '{0} mode!' .format(mode)\n\n            check_license_out=check_license(getpass.getpass('Swipe card now:   ').strip()) \n\n            valid_license=check_license_out[0] \n            first_name=check_license_out[1]\n            last_name=check_license_out[2] \n            #usr_chksum = #chksum(firstname_lastname)\n            #'{0}beer_score' .format(usr_chksum) \n            #Check to see if person is blacklisted\n            blacklist=open(\"blacklist.txt\", 'r')\n            hit=0\n\n            if valid_license=='Yes':\n                 for line in blacklist:\n                         if re.search(last_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                         if re.search(first_name, line, re.IGNORECASE):\n                                 hit=hit+1\n                 if hit>=2:\n                         print \"We don't serve your kind here.\"\n                         blacklisted='Yes'\n                 else: \n                         blacklisted='No'\n\n            #Calculate BAC\n                         \n            #Opening the solenoid \n            if blacklisted=='No':\n                if BAC < intoxicated:\n                    GPIO.setup(3, GPIO.HIGH)\n                    print 'Beer time!'\n                    print BAC\n                    sleep(2);\n                    GPIO.setup(3, GPIO.LOW)\n                    with open(\"swipes_barkeep.txt\", \"a\") as myfile:\n                         myfile.write(last_name)\n                         myfile.write(\",\")\n                         myfile.write(first_name)\n                         myfile.write(\"_\")\n                         myfile.write(time.strftime(\"%Y-%m-%d %H:%M%S\\n\"))\n                else:\n                    print 'Your BAC is {0}' .format(BAC)\n                    print \"You are too drunk, beer time is over\"\n                 \n        except (NameError, IndexError, ValueError):\n             print \"error\"\n             continue\n                    \n   # except (NameError, IndexError, ValueError):\n        print \"error\"\n       # continue\n#end ---------------------------------------------------------------------------\n        \n",
        "588": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to print a random element from a list.\n\n### Input:\n[\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n### Output:\nimport random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit)",
        "589": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an interactive text-based RPG game in Python that gives the player options to move around in an environment and battle monsters.\n\n### Input:\nNot applicable\n\n### Output:\n# Player class\nclass Player(object):\n def __init__(self):\n self.health = 100\n self.location = 'room one'\n self.monsters_killed = 0\n\n# Room class\nclass Room(object):\n def __init__(self):\n self.name = ''\n self.description = ''\n self.monsters = []\n\n def add_monster(self, monster):\n self.monsters.append(monster)\n\n# Monster class\nclass Monster(object):\n def __init__(self):\n self.name = ''\n self.health = 100\n\n def attack(self, player):\n player.health -= 10\n\n# Function to start the game\ndef start_game():\n # Create player, rooms and monsters\n player = Player()\n\n# Main game loop\nwhile True:\n # Show the current room;\n print(f'You are in {player.location}.')\n # Display available actions\n print('Available actions: move, fight')\n # Get user's action\n response = input('What would you like to do? ').lower()\n\n # Moving to a new room\n if response == 'move':\n # Get the list of available rooms\n # Get the user's destination\n # Move the player to the chosen room\n\n# Fighting a monster\n if response == 'fight':\n # Get all monsters in the current room\n # Get the user's chosen monster\n # Initiate a battle between the player and the monster\n\n# End of the game\n if player.health <= 0:\n print ('You have been defeated!')\n break\n\nif __name__ == '__main__':\n start_game()",
        "590": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Text-to-Speech Python application to read out a simple sentence.\n\n### Input:\n\n\n### Output:\nimport pyttsx3\n\ndef text_to_speech(sentence):\n    engine = pyttsx3.init()\n    engine.say(sentence)\n    engine.runAndWait()\n    \ntext_to_speech(\"Hello, this is a simple sentence\")",
        "591": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application with a Python backend and a React frontend that allows a user to create a list of tasks.\n\n### Input:\nNot applicable\n\n### Output:\n# Python Backend\n# Web server setup\napp = Flask(__name__)\n\n# Database setup\ndb = SQLAlchemy(app)\n\n# Model for tasks\nclass Task(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(80), unique=True, nullable=False)\n  is_completed = db.Column(db.Boolean, default=False)\n\n  def __repr__(self):\n    return f'<Task {self.id}: {self.title}>'\n\n# API Endpoint\n@app.route('\/tasks', methods=['POST'])\ndef create_task():\n  request_data = request.get_json()\n  title = request_data.get('title')\n  if not title:\n    return jsonify({'error': 'Title must be provided.'}), 400\n\n  task = Task(title=title)\n  db.session.add(task)\n  db.session.commit()\n\n  return jsonify(task.serialize())\n\n# React Frontend\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const TaskList = () => {\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    getTasks()\n  }, [])\n\n  const getTasks = async () => {\n    const response = await axios.get('http:\/\/localhost:3000\/tasks')\n    setTasks(response.data)\n  }\n\n  return (\n    <div>\n      {tasks.map(task => (\n        <div key={task.id}>\n          <input type=\"checkbox\" checked={task.is_complete} \/>\n          <label>{task.title}<\/label>\n        <\/div>\n      ))}\n    <\/div>\n  )\n}",
        "592": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.\n\n### Input:\ndict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6}\n\n### Output:\ndef merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict",
        "593": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to read a list of integers and print its elements in reversed order.\n\n### Input:\nThe input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10]\n\n### Output:\nlist_of_ints = [1, 3, 6, 8, 10]\n\nlist_of_ints.reverse()\n\nprint(list_of_ints) # [10, 8, 6, 3, 1]",
        "594": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a binary tree, write a Python program to determine the sum of all elements in the tree.\n\n### Input:\n\n\n### Output:\ndef sum_tree(root):\n    if root is None:\n        return 0\n\n    return root.val + sum_tree(root.left) + sum_tree(root.right)",
        "595": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API using flask and python which takes a list or array of integers and returns their minimum and maximum values.\n\n### Input:\n[12, 4, 9, 24, -5]\n\n### Output:\nfrom flask import Flask, request\napp = Flask(name)\n\n@app.route('\/minmax', methods=['POST'])\ndef minmax():\n data = request.get_json()\n nums = data['nums']\n minVal = min(nums)\n maxVal = max(nums)\n return {'min': minVal, 'max': maxVal}\n\nif name == 'main':\n app.run()",
        "596": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python class to represent a 3-dimensional vector with methods to support vector addition and subtraction.\n\n### Input:\n\n\n### Output:\n# Defining a class for 3-dimensional vectors \n \nclass Vector: \n  \n    # defining constructor \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n  \n    # Defining function to print vector\n    def printVec(self):\n        print(self.x, self.y, self.z) \n  \n    # Defining function to add two vectors \n    def addVec(self, V):\n        return Vector(self.x+V.x, self.y+V.y, self.z+V.z) \n  \n    # Defining function to subtract two vectors \n    def subVec(self, V): \n        return Vector(self.x-V.x, self.y-V.y, self.z-V.z) \n\n# Driver code \nv1= Vector(1, 2, 3)\nv2= Vector(5, 3, 2) \n\nprint(\"Vector 1: \")\nv1.printVec() \nprint(\"Vector 2: \")\nv2.printVec()\n\nv3 = v1.addVec(v2)\nprint(\"sum of vector 1 and vector 2: \")\nv3.printVec()\n\nv4 = v1.subVec(v2) \nprint(\"difference of vector 1 and vector 2: \")\nv4.printVec()",
        "597": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a string slicing function in Python that takes a string and start and end index, and return the slice.\n\n### Input:\nstring = \"This is a slicing test\"\nstart = 8\nend = 15\n\n### Output:\ndef slicing(string, start, end):\n    return string[start:end]\n    \nprint(slicing(string, start, end))",
        "598": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to tokenize a given text\n\n### Input:\nText='Python is an interpreted, high-level, general-purpose programming language.'\n\n### Output:\nimport nltk \nfrom nltk.tokenize import word_tokenize \n  \n# input text  \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n  \n# converting the text into tokens \ntoken = word_tokenize(text) \n  \nprint(token)",
        "599": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for an algorithm to find the shortest path between two points in a matrix\n\n### Input:\nmatrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]]\nstart = (0, 0)\nend = (2, 2)\n\n### Output:\ndef shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len",
        "600": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python algorithm that searches a given sorted array for a value using binary search.\n\n### Input:\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\nvalue = 5\n\n### Output:\n# Array to search\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\n\n# Target value\nvalue = 5\n\n# Binary search function\ndef binarySearch(array, target):\n # Find the middle of the array\n mid = len(array) \/\/ 2\n \n # Check if the target is equal to the middle value \n if array[mid] == target:\n  return True\n \n # If the target is less than the middle value, search the left half\n elif target < array[mid]:\n  return binarySearch(array[:mid], target)\n  \n # If the target is greater than the middle value, search the right half\n elif target > array[mid]:\n  return binarySearch(array[mid+1:], target)\n \n # If the target is not found\n else:\n  return False\n  \n# Check if the value is in the array\nif binarySearch(sortedArray, value):\n print('Value found!')\nelse:\n print('Value not found!')",
        "601": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes the following dictionary as an argument and returns the count of each item\n\n### Input:\n{\"apples\": 5, \"oranges\": 6, \"bananas\": 7}\n\n### Output:\ndef item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts",
        "602": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to read in a textfile and count the frequency of each word.\n\n### Input:\n\n\n### Output:\nclass WordCounter:\n    def __init__(self, filename):\n        self.word_counts = {}\n        self.filename = filename\n        self.process_file()\n\n    def process_file(self):\n        with open(self.filename) as f:\n            for line in f:\n                words = line.split()\n                for word in words:\n                    if word in self.word_counts:\n                        self.word_counts[word] += 1\n                    else:\n                        self.word_counts[word] = 1\n\n    def get_word_counts(self):\n        return self.word_counts",
        "603": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to create a Python program that converts a given string to a different case?\n\n### Input:\n\n\n### Output:\ndef convert_string_case(string):\n    new_string = string.swapcase()\n    return new_string\n\nstring = \"this Is A TeST\"\nnew_string = convert_string_case(string)\nprint(new_string)",
        "604": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.\n\n### Input:\n\n\n### Output:\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import get_language\nfrom django.utils.translation import ugettext as _\nfrom django.utils.encoding import force_unicode, smart_str, smart_unicode\nfrom django.forms.fields import Field\nfrom django.forms import ValidationError\nfrom widgets import TransCharWidget, TransTextWidget\n\ndef get_default_language_name():\n    '''\n    Get language from default language specified by LANGUAGE_CODE in settings\n    Used in error messages\n    '''\n    lang_name = ''\n    for lang in settings.LANGUAGES:\n        if lang[0] == settings.LANGUAGE_CODE:\n            lang_name = lang[1]\n            break\n    return force_unicode(lang_name)\n\nclass TransDbValue(unicode):\n    '''\n    This class implements a unicode string, but with a hidden attribute raw_data.\n    When used as a string it returns the translation of the current language\n    raw_data attribute stores a dictionary with all translations\n    Also implements a method \"get_in_language(language)\" that returns the translation on any available language\n    '''\n    raw_data = {}\n\n    def get_in_language(self, language):\n        if self.raw_data and self.raw_data.has_key(language):\n            return self.raw_data[language]\n        else:\n            return u''\n\n    def set_in_language(self, language, value):\n        self.raw_data[language] = value\n\nclass TransFormField(Field):\n    '''\n    forms field, used when ModelForm (or deprecated form_for_model\/form_form_instance) is called\n    Also implements form validation in admin\n    '''\n    def clean(self, value):\n        if isinstance(value, dict) and self.required:\n            filled_value = [ v for v in value.values() if bool(v) ]\n            if not filled_value:\n                raise ValidationError, _(\"This field is required.\")\n        return super(TransFormField, self).clean(value)\n\nclass TransField(models.Field):\n    '''\n    Model field to be subclassed\n    Used for storing a string in many languages at database (with python's dictionary format)\n    pickle module could be used, but wouldn't alow search on fields?\n    '''\n    def get_internal_type(self):\n        return 'TextField'\n\n    def to_python(self, value):\n        if isinstance(value, TransDbValue):\n            return value\n\n        if isinstance(value, dict): # formfield method makes this function be called with value as a dict\n            python_value = value\n        else:\n            try:\n                python_value = eval(value)\n                for k,v in python_value.items():\n                    python_value[k] = smart_unicode(v)\n            except Exception:\n                python_value = None\n        if isinstance(python_value, dict):\n            if python_value.has_key(get_language()) and python_value[get_language()]:\n                result = TransDbValue(python_value[get_language()])\n            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:\n                result = TransDbValue(python_value[settings.LANGUAGE_CODE])\n            else:\n                val = \"bal\"\n                for item in python_value.items():\n                    try:\n                        val = item[1]\n                    except:\n                        pass\n                    if val: break\n\n                result = TransDbValue(python_value.items()[0][1])\n            result.raw_data = python_value\n        else:\n            result = TransDbValue(value)\n            result.raw_data = {settings.LANGUAGE_CODE: value}\n        return result\n\n    def get_db_prep_save(self, value):\n        if not isinstance(value, TransDbValue):\n            return value\n        value = [u\"'%s': '''%s'''\" % (k, v) for k, v in value.raw_data.items()]\n        value = u'{%s}' % u','.join(value)\n        return smart_str(value)\n\n    def formfield(self, **kwargs):\n        defaults = {'form_class': TransFormField}\n        defaults.update(kwargs)\n        return super(TransField, self).formfield(**defaults)\n\n    def flatten_data(self, follow, obj=None): \n        '''\n        for serializing objects\n        '''\n        raw_data = self._get_val_from_obj(obj).raw_data.copy()\n        for k,v in raw_data.items():\n            raw_data[k] = smart_str(v)\n        return {self.attname: raw_data}\n\nclass TransCharField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransCharWidget\n        return super(TransCharField, self).formfield(**kwargs)\n\nclass TransTextField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransTextWidget\n        return super(TransTextField, self).formfield(**kwargs)\n\n",
        "605": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that displays the information of three different cities.\n\n### Input:\nEdinburgh: Scotland, 54.6\u00b0N, UK\nParis: France, 48.86\u00b0N, Europe\nDhaka: Bangladesh, 23.78\u00b0N, Asia\n\n### Output:\ndef get_city_info(city, country, latitude, continent):\n   print(\"City: {}, Country: {}, Latitude: {}, Continent: {}\".format(\n        city, country, latitude, continent))\n \nget_city_info('Edinburgh', 'Scotland', '54.6\u00b0N', 'UK')\nget_city_info('Paris', 'France', '48.86\u00b0N', 'Europe')\nget_city_info('Dhaka', 'Bangladesh', '23.78\u00b0N', 'Asia')",
        "606": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove duplicate characters of a given string.\n\n### Input:\n\"bufferoverflow\"\n\n### Output:\ndef remove_duplicate_characters(string):\n    result = \"\"\n    seen = set()\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result += char\n    return result\n\nprint(remove_duplicate_characters(\"bufferoverflow\"))",
        "607": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list.\n\n### Input:\n\n\n### Output:\ndef sum_list(arr):\n    \"\"\"Finds the sum of a given list of numbers.\n    \n    Args:\n        arr (list): List of numbers.\n        \n    Returns:\n        int: Sum of list elements.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum",
        "608": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the distance between two points.\n\n### Input:\npoint1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)\n\n### Output:\nimport math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)",
        "609": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI program that recognizes handwritten letters and digits using Python.\n\n### Input:\nNot applicable\n\n### Output:\n# imports\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n# Split the dataset into training and testing sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Preprocess the data\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# create a model\nmodel = keras.Sequential()\n# add a convolution layer\nmodel.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D(pool_size=(2, 2)))\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n# add a dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n# add an output layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nmodel.evaluate(x_test, y_test)",
        "610": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python function to find out if any two numbers add up to a given number.\n\n### Input:\n\n\n### Output:\ndef two_sum(numbers, given):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == given:\n                return True\n    return False",
        "611": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random number between the given input numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_num(start, stop):\n    return random.randint(start, stop)\n\n\n# Example\nnum = random_num(0, 10)\nprint(num)",
        "612": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to include a web-page rendering feature.\n\n### Input:\n\n\n### Output:\nimport webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)",
        "613": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary from two given lists.\n\n### Input:\nlist1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]\n\n### Output:\ndict1 = dict(zip(list1, list2)) \nprint(dict1)",
        "614": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code snippet for Python to check whether a number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(n):\n    if n % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nis_even(4)",
        "615": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a reinforcement learning environment that plays tic-tac-toe in Python\n\n### Input:\n\n\n### Output:\nimport random\n\n# Create class for environment\nclass TicTacToeEnv():\n    # Define initializer\n    def __init__(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n    \n    # Define a reset method to set initial state\n    def reset(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n        return self.state\n        \n    # Define step function\n    def step(self, action):\n        # Set player mark\n        self.state[action] = self.player\n        # Check for winner\n        winner = self.check_winner()\n        done = False\n        if winner == 'X' or winner == 'O':\n            reward = 1\n            done = True\n        else:\n            reward = 0\n        # Switch players\n        if self.player == 'X':\n            self.player = 'O'\n        else:\n            self.player = 'X'\n        # Check for draw and switch player turn\n        if self.player_turn == 8:\n            done = True\n            reward = 0.5\n        self.player_turn += 1\n        # Return state, reward, done, info\n        return self.state, reward, done, None\n        \n    # Define a method to check if someone has won\n    def check_winner(self):\n        win_state = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\n        for i in win_state:\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'X':\n                return 'X'\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'O':\n                return 'O'\n        return None\n\n# Play a game\nenv = TicTacToeEnv()\nenv.reset()\ndone = False\nwhile not done:\n    action = random.randint(0, 8)\n    state, reward, done, _ = env.step(action)\n    print(env.state)\n    if reward == 1 or reward == 0.5:\n        print(\"Winner: \"+str(reward))",
        "616": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings.\n\n### Input:\nstrings = ['hello', 'world', 'computer']\n\n### Output:\nstrings = ['hello', 'world', 'computer']\n\ndictionary = {}\n\nfor string in strings:\n for char in string:\n  dictionary[char] = len(string)\n\nprint(dictionary)  # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}",
        "617": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to sort a given list of names alphabetically.\n\n### Input:\n[John, Harry, Robert]\n\n### Output:\ndef sort_names(names):\n    names.sort()\n    return names\n\nnames = [\"John\", \"Harry\", \"Robert\"]\nresult = sort_names(names)\nprint(result)",
        "618": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to connect to a domain and fetch the contents of its homepage\n\n### Input:\n\n\n### Output:\nimport requests\n\nurl = \"https:\/\/www.example.com\/\" \nresponse = requests.get(url) \n\nif response.status_code == 200: \n    print(response.content) \nelse:\n    print(\"Error fetching the page\")",
        "619": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat function will you use to count the number of words in a string?\n\n### Input:\n'Hello world, this is a sentence.'\n\n### Output:\nThere are 5 words in the given string. \n\nTo count the number of words in a string, you can use the `len()` or `count()` functions in Python. \n\nFor example: \n```\nnum_words = len(string.split())\n```\nor \n```\nnum_words = string.count(\" \") + 1\n```",
        "620": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that shuffles an array of integers.\n\n### Input:\n[1, 5, 9, 4, 2]\n\n### Output:\nimport random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr \n\nmy_arr = [1, 5, 9, 4, 2]\n\nprint(shuffle(my_arr))",
        "621": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the greatest common divisor of two numbers and displays the result.\n\n### Input:\n10 and 20\n\n### Output:\ndef gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')",
        "622": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to convert a given temperature value from Fahrenheit to Celsius.\n\n### Input:\n\n\n### Output:\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9 \n    return round(celsius, 2)",
        "623": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password for a user with length of 8 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n   up_alphabet = string.ascii_uppercase\n   low_alphabet = string.ascii_lowercase\n   digits = string.digits\n   symbols = string.punctuation\n   length = 8\n   pass_characters = up_alphabet + low_alphabet + digits + symbols\n   password =  ''.join(random.sample(pass_characters, length))\n   return password\n\nprint(generate_password())",
        "624": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.\n\n### Input:\nMNIST dataset\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimport pickle\n\n# load training data\nwith gzip.open('.\/mnist_dataset\/mnist.pkl.gz', 'rb') as f:\n    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')\n\n# prepare logistic regression\nX_train, y_train = train_data[0], train_data[1]\nX_valid, y_valid = valid_data[0], valid_data[1]\nX_test, y_test = test_data[0], test_data[1]\n\nX_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])\nX_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])\nX_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])\n\ndef sigmoid(z):\n    return 1.0\/(1.0+np.exp(-z))\n\ndef LogisticRegression(X, y, max_iter, alpha):\n    m, n = X.shape\n    weights = np.zeros(n)\n    \n    for _ in range(max_iter):\n        weights = weights - alpha * (1\/m) * (X.T @ (sigmoid(X @ weights) - y))\n\n    return weights\n\nweights = LogisticRegression(X_train, y_train, 1000, 0.001)\n\n# accuracy on training set\npredictions = np.round(sigmoid(X_train @ weights))\ntrain_accuracy = np.mean(predictions == y_train)\n\n# accuracy on validation set\npredictions = np.round(sigmoid(X_valid @ weights))\nvalid_accuracy = np.mean(predictions == y_valid)\n\n# accuracy on test set\npredictions = np.round(sigmoid(X_test @ weights))\ntest_accuracy = np.mean(predictions == y_test)\n\nprint('Train accuracy = ', train_accuracy)\nprint('Validation accuracy = ', valid_accuracy)\nprint('Test accuracy = ', test_accuracy)",
        "625": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a design algorithm in Python that randomly generates a unique snowflake pattern.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_snowflake():\n  # Generate random numbers between 0 and 1\n  a = random.random()\n  b = random.random()\n  c = random.random()\n\n  # Generate the snowflake\n  snowflake = [] \n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))\n\n  return snowflake",
        "626": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to build a random number generator in the range [0, 10).\n\n### Input:\n\n\n### Output:\nimport random\n \nx = random.randint(0, 9)\nprint(x)",
        "627": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee\u2019s name, job title, and job number.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number",
        "628": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a system that finds similarities between given strings.\n\n### Input:\n\n\n### Output:\ndef get_jaccard_similarity(str1, str2):\n    a = set(str1.split()) \n    b = set(str2.split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))\n\n# Driver code \nstr1 = \"python programming\"\nstr2 = \"java programming\"\nprint(get_jaccard_similarity(str1, str2))",
        "629": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that selects five random elements from a list and prints them.\n\n### Input:\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]\n\n### Output:\nimport random\n\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]\nrandom.shuffle(my_list)\n\nfor i in range(5):\n    print(my_list[i])",
        "630": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevolop a Python code to remove the duplicates from a given list and sort them in ascending order.\n\n### Input:\n[2, 8, 5, 2, 6, 3, 4]\n\n### Output:\nmy_list = [2, 8, 5, 2, 6, 3, 4]\nmy_list = list(dict.fromkeys(my_list))\nmy_list.sort()\nprint(my_list) # [2, 3, 4, 5, 6, 8]",
        "631": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them.\n\n### Input:\n8 and 20\n\n### Output:\ndef prime_numbers(x, y):\n \n prime_nums = {}\n \n for i in range(x, y+1):\n if(i > 1):\n for j in range(2, i):\n if(i % j == 0):\n break\n else:\n prime_nums[i] = i\n \n return prime_nums\n \nprint(prime_numbers(8, 20))\n# { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }",
        "632": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print the first 10 cubes of natural numbers.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(i**3)",
        "633": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes in two strings and output their combined length.\n\n### Input:\nstring_1 = \"Hello\"\nstring_2 = \"World\"\n\n### Output:\ndef get_string_length(string_1, string_2):\n    return len(string_1 + string_2)",
        "634": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to randomly select one element from a given array.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nimport random\n\ndef randomElement(arr):\n    return random.choice(arr)",
        "635": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.\n\n### Input:\nNot applicable\n\n### Output:\n# import libraries \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nimport numpy \n\n# load the dataset \ndataset = numpy.loadtxt(\"mnist.csv\", delimiter=\",\") \n\n# split into input (X) and output (Y) variables \nX = dataset[:,0:784] \nY = dataset[:,784] \n\n# Create model\nmodel = Sequential() \nmodel.add(Dense(784, input_dim=784, activation='relu'))\nmodel.add(Dense(256, activation='relu')) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model \nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) \n\n# Fit the model \nmodel.fit(X, Y, epochs=10, batch_size=128, verbose=2)\n\n# Evaluate the model \nscores = model.evaluate(X, Y) \nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))",
        "636": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list of dictionaries in Python by a given key.\n\n### Input:\n[{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]\n\n### Output:\nlist_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]\n\n# Sort list by given key\nsorted_list = sorted(list_of_dicts, key=lambda item:item['color'])\n\nprint(sorted_list)",
        "637": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape tweets with a particular hashtag from Twitter.\n\n### Input:\n\"#100DaysOfCode\"\n\n### Output:\nimport tweepy\n\n# Replace the API_KEY and API_SECRET with your application's key and secret.\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True,\n wait_on_rate_limit_notify=True)\n\n# Replace the hashtag with your hashtag of interest.\nhashtag = '#100DaysOfCode'\n\n# Fetch the tweets\ntweets = tweepy.Cursor(api.search, q=hashtag, lang=\"en\").items()\n\n# Print out the tweets\nfor tweet in tweets:\n print(tweet.text)",
        "638": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the number of occurrences of a given string in another string.\n\n### Input:\nhaystack = \"Hello World\"\nneedle = \"l\"\n\n### Output:\ndef count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count",
        "639": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the sum of two user-defined variables.\n\n### Input:\nvar1 = 3 \nvar2 = 7\n\n### Output:\nvar1 = 3\nvar2 = 7\n\nsum = var1 + var2\nprint('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'",
        "640": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n  \n# Driver Program \n    print(fibonacci(10))",
        "641": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Django and Python. This application should allow users to register and login to view a list of quotes.\n\n### Input:\nNot applicable\n\n### Output:\n# projects\/quotes\/models.py\n\nclass Quote(models.Model):\n    author = models.CharField(max_length=255)\n    quote_text = models.TextField()\n\n\nclass UserQuote(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)\n\n# projects\/quotes\/views.py\n\ndef index(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    quotes = request.user.userquote_set.all()\n    return render(request, 'quotes\/index.html', {'quotes': quotes})\n\ndef login(request):\n    if request.user.is_authenticated:\n        return redirect('index')\n\n    if request.method == 'POST':\n        form = AuthenticationForm(request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            django_login(request, user)\n            return redirect('index')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'quotes\/login.html', {'form': form})",
        "642": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python 3 to simulate the rolling of two dice.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef roll_dice():\n    '''This function simulates rolling two dice.'''\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    print(\"Die 1: {}\".format(die_1))\n    print(\"Die 2: {}\".format(die_2))\n    return (die_1, die_2)",
        "643": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to format the following string with proper new lines and indentation.\n\n### Input:\n'{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n### Output:\nformatted = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'",
        "644": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to generate the Fibonacci sequence of a given length.\n\n### Input:\n6\n\n### Output:\ndef generate_fibonacci(length):\n    # Initialize\n    n1, n2 = 0, 1\n\n    # Check if length is valid\n    if length <= 0:\n        print('Invalid length. Positive numbers only.')\n    elif length == 1:\n        print(n1)\n    else:\n        print(n1, n2, end=' ')\n    \n    # Generate sequence\n    for i in range(2, length):\n        n3 = n1 + n2\n        print(n3, end=' ')\n        n1 = n2\n        n2 = n3\n\n# Show output\ngenerate_fibonacci(6)\n# Output: 0 1 1 2 3 5",
        "645": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the sum of odd numbers within a given range.\n\n### Input:\nrange(1, 10)\n\n### Output:\ntotal = 0\nfor i in range(1, 10):\n    if i % 2 != 0:\n        total += i\nprint(total)",
        "646": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a function written in Python that calculates the mean of a given sequence of numbers\n\n### Input:\nimport numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    sum = 0\n    for number in sequence:\n        sum += number\n    return sum \/ len(sequence)\n\n### Output:\nimport numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)",
        "647": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary mapping letters to numbers and numbers to letters.\n\n### Input:\n\n\n### Output:\nletters_numbers = {\n 'a': 1, 'b': 2, 'c': 3,  'd': 4, 'e': 5,\n 'f': 6, 'g': 7, 'h': 8,  'i': 9, 'j': 10,\n 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,\n 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,\n 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26\n}\nnumbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys()))\nprint(numbers_letters)",
        "648": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a script in Python to find the longest common subsequence of two given strings.\n\n### Input:\nAGGTAB\nGXTXAYB\n\n### Output:\ndef lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The length of LCS is \" + lcs(X, Y, m, n))",
        "649": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements.\n\n### Input:\nlist1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7]\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n    new_list = []\n\n    i1 = 0\n    i2 = 0\n    while i1 < len(list1) and i2 < len(list2):\n        if list1[i1] < list2[i2]:\n            new_list.append(list1[i1])\n            i1 += 1\n        else:\n            new_list.append(list2[i2])\n            i2 += 1\n    \n    while i1 < len(list1):\n        new_list.append(list1[i1])\n        i1 += 1\n    \n    while i2 < len(list2):\n        new_list.append(list2[i2])\n        i2 += 1\n\n    return new_list\n\nlist1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7]\n\nmerged = merge_sorted_lists(list1, list2)\nprint(merged)",
        "650": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the 5 most frequent words in the given text.\n\n### Input:\nText: Python is a high-level programming language.\n\n### Output:\nfrom collections import Counter\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)",
        "651": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that calculates a person's BMI (body mass index).\n\n### Input:\n\n\n### Output:\ndef calculate_bmi(weight, height):\n    bmi = weight\/(height**2)\n    return bmi",
        "652": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the smallest number in a given list of numbers.\n\n### Input:\n[24, 14, 67, 89, 34, 52]\n\n### Output:\nlist_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))",
        "653": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to quickly search for a substring in a larger string.\n\n### Input:\nstring = \"hello world\" substring = \"or\"\n\n### Output:\ndef search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)",
        "654": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to fetch the website users of an online store.\n\n### Input:\nWebsite URL: www.example.com\n\n### Output:\nimport requests\n\nurl = 'https:\/\/www.example.com\/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])",
        "655": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that will generate a password containing numbers and letters from an entered string.\n\n### Input:\nHello\n\n### Output:\ndef generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))",
        "656": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to delete an item from a given list.\n\n### Input:\nItem: 5 \nList: [8, 4, 5, 9, 2]\n\n### Output:\ndef remove_item(item, list): \n    list.remove(item) \n    return list\n  \nlist_org = [8, 4, 5, 9, 2]\n  \nresult = remove_item(5, list_org)\nprint(result)",
        "657": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet that takes a list of numbers as argument and prints the average.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef average(numbers: list):\n    if numbers:\n        return sum(numbers) \/ len(numbers)\n    else:\n        return 0\n    \nnumbers = [2, 3, 4, 5, 6]\nprint(f\"Average of {numbers} is {average(numbers)}\")",
        "658": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check whether a number is in a given range\n\n### Input:\n\n\n### Output:\ndef is_in_range(n, lower, upper):\n    return lower <= n <= upper",
        "659": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a function in Python that takes a list of numbers as input and checks if any of the numbers are prime.\n\n### Input:\n[2, 3, 5, 7, 8, 11, 13, 15]\n\n### Output:\ndef is_prime(list_of_numbers):\n    # Iterate over the list of numbers\n    for num in list_of_numbers:\n        # Check if the number is divisible by any number\n        # other than 1 and the number itself\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                # If there is any divisor, the\n                # number is not a prime number\n                return False\n    # All the numbers in the list are prime numbers\n    return True\n\nlist_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]\noutcome = is_prime(list_of_numbers)\nprint(outcome)",
        "660": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.\n\n### Input:\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]\n\n### Output:\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    \nprint(quicksort(list))\n\n# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]",
        "661": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to detect the sentiment of a given text.\n\n### Input:\n\n\n### Output:\nimport textblob\n\ndef detect_sentiment(text):\n    analysis = textblob.TextBlob(text)\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity == 0:\n        return 'neutral'\n    else:\n        return 'negative'",
        "662": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if a given number is divisible by 3 and 5 or not.\n\n### Input:\n10\n\n### Output:\ndef check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\nif check_divisible_3and5(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)",
        "663": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to stop a loop after some specific iterations\n\n### Input:\n\n\n### Output:\nfor i in range(100):\n    if (i > 10):\n        break\n    print(i)",
        "664": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python Flask for the following model.\n\n### Input:\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n### Output:\nfrom flask import Flask, jsonify, request\n\n# Class\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n# Create the application instance\napp = Flask(__name__)\n\n# Create a URL route in our application for \"\/\"\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n\n    # POST request\n    if request.method == 'POST':\n        json_data = request.get_json(force=True)\n        if not json_data:\n            return jsonify({'message': 'No input data provided'}), 400\n        user_name = json_data['name']\n        user_email = json_data['email']\n        user = User(name=user_name, email=user_email)\n\n        return jsonify({\n            'name': user.name,\n            'email': user.email\n        })\n    \n    # GET request\n    if request.method == 'GET':\n        # Get user list\n        users = [user.__dict__ for user in users]\n        return jsonify({'users': users}), 200\n\n# Run the application\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)",
        "665": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network with two hidden layers in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np #importing the libraries \nfrom sklearn.neural_network import MLPClassifier #importing the neural network classifier\n\n#defining the input values\nX = np.array([[0,0],[0,1],[1,0],[1,1]])\ny = np.array([[0],[1],[1],[0]])\n\n#Creating the model\nmodel = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.\nmodel.fit(X,y)\n\n#Testing the model with a new input\ntest_data = np.array([[1,1]])\nprediction = model.predict(test_data) \nprint(\"The model predicts the output as:\",prediction[0])",
        "666": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a positive integer as an input and prints all its prime factors.\n\n### Input:\n\n\n### Output:\ndef prime_factors(num):\n prime_list = []\n i = 2\n while i * i <= num:\n if num % i:\n i += 1\n else:\n num \/\/= i\n prime_list.append(i)\n if num > 1:\n prime_list.append(num)\n return prime_list\n\nn = int(input('Enter a positive integer: '))\nprint(prime_factors(n))",
        "667": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to implement a trie data structure in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")",
        "668": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum.\n\n### Input:\n\n\n### Output:\nimport unittest\n\ndef add(a, b):\n    return a + b\n\nclass myTests(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 7), 6)\n\n    def test_type(self):\n        self.assertRaises(TypeError, add, 'a', 'b')\n\nif __name__ == '__main__':\n    unittest.main()",
        "669": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples by their second element.\n\n### Input:\n[(1, 3), (3, 2), (4, 1), (2, 4)]\n\n### Output:\ndef sortBySecondElement(lst):\n    # Sort the list of tuples by their second elements\n    return sorted(lst, key=lambda x : x[1])\n\n# Testing\nlst = [(1, 3), (3, 2), (4, 1), (2, 4)]\n\nsortedLst = sortBySecondElement(lst)\n\nprint(sortedLst)\n\n# Output\n# [(4, 1), (3, 2), (1, 3), (2, 4)]",
        "670": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module for a contact book application. This module should include classes for User (with fields for name, age, address, and email) and Contact (with fields for name, age, phone number).\n\n### Input:\nNot applicable\n\n### Output:\nclass User:\n \"\"\"A class representing a user.\"\"\"\n def __init__(self, name, age, address, email):\n self.name = name\n self.age = age\n self.address = address\n self.email = email\n\nclass Contact:\n \"\"\"A class representing a contact.\"\"\"\n def __init__(self, name, age, phone_number):\n self.name = name\n self.age = age\n self.phone_number = phone_number",
        "671": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python classes from the given JSON.\n\n### Input:\n{\n\"name\": \"Employee\",\n\"attributes\": {\n\"emp_id\": {\n\"type\": \"int\"\n},\n\"name\": {\n\"type\": \"string\"\n},\n\"department\": {\n\"type\": \"string\"\n},\n\"salary\": {\n\"type\": \"float\"\n}\n}\n}\n\n### Output:\nclass Employee:\n    def __init__(self, emp_id, name, department, salary):\n        self.emp_id = emp_id\n        self.name = name\n        self.department = department\n        self.salary = salary",
        "672": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.\n\n### Input:\n\n\n### Output:\ndef count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count",
        "673": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that can query a SQL database and return the total number of entries in all the tables\n\n### Input:\nSQL database\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect(\"example.db\")\ncur = conn.cursor()\n\nsql = \"SELECT name FROM sqlite_master WHERE type='table';\"\ncur.execute(sql)\ntables = cur.fetchall()\n\ncount = 0\nfor table in tables:\n    sql = f\"SELECT COUNT(*) FROM {table[0]};\"\n    cur.execute(sql)\n    count += cur.fetchone()[0]\n\nprint(f\"Number of entries: {count}\")",
        "674": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out strings from a list of strings containing specific characters.\n\n### Input:\nlist_of_strings = [\"Hello\", \"World\", \"1\", \"0\", \"This is a string.\"]\n\n### Output:\ndef filter_strings(list_of_strings):\n    return list(filter(lambda x: x.isalpha(), list_of_strings))\n\nprint (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']",
        "675": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the sum of the cubes of the first n positive integers.\n\n### Input:\nn = 4\n\n### Output:\ndef sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum",
        "676": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a string as input and checks if it is a palindrome or not.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_palindrome(string):\n   # reverse the string\n   rev_string = string[::-1] \n   \n   # check if the string is equal to its reverse\n   if (string == rev_string): \n     return True\n   return False\n\n# Example usage:\n\nresult = is_palindrome('racecar')\n# result = True",
        "677": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that pulls data from an API and stores it in a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\nimport sqlite3\n\n# Make a GET request to the API\nresponse = requests.get(url)\ndata = response.json()\n\n# Save the data to a database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\nfor item in data:\n    c.execute(\"INSERT INTO items VALUES (?, ?)\", (item['id'], item['name']))\nconn.commit()\nconn.close()",
        "678": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to iterate over a list of numbers and print out only the even numbers.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\nfor num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n if num % 2 == 0:\n print(num)",
        "679": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to use a loop instead of recursion.\n\n### Input:\ndef GCD(x, y):\nif y == 0:\n return x\n else:\n return GCD(y, x%y)\n\n### Output:\ndef GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x",
        "680": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to transpose a given matrix of size (m x n).\n\n### Input:\n[[1, 2], \n [3, 4], \n [5, 6]]\n\n### Output:\ndef transposeMatrix(matrix): \n m = len(matrix) \n n = len(matrix[0]) \n  \n # Create a new matrix \n transpose = [[0 for x in range(m)] for y in range(n)] \n  \n # Iterate through the original matrix \n for i in range(m): \n for j in range(n): \n transpose[j][i] = matrix[i][j] \n return transpose",
        "681": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that multiplies two matrices.\n\n### Input:\n\n\n### Output:\ndef matrix_multi(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n\n    if cols_A != rows_B:\n        print(\"Cannot multiply the given matrices.\")\n        return\n\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C",
        "682": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic calculator in Python\n\n### Input:\n\n\n### Output:\ndef calculator():\n  while True:\n    try:\n      userInput = input('Input equation (type \"quit\" to exit): ')\n\n      if userInput == \"quit\":\n        break\n        \n      result = eval(userInput)\n      print(result)\n\n    except:\n      print('Invalid equation')\n\ncalculator()",
        "683": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a solution in Python for determining the frequency of characters in a given string.\n\n### Input:\n\"A quick brown fox jumps over the lazy dog.\"\n\n### Output:\ntext = \"A quick brown fox jumps over the lazy dog.\"\n\ncount = {} \nfor character in text: \n    if character in count: \n            count[character] += 1\n    else: \n            count[character] = 1\n  \nfor key in count: \n    print('%s appears %d times' % (key, count[key]))",
        "684": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a class for managing a linked list.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a Python program to create a class for managing a linked list.\n\"\"\"\n\n# Create the Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# Create the LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def addNode(self, data):\n        node = Node(data)\n        if self.head == None:\n            self.head = node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = node\n            \n    def printList(self):\n        curr = self.head\n        while curr != None:\n            print(curr.data)\n            curr = curr.next",
        "685": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to remove all consecutive duplicates of a given number.\n\n### Input:\n[1,1,2,3,3,3,4,4,4,4]\n\n### Output:\ndef remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result",
        "686": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\ndef factorial(n):\n if n == 1 or n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n try:\n number = int(input('Please enter a number: '))\n print(f'{number}! = {factorial(number)}')\n except ValueError:\n print('Please enter a valid number.')\nelse:\n print('Please provide a single argument --number')",
        "687": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the PageRank algorithm in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport networkx as nx\n\ndef page_rank(G, alpha=0.85, personalization=None, \n max_iter=100, tol=1.0e-6, nstart=None, weight='weight', \n dangling=None):\n\n\"\"\"\nReturn the PageRank of the nodes in the graph. \n\nG: graph\nalpha: damping parameter for PageRank, default=0.85\npersonalization: \n    dict, optional \n    The \"personalization vector\" consists of a dictionary with a \n    key for every graph node and nonzero personalization value for each node. \nmax_iter: \n    int, optional \n    Maximum number of iterations in power method eigensolve.\ntol: float, optional\n    Error tolerance used to check convergence in power method eigensolve.\nnstart: \n    dict, optional \n    Starting value of PageRank iteration for each node.\nweight: \n    key, optional \n    Edge data key to use as weight. \ndangling: \n    dict, optional \n    The outedges to be assigned to any \"dangling\" nodes, i.e., nodes without any outedges. \n\nReturns:\n    Dictionary of nodes with PageRank as value.\n\"\"\"\n\n# Initialize results vector with (1-alpha)\/N, \n# where N is the number of nodes in the graph.\nN = G.number_of_nodes()\nx = dict.fromkeys(G, (1 - alpha) \/ N)\n\n# Check if personalization vector was passed in; if so, update results vector\nif personalization is None:\n    p = dict.fromkeys(G, 1 \/ N)\nelse:\n    missing = set(G) - set(personalization)\n    if missing:\n        raise NetworkXError('Personalization dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    p = personalization\n   p = p.copy()\n    s = float(sum(p.values()))\n    for k in p:\n        x[k] = p[k] \/ s\n        p[k] = p[k] \/ s\n\nif dangling is None:\n    # Use personalization vector if dangling vector not specified\n    dangling_weights = p\nelse:\n    # Dangling nodes are nodes with no outedges.\n    # Use personalization vector if dangling vector is specified but\n    # doesn't have an entry for every node\n    missing = set(G) - set(dangling)\n    if missing:\n        raise NetworkXError('Dangling node dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    s = float(sum(dangling.values()))\n    for k in dangling:\n        dangling[k] \/= s\n    dangling_weights = dangling\n\n# power iteration: make up to max_iter iterations\nfor _ in range(max_iter):\n    xlast = x\n    x = dict.fromkeys(xlast.keys(), 0)\n    danglesum = alpha * sum(xlast[n] for n in dangling_weights)\n    for n in x:\n\n# this matrix multiply looks odd because it is\n# doing a left multiply x^T=xlast^T*W\n        for nbr in G[n]:\n            x[nbr] += alpha * xlast[n] * G[n][nbr].get(weight, 1)\n        x[n] += danglesum * dangling_weights.get(n, 0) + (1.0 - alpha) * p.get(n, 0)\n\n# check convergence\nerr = sum([abs(x[n] - xlast[n]) for n in x])\nif err < N*tol:\n    return x\nreturn x",
        "688": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate the area of a triangle given the three sides.\n\n### Input:\n\n\n### Output:\ndef triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) \/ 2\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area",
        "689": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a python function to combine two lists into a single list of tuples.\n\n### Input:\n\n\n### Output:\ndef combine_lists(list1, list2):\n    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]\n    return combined_list",
        "690": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.\n\n### Input:\n[8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\ndef bitcoinPricePrediction(data):\n# convert data to numpy array\ndata = np.array(data)\n\n# define the model\nmodel = keras.Sequential([\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(1)])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(data, epochs=50, verbose=1)\n\n# predict the tomorrow's bitcoin price\nprediction = model.predict(data)[0][0]\n\nreturn prediction",
        "691": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Python program that takes two integers and checks if they are co-prime numbers.\n\n### Input:\nnum1 = 34\nnum2 = 21\n\n### Output:\ndef is_coprime(num1, num2):\n        while num1 != 0 and num2 != 0: \n            if(num1 > num2): \n                num1 %= num2 \n            else: \n                num2 %= num1\n                  \n        if(num1 == 0): \n            gcd = num2 \n        else: \n            gcd = num1 \n        if(gcd == 1):\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)",
        "692": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python class that creates a list of unique elements in the input.\n\n### Input:\n['a','b','b','c','a','c']\n\n### Output:\nclass ListUnique:\n    \n    def __init__(self,list1):\n        # set up empty list\n        self.list1 = []\n        \n        # loop through input list\n        for x in list1:\n            # add element to list if it is not already in the list\n            if x not in self.list1:\n                self.list1.append(x)\n                \n    # returns the modified list\n    def get_list(self):\n        return self.list1\n\nlist1 = ['a','b','b','c','a','c']\n\n# create instance of ListUnique\nlu = ListUnique(list1)\n\n# print the modified list\nprint(lu.get_list()) # prints ['a', 'b', 'c']",
        "693": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code to sort the following  Python dictionary by its values from low to high.\n\n### Input:\nstudents = {\n    'Jacob': 95.5, \n    'Leah': 91.8,\n    'Sebastian': 98.4,\n    'David': 95.1,\n    'Joseph': 90.4\n}\n\n### Output:\ndef sort_dict_by_values(students):\n    sorted_students = sorted(students, key=students.get)\n    return [sorted_students, [students[key] for key in sorted_students]]\n\nprint(sort_dict_by_values(students))",
        "694": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a machine learning model in Python for predicting the prices of apartments in your city.\n\n### Input:\n\n\n### Output:\n#Import Data\nimport pandas as pd\ndata = pd.read_csv(\u2018data.csv\u2019)\n\n#Prepare Data\nX = data[['size', 'location', 'bedrooms']]\ny = data['price']\n\n#Train Model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n#Test Model\ntest_X = [[1500, 'downtown', 3]]\ntest_y = model.predict(test_X)\nprint(test_y)",
        "695": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to print the stack trace in Python when an exception occurs.\n\n### Input:\n\n\n### Output:\nimport traceback\n\ntry:\n    # some code that might generate exceptions\n    pass\nexcept Exception as e:\n    print(traceback.format_exc())",
        "696": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read a list of strings and display the same strings in a reverse order.\n\n### Input:\n[\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\n\n### Output:\ndef reverse_strings(string_list):\n reversed_string_list = []\n for string in string_list:\n reversed_string_list.insert(0, string)\n return reversed_string_list\n\nstring_list = [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\nprint(reverse_strings(string_list))",
        "697": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise an algorithm in Python to determine if a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "698": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model to classify text documents into two different categories.\n\n### Input:\nProvide a sample dataset contains text from two different categories.\n\n### Output:\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample dataset\ndocs = [\n \"The sky is blue.\",\n \"Violets are red.\",\n \"I love programming.\",\n \"JavaScript is fun.\"\n \"Python is great!\"\n]\n\nlabels = [0, 0, 1, 1, 1]\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Vectorize the documents\nX = vectorizer.fit_transform(docs).toarray()\n\n# Create a Naive Bayes model\nmodel = MultinomialNB()\n\n# Fit the model to the dataset\nmodel.fit(X, labels)\n\n# Make a prediction\nprediction = model.predict([X[3]])\n\n# Print the prediction\nprint(prediction) # prints [1]",
        "699": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a model to classify spam emails using Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))",
        "700": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application in Django that fetches tweets with the #python hashtag.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args)",
        "701": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an object-oriented program in Python for playing a game of tic-tac-toe.\n\n### Input:\nNo Input\n\n### Output:\nclass Game:\n    def __init__(self):\n        self.board = [[\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"]]\n        self.current_player = \"X\"\n\n    def display_board(self):\n        for i in range(len(self.board)):\n            for j in range(len(self.board[i])):\n                print(self.board[i][j], end=\" \")\n            print()\n\n    def move(self, current_player, row, col):\n        if self.board[row][col] == \"-\": \n            self.board[row][col] = current_player\n        else:\n            print(\"invalid move, row and col has already been taken\")\n\n    def check_winner(self):\n        winner = None\n        for row in self.board:\n            if row[0] == row[1] == row[2]:\n                winner = row[0]\n                break\n        for col in range(len(self.board[0])):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col]:\n                winner = self.board[0][col]\n                break\n        if self.board[0][0] == self.board[1][1] == self.board[2][2]:\n            winner = self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0]:\n            winner = self.board[0][2]\n\n        if winner == None:\n            return False\n        else:\n            return winner",
        "702": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to reverse a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string): \n    return string[::-1]",
        "703": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two strings using Python and output the similarity score between them.\n\n### Input:\nString 1: hello world \nString 2: hey world\n\n### Output:\nimport difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909",
        "704": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to create a dictionary from two lists, one of keys and the other one of values.\n\n### Input:\nkeys = [1,2,3]\nvalues = ['a','b','c']\n\n### Output:\ndef createDict(keys, values):\n  dict = {}\n  for i in range(len(keys)):\n    dict[keys[i]] = values[i]\n  return dict",
        "705": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreat a Python program to find the sum of the digits of an arbitrary number.\n\n### Input:\n345\n\n### Output:\ndef sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num \/\/ 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}')",
        "706": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef squareList(inputList): \n\t# Returns a list of the squares of all the elements in inputList\n\tsquaredList = [] \n\n\tfor num in inputList:\n\t\tsquaredList.append(num ** 2) \n\n\treturn squaredList\n\n# Example \ninputList = [1, 2, 3, 4, 5] \n\nsquaredList = squareList(inputList) \n\nprint(squaredList)\n\n# Output: [1, 4, 9, 16, 25]",
        "707": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a JSON string and convert it into a dictionary.\n\n### Input:\n'{\"name\": \"GPT\", \"type\": \"AI\"}'\n\n### Output:\nimport json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)",
        "708": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to parse an HTML document using Python.\n\n### Input:\n\n\n### Output:\nUsing the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.",
        "709": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object.\n\n### Input:\n{\"name\": \"John\", \"age\": 30}\n\n### Output:\n@app.route('\/api', methods=['POST'])\ndef api():\n data = request.get_json()\n data['age'] = data['age'] + 2\n return jsonify(data)",
        "710": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that sorts the list using insertion sort algorithm.\n\n### Input:\nunsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]\n\n### Output:\ndef insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list)",
        "711": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to separate numbers below 10 and above 5.\n\n### Input:\narray = [4, 7, 10, 8, 12, 6]\n\n### Output:\nbelow_ten = [] # Separated numbers\nabove_five = [] # Separated numbers\n\n# Iterate over array\nfor n in array:\n    if n > 5:\n        above_five.append(n)\n    else:\n        below_ten.append(n)\n\n# Print results\nprint(\"Below 10: \", below_ten)\nprint(\"Above 5: \", above_five)",
        "712": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a given list contains any duplicate elements.\n\n### Input:\n\n\n### Output:\ndef check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False",
        "713": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program that reads a 3x3 matrix and prints the sum of all elements.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ntotal = 0\n\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        total += matrix[i][j]\n\nprint(total)",
        "714": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python script to extract email addresses from a raw text?\n\n### Input:\n\"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\n### Output:\nimport re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']",
        "715": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that will allow users to input their name and will return different sentences depending on the length of the name.\n\n### Input:\n\n\n### Output:\nclass NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"",
        "716": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Twitter bot using Python and Tweepy for publishing tweets.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\n\n# authentication\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Tweeting\ntext = 'Hello, world!'\napi.update_status(text)",
        "717": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a queue data structure in python\n\n### Input:\n\n\n### Output:\nclass Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue)",
        "718": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to compare two strings and output true if one string is a permutation of another.\n\n### Input:\nString 1: abc\nString 2: cba\n\n### Output:\ndef is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2))",
        "719": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the NumPy library to generate a 3x3 identity matrix in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nidentity_matrix = np.identity(3)\nprint(identity_matrix)",
        "720": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8",
        "721": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGather the information about all Python library released by the Mozilla foundation\n\n### Input:\n\n\n### Output:\nThe Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page.",
        "722": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConfigure a web-server in Python using Flask.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run()",
        "723": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a graphical user interface using Tkinter in Python that allows the user to input numbers and calculate the sum.\n\n### Input:\n\n\n### Output:\n# Create the window\nwindow = tk.Tk()\n\n# Create two entry fields in the window\nentry1 = tk.Entry(window)\nentry2 = tk.Entry(window)\n\n# Create a function to get inputs from the entry fields and calculate sum\ndef get_sum():\n    num1 = entry1.get()\n    num2 = entry2.get()\n    sum = int(num1) + int(num2)\n    label.config(text=\"Sum is \" + str(sum))\n\n# Create a button to execute the function\nbutton = tk.Button(window, text=\"Calculate\", command=get_sum)\n\n# Create a label to display the result\nlabel = tk.Label(window)\n\n# Pack all widgets\nentry1.pack()\nentry2.pack()\nbutton.pack()\nlabel.pack()\n\n# Main loop\nwindow.mainloop()",
        "724": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the product of two matrices using Python.\n\n### Input:\nMatrix A:\n[2 3]\n[4 7]\nMatrix B:\n[6 5]\n[1 4]\n\n### Output:\n# Matrix multiplication in Python\n\nmatrix_A = [[2, 3], [4, 7]] \nmatrix_B = [[6, 5], [1, 4]] \n  \n# result matrix\nresult = [[0, 0], [0, 0]] \n  \n# iterating by row of Matrix A \nfor i in range(len(matrix_A)): \n  \n    # iterating by coloum of Matrix B  \n    for j in range(len(matrix_B[0])): \n  \n        # iterating by rows of Matrix B \n        for k in range(len(matrix_B)): \n            result[i][j] += matrix_A[i][k] * matrix_B[k][j] \n  \nfor r in result: \n    print(r)",
        "725": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Program to determine if two given strings are an anagram or not.\n\n### Input:\nstring1 = \"abcd\"\nstring2 = \"cbad\"\n\n### Output:\ndef is_anagram(string1, string2):\n    # check if strings have equal length \n    if len(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check if sorted strings are the same \n    if sorted1 == sorted2:\n        return True \n    return False",
        "726": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to extract the specific keyword from the given URL.\n\n### Input:\nURL: https:\/\/www.test.com\/where-is-the-key\nKeyword: key\n\n### Output:\nimport re\n\nurl = \"https:\/\/www.test.com\/where-is-the-key\"\nkeyword = \"key\"\n\nmatch = re.search(f'{keyword}', url)\nif match:\n    print(f'{keyword} found at starting index: {match.start()}')\nelse:\n    print(f'{keyword} not found')",
        "727": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.\n\n### Input:\nimport threading\nimport time\n\ndef mining(difficulty, start):\n    nonce = start\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n \n        nonce = nonce + 1\n\n### Output:\nimport threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1",
        "728": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an algorithm in Python to merge two sorted arrays into a single sorted array.\n\n### Input:\n[3, 8, 11] and [1, 4, 9]\n\n### Output:\ndef merge_arrays(arr1, arr2):\n    merged_arr = []\n    # Make copies of arrays\n    arr1_copy = arr1[:]\n    arr2_copy = arr2[:]\n    \n    # add elements from both array in sorted order\n    while arr1_copy and arr2_copy:\n        if arr1_copy[0] <= arr2_copy[0]:\n            merged_arr.append(arr1_copy.pop(0))\n        else:\n            merged_arr.append(arr2_copy.pop(0))\n            \n    # add remaining elements of array\n    if arr1_copy:\n        merged_arr.extend(arr1_copy)\n    else:\n        merged_arr.extend(arr2_copy)\n    \n    # return merged array\n    return merged_arr\n\narr1 = [3, 8, 11]\narr2 = [1, 4, 9]\n\nprint(merge_arrays(arr1, arr2))",
        "729": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes an array with n elements and shuffles it.\n\n### Input:\nn = 10\n\n### Output:\nimport random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))",
        "730": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class that implements a binary search tree. It should have methods for adding nodes to the tree, searching the tree, and obtaining the size of the tree.\n\n### Input:\nNot applicable\n\n### Output:\nclass BinarySearchTree:\n\n def __init__(self):\n  self.root = None\n\n def add_node(self, value):\n  if not self.root:\n   self.root = Node(value)\n  else: \n   self._add_node(self.root, value)\n\n def _add_node(self, node, value):\n  if value <= node.value:\n   if node.left:\n    self._add_node(node.left, value)\n   else:\n    node.left = Node(value)\n  else:\n   if node.right:\n    self._add_node(node.right, value)\n   else:\n    node.right = Node(value)\n\n def search(self, value):\n  return self._search(self.root, value)\n\n def _search(self, node, value):\n  if node is None:\n   return False\n  if node.value == value:\n   return True\n  else:\n   if value <= node.value:\n    return self._search(node.left, value)\n   else: \n    return self._search(node.right, value)\n\n def get_size(self):\n  return self._get_size(self.root)\n\n def _get_size(self, node):\n  if not node:\n   return 0\n  return self._get_size(node.left) + 1 + self._get_size(node.right)",
        "731": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python program to sort the strings according to the length of each string.\n\n### Input:\nstrings = ['abc', 'def', 'ghi', 'jkl', 'mno']\n\n### Output:\ndef sort_strings_by_length(strings):\n  return sorted(strings, key=len)",
        "732": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to construct a spam filter using Na\u00efve Bayes.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))",
        "733": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that checks if a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False",
        "734": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based adventure game in Python\n\n### Input:\nNot applicable\n\n### Output:\nimport textwrap \n\nclass TextGame(object):\n    def __init__(self):\n        self.level = 1\n        self.is_playing = True\n\n    def start_game(self):\n        self.print_intro()\n        while self.is_playing:\n            self.level_one()\n\n    def print_intro(self):\n        # Introduction text\n        intro = textwrap.dedent('''\n            You awaken in a strange place, and it seems you have no memory of how you got there.\n            You can feel cold dampness of the stone walls and ground beneath your feet.\n            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move\n            towards it.\n        ''')\n        print(intro)\n\n    def level_one(self):\n        # Level one text\n        level_one = textwrap.dedent('''\n            As you make your way towards the light, you come across a fork in the path.\n            You hear a soft whisper coming from the left path.\n        ''')\n        print(level_one)\n\n        action = raw_input('''Do you choose to take the left or right path? ''')\n        if action.upper() == \"LEFT\":\n            self.level_two_left()\n        elif action.upper() == \"RIGHT\":\n            self.level_two_right()\n        else:\n            self.level_one()\n\n    def level_two_left(self):\n        # Level two left text\n        level_two_left = textwrap.dedent('''\n            The whisper gets louder as you take the left path. Eventually, you reach a small room.\n            In the center of the room is a hooded figure standing in front of a pedestal.\n            There is a strange looking artifact on the pedestal.\n        ''')\n        print(level_two_left)\n\n        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')\n        if action.upper() == \"APPROACH\":\n            print(\"You approach the figure and it removes its hood to reveal a face you recognize\")\n        elif action.upper() == \"FLEE\":\n            print(\"You turn and run, taking the right path\")\n            self.level_two_right()\n        else:\n            self.level_two_left()\n\n# Create instance and start the game. \ngame = TextGame()\ngame.start_game()",
        "735": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.\n\n### Input:\n\n\n### Output:\ndef double_list(lst):\n    return [x * 2 for x in lst]",
        "736": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to which given a list of numbers, will calculate the mean value\n\n### Input:\n\n\n### Output:\ndef mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total \/ len(nums)",
        "737": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort the values of a dictionary by its keys in alphabetical order.\n\n### Input:\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\n\n### Output:\ndef sort_dictionary_by_keys(dictionary):\n    result = {}\n    for key in sorted(dictionary.keys()):\n        result[key] = dictionary[key]\n    return result\n\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\nsorted_dictionary = sort_dictionary_by_keys(dictionary)\n\nprint(sorted_dictionary)",
        "738": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Tic Tac Toe game in Python.\n\n### Input:\n\n\n### Output:\n# define the game board\nboard = [\"_\" for i in range(9)]\n\n# define the player and computer symbols\nplayer = \"X\"\ncomputer = \"O\"\n\ndef display_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# check for a win\ndef check_win():\n    # check rows\n    row1 = board[0] == board[1] == board[2] != \"_\"\n    row2 = board[3] == board[4] == board[5] != \"_\"\n    row3 = board[6] == board[7] == board[8] != \"_\"\n    # if any row does have a match, flag that there is a win\n    if row1 or row2 or row3:\n        game_over = True\n    # check columns\n    col1 = board[0] == board[3] == board[6] != \"_\"\n    col2 = board[1] == board[4] == board[7] != \"_\"\n    col3 = board[2] == board[5] == board[8] != \"_\"\n    # if any column does have a match, flag that there is a win\n    if col1 or col2 or col3:\n        game_over = True\n    # check diagonals\n    diag1 = board[0] == board[4] == board[8] != \"_\"\n    diag2 = board[2] == board[4] == board[6] != \"_\"\n    # if any diagonal does have a match, flag that there is a win\n    if diag1 or diag2:\n        game_over = True\n    # if any condition is true, there is a win\n    if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2:\n        winner = player\n    else:\n        game_over = False\n    return game_over, winner\n\n# play the game\nwhile True:\n    # display the game board\n    display_board()\n    # get player input\n    while True:\n        try:\n            player_choice = int(input(\"Pick a number between 1-9: \"))\n            if player_choice >= 1 and player_choice <= 9:\n                if board[player_choice - 1] == \"_\":\n                    board[player_choice - 1] = player\n                    break\n            else:\n                print(\"Sorry, please try again\")\n        except:\n            print(\"Sorry, please try again\")\n\n    # check for a win\n    game_over, winner = check_win()\n    if game_over:\n        display_board()\n        print(\"Congratulations! You win! \")\n        break\n    # check for a tie\n    if \"_\" not in board:\n        print(\"It's a tie\")\n        break",
        "739": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that takes a list of strings and returns a list containing the length of each of the strings.\n\n### Input:\n['hello', 'world']\n\n### Output:\ndef string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result)",
        "740": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes as input a list of random numbers and returns only the even numbers from the list\n\n### Input:\nA list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\n\n### Output:\n\"\"\"Generate a python script that takes a list of random numbers as input and return only the even numbers from the list\"\"\"\n\n# Take a list as input\nlst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\n\n# Create a new list that will contain only the even numbers from the input list\neven_numbers = []\n\n# Iterate through input list and append only even numbers to the new list \nfor num in lst:\n    if num % 2 == 0:\n        even_numbers.append(num)\n        \n# Print out the new list containing only even numbers\nprint(even_numbers)",
        "741": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes an matrix as input and raises each element of it to the power of 3.\n\n### Input:\n[[1,2,3], [4,5,6], [7,8,9]]\n\n### Output:\ndef power_of_3(matrix):\n    for i in range(len(matrix)):\n       for j in range(len(matrix[0])): \n            matrix[i][j] = matrix[i][j] ** 3\n    return matrix",
        "742": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the total number of elements in a stack.\n\n### Input:\nStack: [1, 2, 3, 4, 5]\n\n### Output:\ndef findNumOfElements(stack): \n    return len(stack)",
        "743": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dataframe from a given dictionary of lists.\n\n### Input:\ndata = {\n    'name': ['John', 'Mark', 'Tom'],\n    'age': [21, 18, 20]\n}\n\n### Output:\nimport pandas as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df)",
        "744": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output the most frequently occurring word in a given string.\n\n### Input:\nsentence = \"Code Generation is an important task in the AI research\"\n\n### Output:\nimport collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation']",
        "745": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to calculate the volume of a sphere.\n\n### Input:\n\n\n### Output:\ndef sphere_volume(radius): \n    return (4\/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))",
        "746": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the shortest path between two given nodes\n\n### Input:\n\n\n### Output:\ndef find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path",
        "747": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.\n\n### Input:\nexample_string = \"This i$n't a siMPle StrinG\"\n\n### Output:\nimport string\n\nexample_string = \"This i$n't a siMPle StrinG\"\nnew_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\nprint(new_string)\n\nOutput:\nthisisntasimplestring",
        "748": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to calculate the value of the nth Fibonacci number.\n\n### Input:\n6\n\n### Output:\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(\"The requested Fibonacci number is: \" + str(fib(6)))",
        "749": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python script for deleting all characters from a string\n\n### Input:\nstring = \"Hello world!\"\n\n### Output:\nnewString = string.replace(\"\", \"\")\nprint(newString)",
        "750": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes the words in the string and returns the frequency of each word.\n\n### Input:\n\n\n### Output:\ndef count_words(string):\n    words = string.split()\n    count_words = {}\n    for word in words:\n        if word in count_words:\n            count_words[word] += 1\n        else:\n            count_words[word] = 1\n\n    return count_words",
        "751": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a machine learning model in Python to detect the sentiment of a text document.\n\n### Input:\nThe text document is \"This movie was horrible and I never want to watch it again.\"\n\n### Output:\ndef sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative",
        "752": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an SQL query from a given set of parameters.\n\n### Input:\nTable Name: users\n\nFields: id, name, age\n\nFilter: age > 18\n\n### Output:\ndef generate_sql_query(table_name, fields, filter_clause):\n query = \"SELECT \"\n for i in range(len(fields)-1):\n query += fields[i] + \", \"\n query += fields[-1]\n query += \" FROM \" + table_name + \" WHERE \" + filter_clause\n return query",
        "753": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nprint(random.randint(1000,9999))",
        "754": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a Python class to model an appointment.\n\n### Input:\n\n\n### Output:\nclass Appointment:\n    def __init__(self, title, time, location):\n        self.title = title\n        self.time = time\n        self.location = location\n\n    def get_title(self):\n        return self.title\n    \n    def get_time(self):\n        return self.time\n    \n    def get_location(self):\n        return self.location",
        "755": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the process of pulling data from a website using Python.\n\n### Input:\nWebsite URL: http:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com'\n\n# Use requests to get website HTML\nresp = requests.get(url)\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(resp.text, 'lxml')\n\n# Extract data from HTML\ndata = []\nfor item in soup.find_all('div'):\n data.append(item.text)\n\n# Print the data\nfor d in data:\n print(d)",
        "756": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Google Cloud Function in Python to parse an incoming JSON object and extract its values\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\ndef parse_json_object(request):\n # Parse the incoming JSON object\n data = json.loads(request.data)\n \n # Extract the values\n param1 = data['param1']\n param2 = data['param2']\n \n return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)",
        "757": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes two arrays of the same size and performs elementwise addition.\n\n### Input:\narr1 = [1, 2, 3]\narr2 = [3, 4, 5]\n\n### Output:\ndef add_arrays(arr1, arr2):\n if len(arr1) != len(arr2):\n  raise Exception(\"Arrays are not of the same size!\")\n return [x + y for x, y in zip(arr1, arr2)]\n\nadd_arrays(arr1, arr2)  # [4, 6, 8]",
        "758": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to retrieve and list all the books in a given category in an online book store.\n\n### Input:\nCategory = \"Computer Science\"\n\n### Output:\n# define category variable\ncategory = \"Computer Science\"\n# import JSON library for retrieving the data\nimport json\n# import HTTP library for fetching the data\nimport urllib.request\n\n# create the target url\nurl = \"https:\/\/www.example.com\/books\/category\/\" + category\n\n# fetch the data\nresponse = urllib.request.urlopen(url)\n# read the data\ndata = json.loads(response.read())\n\n# print the books\nfor book in data:\n print(book['title'])",
        "759": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\nclass StudentDatabase:\n def __init__(self, db):\n  self.conn = sqlite3.connect(db)\n  self.cur = self.conn.cursor()\n  self.cur.execute(\"CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)\")\n  self.conn.commit()\n  \n def add_student(self, name, email, age):\n  self.cur.execute(\"INSERT INTO students VALUES (NULL, ?, ?, ?)\", (name, email, age))\n  self.conn.commit()\n  \n def delete_student(self, id):\n  self.cur.execute(\"DELETE FROM students WHERE id=?\", (id,))\n  self.conn.commit()\n  \n def update_student(self, id, name, email, age):\n  self.cur.execute(\"UPDATE students SET name=?, email=?, age=? WHERE id=?\", (name, email, age, id))\n  self.conn.commit()\n  \n def list_students(self):\n  self.cur.execute(\"SELECT * FROM students\")\n  rows = self.cur.fetchall()\n  return rows\n  \ndef main():\n db = StudentDatabase('students.db')\n db.add_student('John Doe', 'john@doe.com', 30)\n db.add_student('Adam Smith', 'adam@smith.com', 25)\n db.delete_student(2)\n db.update_student(1, 'John Smith', 'john@smith.com', 40)\n print(db.list_students())\n \nif __name__ == '__main__':\n main()",
        "760": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to delete a node from a linked list\n\n### Input:\nhead = 5 -> 2 -> 1 -> 4 -> 3\n\n### Output:\n# Node class\nclass Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class\nclass LinkedList: \n  \n    # Function to initialize the Linked  \n    # List object \n    def __init__(self):  \n        self.head = None\n  \n    # Deletes the node at position n\n    def deleteNode(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store headnode \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position-1): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next",
        "761": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to format a string containing email addresses. The script should remove special characters and extra spaces, and format the email addresses according to their domain.\n\n### Input:\nList of email addresses with special characters [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]\n\n### Output:\nimport re\n\nemails = [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]\nresult = []\n\nfor email in emails:\n email = re.sub('[^A-Za-z0-9@.+-_]', '', email)\n email = email.replace(' ', '')\n if 'gmail' in email:\n email = email.replace('gmail', 'google')\n elif 'yahoo' in email:\n email = email.replace('yahoo', 'ymail')\n result.append(email)\n\nprint(result)",
        "762": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to extract all words from a sentence that are greater than 3 chars in length.\n\n### Input:\nThis is a sample sentence\n\n### Output:\ndef extract_long_words(s):\n words = s.split()\n filtered = [w for w in words if len(w) > 3]\n return filtered",
        "763": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove all the characters of a specified string that appear more than once.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if string.count(char) == 1:\n            result += char\n    return result",
        "764": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimized sorting alogirthm in Python.\n\n### Input:\nunsorted_list = [5, 2, 3, 1, 4]\n\n### Output:\ndef optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)",
        "765": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the primes between 1 and n\n\n### Input:\nn = 15\n\n### Output:\nimport math\n \ndef primes(n):\n    if n < 2:\n        return []\n    \n    size = int(math.sqrt(n)) + 1\n    sieve = bytearray([True]) * size\n    for i in range(2, size):\n        if sieve[i]:\n            for j in range(i*i, size, i):\n                sieve[j] = False\n  \n    primes = [i for i in range(2, size) if sieve[i]]\n    return [p for p in primes if p <= n]\n \nif __name__ == '__main__':\n    n = 15\n    print(primes(n))\n\n# Output: [2, 3, 5, 7, 11, 13]",
        "766": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string, removes all non-alphanumeric characters, and prints the result to console.\n\n### Input:\nNot applicable\n\n### Output:\ndef clean_string(s):\n clean_s = ''.join(c for c in s if c.isalnum())\n print(clean_s)",
        "767": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to generate a Fibonacci series up to the nth value.\n\n### Input:\nn = 10\n\n### Output:\n# Program to generate a Fibonacci series using an algorithm\n\n# function to generate Fibonacci series\ndef generate_fibonacci_series(n):\n    a, b = 0, 1 \n    result = [] \n    while b < n:\n        result.append(b)\n        a, b = b, a + b \n    return result\n\n# Driver code \nn = 10\nresult = generate_fibonacci_series(n)\nprint(\"The Fibonacci number up to\", n, \"is\", result)",
        "768": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to implement a linear search in Python.\n\n### Input:\n[7, -3, 10, 13, -6], -3\n\n### Output:\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\ntarget = -3\nprint(\"Index of\", target, \" is \", linear_search(arr, target)) # 1",
        "769": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that will take an array of numbers and output the distinct elements.\n\n### Input:\n[1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\n\n### Output:\nmy_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9]",
        "770": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in a list and returns its reverse.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef reverse_list(list):\n    return list[::-1]\n\nresult = reverse_list([1,2,3,4])\nprint(result)",
        "771": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that models a contact with details such as singlename, lastname, email, address, and phone number.\n\n### Input:\n\n\n### Output:\nclass Contact:\n    def __init__(self, single_name, last_name, email, address, phone_number):\n        \"\"\"\n        This is the constructor for the contact class.\n        \"\"\"\n        self.single_name = single_name\n        self.last_name = last_name\n        self.email = email\n        self.address = address\n        self.phone_number = phone_number\n\n    def get_full_name(self):\n        \"\"\"\n        This method returns the full name of the contact.\n        \"\"\"\n        return self.last_name + \", \" + self.single_name\n\n    def get_email(self):\n        \"\"\"\n        This method returns the email of the contact.\n        \"\"\"\n        return self.email\n\n    def get_address(self):\n        \"\"\"\n       This method returns the address of the contact.\n        \"\"\"\n        return self.address\n\n    def get_phone_number(self):\n        \"\"\"\n        This method returns the phone number of the contact.\n        \"\"\"\n        return self.phone_number",
        "772": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.\n\n### Input:\n10\n\n### Output:\ndef fibonacci(n):\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr[:n+1]\n\nprint(fibonacci(10))",
        "773": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node",
        "774": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a n by n multiplication table.\n\n### Input:\n3\n\n### Output:\n# Function to generate multiplication table  \ndef multiplication_table(n): \n    # set the initial value and iters\n    num = 1\n    iters = n + 1\n      \n    # outer loop\n    for i in range(1, iters): \n          \n        # inner loop \n        for j in range(1, iters): \n              \n            # print statement \n            print(num, end = \" \") \n              \n            num = num + 1\n        print()\n  \n# Driver code\nn = 3\nmultiplication_table(n)",
        "775": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to automatically scrape data from a given web page.\n\n### Input:\nurl = \"http:\/\/www.example.com\"\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL to be scraped\nurl = \"http:\/\/www.example.com\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape data from the HTML using beautiful soup\ndata = soup.find_all('p')\n\n# Print the scraped data\nfor item in data:\n print(item.text)",
        "776": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to print out the contents of a given dictionary.\n\n### Input:\n{\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\n### Output:\ndictionary = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor item in dictionary:\n  print(\"{}: {}\".format(item, dictionary[item]))",
        "777": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines an abstract class called `Domain` that represents an abstract domain. The class has various attributes and methods, including `from_expr`, `to_expr`, `convert_from`, `convert`, `unify`, `poly_ring`, and `frac_field`. To use this class, create a subclass and implement the abstract methods `from_expr` and `to_expr`. You can also use the `convert` method to convert elements to the domain, and the `unify` method to construct a minimal domain that contains elements of two given domains. The `poly_ring` and `frac_field` methods can be used to create polynomial rings and fraction fields, respectively.\n\n### Input:\n\n\n### Output:\n\"\"\"Implementation of :class:`Domain` class.\"\"\"\n\nimport abc\nimport inspect\n\nfrom ..core import Expr\nfrom ..core.compatibility import HAS_GMPY\nfrom ..polys.orderings import lex\nfrom ..polys.polyerrors import CoercionFailed, UnificationFailed\nfrom ..polys.polyutils import _unify_gens\nfrom ..printing.defaults import DefaultPrinting\nfrom .domainelement import DomainElement\n\n\nclass Domain(DefaultPrinting, abc.ABC):\n    \"\"\"Represents an abstract domain.\"\"\"\n\n    is_Ring = False\n    is_Field = False\n\n    has_assoc_Ring = False\n\n    is_FiniteField = False\n    is_IntegerRing = False\n    is_RationalField = False\n    is_RealField = False\n    is_ComplexField = False\n    is_AlgebraicField = False\n    is_RealAlgebraicField = False\n    is_ComplexAlgebraicField = False\n    is_PolynomialRing = False\n    is_FractionField = False\n    is_ExpressionDomain = False\n\n    is_Exact = True\n    is_Numerical = False\n\n    def __hash__(self):\n        return hash((self.__class__.__name__, self.dtype))\n\n    def __call__(self, *args):\n        \"\"\"Construct an element of ``self`` domain from ``args``.\"\"\"\n        return self.dtype(*args)\n\n    def __getstate__(self):\n        return {}\n\n    @abc.abstractmethod\n    def from_expr(self, expr):\n        \"\"\"Convert Diofant's expression ``expr`` to ``dtype``.\"\"\"\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def to_expr(self, element):\n        \"\"\"Convert domain ``element`` to Diofant expression.\"\"\"\n        raise NotImplementedError\n\n    def convert_from(self, element, base):\n        \"\"\"Convert ``element`` to ``self.dtype`` given the base domain.\"\"\"\n        for superclass in inspect.getmro(base.__class__):\n            method = '_from_' + superclass.__name__\n\n            convert = getattr(self, method, None)\n\n            if convert:\n                result = convert(element, base)\n\n                if result is not None:\n                    return result\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} \"\n                             f'from {base} to {self}')\n\n    def convert(self, element, base=None):\n        \"\"\"Convert ``element`` to ``self.dtype``.\"\"\"\n        if base is not None:\n            return self.convert_from(element, base)\n\n        if isinstance(element, self.dtype):\n            return element\n\n        from . import ComplexField, PythonRational, RealField\n        from .expressiondomain import ExpressionDomain\n        from .integerring import GMPYIntegerRing, PythonIntegerRing\n        from .rationalfield import GMPYRationalField, PythonRationalField\n\n        if isinstance(element, int):\n            return self.convert_from(element, PythonIntegerRing())\n\n        if isinstance(element, PythonRational):\n            return self.convert_from(element, PythonRationalField())\n\n        if HAS_GMPY:\n            integers = GMPYIntegerRing()\n            if isinstance(element, integers.dtype):\n                return self.convert_from(element, integers)\n\n            rationals = GMPYRationalField()\n            if isinstance(element, rationals.dtype):\n                return self.convert_from(element, rationals)\n\n        if isinstance(element, float):\n            parent = RealField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, complex):\n            parent = ComplexField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, DomainElement):\n            return self.convert_from(element, element.parent)\n\n        if isinstance(element, ExpressionDomain.Expression):\n            return self.convert_from(element, ExpressionDomain())\n\n        if isinstance(element, Expr):\n            try:\n                return self.from_expr(element)\n            except (TypeError, ValueError):\n                pass\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} to {self}\")\n\n    def __contains__(self, a):\n        \"\"\"Check if ``a`` belongs to this domain.\"\"\"\n        try:\n            self.convert(a)\n            return True\n        except CoercionFailed:\n            return False\n\n    def _from_PolynomialRing(self, a, K0):\n        if a.is_ground:\n            return self.convert(a.LC, K0.domain)\n\n    def _from_FractionField(self, a, K0):\n        if a.numerator.is_ground and a.denominator == 1:\n            return self.convert(a.numerator.LC, K0.domain.ring)\n\n    def unify(self, K1, symbols=()):\n        \"\"\"\n        Construct a minimal domain that contains elements of ``self`` and ``K1``.\n\n        Known domains (from smallest to largest):\n\n        - ``GF(p)``\n        - ``ZZ``\n        - ``QQ``\n        - ``RR(prec, tol)``\n        - ``CC(prec, tol)``\n        - ``ALG(a, b, c)``\n        - ``K[x, y, z]``\n        - ``K(x, y, z)``\n        - ``EX``\n        \"\"\"\n        from .compositedomain import CompositeDomain\n\n        if symbols:\n            if any(isinstance(d, CompositeDomain) and (set(d.symbols) & set(symbols))\n                   for d in [self, K1]):\n                raise UnificationFailed(f\"Can't unify {self} with {K1}, \"\n                                        f'given {symbols} generators')\n\n            return self.unify(K1)\n\n        if self == K1:\n            return self\n\n        if self.is_ExpressionDomain:\n            return self\n        if K1.is_ExpressionDomain:\n            return K1\n\n        if any(isinstance(d, CompositeDomain) for d in (self, K1)):\n            if isinstance(self, CompositeDomain):\n                self_ground = self.domain\n                self_symbols = self.symbols\n                order = self.order\n            else:\n                self_ground = self\n                self_symbols = ()\n                order = K1.order\n\n            if isinstance(K1, CompositeDomain):\n                K1_ground = K1.domain\n                K1_symbols = K1.symbols\n            else:\n                K1_ground = K1\n                K1_symbols = ()\n\n            domain = self_ground.unify(K1_ground)\n            symbols = _unify_gens(self_symbols, K1_symbols)\n\n            if ((self.is_FractionField and K1.is_PolynomialRing or\n                 K1.is_FractionField and self.is_PolynomialRing) and\n                    (not self_ground.is_Field or not K1_ground.is_Field) and domain.has_assoc_Ring):\n                domain = domain.ring\n\n            if isinstance(self, CompositeDomain) and (not isinstance(K1, CompositeDomain) or self.is_FractionField or K1.is_PolynomialRing):\n                cls = self.__class__\n            else:\n                cls = K1.__class__\n\n            return cls(domain, symbols, order)\n\n        def mkinexact(cls, K0, K1):\n            prec = max(K0.precision, K1.precision)\n            tol = max(K0.tolerance, K1.tolerance)\n            return cls(prec=prec, tol=tol)\n\n        if self.is_ComplexField and K1.is_ComplexField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_RealField and K1.is_ComplexField:\n            return mkinexact(K1.__class__, K1, self)\n        if self.is_RealField and K1.is_RealField:\n            return mkinexact(self.__class__, self, K1)\n        if self.is_ComplexField or self.is_RealField:\n            return self\n        if K1.is_ComplexField or K1.is_RealField:\n            return K1\n\n        if self.is_AlgebraicField and K1.is_AlgebraicField:\n            return self.__class__(self.domain.unify(K1.domain), *_unify_gens(self.gens, K1.gens))\n        elif self.is_AlgebraicField:\n            return self\n        elif K1.is_AlgebraicField:\n            return K1\n\n        if self.is_RationalField:\n            return self\n        if K1.is_RationalField:\n            return K1\n\n        if self.is_FiniteField and self.domain == K1:\n            return self\n        if K1.is_FiniteField and K1.domain == self:\n            return K1\n\n        raise NotImplementedError\n\n    def __eq__(self, other):\n        \"\"\"Returns ``True`` if two domains are equivalent.\"\"\"\n        return isinstance(other, Domain) and self.dtype == other.dtype\n\n    def get_exact(self):\n        return self\n\n    def poly_ring(self, *symbols, **kwargs):\n        \"\"\"Returns a polynomial ring, i.e. `K[X]`.\"\"\"\n        from ..polys import PolynomialRing\n        return PolynomialRing(self, symbols, kwargs.get('order', lex))\n\n    def frac_field(self, *symbols, **kwargs):\n        \"\"\"Returns a fraction field, i.e. `K(X)`.\"\"\"\n        from ..polys import FractionField\n        return FractionField(self, symbols, kwargs.get('order', lex))\n",
        "778": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a set of data, develop a Python program to classify the data into two categories: low and high.\n\n### Input:\n[8, 5, 9, 1, 3, 10]\n\n### Output:\n# Define the threshold\nthreshold = 5\n\ndef classify(data):\n  result = []\n  for item in data:\n    if item <= threshold:\n      result.append('low')\n    else:\n      result.append('high')\n  return result\n\nprint(classify([8, 5, 9, 1, 3, 10]))\n# Output: ['high', 'low', 'high', 'low', 'low', 'high']",
        "779": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML page that displays a table containing a list of books with their ISBN and title.\n\n### Input:\n[{\"ISBN\": \"978-0134813071\", \"title\": \"Python Programming\" }, \n{\"ISBN\": \"978-1590595377\", \"title\": \"Advanced Python\" },\n {\"ISBN\": \"978-0302005945\", \"title\": \"PHP Programming\" }]\n\n### Output:\n<html>\n<head>\n  <title>Book List<\/title>\n<\/head>\n<body>\n  <h1>Book List<\/h1>\n  <table>\n    <thead>\n      <tr>\n        <th>ISBN<\/th>\n        <th>Title<\/th>\n      <\/tr>\n      <tbody>\n        <tr>\n          <td>978-0134813071<\/td>\n          <td>Python Programming<\/td>\n        <\/tr>\n        <tr>\n          <td>978-1590595377<\/td>\n          <td>Advanced Python<\/td>\n        <\/tr>\n        <tr>\n          <td>978-0302005945<\/td>\n          <td>PHP Programming<\/td>\n        <\/tr>\n    <\/thead>\n    <tbody>\n  <\/table>\n<\/body>\n<\/html>",
        "780": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to accept a list of numbers as input and find the second largest number from the list.\n\n### Input:\n[12, 23, 45, 22, 50]\n\n### Output:\n# Find the second largest number from a given list\n\nnumbers = [12, 23, 45, 22, 50]\n\n# Sort the list in ascending order\nnumbers.sort()\n\n# Get the second largest number\nsecond_largest_num = numbers[-2]\n\nprint('The second largest number in the list is:', second_largest_num)",
        "781": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n def __init__(self, val):\n self.val = val\n self.left = None\n self.right = None\n \nclass BinarySearchTree:\n def __init__(self):\n self.root = None\n \n def insert(self, val):\n newNode = Node(val)\n if self.root == None:\n self.root = newNode\n else:\n curr = self.root\n while curr:\n if val < curr.val:\n if curr.left == None:\n curr.left = newNode\n break\n else:\n curr = curr.left\n else:\n if curr.right == None:\n curr.right = newNode\n break\n else:\n curr = curr.right\n \n def delete(self, val):\n curr = self.root\n parent = None\n isLeftChild = True\n \n while curr.val != val:\n parent = curr\n if val < curr.val:\n curr = curr.left\n isLeftChild = True\n else:\n curr = curr.right\n isLeftChild = False\n \n if curr == None:\n return\n \n # if node has no children\n if curr.left == None and curr.right == None:\n if isLeftChild:\n parent.left = None\n else:\n parent.right = None\n \n # if node has one child\n elif curr.left == None:\n if isLeftChild:\n parent.left = curr.right\n else:\n parent.right = curr.right\n \nelif curr.right == None:\n if isLeftChild:\n parent.left = curr.left\n else:\n parent.right = curr.left\n \n # if node has two children\n else:\n succParent = curr\n succ = curr.right\n \n while succ.left != None:\n succParent = succ\n succ = succ.left\n \n # if successor is a direct right child\n if succParent == curr:\n succParent.right = succ.right\n else:\n succParent.left = succ.right\n \n curr.val = succ.val\n \n def traverse(self):\n if self.root is None:\n return\n curr = self.root\n self.traverseInOrder(curr)\n \n def traverseInOrder(self, curr):\n if curr.left != None:\n self.traverseInOrder(curr.left)\n print(curr.val)\n if curr.right != None:\n self.traverseInOrder(curr.right)",
        "782": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for sorting a list of numbers in increasing order.\n\n### Input:\n[3, 1, 8, 5, 7]\n\n### Output:\ndef sort_list(list):\n for _ in range(len(list)):\n for j in range(len(list)-1):\n if list[j] > list[j+1]:\n list[j], list[j+1] = list[j+1], list[j]\n return list\n\n# Testing the function\nexample_list = [3, 1, 8, 5, 7]\nsorted_list = sort_list(example_list)\n\nprint(sorted_list)\n# Output: [1, 3, 5, 7, 8]",
        "783": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to create a JSON object from a given Python list.\n\n### Input:\n\n\n### Output:\nimport json\n\ndef list_to_json(data):\n    return json.dumps(data)",
        "784": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a password that meets the following criteria: length of 8 characters, includes at least one uppercase, one lowercase and one numeric character.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase \n    digits = string.digits\n\n    characters = lowercase + uppercase + digits\n    password = ''.join(random.sample(characters,8))\n    return password\n\nprint(generate_password())",
        "785": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the performance of a given Python function by seeing how long it takes to run.\n\n### Input:\ndef count_words(text):\n    words = text.split(' ')\n    return len(words)\n\n### Output:\nimport time\n\ndef count_words(text):\n    start_time = time.time()\n    words = text.split(' ')\n    result = len(words)\n    end_time = time.time()\n    duration = end_time - start_time\n    return result, duration\n\nif __name__ == '__main__':\n    text = 'This sentence has five words'\n    result, duration = count_words(text)\n    print(f'The result is {result} and it took {duration} seconds!')",
        "786": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter a list of words by their length.\n\n### Input:\nword_list = [\"apple\", \"banana\", \"pear\", \"grape\", \"mango\"]\n\n### Output:\ndef filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list\n\nresult = filter_by_length(word_list, 5)\nprint(result)",
        "787": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to parse a sentence and identify all named entities mentioned in the sentence.\n\n### Input:\nThe founder of Apple Steve Jobs passed away.\n\n### Output:\nimport nltk\nfrom nltk import word_tokenize\n\nsentence = \"The founder of Apple Steve Jobs passed away.\"\n\ntokenized_text = word_tokenize(sentence)\n\ntagged = nltk.pos_tag(tokenized_text)\n\nnamedEnt = nltk.ne_chunk(tagged, binary=False)\n\nfor ne in namedEnt:\n if type(ne) == nltk.tree.Tree:  \n    entity_name = ' '.join(c[0] for c in ne.leaves())\n    print(entity_name)",
        "788": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can detect the language of a given piece of text.\n\n### Input:\nThe text is: \"Bonjour tout le monde\"\n\n### Output:\nimport detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr",
        "789": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a blank Python program to convert celsius to fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"\n    This function converts the given celsius value to its corresponding fahrenheit value\n    \"\"\"\n    fahrenheit = (celsius * (9\/5)) + 32\n    return fahrenheit",
        "790": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a simple HTTP server that can return the HTML page given below on a request.\n\n### Input:\n<html>\n<body>\n<h1>Hello, World!<\/h1>\n<\/body>\n<\/html>\n\n### Output:\nimport http.server\nfrom http.server import SimpleHTTPRequestHandler\n\nclass MyHandler(SimpleHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text\/html')\n    self.end_headers()\n\n    html = b\"\"\"\n        <html>\n        <body>\n        <h1>Hello, World!<\/h1>\n        <\/body>\n        <\/html>\n    \"\"\"\n\n    self.wfile.write(html)\n \nserver = http.server.HTTPServer(('', 8080), MyHandler)\nserver.serve_forever()",
        "791": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to send an email using Python.\n\n### Input:\n\n\n### Output:\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit()",
        "792": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input.\n\n### Input:\n[1, 2, 3, 4, 4, 5, 5]\n\n### Output:\ndef distinct_numbers(arr):\n return list(set(arr))",
        "793": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python that implements a Stack.\n\n### Input:\nNot applicable\n\n### Output:\nclass Stack: \n def __init__(self): \n self.items = [] \n\n def push(self, item): \n self.items.append(item) \n\n def pop(self):\n if not self.is_empty(): \n return self.items.pop()\n\n def is_empty(self):\n return len(self.items) == 0\n\n def peek(self):\n if not self.is_empty(): \n return self.items[-1]\n\n def size(self):\n return len(self.items)",
        "794": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a unit test for an existing Python function. The function should take a single argument and return the square of the argument.\n\n### Input:\nNot Applicable\n\n### Output:\nimport unittest\n\ndef square(x):\n   return x * x\n\nclass TestSquareFunction(unittest.TestCase):\n   def test_square(self):\n       self.assertEqual(square(3), 9)\n       self.assertEqual(square(5), 25)\n       self.assertEqual(square(7), 49)\n\nif __name__ == '__main__':\n     unittest.main()",
        "795": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to reverse a string passed as input.\n\n### Input:\nHello World!\n\n### Output:\ndef reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result)",
        "796": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a Person which contains attributes like name, age, height and address.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, height, address):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.address = address\n    \n    def describe(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Height:', self.height)\n        print('Address:', self.address)",
        "797": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string as input and prints out a list of all the words containing at least five letters.\n\n### Input:\n\"The quick brown fox jumps over the lazy dog\"\n\n### Output:\ndef five_letter_words(string):\n    words = string.split()\n    output_list = []\n    for word in words:\n        if len(word) >= 5:\n            output_list.append(word)\n    print(output_list)\n\nfive_letter_words(\"The quick brown fox jumps over the lazy dog\")\n# Output [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "798": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for finding the longest subarray with a given sum.\n\n### Input:\narr: [1, 2, 3, 4, 5], sum: 9\n\n### Output:\ndef longest_subarray_with_sum(arr, given_sum):\n  max_len = 0\n  curr_sum = 0\n  start_index = 0\n  n = len(arr)\n  for end_index in range(n):\n    curr_sum += arr[end_index]\n    while curr_sum > given_sum:\n      curr_sum -= arr[start_index]\n      start_index += 1\n    if curr_sum == given_sum and (end_index-start_index+1) > max_len:\n      max_len = end_index-start_index+1\n  return max_len\n\narr = [1, 2, 3, 4, 5]\ngiven_sum = 9\nprint(longest_subarray_with_sum(arr, given_sum))",
        "799": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class that will generate an output in JSON format from a provided input.\n\n### Input:\n\n\n### Output:\nclass JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input)",
        "800": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the hypotenuse of a right-angled triangle.\n\n### Input:\na = 5, b = 12\n\n### Output:\nimport math\n\n# calculate the hypotenuse\ndef calc_hypotenuse(a, b):\n    hyp = math.sqrt(a**2 + b**2)\n    print(\"The length of the hypotenuse is\", hyp)\n\n# input lengths of triangle sides\na = 5\nb = 12\n\n# call the function\ncalc_hypotenuse(a, b)",
        "801": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate random numbers between 1 and 2 using the random module in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_number = random.uniform(1, 2)\nprint(random_number)",
        "802": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?\n\n### Input:\n\u201cPython\u201d, \u201cProgramming\u201d\n\n### Output:\ndef new_string(s1, s2):\n    new_str = \"\"\n    for char in s2:\n        if char not in s1:\n            new_str += char\n\n    return new_str\n\nprint(new_string(\"Python\", \"Programming\")) # Output: \"roammig\"",
        "803": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to validate a credit card billing address.\n\n### Input:\nCredit card billing address example\n\nAnn Smith\n1234 Main St.\nAnytown, CA 99999\n\n### Output:\ndef validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True",
        "804": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful web service in Python which can add and subtract two numbers and return the result.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"\/\", methods=['GET', 'POST'])\ndef math():\n if request.method == 'POST':\n  num1 = int(request.form.get('num1'))\n  num2 = int(request.form.get('num2'))\n  operation = request.form.get('operation')\n\n  if operation == 'add':\n   result = num1 + num2\n  elif operation == 'subtract':\n   result = num1 - num2\n\n  return {'result': result}\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "805": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script for merging two sorted lists.\n\n### Input:\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8]\n\n### Output:\ndef merge_lists(list1, list2):\n merged_list = []\n\n # Iterate over both the lists \n # and compare their elements \n while len(list1) > 0 and len(list2) > 0:\n  if list1[0] < list2[0]:\n   merged_list.append(list1.pop(0))\n  else:\n   merged_list.append(list2.pop(0))\n\n# Check to see if any elements remain in one of the lists\n# and add them to the end of the merged list\n merged_list += list1\n merged_list += list2\n\n return merged_list\n\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8]\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # prints [1, 2, 5, 6, 8, 9]",
        "806": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to loop through a given list and print each item on a new line.\n\n### Input:\nmy_list = [\"apples\", \"oranges\", \"bananas\"]\n\n### Output:\nfor item in my_list:\n    print(item)",
        "807": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Genetic Algorithm in Python to find the maximum possible fitness score given a set of parameters.\n\n### Input:\nNumber of paramters = 3 \nRange of values for each parameter = [0, 1] \nFitness function = x1 * x2 + x3\n\n### Output:\nimport numpy as np\n\ndef fitness_function(X):\n return X[0] * X[1] + X[2]\n\ndef generate_genes(n, lower, upper):\n return np.random.uniform(lower, upper, n)\n\ndef GA(genes, fitness, lower, upper, mutation_rate, max_iterations):\n max_fitness = -float('inf')\n max_genes = None\n n = len(genes)\n for iteration in range(max_iterations):\n if max_fitness >= fitness_function(genes):\n break\n # Generate new population\n parent_generation = []\n for _ in range(int(n\/2)):\n parent_generation.append((genes, fitness_function(genes)))\n parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents \n # Select the best\n elite_genes, elite_fitness = parent_generation[0]\n # Crossover\n child_generation = []\n for _ in range(int(n\/2)):  # Breed new population\n parent_1 = np.random.choice(parent_generation)\n parent_2 = np.random.choice(parent_generation)\n child_1, child_2 = crossover(parent_1, parent_2, n)\n child_generation.append(child_1)\n child_generation.append(child_2)\n # Mutate\n mutants = []\n for child in child_generation:\n if np.random.uniform(0, 1) < mutation_rate:\n mutants.append(mutation(child, lower, upper))\n else:\n mutants.append(child)\n # Update \n for gene in mutants:\n genes = gene\n fitness = fitness_function(genes)\n if fitness > max_fitness:\n max_fitness = fitness\n max_genes = gene\n return max_fitness, max_genes\n\ndef crossover(parent_1, parent_2, n):\n n_split = np.random.randint(1, n)  # Split \n child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])\n child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])\n return child_1, child_2\n\ndef mutation(gene, lower, upper):\n for i, gene_value in enumerate(gene):\n if np.random.uniform(0, 1) < mutation_rate:\n gene[i] = np.random.uniform(lower, upper)\n return gene\n\n# Run GA\nn = 3\nlower = 0\nupper = 1\ngenes = generate_genes(n, lower, upper)\nmutation_rate = 0.1\nmax_iterations = 1000\nmax_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)\n\n# Print results\nprint(\"Maximum fitness score:\", max_fitness)\nprint(\"Parameters:\", max_genes)",
        "808": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table.\n\n### Input:\nA database table with columns item_id, item_name, price\nAn Excel spreadsheet with the same columns\n\n### Output:\nimport pandas as pd\nimport pyodbc\n\n# Connect to database\nserver = '<yourserver>'\ndatabase = '<yourdatabase>'\nusername = '<yourusername>'\npassword = '<yourpassword>'\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = conn.cursor()\n\n# Read Excel file\ndf = pd.read_excel('<yourfilename>')\n\n# Insert values into database\nfor index, row in df.iterrows():\n item_id = row['item_id']\n item_name = row['item_name']\n price = row['price']\n cursor.execute(f\"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})\")\nconn.commit()",
        "809": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the correlation between artists using the Last.fm dataset. Intermediate datasets will be saved in an HDF5 file and the final dataset will be saved in a database. The artist correlation matrix will be saved only for the single selected artist, used in the final step for the similarity comparison. Run the provided Python code to execute the calculation.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n''' Calculate the correlation between the artists. Intermediate datasets are\n    saved in the HDF5 file and the final dataset is saved in the database as\n    well. The artist correlation matrix is saved only for the single\n    selected artist, used in the final step for the similarity comparison.\n\n    #--------------------------------------------------------------------------#\n    Copyright (C) 2014, Zlatko Prpa <zprpa.ca@gmail.com>\n\n    This program is free software: you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n    #--------------------------------------------------------------------------#\n'''\n\n#-- standard libs\nimport os, sys, sqlite3, time, locale, itertools as it\n\n#-- add-on libs\nimport numpy, h5py\n\n#-- custom libs\nimport utils\n\n#==============================================================================#\n#--------------------------------- SETUP --------------------------------------#\n#==============================================================================#\n\nlog  = utils.ZpLog(   'logs\/' + os.path.basename(__file__) + '.log')\nelog = utils.ZpErrLog('logs\/' + os.path.basename(__file__) + '.ERROR-traceback.log')\nlog.write(''.ljust(150,'*'), skip_line=1, add_line=1)\n\n#-- setup number formatting\nlocale.setlocale( locale.LC_ALL, \"\" )\nfmt = locale.format\n\n#-- open the HDF5 file for the storage of the intermediate datasets\nh5f = h5py.File('data\/artist-correlation-datasets.h5','w')\nvlen_dtype = h5py.special_dtype(vlen=str)\n\n#==============================================================================#\n#------------------------- Load and process data ------------------------------#\n#==============================================================================#\n\n#--------------------------------------#\n#-- load data and apply basic filter   #\n#--------------------------------------#\n''' Load the records from the artist\/tag table.\n    There is no reason to apply any filter to this basic dataset, as opposite\n    to the tag correlation procedure. We do not need to generalize any\n    specific artist, as we had to do with tag data.\n    Otherwise, the whole processing logic is very much the same.\n'''\nlog.write('Load data.')\ndbs = sqlite3.connect('data\/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)\ncur = dbs.cursor()\ncur.execute(\"SELECT t.artist_name, t.tag, t.count FROM top_artist_tags t\")\nrecs = numpy.array([r for r in cur],dtype=[('art','O'),('tag','O'),('count','i4')])\ncur.close()\ndbs.close()\nlog.write('Loaded %s records.'%fmt('%12d',recs.shape[0],True).strip())\n\n#--------------------------------------#\n#-- prepare data for correlation calc  #\n#--------------------------------------#\n\nlog.write('Prepare data for the correlation calc.')\n\n#-- Get unique list of artists and tags.\nunique_art  = numpy.unique( recs['art'] )\nunique_tags = numpy.unique( recs['tag'] )\n\n''' Create 2d array to hold the vector for each artist. The vector size is 2x\n    the length of the list of the unique tags. First part will have the\n    value 0\/1, depending if the given artist is associated with the given tag.\n    The second part will have the tag ranking (count) value, at the same\n    position for the given tag.\n\n    Assuming the following tuples in the basic dataset [recs]:\n    (art1,tag1,90), (art1,tag2,80), (art1,tag3,60),\n    (art2,tag1,80),                 (art2,tag3,90),\n                    (art3,tag2,90), (art3,tag3,80),\n    (art4,tag1,50), (art4,tag2,70), (art4,tag3,70)\n\n    The \"unique_art\"  list is:  [art1,art2,art3,art4]\n    The \"unique_tags\" list is:  [tag1,tag2,tag3]\n    offset = 3\n    Single artist vector is [0,0,0,0,0,0], with logical mask as\n    [tag1,tag2,tag3,rank1,rank2,rank3].\n\n    Based on the above described data, the complete matrix \"tags_mx\"\n    will have 4 vectors with following values:\n    [[1,1,1,90,80,60],\n     [1,0,1,80, 0,90],\n     [0,1,1, 0,90,80],\n     [1,1,1,50,70,70]]\n\n    The sample data (tags for 1000 artists) is very small and this executes\n    fast, otherwise this loop would be a strong candidate for parallel\n    execution.\n'''\noffset = unique_tags.shape[0]\nart_mx = numpy.zeros((unique_art.shape[0],offset*2),'i4')\n\nfor i in xrange(unique_art.shape[0]):\n    #-- find indicies for all records in the basic dataset for given artist\n    idx = numpy.where( recs['art']==unique_art[i] )[0]\n    #-- get all tags and counts for the given artist\n    tags   = recs['tag'].take(idx)\n    counts = recs['count'].take(idx)\n    #-- find the index positions in the tag unique list, for all tag artists\n    idx = unique_tags.searchsorted(tags)\n    #-- fill in the first part of the artist vector with 1, for each tag found\n    numpy.put( art_mx[i], idx, 1 )\n    #-- fill in the tag count (rank) in the second part of the artist vector\n    numpy.put( art_mx[i], idx+offset, counts )\n\nds = h5f.create_dataset('unique_art', unique_art.shape, dtype=vlen_dtype)\nds[...] = unique_art\nds = h5f.create_dataset('unique_tags', unique_tags.shape, dtype=vlen_dtype)\nds[...] = unique_tags\nds = h5f.create_dataset('art_mx', art_mx.shape, dtype=art_mx.dtype)\nds[...] = art_mx\nh5f.flush()\nlog.write('Saved following datasets:')\nlog.write('unique_art:  shape->%s\\tdtype->%s'%(unique_art.shape, unique_art.dtype))\nlog.write('unique_tags: shape->%s\\tdtype->%s'%(unique_tags.shape,unique_tags.dtype))\nlog.write('art_mx:      shape->%s\\tdtype->%s'%(art_mx.shape,     art_mx.dtype), add_line=1)\n\n#--------------------------------------#\n#-- calculate artist correlation       #\n#--------------------------------------#\n\nlog.write('Calculate artist correlation.')\n\n''' Calculate correlation for each distinct pair of artist vectors.\n    Again, in case of high data volume, this could be executed in parallel\n    using the pool of worker processes.\n    For the present dataset, the approx size of the artist correlation matrix\n    is around 500K recs.\n'''\n#-- first iterator to get the matrix size\nitr  = ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0]))\nsize = sum(1 for _ in itr)\ncorr = numpy.empty( size, dtype=[('art1','O'),('art2','O'),('c','f8')] )\n#-- full iterator\nitr = it.izip(  ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0])),\n                (k for k in xrange(size)) )\nt = time.time()\nfor (x,y),z in itr:\n    c = numpy.corrcoef( art_mx[x], art_mx[y] )[0,1]\n    corr[z] = (unique_art[x], unique_art[y], c)\n    #-- update progres every 10K recs\n    if z%10000==0:\n        log.write_timing1( z, size, t, time.time(), out_type='TTY')\n\n''' Because the full dataset is somewhat big, save only the sample used later\n    in the \"similar artist\" comparison.\n    Comment out if you want to re-run and get all records.\n'''\nlog.write('Full artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype))\nsample_artist = 'Cyndi Lauper'\ni = numpy.where( (corr['art1']==sample_artist)|(corr['art2']==sample_artist) )[0]\ncorr = corr.take(i)\nlog.write('Sample artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype))\n\nds = h5f.create_dataset('corr', corr.shape, dtype=[('art1',vlen_dtype),('art2',vlen_dtype),('c','f8')])\nds[...] = corr\nh5f.close()\nlog.write('Saved sample artist correlation matrix: [corr] shape->%s\\tdtype->%s'%(corr.shape,corr.dtype),add_line=1)\n\n#-- save the records in the database as well\ndbs = sqlite3.connect('data\/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)\ncur = dbs.cursor()\ncur.execute(\"DELETE FROM artist_correlation\")\ncur.executemany(\"INSERT INTO artist_correlation VALUES (?,?,?)\",(r for r in corr))\nlog.write('Loaded %s records in the database.'%fmt('%6d',cur.rowcount,True))\ndbs.commit()\ncur.close()\ndbs.close()\n\nlog.write(''.ljust(150,'*'), add_line=1)\nlog.close()\n\n#==============================================================================#\n#------------------------------------------------------------------------------#\n#==============================================================================#\n",
        "810": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary structure that stores a warning message for each item in the following list.\n\n### Input:\n['apple', 'orange', 'banana']\n\n### Output:\n{\n 'apple': 'This apple is not fresh.',\n 'orange': 'This orange has gone bad.',\n 'banana': 'This banana is too ripe.'\n}",
        "811": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the maximum value of an array using divide and conquer technique.\n\n### Input:\narr = [1, 4, 9, 2, 6]\n\n### Output:\ndef find_max_Using_Divide_and_Conquer(arr):\n    # Base case \n    if len(arr) == 1: \n        return arr[0] \n    if len(arr) == 2: \n        return max(arr[0], arr[1]) \n  \n    # Recursive case \n    mid = len(arr)\/\/2 \n    max_left_sublist = find_max_Using_Divide_and_Conquer(arr[:mid]) \n    max_right_sublist = find_max_Using_Divide_and_Conquer(arr[mid:]) \n  \n    return max(max_left_sublist, max_right_sublist)",
        "812": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm for calculating the sum of two numbers, in Python.\n\n### Input:\n2, 20\n\n### Output:\ndef add_numbers(a, b):\n    return a + b\n\nprint(\"The sum of 2 and 20 is: \", add_numbers(2, 20))",
        "813": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to tell if a number is even or odd using Python.\n\n### Input:\nx = 5\n\n### Output:\ndef isEven(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\n\nif isEven(x):\n    print(\"It is even\")\nelse:\n    print(\"It is odd\")",
        "814": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python Code to swap two numbers without using a temporary variable.\n\n### Input:\n\n\n### Output:\n# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)",
        "815": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a recursive Python program that computes the factorial of an integer.\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n    if n == 0: \n        return 1 \n    else: \n        return n * factorial(n-1)",
        "816": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to differentiate the following equation:\ny = 5*x^2 + 3*x + 1\n\n### Input:\nNot applicable\n\n### Output:\ndef differentiate(x):\n  return 10*x + 3;\n\n# Test\nx = 2 \nprint(\"The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:\", differentiate(x)) # Output: 17",
        "817": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a basic cloud-based application using Google App Engine.\n\n### Input:\nNot applicable\n\n### Output:\n# main.py\n# The Google App Engine entry point with requests and responses\n\nfrom google.appengine.ext import ndb\nfrom flask import Flask\n\n# Define the Flask application\napp = Flask(__name__)\n\n@app.route('\/api\/v1\/ persons\/<id>', methods=['GET'])\ndef get_person_by_id(id):\n    person = ndb.Key(\"Person\", id).get()\n    if person is not None:\n        data = person.to_dict()\n        return json.dumps(data)\n    else:\n        # Return an error code if person with the provided ID was not found\n        return '{\"error\": \"Person not found\"}'\n\nif __name__ == '__main__':\n    # This is used when running locally only. When deploying to Google App\n    # Engine, a webserver process such as Gunicorn will serve the app.\n    app.run(host='127.0.0.1', port=8080, debug=True)\n\n# app.yaml\n\n# [START gae_python_app]\nruntime: python27\napi_version: 1\nthreadsafe: true\n\n# app.yaml\nenv_variables:\n  # Replace the placeholder below with your GCP project ID and make sure\n  # the variable is named `GCP_PROJECT`\n  GCP_PROJECT: <YOUR_PROJECT_ID>\n\n# app.yaml\nhandlers:\n- url: \/.*\n  script: main.app\n\n# [END gae_python_app]",
        "818": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for computing the Fibonacci sequence up to the nth number.\n\n### Input:\nNumber n: 10\n\n### Output:\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55",
        "819": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of numbers and creates a new list of even numbers only.\n\n### Input:\nlst = [2, 3, 5, 6, 7, 8, 10, 11]\n\n### Output:\ndef get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "820": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, debug the following program and explain what was the issue?\n\n### Input:\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n\nprint(greet(\"John\"))\n\n### Output:\nThe issue with the program is that it is not printing the message stored in the \"msg\" variable. To fix this, the program can be modified as follows:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    print(msg)\n\ngreet(\"John\")",
        "821": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a method to improve the efficiency of the following Python program.\n\n### Input:\ns = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = []\n    for c in s:\n        if c not in s_list:\n            s_list.append(c)\n    \n    return s_list\n\n### Output:\ns = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)",
        "822": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a program in Python which reverses a number?\n\n### Input:\nNumber = 12345\n\n### Output:\n# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number\/\/10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321",
        "823": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two numbers as arguments and returns their average.\n\n### Input:\n2, 3\n\n### Output:\ndef average(a, b): \n    return (a + b) \/ 2\n\nprint(average(2, 3))",
        "824": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a method to generate a random string.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generateRandomString(length):\n    chars = string.ascii_letters + string.digits\n    randStr = \"\".join(random.choice(chars) for i in range(length))\n    return randStr\n\nprint(generateRandomString(8))",
        "825": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to simulate a game of rock paper scissors.\n\n### Input:\n\n\n### Output:\n# We define the possible winning combination of the game\nWINNING_COMBINATION = {\n  \"rock\": \"scissors\",\n  \"paper\": \"rock\",\n  \"scissors\": \"paper\"\n}\n\ndef playRockPaperScissors():\n  # Player 1's turn\n  player1_choice = input(\"Player 1: Choose rock, paper or scissors: \")\n  # Player 2's turn\n  player2_choice = input(\"Player 2: Choose rock, paper or scissors: \")\n\n  # Find the winner\n  if WINNING_COMBINATION[player1_choice] == player2_choice:\n    print(\"Player 1 has won.\")\n  elif WINNING_COMBINATION[player2_choice] == player1_choice:\n    print(\"Player 2 has won.\")\n  else:\n    print(\"It's a tie!\")\n\nplayRockPaperScissors()",
        "826": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for a query to fetch data from a given MySQL table.\n\n### Input:\nTable Name: Products\nColumns: product_id, name, price\n\n### Output:\nimport mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)",
        "827": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to send an email.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\n# Set up the SMTP server\ns = smtplib.SMTP(host='your_host_address_here', port=your_port_here)\ns.starttls()\ns.login(\"your_username_here\", \"your_password_here\")\n\n# Send the mail\nmessage = \"A message\"\ns.sendmail(\"from@example.com\", \"to@example.com\", message)\n\n# Terminate the SMTP session and close the connection\ns.quit()",
        "828": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to make a prediction given a list of features.\n\n### Input:\nfeatures = ['feature1', 'feature2', 'feature3']\n\n### Output:\ndef predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value",
        "829": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code from this Python2 code to be compatible with Python3 code.\n\n### Input:\n#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print i\n\n### Output:\n#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print(i)",
        "830": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that represents a vector in a 3-dimensional space.\n\n### Input:\n\n\n### Output:\nclass Vec3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)",
        "831": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to filter out all non-prime numbers from a list.\n\n### Input:\nmyList = [2, 4, 5, 20, 44]\n\n### Output:\ndef filterPrimes(myList):\n    result = []\n    for i in myList:\n        is_prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result\n\nprint(filterPrimes(myList)) #[2, 5]",
        "832": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the compound interest for a given principal amount and a given interest rate.\n\n### Input:\nPrincipal amount = 1000\nInterest rate = 9%\n\n### Output:\n# Python program to calculate the compound interest  \n  \ndef compound_interest(principal, rate, time): \n  \n    # Calculates compound interest  \n    CI = principal * (pow((1 + rate \/ 100), time)) \n    print(\"Compound interest is\", CI) \n  \n# Driver Code  \ncompound_interest(1000, 9, 2)",
        "833": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate all possible permutations of a set of input strings.\n\n### Input:\n['a', 'b', 'c']\n\n### Output:\ndef permute(input):\n res = []\n for i in range(len(input)):\n for result in permute(input[:i] + input[i + 1:]):\n res.append([input[i]] + result)    \n return res\n\ninputValues = ['a', 'b', 'c']\npermutations = permute(inputValues)\n\nfor perm in permutations:\n print(perm)",
        "834": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code that adds a delimiter string between every list item.\n\n### Input:\n[\"apple\", \"orange\", \"mango\"]\n\n### Output:\ndef join_list_items(my_list, delimiter):\n    joined_list = delimiter.join(my_list)\n    return joined_list\n\nlist_string = join_list_items([\"apple\", \"orange\", \"mango\"], \", \")\nprint(list_string)\n# Output: apple, orange, mango",
        "835": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python script by running in parallel.\n\n### Input:\n\n\n### Output:\nimport concurrent.futures\n\ndef thread_function(script):\n  \/\/ Code to run the given script in parallel\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n  executor.map(thread_function, scripts)",
        "836": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that converts an integer into a binary representation as a string.\n\n### Input:\n13\n\n### Output:\ndef to_binary(num):\n  result = \"\"\n  while num > 0:\n   remainder = num % 2\n   num = num \/\/ 2\n   result = str(remainder) + result\n  return result\n\nprint(to_binary(13)) # '1101'",
        "837": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an example of a class definition in Python.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age",
        "838": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.\n\n### Input:\n[25, 15, 20]\n\n### Output:\ndef find_GCD(input_list): \n gcd = input_list[0] \n for num in input_list[1:]: \n gcd = find_GCD(gcd, num) \n return gcd\n\ndef find_GCD(a, b):\n while(b != 0): \n a, b = b, a%b \n return a",
        "839": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find out the number of unique keywords used in documents.\n\n### Input:\nA list of documents: \n\n['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']\n\n### Output:\ndocuments = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']\n\n# Get the words from the documents\nwords = []\nfor doc in documents:\n words += doc.split()\n\n# Get the unique words\nunique_words = set(words)\n\n# Print the number of unique words\nprint(f'The number of unique words is {len(unique_words)}')",
        "840": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement an API in Python for an online store application.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify, request\n \napp = Flask(__name__)\n\n@app.route('\/products', methods=['GET'])\ndef get_all_products():\n    # query database\n    products = []\n    # format result\n    return jsonify(products)\n\n@app.route('\/products\/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    # query database\n    product = {}\n    # format result\n    return jsonify(product)\n\n@app.route('\/products', methods=['POST'])\ndef create_product():\n    # get data from request\n    data = request.get_json()\n    # save to database\n    # format result\n    return jsonify({'message': 'Product added successfully.'}), 201\n\n@app.route('\/products\/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    # get data from the request\n    data = request.get_json()\n    # update data in the database\n    # format the result\n    return jsonify({'message': 'Product successfully updated.'})\n\n@app.route('\/products\/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    # delete data from the database\n    # format the result\n    return jsonify({'message': 'Product successfully deleted.'})",
        "841": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password",
        "842": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the Python code for a pipelie of KMeans and GaussianMixture clustering models.\n\n### Input:\nn_clusters = 10\n\n### Output:\nfrom sklearn.cluster import KMeans, GaussianMixture\ncluster = KMeans(n_clusters=n_clusters).fit(X)\npipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)",
        "843": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Naive Bayes classifier in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]\/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1\/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)\/(2*std**2)))\n        return probabilities",
        "844": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that contains functions to deregister HiveServer2 in preparation for an upgrade and to complete an upgrade. To use these functions, import the necessary modules and call the functions with the required parameters. The pre_upgrade_deregister() function runs the \"hive --service hiveserver2 --deregister <version>\" command to de-provision the server in preparation for an upgrade. The post_upgrade_deregister() function runs the same command to complete the upgrade. Both functions obtain the Kerberos ticket if security is enabled.\n\n### Input:\n\n\n### Output:\n\"\"\"\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\"\"\"\n\nimport os\nimport re\nfrom resource_management.core.logger import Logger\nfrom resource_management.core.exceptions import Fail\nfrom resource_management.core.resources.system import Execute\nfrom resource_management.core import shell\nfrom resource_management.libraries.functions import format\nfrom resource_management.libraries.functions import stack_select\nfrom resource_management.libraries.functions.version import format_stack_version\nfrom resource_management.libraries.functions.version import compare_versions\n\n\ndef pre_upgrade_deregister():\n  \"\"\"\n  Runs the \"hive --service hiveserver2 --deregister <version>\" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically; this process\n  could take a very long time.\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  \"\"\"\n  import params\n\n  Logger.info('HiveServer2 executing \"deregister\" command in preparation for upgrade...')\n\n  if params.security_enabled:\n    kinit_command=format(\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \")\n    Execute(kinit_command,user=params.smokeuser)\n\n  # calculate the current hive server version\n  current_hiveserver_version = _get_current_hiveserver_version()\n  if current_hiveserver_version is None:\n    raise Fail('Unable to determine the current HiveServer2 version to deregister.')\n\n  # fallback when upgrading because \/usr\/iop\/current\/hive-server2\/conf\/conf.server may not exist\n  hive_server_conf_dir = params.hive_server_conf_dir\n  if not os.path.exists(hive_server_conf_dir):\n    hive_server_conf_dir = \"\/etc\/hive\/conf.server\"\n\n  # deregister\n  hive_execute_path = params.execute_path\n  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.\n  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.\n  if \"upgrade\" == params.upgrade_direction:\n    # hive_bin\n    upgrade_target_version = format_stack_version(params.version)\n    if upgrade_target_version and compare_versions(upgrade_target_version, \"4.1.0.0\") >= 0:\n      upgrade_target_hive_bin = format('\/usr\/iop\/{version}\/hive\/bin')\n      if (os.pathsep + params.hive_bin) in hive_execute_path:\n        hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + upgrade_target_hive_bin)\n    # hadoop_bin_dir\n    upgrade_target_hadoop_bin = stack_select.get_hadoop_dir(\"bin\", upgrade_stack_only=True)\n    upgrade_source_hadoop_bin = params.hadoop_bin_dir\n    if upgrade_target_hadoop_bin and len(upgrade_target_hadoop_bin) > 0 and (os.pathsep + upgrade_source_hadoop_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + upgrade_source_hadoop_bin, os.pathsep + upgrade_target_hadoop_bin)\n\n  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)\n  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )\n\n\ndef _get_current_hiveserver_version():\n  \"\"\"\n  Runs \"hive --version\" and parses the result in order\n  to obtain the current version of hive.\n\n  :return:  the hiveserver2 version, returned by \"hive --version\"\n  \"\"\"\n  import params\n\n  try:\n    command = 'hive --version'\n    return_code, iop_output = shell.call(command, user=params.hive_user, path=params.execute_path)\n  except Exception, e:\n    Logger.error(str(e))\n    raise Fail('Unable to execute hive --version command to retrieve the hiveserver2 version.')\n\n  if return_code != 0:\n    raise Fail('Unable to determine the current HiveServer2 version because of a non-zero return code of {0}'.format(str(return_code)))\n\n  match = re.search('^(Hive) ([0-9]+.[0-9]+.\\S+)', iop_output, re.MULTILINE)\n\n  if match:\n    current_hive_server_version = match.group(2)\n    return current_hive_server_version\n  else:\n    raise Fail('The extracted hiveserver2 version \"{0}\" does not matching any known pattern'.format(iop_output))\n\ndef post_upgrade_deregister():\n  \"\"\"\n  Runs the \"hive --service hiveserver2 --deregister <version>\" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically; this process\n  could take a very long time.\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  \"\"\"\n  import params\n\n  Logger.info('HiveServer2 executing \"deregister\" command to complete upgrade...')\n\n  if params.security_enabled:\n    kinit_command=format(\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \")\n    Execute(kinit_command,user=params.smokeuser)\n\n  # calculate the current hive server version\n  current_hiveserver_version = _get_current_hiveserver_version()\n  if current_hiveserver_version is None:\n    raise Fail('Unable to determine the current HiveServer2 version to deregister.')\n\n  # fallback when upgrading because \/usr\/hdp\/current\/hive-server2\/conf\/conf.server may not exist\n  hive_server_conf_dir = params.hive_server_conf_dir\n  if not os.path.exists(hive_server_conf_dir):\n    hive_server_conf_dir = \"\/etc\/hive\/conf.server\"\n\n  # deregister\n  hive_execute_path = params.execute_path\n  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.\n  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.\n  # By now <stack-selector-tool> has been called to set 'current' to target-stack\n  if params.downgrade_from_version is not None:\n    hive_execute_path = _get_hive_execute_path(params.downgrade_from_version)\n\n  command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version)\n  Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 )\n\ndef _get_hive_execute_path(stack_version):\n  \"\"\"\n  Returns the exact execute path to use for the given stack-version.\n  This method does not return the \"current\" path\n  :param stack_version: Exact stack-version to use in the new path\n  :return: Hive execute path for the exact hdp stack-version\n  \"\"\"\n  import params\n\n  hive_execute_path = params.execute_path\n  formatted_stack_version = format_stack_version(stack_version)\n  if formatted_stack_version and compare_versions(formatted_stack_version, \"4.1\") >= 0:\n    # hive_bin\n    new_hive_bin = format('\/usr\/iop\/{stack_version}\/hive\/bin')\n    if (os.pathsep + params.hive_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + new_hive_bin)\n    # hadoop_bin_dir\n    new_hadoop_bin = stack_select.get_hadoop_dir_for_stack_version(\"bin\", stack_version)\n    old_hadoop_bin = params.hadoop_bin_dir\n    if new_hadoop_bin and len(new_hadoop_bin) > 0 and (os.pathsep + old_hadoop_bin) in hive_execute_path:\n      hive_execute_path = hive_execute_path.replace(os.pathsep + old_hadoop_bin, os.pathsep + new_hadoop_bin)\n  return hive_execute_path\n",
        "845": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to identify the characters in a given alphanumeric string.\n\n### Input:\n\n\n### Output:\n# Imports \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\n\n# Data \ndata = pd.DataFrame(columns=['string'])\ndata = data.append({'string':'3aF5yD'}, ignore_index=True)\n\n# Neural Network Architecture \nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),\n tf.keras.layers.LSTM(256, return_sequences=True),\n tf.keras.layers.Dense(32),\n tf.keras.layers.Dense(len(data), activation='softmax')\n])\n\n# Optimizer\nmodel.compile(optimizer='adam', loss='mse')\n\n# Train \nmodel.fit(data.values, epochs=10)\n\n# Prediction\npredictions = model.predict(data.values)\nprint(predictions)",
        "846": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to implement a binary search algorithm.\n\n### Input:\nNot applicable\n\n### Output:\ndef binary_search(arr, target):\n left = 0\n right = len(arr)-1\n while left <= right:\n mid = (left + right) \/\/ 2\n if arr[mid] > target:\n right = mid - 1\n elif arr[mid] < target:\n left = mid + 1\n else:\n return mid\n return -1",
        "847": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the following sequence using a while loop in Python.\n\n### Input:\n0, 1, 2, 4, 7, 11, ...\n\n### Output:\na, b = 0, 1\nwhile b < 100:\n    print(a)\n    a, b = b, a + b",
        "848": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet that creates a dictionary with keys 1,2,3 and string \"One\",\"Two\" and \"Three\" as the corresponding values\n\n### Input:\n\n\n### Output:\nmyDict = {1: \"One\", 2:\"Two\", 3:\"Three\"}",
        "849": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor the following code to be more pythonic\n\n### Input:\ndef print_all(sequences):\n    for sequence in sequences:\n        print(sequence)\n\n### Output:\ndef print_all(sequences):\n    [print(sequence) for sequence in sequences]",
        "850": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple game using Python and Pygame.\n\n### Input:\n\n\n### Output:\nimport pygame\nimport random\n \n# Define some colors\nblack    = (   0,   0,   0)\nwhite    = ( 255, 255, 255)\ngreen    = (   0, 255,   0)\nred      = ( 255,   0,   0)\n \n# This sets the width and height of each grid location\nwidth=20\nheight=20\n \n# This sets the margin between each cell\nmargin=5\n \n# Create a 2 dimensional array. A two dimensional\n# array is simply a list of lists.\ngrid=[]\nfor row in range(10):\n    # Add an empty array that will hold each cell\n    # in this row\n    grid.append([])\n    for column in range(10):\n        grid[row].append(0) # Append a cell\n \n# Set row 1, cell 5 to one. (Remember rows and\n# column numbers start at zero.)\ngrid[1][5] = 1\n \n# Initialize pygame\npygame.init()\n  \n# Set the height and width of the screen\nsize=[255,255]\nscreen=pygame.display.set_mode(size)\n \n# Set title of screen\npygame.display.set_caption(\"Array Backed Grid\")\n \n# Loop until the user clicks the close button.\ndone=False\n  \n# Used to manage how fast the screen updates\nclock=pygame.time.Clock()\n \n# -------- Main Program Loop -----------\nwhile done==False:\n    for event in pygame.event.get(): # User did something\n        if event.type == pygame.QUIT: # If user clicked close\n            done=True # Flag that we are done so we exit this loop\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE:\n                grid[1][5] = 0\n    # Set the screen background\n    screen.fill(white)\n \n    # Draw the grid\n    for row in range(10):\n        for column in range(10):\n            color = white\n            if grid[row][column] == 1:\n                color = green\n            pygame.draw.rect(screen,\n                             color,\n                             [(margin+width)*column+margin,\n                              (margin+height)*row+margin,\n                              width,\n                              height])\n                              \n    # Limit to 20 frames per second\n    clock.tick(20)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n      \n# Be IDLE friendly. If you forget this line, the program will 'hang'\n# on exit.\npygame.quit ()",
        "851": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program using Python to calculate the factorial of a positive number.\n\n### Input:\nNumber = 4\n\n### Output:\n#Calculate the Factorial of a Positive Number\n\n#Get input\nfactNum = 4\n\n#Calculate and print result\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\n\nprint(\"The factorial of 4 is:\", factNum)",
        "852": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to complete the implementing of a searching algorithm.\n\n### Input:\nList: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nTarget item: 7\n\n### Output:\n\"\"\"\nWrite a Python program to complete the implementing of a searching algorithm\n\"\"\"\n\n# Function to implement searching algorithm \ndef search(list, item): \n    # traverse through all list elements\n    for i in range(len(list)): \n        if list[i] == item: \n            return i \n      \n    # item not found\n    return -1\n  \n# main \nif __name__ == \"__main__\": \n    # Given list \n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    item = 7\n  \n    # Calling Function \n    index = search(list, item) \n  \n    if index != -1: \n        print(\"Item found at index\", index) \n    else:\n        print(\"Item is not found in list\")",
        "853": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract data from a web page using Regular Expressions (RegEx).\n\n### Input:\n<div class=\"data\">\n<h1>Name: John Doe<\/h1>\n<h3>Age: 25<\/h3>\n<h3>Location: Los Angeles, CA<\/h3>\n<\/div>\n\n### Output:\nimport re\n\nhtml = \"<div class=\\\"data\\\"> \\\n <h1>Name: John Doe<\/h1> \\\n <h3>Age: 25<\/h3> \\\n <h3>Location: Los Angeles, CA<\/h3> \\\n<\/div>\"\n\npattern = '<h1>Name: (.*)<\/h1>.*<h3>Age: (.*)<\/h3>.*<h3>Location: (.*)<\/h3>'\n\ndata = re.search(pattern, html)\n\nname = data.group(1)\nage = data.group(2)\nlocation = data.group(3)\n\nprint('Name: {}'.format(name))\nprint('Age: {}'.format(age))\nprint('Location: {}'.format(location))",
        "854": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line tool for voting on git commands. The tool should have the following sub-commands: \"vote\", \"list\", \"tally\", and \"elect\". The \"vote\" sub-command should allow a user to vote for a specific commit. The \"list\" sub-command should list all votes. The \"tally\" sub-command should tally all votes. The \"elect\" sub-command should elect a commit based on the number of votes. The tool should be implemented using Python and the Git command-line tool.\n\n### Input:\n\n\n### Output:\nimport argparse\nimport collections\nimport re\nimport subprocess\n\n\nNOTES_REF = 'refs\/notes\/votes'\n\n\nVote = collections.namedtuple('Vote', ['commit', 'user'])\n\n\n\ndef vote(args):\n\tassert args.user, 'TODO: determine user automatically'\n\tvote = 'vote:%s' % args.user\n\tsubprocess.check_call([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT],\n\t\tcwd=args.repo_dir)\n\t# TODO: prevent voting twice as same user\n\n\ndef get_all_votes(repo_dir):\n\toutput_bytes = subprocess.check_output([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'list'],\n\t\tcwd=repo_dir)\n\toutput = output_bytes.decode('utf-8')\n\tfor line in output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tvotenote_ref, commit_id = line.split()\n\t\t# TODO use dulwich or something more efficient here\n\t\tvotenote_bytes = subprocess.check_output(\n\t\t\t['git', 'show', votenote_ref],\n\t\t\tcwd=repo_dir)\n\n\t\tvotenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes\n\t\tfor voteline in votenote_content.splitlines():\n\t\t\tif not voteline:\n\t\t\t\tcontinue\n\t\t\tm = re.match(r'^vote:(?P<user>[a-z0-9@._]+)$', voteline.strip()) # TODO check re for user spec\n\t\t\tif not m:\n\t\t\t\tprint('Skipping crap %r' % voteline)\n\t\t\t\tcontinue\n\t\t\tuser = m.group('user')\n\n\t\t\tyield Vote(commit=commit_id, user=user)\n\n\ndef print_list(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tall_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user))\n\tfor v in all_votes_sorted:\n\t\tprint('%s: +1 from %s' % (v.commit, v.user))\n\n\ndef tally(all_votes):\n\t\"\"\" Returns a dict commit id => set of users \"\"\"\n\tres = collections.defaultdict(set)\n\tfor v in all_votes:\n\t\tres[v.commit].add(v.user)\n\treturn res\n\n\ndef print_tally(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tfor commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])):\n\t\tprint('%s: %d votes' % (commit, len(votes)))\n\n\ndef print_elect(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\twinner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items())\n\t# TODO more algorithms\n\tprint('%s won the election with %d votes' % (winner_commit, winner_vcount))\n\n\ndef main():\n\tparser = argparse.ArgumentParser('Vote on git commands')\n\tparser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify')\n\tsubparsers = parser.add_subparsers(dest='cmd')\n\tvote_parser = subparsers.add_parser('vote', help='Vote for commit')\n\tvote_parser.add_argument('--user', metavar='USER_ID', help='ID of the user to vote as')\n\tvote_parser.add_argument('COMMIT', help='reference to the commit to vote for')\n\tsubparsers.add_parser('list', help='List all votes')\n\tsubparsers.add_parser('tally', help='Tally all votes')\n\tsubparsers.add_parser('elect', help='Elect a commit')\n\n\targs = parser.parse_args()\n\tif args.cmd == 'vote':\n\t\tvote(args)\n\telif args.cmd == 'list':\n\t\tprint_list(args)\n\telif args.cmd == 'tally':\n\t\tprint_tally(args)\n\telif args.cmd == 'elect':\n\t\tprint_elect(args)\n\telse:\n\t\tparser.print_help()\n\nif __name__ == '__main__':\n\tmain()\n",
        "855": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the product of elements in a list.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])",
        "856": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an interface for a Python program that parses HTML documents.\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup",
        "857": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given code snippet from Swift to Python.\n\n### Input:\nlet username = \"John\"\nlet score = 123\n\n### Output:\nusername = \"John\"\nscore = 123",
        "858": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to optimize search engine queries.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_keywords_from_page(url):\n    headers = {\n        'user-agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/60.0.3112.113 Safari\/537.36'\n    }\n\n    response = requests.get(url, headers = headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    keywords = soup.find('meta', attrs={'name':'keywords'})\n    if keywords:\n        return keywords['content']\n    else:\n        return \"\"\n\n# Optimize search queries by finding keywords from a given website\ndef optimize_query(url):\n    keywords = get_keywords_from_page(url)\n    if keywords:\n        return keywords\n    else:\n        return url",
        "859": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a function to calculate the difference of two date objects in Python.\n\n### Input:\n\n\n### Output:\nimport datetime\n\ndef date_diff(date1, date2):\n    \"\"\"Returns the difference between two date objects in days\"\"\"\n    diff_date = date2 - date1\n    return diff_date.days",
        "860": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list.\n\n### Input:\nlst=[5,3,1,7,9]\n\n### Output:\ndef first_last(lst):\n    first_element = lst[0]\n    last_element = lst[-1]\n    return [first_element, last_element]\n\nprint(first_last([5,3,1,7,9]))",
        "861": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to store customer purchase histories.\n\n### Input:\n\n\n### Output:\nclass CustomerHistory:\n  def __init__(self, customer_id):\n    self.customer_id = customer_id\n    self.purchase_history = []\n\n  def add_purchase(self, product):\n    self.purchase_history.append(product)\n\n  def get_purchase_history(self):\n    return self.purchase_history",
        "862": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that can find the longest common substring between two strings.\n\n### Input:\nFIRST STRING = \u201cabcdaf\u201d\nSECOND STRING = \u201czbcdf\u201d\n\n### Output:\ndef lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))",
        "863": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network model in Python for text classification.\n\n### Input:\n\n\n### Output:\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=64, input_length=50))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])",
        "864": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to perform a binary search on a sorted array.\n\n### Input:\nA sorted array arr = [1, 3, 5, 7, 8, 9, 12]\n\n### Output:\ndef binary_search(arr, target):\n  start = 0\n  end = len(arr) -1\n  while start <= end:\n    mid = (start + end) \/\/ 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] > target:\n      end = mid - 1\n    else:\n      start = mid + 1\n  return -1",
        "865": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to insert a node at the head of a given linked list.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n def __init__(self, data):\n  self.data = data\n  self.next = None\n\nclass LinkedList:\n def __init__(self):\n  self.head = None\n  \n # Recursive function to insert a node at the beginning of the linked list \n def insert_at_head(self, new_node): \n  current_head = self.head \n  new_node.next = current_head\n  self.head = new_node\n\nlist = LinkedList()\nlist.insert_at_head(Node(1))",
        "866": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the minimum number of coins that sum up to a given amount.\n\n### Input:\n\n\n### Output:\ndef find_min_coins(amount, denominations):\n    min_coins = [float(\"inf\")] * (amount + 1)\n    min_coins[0] = 0\n\n    for i in range(1, amount + 1):\n        for c in denominations:\n            if i - c >= 0:\n                min_coins[i] = min(min_coins[i - c] + 1, min_coins[i])\n\n    return min_coins[amount]",
        "867": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for performing a linear search on a given list.\n\n### Input:\n[1, 2, 3, 4, 5, 6], 5\n\n### Output:\ndef linear_search(list, n): \n  \n    for i in range(len(list)): \n  \n        if list[i] == n: \n            return i \n\nlist = [1, 2, 3, 4, 5, 6] \nn = 5\n\nx = linear_search(list, n) \n\nif x == None: \n    print(\"Element is not present in the list\") \nelse: \n    print(\"Element is present at index\", x)",
        "868": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to replace all the vowels in a string with the character '$'.\n\n### Input:\nPython\n\n### Output:\ndef replace_vowels(s): \n    # Initialize an empty string \n    new_s = '' \n  \n    # Iterate through each character\n    for ch in s: \n        # Check if the character is a vowel \n        if (ch == 'a' or ch == 'e' or ch == 'i' \n            or ch == 'o' or ch == 'u'): \n            # Replace it with '$'\n            new_s = new_s + '$' \n        else: \n            # Copy the same character \n            new_s = new_s + ch \n\n    return new_s \n\n\nstr = 'Python'\nresult = replace_vowels(str)\nprint(result)",
        "869": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of two numbers (input in separate lines) and print it.\n\n### Input:\n2\n3\n\n### Output:\nnum1 = int(input())\nnum2 = int(input())\nsum_of_nums\nprint(sum_of_nums)",
        "870": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given data, create a class in Python and add some methods to the class.\n\n### Input:\nclass File:\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n### Output:\nclass File:\n    \"\"\"A simple file class\"\"\"\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n    def get_name(self):\n        return self.name\n\n    def get_size(self):\n        return self.size\n\n    def get_type(self):\n        return self.type",
        "871": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you convert a given HTML page into PDF using Python?\n\n### Input:\n\n\n### Output:\nfrom xhtml2pdf import pisa\n \n# open the page\nwith open('input.html', 'r') as f:\n    html = f.read()\n \n# convert to PDF\npdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))\n \n# print the result\nif not pdf.err:\n    print('PDF created successfully')\nelse:\n    print('Error creating PDF')",
        "872": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a password strength checker in Python that follows the NIST guidelines.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef check_password_strength(password):\n    '''This function checks if the given password is strong according to NIST guidelines'''\n    # check if password is atleast 8 characters long\n    if len(password) < 8:\n        return False\n    \n    # check if password contains atleast one lowercase letter\n    if not re.search('[a-z]', password):\n        return False\n    \n    # check if password contains atleast one uppercase letter\n    if not re.search('[A-Z]', password):\n        return False\n    \n    # check if password contains atleast one number\n    if not re.search('[0-9]', password):\n        return False\n    \n    return True",
        "873": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate two functions in Python to capitalize and uncapitalize each character of a string.\n\n### Input:\nstring = 'hello world'\n\n### Output:\ndef capitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.capitalize()\n  return result\n\ndef uncapitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.lower()\n  return result",
        "874": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python that can make a given webpage mobile-friendly.\n\n### Input:\n\n\n### Output:\nimport bs4\nfrom urllib.request import urlopen\n\ndef make_webpage_mobile_friendly(url):\n    html = urlopen(url)\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n    head_html = soup.find('head')\n    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}\n    meta_tag = soup.new_tag('meta', attrs=meta_attribute)\n    head_html.append(meta_tag)\n    html_body = soup.find('body')\n    for element in html_body.find_all('div', {'class': 'large-wrapper'}):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n    for element in html_body.find_all('img'):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n\n    return soup.prettify()",
        "875": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to implement Bubble Sort in Python.\n\n### Input:\n\n\n### Output:\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "876": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter a list of strings so that strings containingthe substring \"bad\" are removed.\n\n### Input:\nlist_of_string = [\"good\",\"bad\",\"weird\",\"great\",\"amazing\"]\n\n### Output:\nlist_of_string = [\"good\",\"weird\",\"great\",\"amazing\"]\n\nfiltered_list = [s for s in list_of_string if \"bad\" not in s]\n\nprint(filtered_list)",
        "877": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to add two matrices.\n\n### Input:\nX = [[1, 2, 3], \n    [3, 4, 5], \n    [6, 7, 8]]\nY = [[2, 3, 4],\n    [5, 6, 7],\n    [8, 9, 10]]\n\n### Output:\ndef add_matrices(X, Y): \n  \n    result = [[0, 0, 0], \n            [0, 0, 0], \n            [0, 0, 0]] \n  \n    # iterate through rows \n    for i in range(len(X)): \n      \n        # iterate through columns \n        for j in range(len(X[0])): \n            result[i][j] = X[i][j] + Y[i][j] \n  \n    for r in result: \n        print(r)",
        "878": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a multi-dimensional array, write a python code snippet to find the sum of its elements.\n\n### Input:\narr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]\n\n### Output:\n# Use nested list comprehension to calculate the sum \ntotal_sum = sum([sum(row) for row in arr])",
        "879": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following Python code, determine how many lines of code are in the code.\n\n### Input:\ndef foo(x):\n    y = x\/2\n    z = x\/3\n    return x+y-z\n\n### Output:\n4",
        "880": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an integer n as input and prints out n lines of \"Hello World!\"\n\n### Input:\n5\n\n### Output:\ndef hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")",
        "881": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to define a class object in Python.\n\n### Input:\n\n\n### Output:\nclass Object:\n  def __init__(self,attr1,attr2,attr3):\n    self.attr1 = attr1\n    self.attr2 = attr2\n    self.attr3 = attr3",
        "882": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.\n\n### Input:\n\"Hello,@ $World.\"\n\n### Output:\nimport re\n\ndef remove_non_alphanum(s):\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\n\nstring = \"Hello,@ $World.\"\nres = remove_non_alphanum(string) \n\nprint(res)",
        "883": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application for running a text-based adventure game. The application should support user input and provide a textual feedback for each action.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport os\n\n# define the characters\nvillain = { \"name\": \"Evil Wizard\", \"hp\": 100 }\nhero = { \"name\": \"Hero\", \"hp\": 100 }\n\ndef fight_evil_wizard():\n    print(\"You attack the Evil Wizard!\")\n    # randomly choose to either hit or miss the target\n    is_hit = random.choice([True, False])\n    if is_hit:\n        print(\"You hit the Evil Wizard!\")\n        villain[\"hp\"] -= 10\n    else:\n        print(\"You missed!\")\n    # print out the hp of each character \n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\ndef manage_hp(target, value):\n    target[\"hp\"] += value\n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\nwhile True:\n    os.system(\"cls\")  # clear the terminal output\n    # check if either character is alive\n    if hero[\"hp\"] <= 0:\n        print(\"You have been defeated!\")\n        break\n    if villain[\"hp\"] <= 0:\n        print(\"You have slain the Evil Wizard!\")\n        # you won!\n        break\n\n    # show the user the options\n    print(\"What would you like to do?\")\n    print(\"1. Fight Evil Wizard\")\n    print(\"2. Heal (HP +10)\")\n    print(\"3. Run away\")\n    user_input = int(input(\">> \"))\n\n    if user_input == 1:\n        fight_evil_wizard()\n    elif user_input == 2:\n        manage_hp(hero, 10)\n    elif user_input == 3:\n        print(\"You run away from the Evil Wizard!\")\n        break\n    else:\n        print(\"Invalid input!\")",
        "884": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.\n\n### Input:\n\n\n### Output:\n# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))",
        "885": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a SQL query to find all the authors whose book titles contain \"python\" in a given database.\n\n### Input:\n\n\n### Output:\nSELECT author \nFROM books \nWHERE title LIKE '%python%';",
        "886": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a function in Python to test whether a string is a palindrome.\n\n### Input:\n\"aba\"\n\n### Output:\ndef is_palindrome(s): \n    # Reverse the string \n    rev = s[::-1] \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return True\n    return False\n  \n# Driver code \ns = \"aba\"\nans = is_palindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\")",
        "887": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to search through a list of integers and find the smallest number.\n\n### Input:\nint_list = [25, 64, 11, 43, 7]\n\n### Output:\ndef find_smallest(int_list):\n    # set the minimum value to the first item in the list initially\n    min_val = int_list[0]\n    # loop over the list and compare each item to the minimum value\n    for num in int_list:\n        if num < min_val:\n            min_val = num\n    # return the minimum value\n    return min_val",
        "888": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two strings as input and returns the total of the lengths of the two strings.\n\n### Input:\nstring1 = \"example\"\nstring2 = \"string\"\n\n### Output:\ndef string_length_sum(string1, string2):\n    return len(string1) + len(string2)\n\nresult = string_length_sum(string1, string2)",
        "889": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Tic Tac Toe game.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a Python program to create a Tic Tac Toe game\n\"\"\"\n\n# global variables \nboard = [\"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\"] \ngame_is_still_going = True \n  \n# who is the winner \nwinner = None\n  \n # whose turn is it \ncurrent_player = \"X\"\n\n\n# display board\ndef display_board(): \n    print(board[0] + \" | \" + board[1] + \" | \" + board[2])\n    print(board[3] + \" | \" + board[4] + \" | \" + board[5]) \n    print(board[6] + \" | \" + board[7] + \" | \" + board[8])\n  \n  \n# play a game of tic tac toe \ndef play_game(): \n    \n    # display initial board \n    display_board() \n  \n    # while game is still going \n    while game_is_still_going: \n  \n        # assign handle turn to a variable \n        handle_turn(current_player) \n  \n        # check if game is finished \n        check_if_game_over()\n  \n        # flip to another player \n        flip_player() \n          \n    # check if winner  \n    if winner == \"X\" or winner == \"O\": \n        print(\"Winner is: \" + winner) \n    elif winner == None: \n        print(\"Tie.\") \n\n# handle a single turn of a player \ndef handle_turn(player): \n  \n    position = input(\"Choose a position from 1-9: \") \n    position = int(position) - 1\n  \n    board[position] = player \n  \n    display_board() \n  \n  \n# check win\ndef check_if_game_over(): \n    check_if_win() \n    check_if_tie() \n  \n# check rows, columns and diagonals for a win \ndef check_if_win(): \n    # set global variables \n    global winner \n    # check rows \n    row_winner = check_rows() \n    # check columns \n    column_winner = check_columns() \n    # check diagonals \n    diagonal_winner = check_diagonals() \n    if row_winner: \n        # there is a win \n        winner = row_winner \n    elif column_winner: \n        # there is a win \n        winner = column_winner \n    elif diagonal_winner: \n        # there is a win \n        winner = diagonal_winner \n    else: \n        # there is no win \n        winner = None\n    return \n  \n# check rows for a win \ndef check_rows(): \n    # set global varibales \n    global game_is_still_going \n    # check if any of the rows have all the same values (and is not empty) \n    row_1 = board[0] == board[1] == board[2] != \"-\" \n    row_2 = board[3] == board[4] == board[5] != \"-\" \n    row_3 = board[6] == board[7] == board[8] != \"-\" \n    # if any row does have a match, flag that there is a win \n    if row_1 or row_2 or row_3: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if row_1: \n        return board[0] \n    elif row_2: \n        return board[3] \n    elif row_3: \n        return board[6] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check columns for a win \ndef check_columns(): \n    # set global variables \n    global game_is_still_going \n    # check if any of the columns have all the same values (and is not empty) \n    column_1 = board[0] == board[3] == board[6] != \"-\" \n    column_2 = board[1] == board[4] == board[7] != \"-\" \n    column_3 = board[2] == board[5] == board[8] != \"-\" \n    # if any column does have a match, flag that there is a win \n    if column_1 or column_2 or column_3: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if column_1: \n        return board[0] \n    elif column_2: \n        return board[1] \n    elif column_3: \n        return board[2] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check diagonals for a win \ndef check_diagonals(): \n    # set global variables \n    global game_is_still_going \n    # check if any of the diagonals have all the same values (and is not empty) \n    diagonal_1 = board[0] == board[4] == board[8] != \"-\" \n    diagonal_2 = board[2] == board[4] == board[6] != \"-\" \n    # if any diagonal does have a match, flag that there is a win \n    if diagonal_1 or diagonal_2: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if diagonal_1: \n        return board[0] \n    elif diagonal_2: \n        return board[2] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check if there is a tie \ndef check_if_tie(): \n    # set global variables \n    global game_is_still_going \n    # if board is full \n    if \"-\" not in board: \n        game_is_still_going = False \n    # return true if there is a tie, false if not \n    return\n\n# flip to another player\ndef flip_player(): \n    # global variables we need \n    global current_player \n    # if current player was x, make it o \n    if current_player == \"X\": \n        current_player = \"O\"\n    # if current player was o, make it x \n    elif current_player == \"O\": \n        current_player = \"X\"\n\nif __name__ == '__main__':\n    play_game()",
        "890": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all duplicate items from a list.\n\n### Input:\n[1, 2, 2, 4, 5]\n\n### Output:\ndef remove_duplicates(lst): \n\treturn list(dict.fromkeys(lst)) \n\nresult = remove_duplicates([1, 2, 2, 4, 5]) \nprint(result)",
        "891": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string as an argument, write a Python function to find the longest palindrome in the string.\n\n### Input:\n\n\n### Output:\ndef longest_palindrome(s):  \n    longest_p = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:\n                longest_p = len(s[i:j])\n    return longest_p",
        "892": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python code to find all prime numbers up to a given limit.\n\n### Input:\nn = 10\nfor num in range(2, n+1): \n\tfor i in range(2, num): \n\t\tif num % i == 0: \n\t\t\tbreak\n\telse: \n\t\tprint(num, end = ' ')\n\n### Output:\n# Optimized Python code to find prime numbers in a range\n# using primality tests\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n\n    return True\n\n\n# Generate a range of consecutive numbers \n# and check for each if it is prime\ndef prime_numbers(n):\n    for num in range(2, n+1):\n        if is_prime(num):\n            print(num, end=' ')\n\n\n# Driver code\nif __name__ == '__main__':\n    n = 10\n    prime_numbers(n)",
        "893": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the second most frequent value in the given array.\n\n### Input:\n[1, 2, 3, 3, 3, 2, 4, 4, 1, 5]\n\n### Output:\ndef second_most_frequent(arr):\n counts = {}\n # Count the frequency of the elements\n for item in arr:\n if item in counts:\n counts[item] += 1\n else:\n counts[item] = 1\n # Sort the list by frequency\n sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n # Return the second most frequent element\n return sorted_count[1][0]\n \nprint(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))",
        "894": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following python code array to get the maximum value from it in one pass.\n\n### Input:\n[-5, 2, 3, 4, 6, -8]\n\n### Output:\ndef find_max(arr):\n  max_so_far = arr[0]\n  current_max = arr[0]\n  \n  for i in range(1, len(arr)):\n    current_max = max(arr[i], current_max + arr[i])\n    max_so_far = max(max_so_far, current_max)\n  \n  return max_so_far\n\narr = [-5, 2, 3, 4, 6, -8]\nmax_val = find_max(arr)\n\nprint(max_val) # 10",
        "895": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the least common multiple of two integers\n\n### Input:\n6, 8\n\n### Output:\ndef lcm(x, y):\n  if x > y:\n    greater = x\n  else:\n    greater = y\n  while(True):\n    if((greater % x == 0) and (greater % y == 0)):\n      lcm = greater\n      break\n    greater += 1\n  return lcm",
        "896": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to edit a string and remove the vowels from it.\n\n### Input:\nHello world\n\n### Output:\ndef remove_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for character in string: \n        if character not in vowels: \n            result += character\n    return result\n  \nprint (remove_vowels(\"Hello world\"))",
        "897": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.\n\n### Input:\nNo Input\n\n### Output:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return (2 * self.length) + (2 * self.width)",
        "898": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given code in Python to run faster.\n\n### Input:\ndef factorial(n):\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n\n### Output:\ndef factorial(n):\n    fact = 1\n    while n > 1:\n        fact *= n\n        n -= 1\n    return fact\n\n# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster.",
        "899": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given JSON object to a Python list.\n\n### Input:\n{\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\n\n### Output:\ndata = {\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\n\nlist = list(data.values())\n \nprint(list)\n# Output: [\"John\", 25, \"programming\"]",
        "900": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a linear regression model using Python to predict the prices of houses.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y)",
        "901": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform sentiment analysis using a pre-trained model.\n\n### Input:\nNot applicable\n\n### Output:\nimport torch\n\n# Load the pre-trained model\nmodel = torch.load('model.pt')\n\n# Get the input data\ninput_data = \"This movie was amazing!\"\n\n# Convert the input data into a tensor\ninput_tensor = torch.tensor([input_data])\n\n# Make a prediction with the pre-trained model\nprediction = model(input_tensor)\n\n# Get the results\nif prediction[0][0].item() > 0.5:\n  print('Positive sentiment')\nelse:\n  print('Negative sentiment')",
        "902": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes two lists as input and returns the elements in common.\n\n### Input:\nlist1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\n### Output:\nlist1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2))",
        "903": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a short Python script to compute the average temperature of a given set of temperatures.\n\n### Input:\ntemperatures = [71,77,82,81,75,72,78]\n\n### Output:\ndef average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total\/len(temperatures)\n\nprint(average(temperatures))",
        "904": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that renders a stereo scene using OpenGL. To use it, follow these steps:\n\n1. Install Python and OpenGL.\n2. Run the script in a Python environment.\n3. Wait for the scene to render in a new window.\n4. Use the arrow keys to move the objects in the scene.\n5. Press the ESC key to quit the program.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n'''Test for an openGL based stereo renderer - test binocular rendering to a single window\n\nDavid Dunn\nFeb 2017 - created\n\nwww.qenops.com\n\n'''\n__author__ = ('David Dunn')\n__version__ = '1.0'\n\nimport OpenGL\nOpenGL.ERROR_CHECKING = False      # Uncomment for 2x speed up\nOpenGL.ERROR_LOGGING = False       # Uncomment for speed up\n#OpenGL.FULL_LOGGING = True         # Uncomment for verbose logging\n#OpenGL.ERROR_ON_COPY = True        # Comment for release\nimport OpenGL.GL as GL\nimport math, os\nimport numpy as np\nimport dGraph as dg\nimport dGraph.ui as ui\nimport dGraph.cameras as dgc\nimport dGraph.shapes as dgs\nimport dGraph.materials as dgm\nimport dGraph.shaders as dgshdr\nimport dGraph.config as config\nimport dGraph.util.imageManip as im\nimport time\n\nMODELDIR = '%s\/data'%os.path.dirname(__file__)\nWINDOWS = [{\n    \"name\": 'Test 5',\n    \"location\": (0, 0),\n    #\"location\": (2436, 1936), # px coordinates of the startup screen for window location\n    #\"size\": (1920, 1080),\n    \"size\": (1600,800), # px size of the startup screen for centering\n    \"center\": (400,400), # center of the display\n    \"refresh_rate\": 60, # refreshrate of the display for precise time measuring\n    \"px_size_mm\": 0.09766, # px size of the display in mm\n    \"distance_cm\": 20, # distance from the viewer in cm,\n    #\"is_hmd\": False,\n    #\"warp_path\": 'data\/calibration\/newRight\/',\n    },\n]\n\ndef loadScene(renderStack, file=None, cross=False):                \n    '''Load or create our sceneGraph'''\n    scene = dg.SceneGraph(file)\n    stereoCam = dgc.StereoCamera('front', scene)\n    stereoCam.setResolution((renderStack.width\/2, renderStack.height))\n    stereoCam.setTranslate(0.,-.06,0.)\n    stereoCam.setRotate(20.,0.,0.)\n    stereoCam.setFOV(50.)\n    stereoCam.IPD = .062\n    crosses = [\n        #np.array((.031,.0,-10.)),\n        #np.array((-.031,.0,-10.)),\n        np.array((-.2,-.2,-10.)),\n        np.array((-.2,.0,-10.)),\n        np.array((-.2,.2,-10.)),\n        np.array((.0,-.2,-10.)),\n        np.array((.0,.0,-10.)),\n        np.array((.0,.2,-10.)),\n        np.array((.2,-.2,-10.)),\n        np.array((.2,.0,-10.)),\n        np.array((.2,.2,-10.)),\n    ]\n    for idx, position in enumerate(crosses):\n        cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s\/cross.obj'%MODELDIR)\n        cross.setScale(.01,.01,.01)\n        cross.translate = position\n        renderStack.objects[cross.name] = cross\n        print(1,(idx\/3.)\/3.+1\/3.,(idx%3)\/3.+1\/3.)\n        material = dgm.Material('material%s'%idx,ambient=(1,(idx\/3.)\/3.+1\/3.,(idx%3)\/3.+1\/3.), amb_coeff=.5)\n        #material = dgm.Lambert('material%s'%idx,ambient=(1,0,0), amb_coeff=.5, diffuse=(1,1,1), diff_coeff=1)\n        cross.setMaterial(material)\n    renderStack.cameras = [stereoCam]\n    renderStack.append(stereoCam)\n    return True \n\ndef animateScene(renderStack, frame):\n    ''' Create motion in our scene '''\n    # infinity rotate:\n    y = 1\n    x = math.cos(frame*math.pi\/60)\n    for obj in renderStack.objects.itervalues():\n        obj.rotate += np.array((x,y,0.))\n\ndef addInput():\n    for rs in renderStack:\n        ui.add_key_callback(arrowKey, ui.KEY_RIGHT, renderStack=rs, direction=3)\n        ui.add_key_callback(arrowKey, ui.KEY_LEFT, renderStack=rs, direction=2)\n        ui.add_key_callback(arrowKey, ui.KEY_UP, renderStack=rs, direction=1)\n        ui.add_key_callback(arrowKey, ui.KEY_DOWN, renderStack=rs, direction=0)\n\ndef arrowKey(window,renderStack,direction):\n    for o in renderStack.objects:\n        if direction == 3:    # print \"right\"\n            o.rotate(np.array((0.,5.,0.)))\n        elif direction == 2:    # print \"left\"\n            o.rotate(-np.array((0.,5.,0.)))\n        elif direction == 1:      # print 'up'\n            o.translate(np.array((0.,.01,0.)))\n        else:                   # print \"down\"\n            o.translate(-np.array((0.,.01,0.)))\n\ndef drawScene(renderStack):\n    ''' Render the stack '''\n    myStack = list(renderStack)                                     # copy the renderStack so we can pop and do it again next frame\n    temp = myStack.pop()\n    temp.render(renderStack.width, renderStack.height, myStack)     # Render our warp to screen\n\ndef setup():\n    winData = WINDOWS[0]\n    renderStack = ui.RenderStack()\n    renderStack.display = ui.Display(resolution=winData['size'])\n    ui.init()\n    mainWindow = renderStack.addWindow(ui.open_window(winData['name'], winData['location'][0], winData['location'][1], renderStack.display.width, renderStack.display.height))\n    if not mainWindow:\n        ui.terminate()\n        exit(1)\n    ui.make_context_current(mainWindow)\n    ui.add_key_callback(ui.close_window, ui.KEY_ESCAPE)\n    scenes = [loadScene(renderStack) for renderStack in renderStacks]\n    for rs in renderStacks:\n    \trs.graphicsCardInit()\n    return renderStacks, scenes, windows\n\ndef runLoop(renderStack, mainWindow):\n    # Print message to console, and kick off the loop to get it rolling.\n    print(\"Hit ESC key to quit.\")\n    frame = 0\n    start = time.time()\n    while not ui.window_should_close(mainWindow):\n        ui.make_context_current(mainWindow)\n        drawScene(renderStack)\n        now = time.time()\n        time.sleep(max((frame+1)\/config.maxFPS+start-now,0))\n        ui.swap_buffers(mainWindow)\n        ui.poll_events()\n        #animateScene(renderStack, frame)\n        frame += 1\n    ui.terminate()\n    exit(0)\n\nif __name__ == '__main__':\n    renderStack, scene, windows = setup()\n    addInput()\n    runLoop(renderStack, windows[0])\n",
        "905": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the existing code in the following Python program to generate a list of prime numbers in a given range.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \")",
        "906": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major.\n\n### Input:\n\n\n### Output:\nclass Student:\n def __init__(self, name, age, grade, major):\n  self.name = name\n  self.age = age\n  self.grade = grade\n  self.major = major",
        "907": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the readability score of a given text.\n\n### Input:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n### Output:\ndef compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words \/ sentences)) - (84.6 * (syllables \/ words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables",
        "908": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:\n- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)\n- `--exclude`: a list of files or directories to exclude from the check\n- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)\n- `--git-bin`: the path to the git binary (default is `git`)\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"\/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_format(clang_format_bin, changed_files):\n    \"\"\"\n    Run clang format on a list of files \n    @return 0 if formatted correctly.\n    \"\"\"\n    if len(changed_files) == 0:\n        return 0\n    cmd = [clang_format_bin, \"-style=file\",\n           \"-output-replacements-xml\"] + changed_files\n    print(\"clang-format cmd = {}\".format(cmd))\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        if \"replacement offset\" in cmd_output:\n            print(\"ERROR: Changed files don't match format\")\n            return 1\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling clang-format [{}]\".format(e))\n        return e.returncode\n\n    return 0\n\n\ndef cli():\n    # global params\n    parser = argparse.ArgumentParser(prog='clang-format-check-changed',\n                                     description='Checks if files chagned in git match the .clang-format specification')\n    parser.add_argument(\"--file-extensions\", type=str,\n                        default=\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\",\n                        help=\"Comma separated list of file extensions to check\")\n    parser.add_argument('--exclude', action='append', default=[],\n                        help='Will not match the files \/ directories with these in the name')\n    parser.add_argument('--clang-format-bin', type=str, default=\"clang-format\",\n                        help=\"The clang format binary\")\n    parser.add_argument('--git-bin', type=str, default=\"git\",\n                        help=\"The git binary\")\n    args = parser.parse_args()\n\n    # Run gcovr to get the .gcda files form .gcno\n    changed_files, returncode = get_changed_files(\n        args.git_bin, args.exclude, args.file_extensions)\n    if returncode != 0:\n        return returncode\n\n    return run_clang_format(args.clang_format_bin, changed_files)\n\nif __name__ == '__main__':\n    sys.exit(cli())\n",
        "909": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate random numbers within a desired range.\n\n### Input:\n\n\n### Output:\nimport random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))",
        "910": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you produce a program that demonstrates the basics of how to use object oriented programming in Python?\n\n### Input:\n\"<noinput>\"\n\n### Output:\n# Python program to display introduction of \n# Object Oriented Programming\n\n# Creating a class\nclass Person:\n\n    # Constructor \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Method\n    def introduce_self(self):\n        print(\"I'm {0} aged {1}.\".format(self.name, self.age))\n\n# Instantiating an object\np1 = Person(\"John\", 25)\n\n# Calling a method\np1.introduce_self()",
        "911": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the maximum sum of a sub-array of an int array.\n\n### Input:\nGiven an array arr = [2, -1, 3, 5, -7, 3].\n\n### Output:\ndef max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8",
        "912": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that produces the output shown in this example.\n\n### Input:\n3\n3\n3\n3\n3\n3\n\n### Output:\ndef print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)",
        "913": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you create a Python function that prints the number of characters in a string?\n\n### Input:\n\n\n### Output:\ndef char_count(string): \n    count = 0\n    for char in string: \n        count += 1\n    print(\"Number of characters:\", count)",
        "914": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate and print out a calendar for a given month.\n\n### Input:\n\n\n### Output:\nimport calendar\n\n# Input the year and month\nyear = int(input('Enter year: '))\nmonth = int(input('Enter month: '))\n\n# Generate the calendar\ncal = calendar.month(year, month)\n\n# Print the calendar\nprint(cal)",
        "915": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a given number in words\n\n### Input:\n123\n\n### Output:\ndef number_to_words(num):\n    units_list = {\"0\": \"Zero\", \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\":\n                  \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\",\n                  \"9\": \"Nine\"}\n    tens_list = { \"10\": \"Ten\", \"11\": \"Eleven\", \"12\": \"Twelve\", \"13\": \"Thirteen\",\n                  \"14\": \"Fourteen\", \"15\": \"Fifteen\", \"16\": \"Sixteen\", \"17\":\n                  \"Seventeen\", \"18\": \"Eighteen\", \"19\": \"Nineteen\", \"20\":\n                  \"Twenty\", \"30\": \"Thirty\", \"40\": \"Forty\", \"50\": \"Fifty\",\n                  \"60\": \"Sixty\", \"70\": \"Seventy\", \"80\": \"Eighty\", \"90\":\n                  \"Ninety\"}\n    \n    output = \"\"\n    if num in units_list:\n        output += units_list[str(num)]\n    elif num in tens_list:\n        output += tens_list[str(num)]\n    else:\n        if len(str(num)) >= 3:\n            output += units_list[str(num)[0]] + \" Hundred \"\n            output += number_to_words(int(str(num)[1:]))\n        else:\n            output += tens_list[str(num)[0]+\"0\"] + \" \" \n            output += units_list[str(num)[1]]\n    return output\n\nresult = number_to_words(123)\nprint(result)",
        "916": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, write a Python program to group the anagrams (words which have the same letters in a different order) together.\n\n### Input:\n[\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\n\n### Output:\ndef anagram_grouping(words):\n   anagrams = dict()\n   #loop through the list and sort each word\n   for word in words: \n      sorted_word = ''.join(sorted(word))\n      # check if sorted word exists as a key in dictionary\n      if sorted_word not in anagrams: \n         anagrams[sorted_word] = [word] #add key and word to dict\n      else: \n         anagrams[sorted_word].append(word) #add word to existing anagrams\n\n   #create a list of anagrams\n   result = []\n   for values in anagrams.values():\n      result.append(values)\n\n   return result\n\n\nwords = [\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\nans = anagram_grouping(words)\nprint(ans)",
        "917": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient algorithm to optimize the given code in Python.\n\n### Input:\ndef my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result\n\n### Output:\ndef my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result\n\ndef my_optimized_process(data):\n    return [do_process(item) for item in data]",
        "918": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements.\n\n### Input:\n\n\n### Output:\ndef rearrange(arr):\n    even, odd = [], [] \n    for n in arr:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return [item for pair in zip(even, odd) for item in pair]",
        "919": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named \"Employee\" with 3 instance variables \"name\", \"salary\", and \"age\".\n\n### Input:\n\n\n### Output:\nclass Employee():\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age",
        "920": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given algorithm written in pseudo code to Python.\n\n### Input:\nInput: Array A\n1. from i=1 to i=length[A]\n2.  j=i \n3.  min = A[i]\n4.  for j = i+1 to length[A]\n5.    if min > A[j]\n6.      min = A[j] \n7.  swap A[i] with A[j]\n\n### Output:\ndef selection_sort(A): \n    for i in range(len(A)): \n        minimum = i \n        for j in range(i+1, len(A)): \n            if A[minimum] > A[j]: \n                minimum = j \n        A[i], A[minimum] = A[minimum], A[i]",
        "921": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier model in Python to classify text into two categories.\n\n### Input:\nDataset:\ntext1: I love cats\nlabel1: 1\n\ntext2: I am scared of dogs\nlabel2: 0\n\nModel Instructions:\n1. Bring the dataset into the model.\n2. Preprocess it.\n3. Split the dataset into training and testing set.\n4. Build a classification model using an appropriate algorithm.\n\n### Output:\n#import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load and allocate dataset\ndataset = pd.read_csv(\"dataset.csv\")\nX = dataset.Text\ny = dataset.Label\n\n#Preprocessing\ncv = CountVectorizer()\nX = cv.fit_transform(X)\n\n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n\n#Model training\nclf = MultinomialNB()\nclf.fit(X_train,y_train)\n\n\n#Evaluate the model\nscore = clf.score(X_test,y_test)\nprint(\"Accuracy of model: \",score)",
        "922": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this code snippet in Python to remove any errors and improve readability.\n\n### Input:\ndef remove_arr(arr):\nresult =[];\nfor a in arr:\n  if a != 'b'\n    result.append(a)\nreturn result\n\n### Output:\ndef remove_arr(arr):\n    result = []\n    for a in arr:\n        if a != 'b':\n            result.append(a)\n    return result",
        "923": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function which implements a backwards for loop in Python.\n\n### Input:\n\n\n### Output:\ndef backwards_for_loop(n):\n  for i in range(n, 0, -1):\n    # Do something with i\n    print(i)",
        "924": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to carry out the following tasks:\n\n### Input:\nGiven an array of integers, find the two elements whose sum is closest to 0.\n\n### Output:\ndef find_closest_sum_of_two(arr):\n    if len(arr) < 2:\n        return None\n    \n    # initialize the closest sum and indicies\n    closest_sum = arr[0] + arr[1]\n    first_index = 0\n    second_index = 1\n    \n    # loop through the array and check for closer sums\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] + arr[j]) < abs(closest_sum):\n                closest_sum = arr[i] + arr[j]\n                first_index = i\n                second_index = j\n    \n    return arr[first_index], arr[second_index], closest_sum",
        "925": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to simulate a coin toss experiment.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss()",
        "926": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that implements a stack.\n\n### Input:\n\n\n### Output:\nclass Stack:\n    \n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def isEmpty(self):\n        return self.items == []\n    def peek(self):\n        return self.items[len(self.items)-1]\n    def size(self):\n        return len(self.items)",
        "927": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to parse a list of strings and extract the date that appears at the end of the strings?\n\n### Input:\nlist_of_strings = [\"April 11th, 2019\", \"July 2nd, 2018\", \"October 16th, 2012\"]\n\n### Output:\ndef parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list",
        "928": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python for storing employee information. The employee information should include name, age, salary and department.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department",
        "929": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(name)\n\n@app.route('\/calculate_average', methods=['POST'])\ndef calculate_average():\n numbers = request.json['numbers']\n\n # calculate the sum\n total = 0\n for number in numbers:\n total += number\n\n # calculate the average\n average = total \/ len(numbers)\n\n return jsonify({'average': average})\n\nif name == 'main':\n app.run(debug=True)",
        "930": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.\n\n### Input:\n\n\n### Output:\ndef upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res",
        "931": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to find the average of three numbers.\n\n### Input:\n10, 20, 30\n\n### Output:\ndef find_average(a, b, c):\n  return (a + b + c) \/ 3\n\nresult = find_average(10, 20, 30)\nprint(result) # 20",
        "932": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that calculates the maximum subarray of a given array.\n\n### Input:\n[-2,1,-3,4,-1,2,1,-5,4]\n\n### Output:\ndef max_subarray(arr):\n max_so_far = arr[0] \n max_ending_here = arr[0] \n   \n for i in range(1, len(arr)): \n  max_ending_here = max(arr[i], max_ending_here + arr[i]) \n  max_so_far = max(max_so_far, max_ending_here)  \n   \n return max_so_far",
        "933": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of ten random numbers in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]",
        "934": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to implement the following feature: Search a phrase in a given string.\n\n### Input:\nSearch the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".\n\n### Output:\ndef search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)",
        "935": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to sort an array of integers using the Merge Sort algorithm\n\n### Input:\n[6, 2, 5, 1, 8, 9, 0]\n\n### Output:\n# Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)\/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9]",
        "936": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a version of the game 'Tic-tac-toe' using Python.\n\n### Input:\n\n\n### Output:\n# create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break",
        "937": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask Python service that serves an array of strings as JSON using a GET request.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('\/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run()",
        "938": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web api in Python, using Flask, that takes a search string and returns a collection of books that match that search.\n\n### Input:\nsearchTerm: \"cat\"\n\n### Output:\nfrom flask import Flask, jsonify \nimport requests \n\napp = Flask(__name__) \n\n@app.route('\/books\/<string:search_term>') \ndef search_books(search_term): \n\turl = 'https:\/\/www.googleapis.com\/books\/v1\/volumes?q={}'.format(search_term)\n\tr = requests.get(url).json() \n\tbooks = r['items'] \n\treturn jsonify(books) \n\nif __name__ == '__main__': \n\tapp.run(debug=True)",
        "939": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python for sorting the elements of an array in descending order.\n\n### Input:\n[2, 4, 1, 6, 5]\n\n### Output:\ndef sort_descending(arr):\n    # Sort array from largest to smallest\n    arr.sort(reverse=True)\n\n    # Print result\n    print(arr)\n\n# Test\narr = [2, 4, 1, 6, 5]\nsort_descending(arr)\n# Output: [6, 5, 4, 2, 1]",
        "940": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nNormalize the following text using Python.\n\n### Input:\nthe     Cat    in  the  hat\n\n### Output:\ntext = \"the Cat in the hat\"\ntext = text.replace('  ', ' ').strip()\nprint(text)",
        "941": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a service in Python that can be used to find the closest point to an input in a given set of coordinates.\n\n### Input:\nInput coordinates: (2, 3)\n\nSet of coordinates: [(2.1, 3.1), (1, 1), (0.5, 2.5)]\n\n### Output:\nimport math\n\ndef find_closest_point(input_coordinates, coordinates_set):\n    # Calculate the euclidean distance for each point in the set\n    distances = []\n    for c in coordinates_set:\n        dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2)\n        distances.append(dist)\n        \n    # Find the index of the point with the smallest distance\n    idx = distances.index(min(distances))\n    \n    # Return the closest point\n    return coordinates_set[idx]\n    \n# Input coordinates\ninput_coordinates = (2, 3)\n\n# Set of coordinates\ncoordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)]\n\n# Find and print the closest point\nclosest_point = find_closest_point(input_coordinates, coordinates_set)\nprint('Closest point: ', closest_point)",
        "942": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the area of a triangle using the side lengths.\n\n### Input:\na=5, b=9, c=11\n\n### Output:\n# Calculates the area of a triangle given the three side lengths\ndef area_triangle(a, b, c): \n    # Calculate the semi-perimeter \n    s = (a + b + c) \/ 2  \n  \n    # calculate the area \n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 \n    return area \n  \n# Driver Code \na = 5\nb = 9\nc = 11\nprint(\"Area of triangle is : \", area_triangle(a, b, c))",
        "943": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a given string and finds the longest palindromic substring in it.\n\n### Input:\n\n\n### Output:\ndef longest_palindromic_substring(s): \n\tn = len(s) \n\tL = [[0 for x in range(n)] \n\t\t\tfor y in range(n)] \n\t# All substrings of length 1 are palindromes \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\n\t# check all substring of length 2\n\tfor cl in range(2, n + 1): \n\t\tfor i in range(n - cl + 1): \n\t\t\tj = i + cl - 1\n\t\t\tif s[i] == s[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif s[i] == s[j]: \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j - 1],L[i + 1][j]); \n\n\t# start position of the longest palindromic substring \n\tstart = 0\n\tlength = 1\n\tfor i in range(n): \n\t\tif (length < L[i][n - 1]): \n\t\t\tlength = L[i][n - 1] \n\t\t\tstart = i \n\treturn s[start - length + 1:start + length] \n\nprint(longest_palindromic_substring(\"abracadabra\"))",
        "944": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate n numbers of Fibonacci series.\n\n### Input:\n\n\n### Output:\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34",
        "945": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a valid python statement to convert a dict to a list\n\n### Input:\n\n\n### Output:\nmylist = list(mydict.items())",
        "946": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to calculate the moving average of the given data\n\n### Input:\nData: [2, 3, 5, 10, 11]\n\n### Output:\ndef moving_average(data, num_points):\n    moving_average_list = []\n    for i in range(0, len(data)-num_points+1):\n        window_sum = 0\n        for j in range(i, i+num_points):\n            window_sum += data[j]\n        moving_average_list.append(window_sum\/num_points)\n    return moving_average_list",
        "947": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to check if a number is divisible by another number.\n\n### Input:\n7, 2\n\n### Output:\ndef is_divisible(n, m):\n    if (n % m == 0):\n        return True\n    else:\n        return False\n    \nprint(is_divisible(7, 2))  # Outputs False",
        "948": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to identify outliers in data using Standard Deviation methods.\n\n### Input:\nData = [2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12]\n\n### Output:\nimport numpy as np \n\n# Create data\ndata = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12])\n\n# Calculate mean and standard deviation\nmean = np.mean(data)\nstd = np.std(data)\n\n# Set the boundaries\nlower_bound = mean - 3*std\nupper_bound = mean + 3*std\n\n# Find outliers\noutliers = [] \nfor i in data: \n    if i < lower_bound or i > upper_bound: \n        outliers.append(i)\n\n# Print the outliers\nprint(\"Outliers:\", outliers) \n\n\"\"\"\nOutliers: [1, 11, 12]\n\"\"\"",
        "949": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python which can classify a given set of food posters as either Italian or Mexican.\n\n### Input:\nTrain Data:\nItalian:\n- Pizza poster\n- Lasagna poster\n- Spaghetti poster\nMexican:\n- Burrito poster\n- Enchilada poster\n- Taco poster\n\n### Output:\nimport tensorflow as tf\n\n# Set up the input and output data\nX = tf.placeholder(tf.float32, shape=[None, 3])\ny = tf.placeholder(tf.float32, shape=[None, 2])\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))\n\n# Train the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, epochs=10)",
        "950": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.\n\n### Input:\nsample_string = \"HelloWorld\"\n\n### Output:\ndef find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result)",
        "951": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to filter a list of strings to only return words that have 7 or more characters.\n\n### Input:\nwords = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\n\n### Output:\nwords = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\n\ndef filter_list(words):\n  filtered_list = []\n\n  for word in words:\n    if len(word) >= 7:\n      filtered_list.append(word)\n\n  return filtered_list",
        "952": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a for loop in Python to print out the squared value of the numbers from 0 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(0,11):\n    print(i**2)",
        "953": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given python data structure into a json string using json package\n\n### Input:\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\n### Output:\nimport json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'",
        "954": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Twitter bot in Python. The bot should search for a given hashtag, like the posts it finds, and follow their authors.\n\n### Input:\nHashtag: #news\n\n### Output:\nimport tweepy\n\n# authentication for twitter api\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_secret)\n\n# create an API instance\napi = tweepy.API(auth)\n\n# search for posts with the hashtag\nfor tweet in tweepy.Cursor(api.search, q='#news').items(10):\n # like post\n api.create_favorite(tweet.id)\n # follow the author\n api.create_friendship(tweet.user.id)",
        "955": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values.\n\n### Input:\nSample JSON:\n\n{\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\n### Output:\nimport json\n\n# sample json object \ndata = {\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\n# parse the json object \nparsed_data = json.loads(data)\n\n# print the parsed values \nprint(\"Name: \", parsed_data[\"name\"])\nprint(\"Age: \", parsed_data[\"age\"])\nprint(\"Hobbies: \", parsed_data[\"hobbies\"])",
        "956": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to help streamline the process of scraping data from a web page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get HTML content from target website\nr = requests.get('URL')\nhtml_doc = r.text\n\n# Create a beautiful soup object\nsoup = BeautifulSoup(html_doc)\n\n# Find and extract desired data\ndata = soup.select('SELECTOR') \n\n# Print extracted data\nfor x in data: \n print(x.text)",
        "957": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_person(self):\n        print('Name:', self.name, ', Age:', self.age)",
        "958": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake an algorithm in Python for printing the maximum frequency of an element in an array.\n\n### Input:\nData = [1, 4, 2, 6, 2, 1, 2, 9]\n\n### Output:\n#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2",
        "959": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that checks whether a given number is a perfect square.\n\n### Input:\n\n\n### Output:\ndef is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n\/x) \/\/ 2\n  return x*x == n",
        "960": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which prints all perfect numbers between 1 and a given number N (inclusive).\n\n### Input:\n25\n\n### Output:\ndef print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)",
        "961": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo start pyHegel, import the module and call the function start_pyHegel(). If starting on Windows with the Console program, call start_console() instead.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n\n########################## Copyrights and license ############################\n#                                                                            #\n# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #\n#                                                                            #\n# This file is part of pyHegel.  http:\/\/github.com\/lupien\/pyHegel            #\n#                                                                            #\n# pyHegel is free software: you can redistribute it and\/or modify it under   #\n# the terms of the GNU Lesser General Public License as published by the     #\n# Free Software Foundation, either version 3 of the License, or (at your     #\n# option) any later version.                                                 #\n#                                                                            #\n# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #\n# License for more details.                                                  #\n#                                                                            #\n# You should have received a copy of the GNU Lesser General Public License   #\n# along with pyHegel.  If not, see <http:\/\/www.gnu.org\/licenses\/>.           #\n#                                                                            #\n##############################################################################\n\nfrom __future__ import absolute_import\n\n# Use version according to option 5 in https:\/\/packaging.python.org\/en\/latest\/single_source_version.html\n\n# make sure that new versions numbers compare properly when using\n# pkg_resources.parse_version\n__version__ = '1.0.0rc2'\n__copyright__ = '2011-2015  Christian Lupien'\n\ndef start_pyHegel():\n    \"\"\" This is the recommanded way to start pyHegel.\n        It starts ipython in a standard way (pylab, autocall enabled,...)\n        and then loads and initializes the pyHegel commands.\n\n        If the python session was started with command line arguments\n        --console, it will try to start pyHegel in the Console program\n        that comes with pythonxy. This is windows only.\n\n        If you later need access to the commands in a module:\n            import pyHegel.commands as cmds\n            cmds.get(somedevice)\n        or\n            from pyHegel.commands import *\n            get(somedevice)\n        or any other variants you want.\n    \"\"\"\n    import sys\n    import os\n    if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console':\n        start_console()\n    else:\n        from . import main\n        main.main_start()\n\ndef start_console():\n    from . import win_console_helper\n    win_console_helper.start_console()\n",
        "962": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that predicts a movie's popularity given its genre, rating, and release date.\n\n### Input:\nThe input includes three parameters: genre (action), rating (8.5), and release date (2020-02-10).\n\n### Output:\nimport pandas as pd\n\n# read the data file\ndf = pd.read_csv('movie_data.csv')\n\n# feature engineering\ndf['action'] = (df['genres'].str.contains('Action')) * 1\n\n# define which features to be used\nfeatures_df = df[['action','rating']]\n\n# define the target variable\ntarget = df.popularity\n\n# split data into train and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)\n\n# train a RandomForestRegressor model\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\n\n# make prediction\ninput_data = {\n 'action': 1,\n 'rating': 8.5,\n 'release_date': '2020-02-10'\n}\nprediction = rf.predict([input_data])\n\nprint(prediction) \/\/ Outputs the predicted movie popularity",
        "963": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes a date as input and calculates the day of the week that date falls on.\n\n### Input:\n31\/05\/2020\n\n### Output:\n#!\/usr\/bin\/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('\/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]",
        "964": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\n### Output:\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list))",
        "965": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will count and print the number of vowels and consonants in a user-provided string.\n\n### Input:\nDeclare a variable \"text\" that contains a sample string\n\n### Output:\ntext = 'This is a sample string'\n\n# Get the total number of characters \ntotal = len(text) \n\n# Count the number of vowels \nvowels = 0 \nfor character in text: \n if character in 'aeiou': \n  vowels += 1\n\n# Count the number of consonants \nconsonants = 0 \nfor character in text: \n if character in 'bcdfghjklmnpqrstvwxyz': \n  consonants += 1\n\n# Print the result \nprint(f\"Vowels: {vowels}\")\nprint(f\"Consonants: {consonants}\")\nprint(f\"Total: {total}\")",
        "966": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a 2D array and returns the sum of all the elements.\n\n### Input:\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]\n\n### Output:\ndef sum_2D_array(arr):\n    \"\"\"Return the sum of all the elements in a 2D array.\"\"\"\n    sum_arr = 0\n    for row in arr:\n        for elem in row:\n            sum_arr += elem\n    return sum_arr",
        "967": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a logistic regression algorithm in Python to solve a classification task.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 \/ (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) \/ len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a)",
        "968": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to convert the following Fahrenheit value to Celsius.\n\n### Input:\n212\n\n### Output:\ndef convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) \/ 1.8\n\n    return celsius\n\nfahrenheit = 212\ncelsius = convert_to_celsius(fahrenheit)\nprint(celsius)",
        "969": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to remove duplicates from a list and return the new list.\n\n### Input:\narr = [1, 2, 3, 1, 4]\n\n### Output:\ndef remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list",
        "970": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to manage the expiry dates of products.\n\n### Input:\n\n\n### Output:\nclass ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left",
        "971": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that includes a function that returns the sum of the first n prime numbers.\n\n### Input:\nn = 5\n\n### Output:\nimport math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)",
        "972": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and generate a valid Java program that uses Stack Overflow's API to print all of the most recent questions and answers on a specific topic.\n\n### Input:\nTopic - Python\n\n### Output:\nimport java.net.URL;\nimport java.util.Scanner;\n \npublic class QueryOverflow {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https:\/\/api.stackexchange.com\/2.2\/search?order=desc&sort=activity&tags=python&site=stackoverflow\");\n        Scanner scan = new Scanner(url.openStream());\n        String str = new String();\n        while (scan.hasNext())\n            str += scan.nextLine();\n        scan.close();\n \n        JSONObject obj = new JSONObject(str);\n        JSONArray items = obj.getJSONArray(\"items\");\n        for (int i = 0; i < items.length(); i++)\n        {\n            \/\/ print title\n            System.out.println(items.getJSONObject(i).getString(\"title\"));\n            \/\/ print answer\n            System.out.println(items.getJSONObject(i).getJSONObject(\"accepted_answer\").getString(\"body\"));\n        }\n    }\n}",
        "973": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check whether a number is in a given range.\n\n### Input:\nnum = 10\nlower = 10\nupper = 20\n\n### Output:\ndef check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True",
        "974": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConnect to a database, retrieve data, and write it to a JSON file named \"extract.json\". The code is written in Python and requires the SQLite3 library.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~\/.traces\/traces.sqlite')  #looks for db under ~\/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u)\n\n    #GET list intervals for primary application\n    cur.execute(activeappSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['appid'] = row[1]\n        a['event'] = row[2]\n        a['start'] = row[3]\n        a['end'] = row[4]\n        appevents.append(a)\n\n    #GET list intervals for primary window\n    cur.execute(activewindowSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['windowid'] = row[1]\n        w['appid'] = (item for item in windows if item[\"id\"] == row[1]).next()['app']\n        w['event'] = row[2]\n        w['start'] = row[3]\n        w['end'] = row[4]\n        windowevents.append(w)\n\n    #GET list intervals for urls\n    cur.execute(activeurlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['urlid'] = row[1]\n        u['appid'] = row[2]\n        u['windowid'] = row[3]\n        u['event'] = row[4]\n        u['start'] = row[5]\n        u['end'] = row[6]\n        urlevents.append(u)\n\n    #GET list of experiences\n    cur.execute(experienceSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['text'] = row[2]\n        exps.append(a)\n\n    #GET list of screenshots\n    image_dir = os.path.expanduser('~\/.traces\/screenshots')  #looks for db under ~\/.traces\n    for y in os.listdir(image_dir):\n        y_dir = os.path.join(image_dir,y)\n        if not os.path.isdir(y_dir):\n            continue\n        for m in os.listdir(y_dir):\n            m_dir = os.path.join(y_dir, m)\n            if not os.path.isdir(m_dir):\n                continue\n            for d in os.listdir(m_dir):\n                d_dir = os.path.join(m_dir, d)\n                if not os.path.isdir(d_dir):\n                    continue\n                for h in os.listdir(d_dir):\n                    h_dir = os.path.join(d_dir, h)\n                    if not os.path.isdir(h_dir):\n                        continue\n                    h_images = os.listdir(h_dir)\n                    for image in h_images:\n                        #make sure the file is an image\n                        if image[-4:] == '.jpg':\n                            i = collections.OrderedDict()\n                            image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f')\n                            i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset\n                            i['image'] = os.path.join(\"screenshots\", y, m, d, h, image)\n                            images.append(i)\n\n    #GET keywords\n    cmd_rows = []\n    newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' ']\n    starttime = 0.0\n    app = 0\n    window = 0\n    s = ''\n\n    cur.execute(wordsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        if 'Cmd' in row[3]:\n            cmd_rows.append(row)\n        else:\n            text = str(row[2])\n            # if its a char indicating a new word, save our text token\n            if text in newWord:\n                # save our data\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass the whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking time\n                starttime = float(row[1])\n                s = ''\n\n            # if its a regular char on the same window, just keep building the string\n            elif int(row[5]) == window: # and float(row[1]) - time <= 300.0:\n                if text == 'Backspace':\n                    s = s[:-1]\n                else:\n                    s += row[2]\n            #else its a regular char but we switched windows, save the data\n            else:\n                if len(s) > 0:\n                    k = collections.OrderedDict()\n                    k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\"%H:%M %m\/%d\/%y\")\n                    k['text'] = s #just pass teh whole string for now\n                    k['app'] = app\n                    k['window'] = window\n                    words.append(k)\n\n                #reset tracking variables\n                window = int(row[5])\n                app = int(row[4])\n                starttime = float(row[1])\n\n                #write the character to start the next word\n                if text in newWord or text == 'Backspace':\n                    s = ''\n                else:\n                    s = row[2]\n\n    #ASSEMBLE apps and experince into json\n    d = collections.OrderedDict()\n    d['apps']=apps\n    d['window']=windows\n    d['url']=urls\n    d['appevents']=appevents\n    d['windowevents']=windowevents\n    d['urlevents']=urlevents\n    d['exps']=exps\n    d['images']=images\n    d['words']=words\n    data = d\n\n    #WRITE file\n    file = 'extract.json'\n    z = open(file,'w')\n    z.writelines(json.dumps(data))\n",
        "975": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to search an element in an array\n\n### Input:\n[2, 3, 4, 5]\n\n### Output:\ndef linear_search(arr, x): \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i+1\n  \n    return -1\n\narr = [2, 3, 4, 5] \nx = 4\n\nprint(linear_search(arr, x))",
        "976": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python using object-oriented programming that creates instance of a book.\n\n### Input:\n\n\n### Output:\nclass Book(object):\n    def __init__(self, title, author, year_published):\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def __str__(self):\n        return '{0} by {1} published in {2}.'.format(\n            self.title, self.author, self.year_published)",
        "977": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to implement an iterator that iterates over a given array.\n\n### Input:\n[2, 5, 6, 8, 9]\n\n### Output:\ndef iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)",
        "978": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.\n\n### Input:\n\n\n### Output:\nstudents = [ \n  { \n    'name': 'John Doe', \n    'age': 18, \n    'grade': 'A'\n  }, \n  { \n    'name': 'Jane Smith', \n    'age': 16, \n    'grade': 'B'\n  } \n]",
        "979": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to find the longest contiguous increasing subsequence in the following array.\n\n### Input:\n[3,6,9,1,2,3,4,5]\n\n### Output:\n\"\"\"\nFind the longest contiguous increasing subsequence \n\"\"\"\n\ndef long_increasing_subsequence(arr): \n    n = len(arr) \n    dp = [1 for x in range(n)] \n   \n    for i in range (1 , n): \n        for j in range(0 , i): \n            print (i,j) \n            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): \n                dp[i] = dp[j]+1\n   \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum, dp[i])  \n\n    return maximum \n\narr =[3,6,9,1,2,3,4,5] \nlongest_subsequence_length = long_increasing_subsequence(arr)\nprint(longest_subsequence_length) # prints 5",
        "980": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python for loop that prints out each element in a given list.\n\n### Input:\n[10, 20, 30, 40]\n\n### Output:\nfor element in [10,20,30,40]:\n    print(element)",
        "981": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the number of possible combinations of a given set of elements.\n\n### Input:\nrange = [1, 2, 3]\n\n### Output:\ndef calculate_combinations(range):\n    count = 0\n\n    # base case\n    if len(range) == 0:\n        return 0\n    if len(range) == 1:\n        return 1\n\n    # recursive case\n    for i in range:\n        sub_set = range[:]\n        sub_set.remove(i)\n        count += calculate_combinations(sub_set) + 1\n\n    return count\n\nrange = [1, 2, 3]\nprint(calculate_combinations(range))\n# Output: 6",
        "982": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a program in Python to remove the duplicate elements in a list?\n\n### Input:\n[5, 9, 2, 4, 5, 9, 2]\n\n### Output:\ndef remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4]",
        "983": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to remove elements from a given list of integers, if the integer is a multiple of 3\n\n### Input:\nlist = [3, 6, 9, 11, 12, 15]\n\n### Output:\ndef remove_multiple_of_three(list):\n  new_list = []\n  for item in list:\n    if item % 3 != 0:\n      new_list.append(item)\n  return new_list",
        "984": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.\n\n### Input:\n[(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]\n\n### Output:\ndef schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)]",
        "985": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to create a python module to explain the Canny Edge Detection algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges",
        "986": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for predicting stock prices.\n\n### Input:\nA sample dataset with historic prices for Apple Inc. (AAPL)\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse)",
        "987": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that will classify each sentence as Positive, Neutral or Negative sentiment.\n\n### Input:\nNot applicable\n\n### Output:\nimport spacy\nimport nltk\nfrom nltk.corpus import opinion_lexicon\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Download and create a spaCy model\nnlp = spacy.load('en_core_web_sm')\n\n# Create a list of positive, negative and neutral words\npositive_words = opinion_lexicon.positive()\nnegative_words = opinion_lexicon.negative()\nneutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words))\n\n# Create a Bag of Words Vectorizer\nvectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words))\n\ndef create_examples(words, sentiment):\n    examples = []\n    # Create BOW for each example\n    for w in words:\n        bow = vectorizer.transform([w])\n        examples.append((bow, sentiment))\n    return examples\n\n# Create training examples\npositive_examples = create_examples(positive_words, 'POSITIVE')\nnegative_examples = create_examples(negative_words, 'NEGATIVE')\nneutral_examples = create_examples(neutral_words, 'NEUTRAL')\n\n# Create training data\ntrain_data = positive_examples + negative_examples + neutral_examples\n\n# Train a classifier\nclassifier = LinearSVC()\nclassifier.fit([x[0] for x in train_data], [x[1] for x in train_data])\n\ndef predict_sentiment(sentence):\n    # Create BOW of sentence\n    bow = vectorizer.transform([sentence])\n    # Get sentiment\n    sentiment = classifier.predict(bow)[0]\n    return sentiment\n\nsentence = 'I had a great time today!'\nsentiment = predict_sentiment(sentence)\nprint('The sentiment of the sentence is:', sentiment)",
        "988": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.\n\n### Input:\nArmstrongNumber(371)\n\n### Output:\nimport math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num\/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num\/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num)",
        "989": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python program to encrypt a string using the XOR Cipher.\n\n### Input:\ncurrent program:\ndef xor_strings(xs, ys):\n    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))\n\n### Output:\ndef xor_strings(xs, ys):\n    output = \"\"\n    for i in range(0, len(xs)):\n        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()\n\n    return output\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))",
        "990": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract the first letter of each word in a sentence and print it as an acronym.\n\n### Input:\nThis is a sample sentence.\n\n### Output:\nSIS",
        "991": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to convert Fahrenheit to Celsius in Python.\n\n### Input:\n\n\n### Output:\nclass TempConverter:\n\n    def __init__(self, temp_in_fahrenheit):\n        self.temp_in_fahrenheit = temp_in_fahrenheit\n\n    def convert_f_to_c(self):\n        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5\/9\n        return temp_in_celsius",
        "992": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.\n\n### Input:\n[1,2,3,4]\n\n### Output:\n[x * 10 for x in [1,2,3,4]]",
        "993": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two matrices and prints the result of their subtraction.\n\n### Input:\nA = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]\n\n### Output:\ndef subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C",
        "994": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python function that returns the value at the index of an array (list) of size n.\n\n### Input:\n[20, 30, 50, 70, 90]\n\n### Output:\ndef getValueAtIndex(arr, index):\n    return arr[index] if index >= 0 and index < len(arr) else 0\n\nprint(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70",
        "995": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python to represent a classical play.\n\n### Input:\n\n\n### Output:\nclass Play(object):\n    def __init__(self):\n        self.characters = []\n        self.scenes = []\n        self.title = \"\"\n    \n    def add_character(self, character):\n        self.characters.append(character)\n    \n    def add_scene(self, scene):\n        self.scenes.append(scene)\n    \n    def set_title(self, title):\n        self.title = title",
        "996": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program for searching for a specific product within a given list of products.\n\n### Input:\nproducts = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\"]\n\nsearch_query = \"Grape\"\n\n### Output:\n# Define a search function\ndef search (products, query):\n  # Loop through list\n  for product in products:\n    if product == query: \n      # Return the product index if it matches the query\n      return products.index(product)\n\n# Get the index of the item\nresult = search(products, search_query)\n\n# Print the result\nprint(result)",
        "997": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python that predicts the direction of the stock market using historical data.\n\n### Input:\nSample of 1000 days of State Street Corporation's stock prices.\n\n### Output:\nimport pandas as pd \nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv('stock_prices.csv')\ny = df['direction'].values\nX = df.drop(['date', 'direction'], axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\naccuracy = knn.score(X_test, y_test)\nprint(\"Model accuracy: {}%\".format(round(accuracy*100, 2)))",
        "998": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python print out the first 10 numbers of the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34",
        "999": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random list of numbers between 1 to 20 and print out the largest and second largest ones.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nmyList = []\nfor i in range(20):\n myList.append(random.randint(1,20))\n\nprint(\"List of random numbers:\", myList)\n\nmyList.sort()\n\nlargest_num = myList[len(myList)-1]\nsecond_largest_num = myList[len(myList)-2]\n\nprint('Largest number:', largest_num)\nprint('Second-largest number:', second_largest_num)",
        "1000": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to find the maximum pair sum from the list input.\n\n### Input:\ninput_list = [20, 11, 33, 67, 89 ,34]\n\n### Output:\ndef maxPairSum(input_list):\n\n    #assume the first and second elements are the max pair\n    max_pair_sum = input_list[0] + input_list[1]\n\n    # Keep track of the max pair\n    pair_index_one = 0\n    pair_index_two = 1\n\n    # iterate through the entire list\n    for index_one in range(0, len(input_list)):\n        for index_two in range(index_one + 1, len(input_list)):\n\n            # if the current pair sum is greater than the max pair sum\n            # update the max pair sum and the pair indices\n            if input_list[index_one] + input_list[index_two] > max_pair_sum:\n                max_pair_sum = input_list[index_one] + input_list[index_two]\n                pair_index_one = index_one\n                pair_index_two = index_two\n\n    #return the max pair sum\n    return max_pair_sum",
        "1001": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a basic web scraper using Python and Scrapy that can crawl a specific website and extract the content from the webpage.\n\n### Input:\nWebsite URL: https:\/\/www.example.com\n\n### Output:\nimport scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n start_urls = ['https:\/\/www.example.com']\n\n def parse(self, response):\n    for item in response.css('div.listing-item') :\n        yield { \n            'title' : item.css('h3.listing-title::text').get(),\n            'price' : item.css('span.price::text').get(),\n            'description' : item.css('p.description::text').get()\n        }",
        "1002": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two lists of integers and prints the common elements between the two lists.\n\n### Input:\nlist1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\n### Output:\nlist1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\ncommon_elements = list(set(list1).intersection(list2))\n\nprint(common_elements)\n# Output: [4, 8]",
        "1003": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to convert a given temperature in Celsius to Fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(degrees_c):\n    return (degrees_c * 9\/5) + 32",
        "1004": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django view in Python to retrieve user records from a database with pagination.\n\n### Input:\nExample Schema of User Table\nuser_id | first_name | last_name | age | email\n\nExample of User Records\nuser_id |first_name |last_name |age |email\n1097 |John |Smith |25 |js@example.com\n3785 |Michael |Johnson |30 |mj@example.com\n\n### Output:\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\n# Create your views here.\ndef get_user_records(request):\n    page_num = request.GET.get('page', 1)\n    page_size = int(request.GET.get('page_size', 10))\n\n    users = User.objects.all().order_by('user_id')\n    paginator = Paginator(users, page_size)\n    page_data = paginator.page(page_num)\n    response_data = {\n        'data': [\n            {\n                'user_id': user.user_id,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'age': user.age,\n                'email': user.email\n            } for user in page_data\n        ]\n    }\n    return JsonResponse(response_data)",
        "1005": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci_sum(n): \n    if n <= 1: \n        return n \n    previous = 0\n    current  = 1\n    sum      = 1\n    \n    for _ in range(n - 1): \n        previous, current = current, previous + current \n        sum += current \n      \n    return sum",
        "1006": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the first index of an item in an array.\n\n### Input:\narr = [1,3,7,9,0,4]\nnum = 7\n\n### Output:\ndef findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2",
        "1007": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program using Python to determine the words in a string with the highest frequency.\n\n### Input:\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n### Output:\nfrom collections import Counter\n\nstring = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nwords = string.split()\n\ncnt = Counter()\nfor word in words:\n  cnt[word] += 1\n\nword, count = cnt.most_common(1)[0]\n\nprint(f'Word with highest frequency is \"{word}\" occurring {count} times.')\n\n# Output\nWord with highest frequency is \"dolor\" occurring 1 times.",
        "1008": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to sort an array of integers in linear time.\n\n### Input:\n[5, 4, 3, 1, 2]\n\n### Output:\ndef sort(arr): \n    n = len(arr) \n  \n    for i in range(n): \n  \n        min_index = i # assuming current element is smallest \n          \n        # look for smallest element in the rest of the array \n        for j in range(i+1, n): \n            if arr[j] < arr[min_index]: \n                min_index = j \n  \n        arr[i], arr[min_index] = arr[min_index], arr[i] # swap \n  \n    return arr\n  \narr = [5, 4, 3, 1, 2] \nsorted_arr = sort(arr) \n  \nprint(sorted_arr)",
        "1009": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python script by improving its runtime performance.\n\n### Input:\nimport time\n\nstart = time.time()\n\ndef foo(): \n for _ in range(1000): \n  print('Hello World')\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)\n\n### Output:\nimport time \n\nstart = time.time()\n\ndef foo(): \n for i in range(1000): \n  print('Hello World', i)\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)",
        "1010": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Web Scraper in Python to Scrape the Wikipedia page of a given musician and extract the discography.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_discography(artist):\n  base_url = \"https:\/\/en.wikipedia.org\/wiki\/\"  # Wikipedia base URL\n  artist_name = artist.replace(\" \", \"_\")  # Format URL parameter\n  url = base_url + artist_name\n  response = requests.get(url)\n  if response.status_code == 200:\n    html = response.content\n    soup = BeautifulSoup(html, \"html.parser\")\n    discography = soup.find(\"span\",{\"id\":\"Discography\"}).find_next_sibling().text.strip().replace(\"\\n\", \",\").replace(\")\",\"\").replace(\"(\",\"\")\n    return discography.split(\",\")\n  else:\n    print(\"Error in response.\")\n    return None",
        "1011": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.\n\n### Input:\nmagnitude: 5\nangle: 90\n\n### Output:\nimport math\n\ndef magnitude_to_vector(magnitude, angle):\n    x = magnitude * math.cos(math.radians(angle))\n    y = magnitude * math.sin(math.radians(angle))\n    z = 0\n    \n    return (x, y, z)\n\nresult = magnitude_to_vector(5, 90)\n\nprint(f\"The vector is {result}\")",
        "1012": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate an array filled with the first n prime numbers.\n\n### Input:\nn = 10\n\n### Output:\n# Python3 code to generate an \n# array containing first n primes \nimport math \n\ndef generatePrimeArray(n): \n\tprime = [True for i in range(n + 1)] \n\tp = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * 2, n + 1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\n\t# prime[0]= False\n\t# prime[1]= False\n\n\t# Store prime numbers \n\tprime_numbers = [] \n\tfor p in range(n + 1): \n\t\tif prime[p]: \n\t\t\tprime_numbers.append(p) \n\n\t# Print the array \n\treturn prime_numbers \n\nresult = generatePrimeArray(n)\nprint(result)",
        "1013": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the summed weighted average from a given set of values and weight.\n\n### Input:\nvalues = [90, 50, 70], weights = [0.4, 0.2, 0.4]\n\n### Output:\ndef weightedAverage(values, weights):\n    sum = 0.0\n    for i in range(len(values)):\n        sum += values[i] * weights[i]\n    return sum\/len(values)\n\nvalues = [90, 50, 70]\nweights = [0.4, 0.2, 0.4]\n\nprint(weightedAverage(values, weights))",
        "1014": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve a system of linear equations.\n\n### Input:\n2x+3y=8\n5x-1y=-10\n\n### Output:\ndef solve_linear_system(A, b):\n    \n    # Find the solution of the linear system\n    x = np.linalg.solve(A, b)\n    \n    # Print the solution\n    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))\n    \n\nA = [[2, 3], [5, -1]]\nb = [8, -10]\nsolve_linear_system(A, b)",
        "1015": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to add a prefix and suffix to all strings in a list.\n\n### Input:\nlist = ['abc', 'def', 'ghi']\n\n### Output:\npre = \"PRE-\"\nsuf = \"-SUF\"\n\nenriched_list = [ pre + s + suf for s in list]\n\nprint(enriched_list)",
        "1016": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the square root of a given number using Newton\u2019s Method.\n\n### Input:\nx = 36\n\n### Output:\ndef square_root(x):\n    guess = x\/2\n    while True:\n        next_guess = 0.5 * (guess + (x\/guess))\n        if abs(guess - next_guess) < 0.0001:\n            break\n            guess = next_guess\n    return guess\n\nprint(square_root(36)) # prints 6.0",
        "1017": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract phone numbers from a given text.\n\n### Input:\nThis is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\n\n### Output:\n\"\"\"\nWrite a Python program to extract phone numbers from a given text.\n\"\"\"\n\nimport re\n\ndef extract_phone_numbers(text):\n    phone_numbers = []\n    pattern = r'(\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4})'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        phone_numbers.append(m.group())\n    return phone_numbers\n\ntext = \"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\"\nprint(extract_phone_numbers(text))",
        "1018": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse an XML document\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(xml_file):\n    root = ET.parse(xml_file).getroot()\n    for child in root:\n        print(child.tag, child.attrib)",
        "1019": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.\n\n### Input:\nList of strings: [\"Hello\", \"World\", \"Hello\", \"World\"]\nSearch String: \"World\"\n\n### Output:\ndef search_string(lst, s):\n for i, item in enumerate(lst):\n if item == s:\n return i\n return -1",
        "1020": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication.\n\n### Input:\nA = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]\n\n### Output:\ndef matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])",
        "1021": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a chatbot with Python Flask that can converse with a user.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET','POST'])\ndef dialog():\n # Get the user's input from the request\n user_input = request.json['user_input']\n\n # Define a response based on the user's input\n if user_input == 'Hi':\n response = 'Hello there!'\n # Add additional actions here\n\n # Return the response as JSON\n return jsonify({'response':response})\n\nif __name__ == '__main__':\n app.run(port=5000, debug=True)",
        "1022": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two strings and print out the number of differences.\n\n### Input:\nString 1: python\nString 2: perl\n\n### Output:\ndef compareStrings(string1, string2):\n    result = 0\n\n    if len(string1) != len (string2):\n        result += 1\n    else:\n        for i in range(len(string1)):\n            if string1[i] != string2[i]:\n                result += 1\n    return result\n\n\nif __name__ == '__main__':\n    string1 = 'python'\n    string2 = 'perl'\n    print(compareStrings(string1, string2))\n    \nOutput: 3",
        "1023": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to merge two sorted arrays into one.\n\n### Input:\n\n\n### Output:\ndef merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged",
        "1024": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a spreadsheet to model a sine wave using Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Create spreadsheet\ndf = pd.DataFrame()\n\n# Add column of x-values\nx_values = np.arange(start=0,stop=2*np.pi,step=0.1)\ndf['x'] = x_values\n\n# Add column of y-values\ny_values = np.sin(x_values)\ndf['y'] = y_values\n\n# Save spreadsheet\ndf.to_csv('sine-wave.csv', index=False)",
        "1025": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following python code which uses sets to one which uses lists.\n\n### Input:\ns = set([2, 3, 4])\nfor n in s:\n    print(n)\n\n### Output:\nl = [2, 3, 4]\nfor n in l:\n    print(n)",
        "1026": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to print all the permutations of an array.\n\n### Input:\n\n\n### Output:\ndef permutation(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        l = []\n        for i in range(len(arr)):\n            data = arr[i]\n            remainders = arr[:i] + arr[i+1:]\n            for p in permutation(remainders):\n                l.append([data] + p)\n        return l",
        "1027": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given data into two classes.\n\n### Input:\n\n\n### Output:\ndef classify(data):\n    # Fit your model on the data\n    model.fit(data)\n    # Return the predicted classes\n    return model.predict(data)",
        "1028": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n  \ndef sentiment_calculator(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.5:\n        sentiment = 'positive'\n    elif -0.5 < sentiment_scores['compound'] < 0.5:\n        sentiment = 'neutral'\n    else:\n        sentiment = 'negative'\n    return sentiment\n  \nsentence = 'This is an amazing experience!'\nsentiment_calculator(sentence)\n# Output: 'positive'",
        "1029": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that receives two numbers as parameters and returns the larger one\n\n### Input:\n\n\n### Output:\ndef larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "1030": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the minimum of three values.\n\n### Input:\n3, 2, 1\n\n### Output:\ndef find_min(a, b, c): \n    min_val = a \n    if b < min_val: \n        min_val = b \n    if c < min_val: \n        min_val = c \n    return min_val \n\nprint(find_min(3, 2, 1)) # Output: 1",
        "1031": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a hamming code for a given bit string.\n\n### Input:\n\n\n### Output:\ndef generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1'",
        "1032": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the sum of squares of all the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\ndef sum_of_squares(numbers):\n    total = 0\n    for num in range(1,numbers+1):\n        total += num**2\n    print(total)\n\nsum_of_squares(10)",
        "1033": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that finds the occurrences of 'cat' in a given sentence.\n\n### Input:\nSentence: \u201cThe cat sat on the mat.\u201d\n\n### Output:\ndef find_occurrences(sentence):\n    # Empty list to store indices of occurrence\n    indices = []\n\n    # get length of sentence\n    l = len(sentence)\n \n    # iterate to go through the sentence\n    for i in range(l):\n        # if at any point a substring from i to i+3 is equal to \"cat\"\n        if sentence[i:i+3] == \"cat\":\n            # add i to list of indices\n            indices.append(i)\n \n    # return the list of indices\n    return indices\n\noccurrences = find_occurrences(\"The cat sat on the mat.\")\nprint(\"Indices of occurrences:\", occurrences)",
        "1034": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to convert a given number of minutes to years and days.\n\n### Input:\n76586\n\n### Output:\ndef convertMinutesToYears(minutes):\n    years = minutes \/ 525600\n    days = minutes % 525600 \/ 1440 \n    \n    print(\"The given\" + str(minutes) + \" minutes is equal to \" + \n    str(round(years)) + \" year(s) and \" + str(round(days)) + \" day(s)\")\n\nconvertMinutesToYears(76586)",
        "1035": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string argument, removes all the special characters and returns the modified string.\n\n### Input:\nThis# 1$ i^s an% e*xa_mple -str_ing\n\n### Output:\ndef remove_special_characters(s):\n    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') \n    return new_s\n\nremove_special_characters(\"This# 1$ i^s an% e*xa_mple -str_ing\")",
        "1036": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program in Python that takes a number n and returns the nth fibonacci number.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n  if n <= 2:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n  \nprint(fibonacci(5)) # 5",
        "1037": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program which prints a formatted list containing the elements from two input lists.\n\n### Input:\nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\n\n### Output:\ndef print_list(list_1, list_2): \n    formatted_list = [list_1 + list_2 for i in range(len(list_1))] \n    for x in formatted_list: \n        for y in x: \n            print(y) \n    \nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nprint_list(list_1, list_2)\n\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6",
        "1038": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a random password. The generated password should have at least 6 characters, and must contain both letters and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    pw_length = 6\n    mypw = \"\"\n\n    for i in range(pw_length):\n        next_index = random.randrange(len(alphabet))\n        mypw = mypw + alphabet[next_index]\n\n    return mypw\n\nprint(generate_password())",
        "1039": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python statement to check if a given number is within a given range\n\n### Input:\nNumber: 3, Range: 0-10\n\n### Output:\nif 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')",
        "1040": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an automated system in Python to remove all even numbers from a list.\n\n### Input:\nlist = [3, 8, 10, 11, 12, 15]\n\n### Output:\ndef remove_even(list):\n    return [i for i in list if i%2 != 0]",
        "1041": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to perform a three-way comparison of three numbers.\n\n### Input:\n\n\n### Output:\ndef three_way_comparison(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return 1\n    elif num2 > num1 and num2 > num3:\n        return 2\n    elif num3 > num1 and num3 > num2:\n        return 3",
        "1042": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print Hello World ten times.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(10):\n  print(\"Hello World\")",
        "1043": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that computes the sum of two given integers.\n\n### Input:\n\n\n### Output:\ndef sum_two_ints(a, b):\n return a + b",
        "1044": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hash table in Python to store the values (1, 2, 3, 4).\n\n### Input:\n\n\n### Output:\nhash_table = {1: 1, 2: 2, 3: 3, 4: 4}",
        "1045": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a string into a valid python program that prints the string on the terminal.\n\n### Input:\nHello World!\n\n### Output:\nprint('Hello World!')",
        "1046": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the factorial of a number.\n\n### Input:\n5\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))",
        "1047": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a regular expression in Python to find all consecutive digits in a sentence.\n\n### Input:\nThere are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\n\n### Output:\nimport re \n\nstr = \"There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\"\n\nnum_list = re.findall(r'\\d+', str)\nprint(num_list)\n# Output: ['3', '12', '22', '33']",
        "1048": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python object-oriented program to represent a student. The student class should have a method calculate_grade which takes a student's grades as input and returns their average.\n\n### Input:\nNot applicable\n\n### Output:\nclass Student:\n def __init__(self, name, grades):\n  self.name = name\n  self.grades = grades\n\n def calculate_grade(self):\n  total = 0\n  for grade in self.grades:\n   total += grade\n\n  return total \/ len(self.grades)\n\nstudent1 = Student(\"John\", [80,90,85,95])\nprint(student1.calculate_grade())\n# Output: 88.75",
        "1049": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that compares two sets of input data (lists of numbers) and outputs the intersection set.\n\n### Input:\nset1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]\n\n### Output:\ndef find_intersection(set1, set2):\n intersect_set = []\n for num in set1:\n if num in set2:\n intersect_set.append(num)\n return intersect_set\n\nset1 = [1, 2, 3, 4, 5]\nset2 = [3, 4, 5, 6, 7]\n\nintersect_set = find_intersection(set1, set2)\nprint(intersect_set) # Output -> [3, 4, 5]",
        "1050": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive).\n\n### Input:\nfor num in range(11)\n\n### Output:\nfor num in range(11):\n    print(num)",
        "1051": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python function to find the largest consecutive sum of elements in the list.\n\n### Input:\nnums = [1, 2, -5, 9, 0, 10]\n\n### Output:\ndef largest_consecutive_sum(nums):\n    max_sum = 0\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        if total_sum > max_sum:\n            max_sum = total_sum\n    return max_sum",
        "1052": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to identify prime numbers in a given range of numbers.\n\n### Input:\n\n\n### Output:\ndef prime_numbers(lower_limit, upper_limit): \n    prime_numbers = [] \n    while lower_limit <= upper_limit:\n        if all(lower_limit % i != 0 for i in range(2, lower_limit)):\n            prime_numbers.append(lower_limit)\n        lower_limit += 1\n    return prime_numbers\n\nprint(prime_numbers(2, 10))",
        "1053": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an AI model in Python to predict the sentiment of a given sentiment text.\n\n### Input:\nThis product is excellent\n\n### Output:\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n  sid = SentimentIntensityAnalyzer()\n  sentiment = sid.polarity_scores(text)\n  if sentiment[\"compound\"] >= 0.5:\n    return \"positive\"\n  elif sentiment[\"compound\"] <= -0.5:\n    return \"negative\"\n  else:\n    return \"neutral\"\n\nsentiment = sentiment_analysis(\"This product is excellent\")\nprint(sentiment)",
        "1054": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a solution for object-oriented programming in Python. The solution should include a way to represent base class, derived class, single inheritance, and multiple inheritance.\n\n### Input:\nNot applicable\n\n### Output:\n# Base class\nclass Base:\n    pass\n\n# Derived class\nclass Derived(Base):\n    pass\n\n# Single inheritance\nclass SingleInheritance(Base):\n    pass\n\n# Multiple inheritance\nclass MultipleInheritance(Base, Derived):\n    pass",
        "1055": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to find the longest words in a dictionary.\n\n### Input:\ndict = {\"Hello\": 5, \"World\": 6, \"this\": 4, \"is\": 2, \"a\": 1, \"test\": 4}\n\n### Output:\ndef longest_words(dict):\n    longest_words = []\n    max_length = 0\n    for word, length in dict.items():\n        if length > max_length:\n            longest_words = [word]\n            max_length = length\n        elif length == max_length:\n            longest_words.append(word)\n    return longest_words",
        "1056": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the optimal solution for a given weighted job scheduling problem.\n\n### Input:\njobs = [(1, 5, 1), (3, 5, 7), (4, 6, 5), (6, 7, 4)]\n\n### Output:\ndef jobScheduling(jobs):\n    n = len(jobs) \n    \n    jobs = sorted(jobs, key = lambda x: x[1]) \n   \n    table = [0 for i in range(n)] \n    table[0] = jobs[0][2] \n  \n    for i in range(1, n): \n  \n        inclProf = jobs[i][2] \n        l = binarySearch(jobs, i) \n        if (l != -1):\n            inclProf += table[l] \n  \n        table[i] = max(inclProf, table[i-1]) \n  \n    return table[n-1]",
        "1057": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that returns the number of the occurrences of an element in the given list\n\n### Input:\nnums = [1, 2, 3, 2, 3, 2, 4]\n\n### Output:\n# Python 3 program to count the number of occurrences \n# of an element in the given list\n\n# function to count the number of occurrences \ndef countOccurrences(nums, query):\n    count = 0\n    for num in nums:\n        if query == num:\n            count = count + 1\n    return count\n\n# Driver code \nnums = [1, 2, 3, 2, 3, 2, 4]\n\n# Function Call\nquery = 2\nprint(\"{0} occurs {1} times\".format(query, countOccurrences(nums, query)))",
        "1058": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize an equation to find the minimum value.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef equation(x):\n    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x \n\nresults = minimize(equation, [0])\nminx = results.x\nminy = results.fun\n\nprint('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))",
        "1059": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to replace all the vowels in a string with an asterisk.\n\n### Input:\nstring = \u201cHello World\u201d\n\n### Output:\nstring = \u201cHello World\u201d\n\ndef replaceVowels(string):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\nnew_string = replaceVowels(string)\nprint(new_string) # This will print out \"H*ll* W*rld\"",
        "1060": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that calculates the standard deviation of a given list of numbers.\n\n### Input:\n[2, 4, 4, 4, 5, 5, 7, 9]\n\n### Output:\ndef calculate_std_deviation(numbers):\n mean = sum(numbers) \/ len(numbers)\n \n variance = 0\n for num in numbers:\n variance += (num - mean)**2\n variance = variance\/len(numbers)\n \n std_deviation = variance**0.5\n return std_deviation\n \n \nnumbers = [2, 4, 4, 4, 5, 5, 7, 9]\nstd_deviation = calculate_std_deviation(numbers)\nprint('The standard deviation is: {}'.format(std_deviation))",
        "1061": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.\n\n### Input:\n\n\n### Output:\n# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n",
        "1062": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes a list of strings as input and returns a dictionary mapping each string to its length.\n\n### Input:\n[\"apple\", \"mango\", \"banana\"]\n\n### Output:\ndef getStringLengths(words):\n    # Create an empty dictionary \n    lengths = {} \n\n    # For each word in the list of words\n    for word in words:\n        # find the length of the word\n        length = len(word)\n        # add the length of the word to the dictionary\n        lengths[word] = length \n\n    # return the dictionary\n    return lengths\n\nprint(getStringLengths([\"apple\", \"mango\", \"banana\"]))",
        "1063": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to check if a given number is a prime number.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "1064": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTest the following Python code and identify a bug\n\n### Input:\nnot_a_number = 'A123'\nnumber = int(not_a_number)\n\n### Output:\nThis code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try\/except` statements to catch the error and handle it appropriately.\n\ntry: \n number = int(not_a_number)\nexcept ValueError as e:\n print(f'Error converting {not_a_number} to an integer: {e}')",
        "1065": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to group the strings of a given list according to their lengths in Python.\n\n### Input:\ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n### Output:\n\"\"\"\nCreate a program to group the strings of a given list according to their lengths in Python\n\"\"\"\n\n# List of strings \ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n# Dictionary to store the grouped strings \nresult = {} \n\n# Iterate over the list \nfor elem in input:\n    # Get length of each string \n    length = len(elem)\n    # If the length is present in the result dictionary, \n    # add the string to its corresponding list \n    if length in result: \n        result[length].append(elem)\n    # Else, create a new list in the result dictionary \n    # and append the string to the list \n    else: \n        result[length] = [elem] \n  \n# Print the result \nprint(result) \n# Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']}",
        "1066": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a given code snippet in Python using a list comprehension.\n\n### Input:\nmy_list = []\nfor i in range(10):\n my_list.append(i ** 2)\n\n### Output:\nmy_list = [i ** 2 for i in range(10)]",
        "1067": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the existing Python program to add an exception clause.\n\n### Input:\ndef calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n        \ncalculate_square(10)\n\n### Output:\ndef calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n    except ValueError:\n        print(\"The argument cannot be a negative number\")\n        \ncalculate_square(10)",
        "1068": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to initialize an array with two parameters.\n\n### Input:\nparams: (4, 5)\n\n### Output:\ndef initialize_array(rows, cols): \n    array = [[0 for i in range(cols)] for j in range(rows)]\n    return array",
        "1069": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to sort a given list using insertion sort.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(list):\n    \"\"\"\n    Sort a given list using insertion sort.\n    list: the list to be sorted\n    \"\"\"\n    # loop through each element in the list, starting from the second element\n    for i in range(1, len(list)):  \n        temp = list[i] \n  \n        # find the position where the current element should be inserted\n        j = i-1\n        while j >= 0 and temp < list[j] : \n                list[j+1] = list[j] \n                j -= 1\n        list[j+1] = temp \n  \n    return list",
        "1070": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to display a pyramid pattern\n\n### Input:\nThe maximum height should be 6\n\n### Output:\n# Function to demonstrate printing pattern in pyramid format \ndef pyramid(n): \n    k = 2*n - 2\n    # outer loop to handle number of rows \n    for i in range(0, n): \n        # inner loop to handle number spaces \n        # values changing acc. to requirement \n        for j in range(0, k): \n            print(end=\" \") \n        # decrementing k after each loop \n        k = k - 2\n        # inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n            # printing stars \n            print(\"* \", end=\"\") \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npyramid(n)",
        "1071": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to format a string with the proper case and punctuation\n\n### Input:\nstring=\"hello, world\"\n\n### Output:\ndef format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"",
        "1072": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the differences between lists and tuples in Python?\n\n### Input:\n\n\n### Output:\nLists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists.",
        "1073": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that sorts a list of integers.\n\n### Input:\nmy_list = [9, 3, 6, 7, 1]\n\n### Output:\ndef sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [9, 3, 6, 7, 1]\nmy_list = sort_list(my_list)\nprint(my_list)",
        "1074": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that retrieves the top 10 headlines from a website's news section.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/news'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nheadlines = soup.find_all(\"h2\", class_=\"headline\")\nfor headline in headlines[:10]:\n print(headline.string)",
        "1075": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to fetch the data from this API https:\/\/coronavirus-19-api.herokuapp.com\/\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef fetch_data():\n    url = 'https:\/\/coronavirus-19-api.herokuapp.com\/'\n    response = requests.get(url)\n    data = response.json()\n    return data\n\nif __name__ == '__main__':\n    print(fetch_data())",
        "1076": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that calculates the maximum value in a 2-dimensional array.\n\n### Input:\n[\n    [1, 4, 8],\n    [7, 9, 6]\n]\n\n### Output:\ndef find_max_val(arr):\n    max_val = 0\n\n    for lst in arr:\n        for num in lst:\n            if num > max_val:\n                max_val = num\n    return max_val\n\nprint(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9",
        "1077": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Flask application in Python to create an API endpoint for user registration.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n data = request.json\n # Create the user\n # ...\n return {'status': 'user created'}\n\nif name == 'main':\n app.run(debug=True)",
        "1078": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the type of the following python object.\n\n### Input:\n[1, 2, [3, 4]]\n\n### Output:\nlist",
        "1079": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a string as input and returns the length of the longest word.\n\n### Input:\nstring = \"the quick brown fox jumps over the lazy dog\"\n\n### Output:\ndef length_longest_word(s):\n    longest_word = \"\"\n    longest_len = 0\n  \n    words = s.split()\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n            longest_word = word\n  \n    return len(longest_word)\n  \nresult = length_longest_word(string)\nprint(result)",
        "1080": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print all prime numbers between 1 to 1000.\n\n### Input:\n\n\n### Output:\ndef print_prime_numbers():\n    for num in range(2, 1001):\n\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\nprint_prime_numbers()",
        "1081": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to merge two dictionaries into a new one.\n\n### Input:\nDictionary 1\n`{'name': 'John', 'age': 25}`\n\nDictionary 2\n`{'company': 'Google', 'city': 'New York'}`\n\n### Output:\n# Dictionaries\ndict1 = {'name': 'John', 'age': 25}\ndict2 = {'company': 'Google', 'city': 'New York'}\n\n# Merge two dictionaries\ndict3 = {**dict1, **dict2}\n\n# Print the merged dictionary\nprint(dict3)\n\n# Output:\n# {'name': 'John', 'age': 25, 'company': 'Google', 'city': 'New York'}",
        "1082": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to add two given numbers.\n\n### Input:\nx = 5 \ny = 11\n\n### Output:\n#Function to add two given numbers\ndef add(x, y):\n   return x + y\n  \n# Print the sum\nprint(add(x, y))",
        "1083": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a linked list of numbers from 0 to n.\n\n### Input:\n\n\n### Output:\ndef generateLinkedList(n): \n\thead = Node(0) \n\tprev = head \n\tfor i in range(1, n + 1): \n\t\tnode = Node(i) \n\t\tprev.next = node \n\t\tprev = node \n\treturn head",
        "1084": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers as input, write a Python code snippet to find the largest number.\n\n### Input:\n[9, 2, 6, 3, -5, 5, 7]\n\n### Output:\nmax_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)",
        "1085": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify different programming languages based on their features.\n\n### Input:\nC++, Java, Python, JavaScript\n\n### Output:\nC++:   Object-oriented, compiled language\nJava:  Object-oriented, compiled language\nPython: Object-oriented, interpreted language\nJavaScript: Object-oriented, interpreted language",
        "1086": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a RESTful web service in Python which returns the data provided in the given URL.\n\n### Input:\nURL: https:\/\/example.com\/dataset.json\n\n### Output:\nimport flask\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https:\/\/example.com\/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run()",
        "1087": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to solve the Tower of Hanoi in Python.\n\n### Input:\n\n\n### Output:\ndef tower_of_hanoi(num_discs, source, auxiliary, destination): \n if num_discs == 1: \n     print(\"Move disc 1 from\", source, \"to\", destination) \n     return\n tower_of_hanoi(num_discs - 1, source, destination, auxiliary) \n print(\"Move disc\", num_discs, \"from\", source, \"to\", destination) \n tower_of_hanoi(num_discs - 1, auxiliary, source, destination) \n\ntower_of_hanoi(3, \"A\", \"B\", \"C\")",
        "1088": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python command-line program that takes in a string and encrypts it with a password.\n\n### Input:\n\n\n### Output:\nimport hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)",
        "1089": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to compute the number of islands. An island is a group of connected 1s in an array where all four adjacent lands have value 0.\n\n### Input:\n\n\n### Output:\ndef count_islands(grid): \n    if not grid: \n        return 0 \n  \n    row = len(grid) \n    col = len(grid[0]) \n  \n    num_islands = 0\n  \n    for i in range(row): \n        for j in range(col): \n            if grid[i][j] == 1: \n                num_islands += dfs(grid, i, j, row, col) \n  \n    return num_islands \n  \n  \ndef dfs(grid, i, j, row, col): \n    if i < 0 or i >= row or j < 0 or j >= col or grid[i][j] == 0: \n        return 0\n  \n    grid[i][j] = 0\n  \n    dfs(grid, i + 1, j, row, col) \n    dfs(grid, i - 1, j, row, col) \n    dfs(grid, i, j + 1, row, col) \n    dfs(grid, i, j - 1, row, col) \n  \n    return 1",
        "1090": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOur project requires to classify different types of objects into two classes (A and B). Can you provide a Python code to achieve this?\n\n### Input:\n[objectA, objectB, objectC, objectD]\n\n### Output:\ndef classify_objects(list_of_objects):\n    results = []\n    for obj in list_of_objects:\n        if obj == 'objectA' or obj == 'objectB':\n            results.append('A')\n        elif obj == 'objectC' or obj == 'objectD':\n            results.append('B')\n    return results\n\nlist_of_objects = ['objectA', 'objectB', 'objectC', 'objectD']\nclassifications = classify_objects(list_of_objects)\nprint(classifications)",
        "1091": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for counting the number of islands in a given grid. An island is defined as a group of 1's (land) connected horizontally or vertically.\n\n### Input:\n[[1, 1, 0, 0, 0],\n [0, 1, 0, 0, 1],\n [1, 0, 0, 1, 1],\n [0, 0, 0, 0, 0],\n [1, 0, 1, 0, 1]]\n\n### Output:\ndef countIslands(grid):\n count = 0\n\n for i in range(len(grid)):\n  for j in range(len(grid[0])):\n   if grid[i][j] == 1:\n    dfs(grid, i, j)\n    count += 1\n\n return count\n\ndef dfs(grid, r, c):\n if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0:\n  return\n grid[r][c] = 0\n dfs(grid, r+1, c)\n dfs(grid, r, c+1)\n dfs(grid, r-1, c)\n dfs(grid, r, c-1)\n\nprint(countIslands([[1, 1, 0, 0, 0],\n                    [0, 1, 0, 0, 1],\n                    [1, 0, 0, 1, 1],\n                    [0, 0, 0, 0, 0],\n                    [1, 0, 1, 0, 1]]))\n\/\/ Output: 5",
        "1092": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a calculator application in Python that takes input from a string and outputs the result\n\n### Input:\n\"3+5*7\"\n\n### Output:\ndef calculator(expression):\n    # create a stack for storing values\n    stack = []\n    # iterate through the expression\n    for char in expression:\n        # check if the character is a number\n        if char.isdigit():\n            # if so, push it to the stack\n            stack.append(int(char))\n        # check if the character is an operator\n        if char == '+' or char == '*':\n            # pop two values from the stack\n            val_one = stack.pop()\n            val_two = stack.pop()\n            # determine which operator was used and\n            # perform the corresponding operation\n            if char == '+':\n                stack.append(val_one + val_two)\n            elif char == '*':\n                stack.append(val_one * val_two)\n    # return the calculated result\n    return stack.pop()",
        "1093": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you produce a Python script that outputs all possible permutations of a given string?\n\n### Input:\n\"ABC\"\n\n### Output:\nfrom itertools import permutations\n\ndef print_permutations(input):\n    perms = [''.join(p) for p in permutations(input)]\n    for perm in perms:\n        print(perm)\n\nif __name__ == \"__main__\":\n    print_permutations(\"ABC\")",
        "1094": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to detect geographical coordinates of a given address.\n\n### Input:\nAddress: 1 Rockefeller Plaza, New York City, NY\n\n### Output:\n(40.7588972, -73.9787129)",
        "1095": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that takes in a string and remove all vowels from the string.\n\n### Input:\nstring = \"Hello World!\"\n\n### Output:\n# Python program to remove vowels from a string\n\ndef remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    output_string = \"\"\n    for char in string:\n        if char not in vowels:\n            output_string += char\n    return output_string\n\nif __name__ == \"__main__\":\n    string = \"Hello World!\"\n    print(\"Original String:\", string)\n    string = remove_vowels(string)\n    print(\"String without Vowels:\", string)",
        "1096": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that can store the properties of a person.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, gender, address):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.address = address\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_gender(self):\n        return self.gender\n    \n    def get_address(self):\n        return self.address",
        "1097": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Selenium to create a Python program to automate testing an existing web page.\n\n### Input:\nhttps:\/\/example.com\n\n### Output:\nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\ndriver.get('https:\/\/example.com')\n\n# Check the title of the page\nassert driver.title == 'Example Domain'\n\n# Check the text on the page\ntext = driver.find_element_by_xpath('\/\/p').text\nassert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.'\n\n# Check for a hyperlink\nlink = driver.find_element_by_xpath('\/\/a')\nassert link.text == 'More information...'\n\ntime.sleep(2)\ndriver.quit()",
        "1098": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that imports the necessary modules and defines several functions for managing fleet channels and driver positions. The functions include creating a service, getting or creating a fleet channel, deleting a fleet channel, clearing all fleet channels, updating a driver's position, and deleting a driver's position.\n\n### Input:\n\n\n### Output:\nimport json\n\nimport requests\n\nfrom logistics.models import Fleet\n\nSERVER_URL = \"http:\/\/demo.geo2tag.org\/instance\/\"\nBASE_SERVICE_NAME = \"testservice\"\nSERVICE_NAME = BASE_SERVICE_NAME\n\nchannel_dict = {}\npoints_dict = {}\n\n\ndef getSerivceUrl():\n    return SERVER_URL + \"service\/\" + SERVICE_NAME\n\ndef one_time_startup():\n    print(\"Application startup execution\")\n    createService()\n    clearAllFleetChannels()\n\n\ndef createService():\n    # m = hashlib.md5()\n    # m.update(socket.gethostbyname(socket.getfqdn()).encode('utf-8'))\n    # global SERVICE_NAME\n    # SERVICE_NAME = BASE_SERVICE_NAME + \"_\" + str(m.hexdigest())\n    # print(\"SERVICE_NAME: \"+SERVICE_NAME)\n    #\n    # url = SERVER_URL + 'service'\n    # data = {'name': SERVICE_NAME}\n    # request = requests.post(url, data=data)\n    # print(request.text)\n    pass\n\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 url \u043a\u0430\u0440\u0442\u044b (\u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 driver-fleet-id)\ndef getFleetMap(fleet_id):\n    try:\n        fleet = Fleet.objects.get(id=fleet_id)\n        channel_id = getOrCreateFleetChannel(fleet)\n    except:\n        channel_id = \"none\"\n\n    return getSerivceUrl() + \"\/map?zoom=10&latitude=59.8944&longitude=30.2642&channel_ids=[\\\"\"+str(channel_id)+\"\\\"]\"\n\n\n# \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u0430\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 (\u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u043e\u0447\u043a\u0438 updateDriverPos)\n# \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 oid \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f fleet\ndef getOrCreateFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id, None)\n        if channel_oid is not None:\n            return channel_oid\n\n        print(\"create channel for fleet \" + str(fleet))\n        url = getSerivceUrl() + '\/channel'\n        full_name = str(fleet.name) + \"_\" + str(fleet.id)\n        data = {'name': full_name, 'json': {'name': str(fleet.name), 'id': str(fleet.id), 'owner': fleet.owner.first_name+' '+fleet.owner.last_name}}\n        request = requests.post(url, data=data)\n        response = request.text\n        channel_exists = response == 'null'\n        if channel_exists:\n            print(full_name+' already exists : '+str(channel_exists))\n            oid = None\n        else:\n            oid = json.loads(response)[\"$oid\"]\n            channel_dict[fleet.id] = oid\n        return oid\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE createFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u0430\u043d\u0430\u043b \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 (\u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430)\ndef deleteFleetChannel(fleet):\n    try:\n        channel_oid = channel_dict.get(fleet.id)\n        headers = {'content-type': 'application\/json'}\n        url = getSerivceUrl() + \"\/channel\/\" + channel_oid\n        request = requests.delete(url, headers=headers)\n        channel_dict.pop(fleet.id)\n        print(\"delete channel of fleet \" + str(fleet) +\" result: \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteFleetChannel: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043a\u0430\u043d\u0430\u043b\u044b (\u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)\ndef clearAllFleetChannels():\n    print(\"delete all channels\")\n\n    try:\n        url = getSerivceUrl() + '\/channel?number=0'\n        request = requests.get(url)\n        response = request.text\n        print(response)\n        parsed_string = json.loads(response)\n        for channel in parsed_string:\n            channel_oid = channel[\"_id\"][\"$oid\"]\n            headers = {'content-type': 'application\/json'}\n            url = getSerivceUrl() + \"\/channel\/\" + channel_oid\n            print(\"DELETE \" + url)\n            requests.delete(url, headers=headers)\n            channel_dict.clear()\n            points_dict.clear()\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE clearAllFleetChannels: \" + str(e))\n\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043c\u0435\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f ( \u043f\u0440\u0438 api\/driver\/update_pos\/)\ndef updateDriverPos(fleet, driver, lat, lon):\n    try:\n        channel_oid = getOrCreateFleetChannel(fleet)\n        if channel_oid is not None:\n            point_oid = points_dict.get(driver.id, None)\n\n            url = getSerivceUrl() + '\/point'\n            data = [{\"lon\": float(lat), \"lat\": float(lon), \"alt\": 1.1,\n                     \"json\": {\"name\": driver.first_name + \" \" + driver.last_name}, \"channel_id\": channel_oid}]\n            if point_oid is None:\n                request = requests.post(url, data=json.dumps(data))\n                point_oid = json.loads(request.text)[0]\n                points_dict[driver.id] = point_oid\n                print(\"added point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \"+request.text)\n\n            else:\n                # delete old\n                del_url = getSerivceUrl() + '\/point\/' + point_oid\n                request = requests.delete(del_url)\n                success = request.text == '{}'\n                if success:\n                    points_dict.pop(driver.id)\n                    # add new\n                    request = requests.post(url, data=json.dumps(data))\n                    point_oid = json.loads(request.text)[0]\n                    points_dict[driver.id] = point_oid\n                    print(\"updated point \" + str(lat) + \" \" + str(lon) + \" for driver \" + str(driver) + \" in fleet \" + str(fleet) + \" result: \" + request.text)\n\n                else:\n                    print(\"error while delete \"+request.text)\n\n    except Exception as e:\n        print(\"EXCEPTION WHILE updateDriverPos: \" + str(e))\n\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u043e\u0447\u043a\u0443, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0432 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0435 fleet (\u043f\u0440\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0430\u0432\u0442\u043e\u043f\u0430\u0440\u043a\u0430 \u0438 \u043f\u0440\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u043f\u043e\u0435\u0437\u0434\u043a\u0438)\ndef deleteDriverPos(fleet, driver):\n    try:\n        point_oid = points_dict.get(driver.id)\n        url = getSerivceUrl() + '\/point\/' + point_oid\n        request = requests.delete(url)\n        points_dict.pop(driver.id)\n        print(\"cleared position for driver \" + str(driver) + \" from fleet \" + str(fleet) + \" result: \"+request.text)\n    except Exception as e:\n        print(\"EXCEPTION WHILE deleteDriverPos: \" + str(e))\n\n\n",
        "1099": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an efficient sorting algorithm in Python to sort a given array.\n\n### Input:\n[9, 4, 6, 1, 3, 7]\n\n### Output:\ndef sort_arr(arr):\n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]  \n    return arr\n\nresult = sort_arr([9, 4, 6, 1, 3, 7])\nprint(result)",
        "1100": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to identify which words in a given list appear more than 3 times and print them out.\n\n### Input:\nwords = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']\n\n### Output:\nwords = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']\nfrom collections import Counter\nword_counts = Counter(words)\nwords_appearing_more_than_3_times = [word for word, count in word_counts.items() if count > 3]\nprint(words_appearing_more_than_3_times)",
        "1101": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do you create a function in Python to find the highest common factor of the two given numbers?\n\n### Input:\n\n\n### Output:\ndef highestCommonFactor(num1, num2): \n    if num1 > num2: \n        small = num2 \n    else: \n        small = num1 \n    for i in range(1, small+1): \n        if((num1 % i == 0) and (num2 % i == 0)): \n            hcf = i \n    return hcf",
        "1102": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a scalable REST API in Python that allows users to register and login using their credentials.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\n\n# Create the Flask application\napp = Flask(__name__)\napi = Api(app)\n\n# Create app routes\nclass UserRegister(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Register the user\n  # ...\n\n  # Return a success message\n  return {'msg': 'User registered successfully!'}\n\nclass UserLogin(Resource):\n def post(self):\n  # Get data from the request body\n  data = request.get_json()\n  username = data['username']\n  password = data['password']\n\n  # Verify login credentials \n  # ...\n\n  # Return a success message if credentials verified\n  return {'msg': 'User logged in successfully!'}\n\n# Register resources with the API\napi.add_resource(UserRegister, '\/register')\napi.add_resource(UserLogin, '\/login')\n\n# Run the application\nif __name__ == '__main__':\n app.run()",
        "1103": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class in Python to represent complex numbers.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        return f\"{self.real} + {self.imaginary}i\"",
        "1104": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify a given text into either spam or ham.\n\n### Input:\n<This is an example of a spam message.>.\n\n### Output:\n\"\"\"\nClassify a text into either spam or ham \n\"\"\"\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef classify_spam(text):\n    # Create a vectorizer object\n    vec = CountVectorizer()\n    \n    # Tokenize the text\n    X = vec.fit_transform([text])\n    \n    # Create a Multinomial NB model \n    model = MultinomialNB()\n    model.fit(X, y)\n    \n    # Make predictions\n    prediction = model.predict(X)\n    \n    if prediction[0] == 0:\n        return 'ham'\n    else:\n        return 'spam'\n\nif __name__ == '__main__':\n    text = 'This is an example of a spam message.'\n    print(classify_spam(text))",
        "1105": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a Python script to generate Fibonacci numbers up to n=10000.\n\n### Input:\nNot applicable\n\n### Output:\ndef generate_fibonacci(n):  \n    #first two Fibonacci numbers  \n    a = 0\n    b = 1\n    #check if the number of terms is valid  \n    if n <=0:  \n        print(\"Please enter a positive integer\")  \n    elif n == 1:  \n        print(\"Fibonacci sequence upto\",n,\":\")  \n        print(a)  \n    else:  \n        print(\"Fibonacci sequence:\")  \n        for i in range(0,n):  \n            print(a)  \n            c = a + b  \n            #update values  \n            a = b  \n            b = c  \n# Driver function  \ngenerate_fibonacci(10000)",
        "1106": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to assess a patient's current state based on their temperature, pulse rate and respiratory rate.\n\n### Input:\ntemperature = 98.6\nbreathing_rate = 18\npulse_rate = 70\n\n### Output:\ndef assess_patient(temperature, breathing_rate, pulse_rate):\n if temperature > 100:\n  print('Fever present')\n if breathing_rate < 12 or breathing_rate > 20:\n  print('Respiratory distress')\n if pulse_rate < 60 or pulse_rate > 100:\n  print('Heart rate issue')",
        "1107": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that generates a random integer between two numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_int(x, y):\n    return random.randint(x, y)",
        "1108": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function which takes an array as input and prints out all the even numbers in the array.\n\n### Input:\n[1, 4, 5, 8, 9, 11]\n\n### Output:\ndef print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11])",
        "1109": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in python to generate a multiplication table for a given number n.\n\n### Input:\n\n\n### Output:\ndef generate_multiplication_table(n):\n    table = []\n    for i in range(1, n+1):\n        row = []\n        for j in range(1, n+1):\n            row.append(i * j)\n        table.append(row)\n    return table",
        "1110": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out a random id number containing 6 digits.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generateId():\n  return ''.join(str(random.randint(0,9)) for i in range(6))\n\nprint(generateId())",
        "1111": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, build a function that takes in two arguments (x,y) and returns the product of the two numbers.\n\n### Input:\n\n\n### Output:\ndef product(x, y):\n    return x * y",
        "1112": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python using Pandas to recode a column in the following dataframe.\n\n### Input:\nname,age,city\nJohn,30,New York\nMary,25,London\nMike,38,Paris\n\nRecode age such that every age greater than 30 is \"Above 30\" and every age below 30 is \"Below 30\".\n\n### Output:\nimport pandas as pd\n \ndef recode_age(data):\n    data['age_recoded'] = data['age'].apply(\n        lambda x: 'Above 30' if x > 30 else 'Below 30'\n    )\n \ndf = pd.read_csv('data.csv')\nrecode_age(df)\nprint(df)",
        "1113": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a piece of Python code to print the reversed version of a list.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nprint(list(reversed([1, 2, 3])))",
        "1114": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that computes the sum of integers from 1 to n.\n\n### Input:\n\n\n### Output:\ndef find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))",
        "1115": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to do a linear search of an element in a given array.\n\n### Input:\n\n\n### Output:\ndef linearSearch(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1",
        "1116": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python which takes an array and returns the list of its square root values.\n\n### Input:\n[2, 4, 9]\n\n### Output:\n[math.sqrt(x) for x in [2, 4, 9]]",
        "1117": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it\n\n### Input:\n[1, 4, 9, 5, 3, 2]\n\n### Output:\ndef index_sum_equal(nums): \n    total = sum(nums) \n    left_sum = 0 \n    for i in range(len(nums)): \n        right_sum = total - left_sum - nums[i] \n        if left_sum == right_sum: \n            return i \n        left_sum += nums[i] \n    return -1",
        "1118": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a loop in a Python program to print the Fibonacci series up to the nth term.\n\n### Input:\nn=10\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nprint(fibonacci(n))",
        "1119": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python generator to generate all prime numbers in range of 0 - 100.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            yield num\n\nfor prime_number in generate_prime_numbers(100):\n    print(prime_number)",
        "1120": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to classify a set of data points into one of four different classes.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# define 2-D data points with four different classes \nx_train = np.array([[1,2], [2,4], [4,2], [2,1], [4,4], [3,3], [3,1], [1,3]])\ny_train = np.array([0,0,1,1,2,2,3,3])\n\n# define the network model\nmodel = keras.Sequential([\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(4, activation='softmax')\n])\n\n# compile the model \nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=10)",
        "1121": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python decorator for calculating the time taken for a function to execute.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\n\ndef timeit(func):\n def wrapper(*args, **kwargs):\n start = time.time()\n result = func(*args, **kwargs)\n end = time.time()\n print(f\"Time taken for {func.__name__}: {end-start} seconds\")\n return result\n return wrapper",
        "1122": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the numbers from 1 to 100, except for multiples of three, where the program should print \"Fizz\" instead.\n\n### Input:\n\n\n### Output:\nfor num in range(1, 101):\n    if num % 3 == 0:\n        print('Fizz')\n    else:\n        print(num)",
        "1123": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Algorithm in Python for implementing a Binary Search Tree.\n\n### Input:\nNot applicable\n\n### Output:\nclass TreeNode:\n \n def __init__(self, val):\n  self.val = val\n  self.left = None\n  self.right = None\n\nclass BST:\n \n def __init__(self):\n  self.root = None\n \n def insert(self, val):\n  node = TreeNode(val)\n  if self.root is None:\n   self.root = node\n  else:\n   self.__insert_helper(self.root, node)\n \n def __insert_helper(self, root, node):\n  if node.val < root.val:\n   if root.left is None:\n    root.left = node\n   else:\n    self.__insert_helper(root.left, node)\n  else:\n   if root.right is None:\n    root.right = node\n   else:\n    self.__insert_helper(root.right, node)\n    \ndef search(self, val):\n node = self.__search_helper(self.root, val)\n return node is not None\n\ndef __search_helper(self, root, val):\n if root is None:\n  return None\n if root.val == val:\n  return root\n if val < root.val:\n  return self.__search_helper(root.left, val)\n else:\n  return self.__search_helper(root.right, val)",
        "1124": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate a space-delimited matrix of m rows and n columns.\n\n### Input:\nm = 3\nn = 5\n\n### Output:\ndef generate_matrix(m, n):\n    matrix = \"\"\n    # generate the matrix row by row\n    for i in range(m):\n        row = \"\"\n        # generate a single row with n columns\n        for j in range(n):\n            row += str(random.randint(-100, 100)) + \" \"\n        matrix += row + \"\\n\"\n    return matrix\n\nmatrix = generate_matrix(3, 5)\nprint(matrix)\n# 23 12 -72 -35 47\n# -6 67 42 -54 95\n# 93 13 75 -9 -63",
        "1125": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a security system in Python to check if a given password matches a database of hashed passwords.\n\n### Input:\nHashed password: abcdefg12345678\n\n### Output:\nimport bcrypt\n\ndef checkPassword(hashed_password):\n # Hash the password\n password = bcrypt.hashpw(password, bcrypt.gensalt()) \n\n # Check the password against the hash\n if bcrypt.checkpw(password, hashed_password):\n   return True\n else:\n   return False\n\nif __name__ == \"__main__\":\n hashed_password = \"abcdefg12345678\"\n if checkPassword(hashed_password):\n   print(\"Password match\")\n else:\n   print(\"Password verficiation failed\")",
        "1126": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a solution in Python to identify all the words containing the given letter.\n\n### Input:\nString: \"Hello World\"\nLetter: \"H\"\n\n### Output:\ndef find_words_containing_letter(givenString, letter):\n    words = givenString.split(' ')\n    words_containing_letter = []\n\n    for word in words:\n        if letter in word:\n            words_containing_letter.append(word)\n    \n    return words_containing_letter\n\nprint(find_words_containing_letter('Hello World', 'H'))",
        "1127": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to implement a queue with methods push() to insert an element, pop() to remove an element, and peek() to return the top element of the queue.\n\n### Input:\nNot applicable\n\n### Output:\nclass Queue:\n def __init__(self):\n self.queue = []\n\n def push(self, item):\n self.queue.append(item)\n\n def pop(self):\n return self.queue.pop(0)\n\n def peek(self):\n return self.queue[0]\n\n# Usage example\nq = Queue()\nq.push(1)\nq.push(2)\nq.push(3)\n\nprint(q.pop()) # 1 \nprint(q.peek()) # 2",
        "1128": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat would be the best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python?\n\n### Input:\n\n\n### Output:\nThe best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python is a k-d tree. A k-d tree is a specialized data structure that can be used to store and efficiently query k-nearest neighbors of points in a 2-Dimensional space. It is a space partitioning tree that recursively splits the dimensions of the space around a median. This allows for extremely efficient queries of the k-nearest neighbors.",
        "1129": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to check if a number is greater than a given threshold.\n\n### Input:\n\n\n### Output:\ndef is_greater(num, threshold):\n    if num > threshold:\n        return True\n    else:\n        return False",
        "1130": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following JavaScript code in Python.\n\n### Input:\nfunction addNumbers(x, y) {\n    return x + y;\n}\n\n### Output:\ndef addNumbers(x, y):\n    return x + y",
        "1131": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a string of numbers delimited by spaces and returns the largest number.\n\n### Input:\n64 8 224 54 21\n\n### Output:\ndef findMax(string):\n  numbers = string.split(\" \")\n  largest = 0\n  \n  for number in numbers:\n    if number > largest:\n      largest = number\n      \n  return largest\n  \nstring = \"64 8 224 54 21\"\nprint(f\"The largest number is {findMax(string)}.\")",
        "1132": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string as input and returns all palindromic substrings of the string.\n\n### Input:\nString = \u201cabc\u201d\n\n### Output:\ndef palindromic_substring(s):\n  all_palindromes = []\n\n  #  check for substrings of length 3\n  for i in range(len(s) - 2):\n    if s[i] == s[i + 2]:\n      all_palindromes.append(s[i:i + 3])\n\n  #  check for substrings of length 4\n  for i in range(len(s) - 3):\n    if s[i] == s[i + 3]:\n      all_palindromes.append(s[i:i + 4])\n\n  return all_palindromes\n\nresult = palindromic_substring(\"abc\")\nprint(result)",
        "1133": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a quick sorting algorithm using Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right)",
        "1134": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RNN model using Python that can classify a piece of text as either positive or negative sentiment.\n\n### Input:\n\n\n### Output:\n# Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))",
        "1135": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in python that takes two integers as inputs and outputs the greatest common divisor.\n\n### Input:\n105, 45\n\n### Output:\ndef gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n  \n # driver code  \nx = 105\ny = 45 \nprint(\"The gcd of\", x,  \n                        \"and\", y, \"is\", gcd(x, y))",
        "1136": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based game using Python. The game should have different levels and points for completing each level.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Initialize the game\nlevel = 1\npoints = 0\n\nwhile True:\n # Randomly generate the level\n level = random.randint(1, 10)\n \n # Print out the level and ask for input\n print('Level {}'.format(level))\n user_input = input()\n \n # Logic for checking the input\n if user_input == 'correct':\n points += 10\n elif user_input == 'wrong':\n break\n\n# Print out the result\nprint('Points:', points)",
        "1137": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind a way to write an entire program without using any looping constructs or if-else statements.\n\n### Input:\n\n\n### Output:\n\/\/ In C\n#include <stdio.h>\n\nint main()\n{\n    int x = 0;\n    \/\/ Recurse to infinity\n    x = main();\n    printf(\"Infinite Recursion Complete\");\n    return 0;\n}\n\n\/\/ In Python\ndef recursive_call():\n  recursive_call()\n\nrecursive_call()",
        "1138": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify the longest line in a string.\n\n### Input:\nSentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4\n\n### Output:\ntest_str = 'Sentence 1\\nSentence 2\\nSentence 3 (longest sentence)\\nSentence 4'\n\n# Get all lines in test_str into a list\nstr_lines = test_str.split('\\n')\n\n# Find the longest line in the list\nlongest_line = max(str_lines, key=len)\n\n# Print the longest line\nprint(f'The longest line is: {longest_line}')",
        "1139": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.\n\n### Input:\ndef factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result",
        "1140": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for scraping a website and extracting a list of URLs from it.\n\n### Input:\nhttps:\/\/example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nurls = []\n\nfor link in soup.find_all('a', href=True):\n if link['href'].startswith('http'):\n urls.append(link['href'])\n\nprint(urls)",
        "1141": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to filter out strings in a list that have length 3.\n\n### Input:\n['ada', 'python', 'ruby', 'egg', 'coffee']\n\n### Output:\ndef filter_by_length(list):\n    \"\"\"\n    Filters out strings in the given list that have length 3.\n    \"\"\"\n    filtered_list = [word for word in list if len(word) == 3]\n    return filtered_list\n\nif __name__ == '__main__':\n    list = ['ada', 'python', 'ruby', 'egg', 'coffee']\n    print(filter_by_length(list))",
        "1142": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code generator to convert a Python code into Javascript code.\n\n### Input:\ndef hello_world():\n print(\"Hello World\")\n\n### Output:\nfunction helloWorld() {\n console.log(\"Hello World\");\n}",
        "1143": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a JSON object from a given string.\n\n### Input:\nInput String: {\"name\": \"John Doe\", \"age\": 28}\n\n### Output:\nimport json\n\ngivenString = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 28}\"\n\ndata = json.loads(givenString)\n\nprint(data)",
        "1144": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python module that converts a given date to ISO format\n\n### Input:\n25 December 2024\n\n### Output:\nimport datetime\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00",
        "1145": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to find the maximum element in a given array.\n\n### Input:\n\n\n### Output:\n# Generate a program in Python to find the maximum element in a given array\n\ndef maximum_element(arr):\n  \"\"\"\n  Find the maximum element in a given array.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The maximum value found in the array, or None if the array is empty.\n  \"\"\"\n  max_element = None\n  for n in arr:\n    if max_element is None or n > max_element:\n      max_element = n\n  return max_element",
        "1146": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Dockerfile that sets up a Python environment for a web application.\n\n### Input:\nNot applicable\n\n### Output:\nFROM python:3.8\n\n# Set environment variables\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Copy project files\nWORKDIR \/usr\/src\/app\nRUN mkdir static\nRUN mkdir templates\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run the app\nCMD uvicorn app:app --host=0.0.0.0 --port=8000",
        "1147": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)",
        "1148": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that will convert a given integer to a string.\n\n### Input:\n\n\n### Output:\ndef int_to_string(num):\n   return str(num)",
        "1149": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python create a web scraper to retrieve the text in a specific HTML element.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('http:\/\/example.com\/')\nhtml = response.content\nsoup = BeautifulSoup(html, 'html.parser')\n\ntext_in_element = soup.find('div', {'class': 'my-class'}).get_text()\nprint(text_in_element)",
        "1150": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that searches a list of given integers for a given target value and returns its index if found.\n\n### Input:\nlist = [2, 3, 4, 5, 6], target = 4\n\n### Output:\ndef search(list, target):\n  for i in range(len(list)):\n    if list[i] == target:\n      return i\n  return -1\n\nlist = [2, 3, 4, 5, 6]\ntarget = 4\n\nindex = search(list, target)\nif index == -1:\n  print(\"The target was not found.\")\nelse:\n  print(\"The target was found at index %d.\" % index)",
        "1151": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of the top 10 common words in a given list of words.\n\n### Input:\n['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\n### Output:\nfrom collections import Counter\n\nwords = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']\n\nword_counts = Counter(words)\ntop_10 = word_counts.most_common(10)\nprint (top_10)",
        "1152": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a method in Python to test whether or not a number is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(n):\n    n_str = str(n)\n    return n_str == n_str[::-1]",
        "1153": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the Fibonacci sequence of a given number using a Python program.\n\n### Input:\nvar n = 10;\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nprint(Fibonacci(n))",
        "1154": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print a random permutation of array elements.\n\n### Input:\ninput_array = [1, 2, 3, 4, 5]\n\n### Output:\nimport random\ndef random_permutation(input_array):\n    perm = []\n    while(len(input_array) > 0):\n        el = random.choice(input_array)\n        perm.append(el)\n        input_array.remove(el)\n    return perm",
        "1155": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Flask and Python to read in a dataset and print the number of unique items.\n\n### Input:\n\n\n### Output:\n@app.route('\/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html')",
        "1156": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple webscraper using Python library BeautifulSoup which scrapes a website for articles and downloads all the articles\n\n### Input:\nThe website url should be https:\/\/www.example.com\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get articles\narticles = soup.find_all('article')\n\n# Download the articles\nfor article in articles:\n    article_url = article.find('a')['href']\n    article_response = requests.get(article_url)\n    with open(article_url.split('\/')[-1], 'wb') as f:\n        f.write(article_response.content)",
        "1157": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo reproduce Figure 8 from Prsa et al. 2016, first set up a binary system with reasonable albedos and relevant parameters. Then compute light curves with wilson and horvat irradiation and plot the relative differences between the two as a function of phase, for several different values of the inclination. Use the given code as a reference.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Lambert Scattering (irrad_method='horvat')\n# ============================\n# \n# Setup\n# -----------------------------\n\n# Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release).\n\n# In[ ]:\n\n\nget_ipython().system('pip install -I \"phoebe>=2.0,<2.1\"')\n\n\n# As always, let's do imports and initialize a logger and a new bundle.  See [Building a System](..\/tutorials\/building_a_system.html) for more details.\n\n# In[1]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\nimport phoebe\nfrom phoebe import u # units\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlogger = phoebe.logger('error')\n\nb = phoebe.default_binary()\n\n\n# Relevant Parameters\n# ---------------------------------\n\n# For parameters that affect reflection and heating (irrad_frac_\\*) see the tutorial on [reflection and heating](.\/reflection_heating.ipynb).\n# \n# The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely.\n\n# In[3]:\n\n\nprint(b['irrad_method'])\n\n\n# Influence on Light Curves (fluxes)\n# ---------------------------------\n# \n# Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http:\/\/phoebe-project.org\/publications\/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations.\n# \n# <img src=\"prsa+2016_fig8.png\" alt=\"Figure 8\" width=\"600px\"\/>\n# \n# First we'll roughly create a A0-K0 binary and set reasonable albedos.\n\n# In[4]:\n\n\nb['teff@primary'] = 11000\nb['rpole@primary'] = 2.5\nb['gravb_bol@primary'] = 1.0\n\nb['teff@secondary'] = 5000\nb['rpole@secondary'] = 0.85\n\nb['q@binary'] = 0.8\/3.0\n\nb.flip_constraint('mass@primary', solve_for='sma@binary')\nb['mass@primary'] = 3.0\n\n\n# In[5]:\n\n\nprint(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component'))\n\n\n# In[6]:\n\n\nb['irrad_frac_refl_bol@primary'] = 1.0\nb['irrad_frac_refl_bol@secondary'] = 0.6\n\n\n# Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination.\n# \n# Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses.\n\n# In[7]:\n\n\nphases = np.linspace(0,1,101)\nb.add_dataset('lc', times=b.to_time(phases))\n\n\n# In[8]:\n\n\nfor incl in [0,30,60,90]:\n    b.set_value('incl@binary', incl)\n    b.run_compute(irrad_method='wilson')\n    fluxes_wilson = b.get_value('fluxes', context='model')\n    b.run_compute(irrad_method='horvat')\n    fluxes_horvat = b.get_value('fluxes', context='model')\n    plt.plot(phases, (fluxes_wilson-fluxes_horvat)\/fluxes_wilson, label='i={}'.format(incl))\n    \nplt.xlabel('phase')\nplt.ylabel('[F(wilson) - F(horvat)] \/ F(wilson)')\nplt.legend(loc='upper center')\nplt.show()\n\n",
        "1158": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(80), unique=True)\n author_id = db.Column(db.Integer, db.ForeignKey('author.id'))\n publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))\n\nclass Author(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\nclass Publisher(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\ndb.create_all()\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "1159": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision-tree algorithm that takes a CSV of input data and predicts the correct class for python.\n\n### Input:\n\n\n### Output:\ndef decision_tree_classifier(input_data):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(X_test)\n    return y_pred",
        "1160": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AWS Lambda function in Python that sends an automated SMS message when a new user signup is detected.\n\n### Input:\nPhone Number = 3233334444, Message = \"Thank you for signing up for our service\"\n\n### Output:\nimport boto3\n\ndef lambda_handler(event, context):\n    phone_number = event[\"Phone Number\"]\n    message = event[\"Message\"]\n\n    # Create an SNS client\n    sns = boto3.client(\"sns\")\n\n    # Publish a simple message to the specified SNS topic\n    response = sns.publish(\n        PhoneNumber=phone_number,\n        Message=message\n    )\n\n    # Response\n    return {\n        'statusCode': 200,\n        'body': response\n    }",
        "1161": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to convert Celsius to Fahrenheit in Python\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Convert Celsius Temperature to Fahrenheit.\n\n    Parameters:\n        celsius (float): Temperature in Celsius\n        \n    Returns:\n        Temperature in Fahrenheit\n    \"\"\"\n    return celsius * 9\/5 + 32",
        "1162": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML page for a directory of Engineers that displays their name, organization, and skills.\n\n### Input:\ndata = [\n {name: 'John Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Python']},\n {name: 'Jane Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Node.js']},\n {name: 'Bob Doe', organization: 'ABC Co.', skills:['GoLang', 'PHP']},\n]\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n <title>Engineers Directory<\/title>\n<\/head>\n<body>\n <p>Directory of Engineers and their skills<\/p>\n <ul>\n <li>\n <span>Name: <\/span><span>John Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Python<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Jane Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Node.js<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Bob Doe<\/span>, \n <span>Organization: <\/span><span>ABC Co.<\/span>, \n <span>Skills: <\/span><span>GoLang, PHP<\/span>\n <\/li>\n <\/ul>\n<\/body>\n<\/html>",
        "1163": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that calculates the distance between two points given their latitude and longitude.\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r",
        "1164": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input.\n\n### Input:\nn = 10\n\n### Output:\ndef Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10))",
        "1165": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a new list with only odd numbers.\n\n### Input:\n[1,2,3,4,5,6,7,8,9]\n\n### Output:\ndef get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums))",
        "1166": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to improve the runtime complexity of the program.\n\n### Input:\ndef solve(list):\n    max_len = 0\n    for i in range(len(list)-1):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                cur_len = 0\n                k = 0\n                while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]:\n                    cur_len += 1\n                    k += 1\n                max_len = max(max_len, cur_len)\n    return max_len\n\n### Output:\ndef solve(list):\n    max_len = 0\n    longest_prefix = [0] * len(list)\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            longest_prefix[i] = longest_prefix[i-1] + 1\n        else:\n            longest_prefix[i] = 0\n        max_len = max(max_len, longest_prefix[i])\n    return max_len",
        "1167": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to check if a given name is valid or not.\n\n### Input:\n\n\n### Output:\ndef is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name))",
        "1168": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sentence, write a python program to return all the possible permutations of the words in the sentence.\n\n### Input:\nsentence = \"the cat sat on the mat\"\n\n### Output:\nimport itertools\n\ndef get_permutations(sentence):\n    sentence_list = sentence.split(\" \")\n    return list(itertools.permutations(sentence_list))\n\nif __name__ == '__main__':\n    print(get_permutations(\"the cat sat on the mat\"))",
        "1169": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JSON parser in Python\n\n### Input:\n\n\n### Output:\nimport json\n\ndef parseJSON(jsonString):\n    data = json.loads(jsonString)\n    return data",
        "1170": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to display numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\ndef display_nums():\n    for i in range(1, 11):\n        print(i)",
        "1171": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the Odds Ratios for a given contingency table.\n\n### Input:\ncontingency_table = [[100, 75], [40, 35]]\n\n### Output:\ndef odds_ratio(contingency_table):\n    numerator = (contingency_table[0][0] * contingency_table[1][1])\n    denominator = (contingency_table[0][1] * contingency_table[1][0])\n    if denominator == 0:\n        return None\n    odds_ratio = numerator \/ denominator\n    return odds_ratio\n    \nif __name__ == \"__main__\":\n    contingency_table = [[100, 75], [40, 35]]\n    print(odds_ratio(contingency_table))",
        "1172": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a K-Nearest Neighbors classifier model in Python for predicting the sale price of a used car.\n\n### Input:\n1,Toyota,Corolla,110000,Petrol,Manual,1990,30,3000\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# list of features and labels\nfeatures = np.array([[110000, 'Petrol', 'Manual', 1990, 30, 3000]])\nlabels = np.array([[1]])\n\n# perform data preprocessing\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# create the model\nmodel = KNeighborsClassifier()\nmodel.fit(X_train_scaled, y_train)\n\n# predict sales price\npredicted_price = model.predict([X_test_scaled[0]])\n\nprint(\"Predicted sale price:\", predicted_price[0])",
        "1173": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of objects and a property of each object. Can you create a Python program to output the value of the property of the first and last object?\n\n### Input:\n[\n { \"name\": \"Alice\" , \"age\": 24 },\n { \"name\": \"Bob\" , \"age\": 29 },\n { \"name\": \"Charlie\" , \"age\": 28 }\n]\n\n### Output:\nnameFirst = 'Alice'\nnameLast = 'Charlie'\nageFirst = 24\nageLast = 28",
        "1174": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnswer a question using Python.\n\n### Input:\nQuestion: What is the sum of all numbers divisible by 25 between 500 and 1000?\n\n### Output:\nint sum = 0\n \nfor i in range(500, 1000):\n  if(i % 25 == 0):\n    sum += i\n \nprint(sum)",
        "1175": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient data-structure using Python for\n\n### Input:\nstoring a list of strings that can be efficiently searched.\n\n### Output:\nclass StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False",
        "1176": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python code to perform sentiment analysis (positive or negative) on a given text.\n\n### Input:\ntext = \"This movie was truly amazing\"\n\n### Output:\nimport nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\")",
        "1177": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to calculate the mean absolute difference of items in a list in Python.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Output:\ndef mean_absolute_difference(my_list):\n    diff = 0\n    for i in range(len(my_list) - 1):\n        diff += abs(my_list[i] - my_list[i + 1])\n    return diff \/ (len(my_list) - 1)\n\nif __name__ == \"__main__\":\n    print(mean_absolute_difference(my_list))",
        "1178": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a function with multiple input parameters.\n\n### Input:\nfunction = f(x, y) = 5x + 3y\n\n### Output:\n#import matplotlib.pyplot as plt \nimport numpy as np \nimport sympy as sym \nfrom scipy import optimize \n\n# define the function\ndef function(x, y):\n\treturn 5*x + 3*y \n\n# define the inputs\nx = sym.Symbol('x') \ny = sym.Symbol('y') \n\n# optimize the function\nresult = optimize.minimize(function, [0, 0]) \n\n# output the results\nprint('The optimal value of x is:', result.x[0]) \nprint('The optimal value of y is:', result.x[1])",
        "1179": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.\n\n### Input:\nn = 4\nm = 6\n\n### Output:\ndef sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))",
        "1180": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that separates odd and even numbers.\n\n### Input:\n[3, 4, 7, 12, 19]\n\n### Output:\ndef odd_even(numbers):\n    odd = []\n    even = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even\n\nodds, evens = odd_even([3, 4, 7, 12, 19])\nprint(odds) # prints: [3, 7, 19]\nprint(evens) # prints: [4, 12]",
        "1181": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program using Python that adds two numbers entered by the user.\n\n### Input:\nNot applicable\n\n### Output:\n# The function to add two numbers\ndef add(num1, num2):\n  # Adding the two numbers\n  result = num1 + num2\n \n  # Printing the result\n  print(f'The result of the addition is {result}')\n\n# Taking the input from the user\nnum1 = int(input('Enter the first number: '))\nnum2 = int(input('Enter the second number: '))\n\n# Calling the add function\nadd(num1, num2)",
        "1182": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list in descending order using a lambda function in Python.\n\n### Input:\nInput list : [1, 5, -9, 8, 21]\n\n### Output:\nlist = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list)",
        "1183": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an array of random numbers in the range [0,99], with the length given as input.\n\n### Input:\nlength = 10\n\n### Output:\nimport random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)]",
        "1184": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a TensorFlow model in Python to predict the sentiment of text.\n\n### Input:\ndata = [('Where can I find a good cup of coffee?', 0),\n        ('I am so happy!', 1),\n        ('This is so sad :(', 0)]\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Split data into train and test sets\ntrain_X, train_y, test_X, test_y = [], [], [], []\nfor x, y in data:\n train_X.append(x)\n train_y.append(y)\n\n# Create tokenizer\ntokenizer = keras.preprocessing.text.Tokenizer()\ntokenizer.fit_on_texts(train_X)\n\n# Create model\nmodel = keras.models.Sequential([\nkeras.layers.Dense(64, input_shape=[None,]),\n keras.layers.Dense(64, activation='relu'),\n keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile model\nmodel.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n)\n\n# Train\ntrain_X_vector = tokenizer.texts_to_matrix(train_X)\nmodel.fit(train_X_vector, train_y, epochs=10, validation_split=0.2)",
        "1185": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to build an API using python and Flask\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run()",
        "1186": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to estimate the value of PI using Leibniz's formula.\n\n### Input:\nNot applicable\n\n### Output:\ndef estimate_pi(n_terms: int) -> float:\n    numerator: float = 4.0\n    denominator: float = 1.0\n    operation: float = 1.0\n    pi: float = 0.0\n\n    for _ in range(n_terms):\n        pi += operation * (numerator \/ denominator)\n        denominator += 2.0\n        operation *= -1.0\n\n    return pi\n\n\nif __name__ == \"__main__\":\n    print(estimate_pi(1000))",
        "1187": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrepare a Python 3 program that takes the following input and finds the most frequently occurring characters in it.\n\n### Input:\nLorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\n\n### Output:\nstring = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\")",
        "1188": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two sets of strings, and print the longest common substring of the two sets.\n\n### Input:\nset1: [\"pineapple\" ,\"mango\",\"apple\",\"orange\"]\nset2: [\"grandfather\",\"grandmother\",\"father\",\"mother\"]\n\n### Output:\ns1 = set([\"pineapple\" ,\"mango\",\"apple\",\"orange\"])\ns2 = set([\"grandfather\",\"grandmother\",\"father\",\"mother\"])\n\nlongest_common_string = \"\"\n\nfor word1 in s1:\n  for word2 in s2:\n    if word1 not in longest_common_string and word2 not in longest_common_string:\n      common_string = \"\"\n      for i in range(min(len(word1),len(word2))):\n        if word1[i] == word2[i]:\n          common_string += word1[i]\n    \n      if len(common_string) > len(longest_common_string):\n        longest_common_string = common_string\n\nprint(longest_common_string)",
        "1189": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.\n\n### Input:\nhttps:\/\/www.youtube.com\/user\/mahalo\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.youtube.com\/user\/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers)",
        "1190": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to iterate over a list and print out each item in the list.\n\n### Input:\nmyList = [1, 2, 3, 4]\n\n### Output:\nfor element in myList: \n print(element)",
        "1191": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate an array of numbers from 1 to n in random order.\n\n### Input:\n7\n\n### Output:\nimport random\n\ndef generate_random_array(n):\n    array = [i for i in range(1, n + 1)]\n    random.shuffle(array)\n    return array\n\nresult = generate_random_array(7)\nprint(result)",
        "1192": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine an interface for a data import task in Python.\n\n### Input:\nNot applicable\n\n### Output:\nclass DataImportTask:\n\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\n\n    # Method to download the source file to the file system\n    def download(self):\n        # Implementation here\n\n    # Method to read the content of the source file into a CSV format\n    def read(self):\n        # Implementation here\n\n    # Method to format the content into the destination format\n    def format(self):\n        # Implementation here\n\n    # Method to save the destination in the desired location\n    def save(self):\n        # Implementation here",
        "1193": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove a given element from a list.\n\n### Input:\n\n\n### Output:\ndef remove_item(items, target):\n    return [i for i in items if i != target]",
        "1194": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if a given string consists of only numeric digits.\n\n### Input:\n\"123456\"\n\n### Output:\n# Python program to check if a given string consists of only numeric digits \n\n# making a string with only digits \n# and assigning it to a variable \ntest_string = \"123456\"\n  \n# printing original string  \nprint(\"Original String: \" + test_string) \n  \n# using if condition to \n# Check if all values are numbers \nif test_string.isdigit(): \n    print(\"String contains only numbers\") \nelse : \n    print(\"String not contains only numbers\")",
        "1195": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a python program to produce the intersection of two given lists?\n\n### Input:\nlist 1: [2, 3, 4] \nlist 2: [3, 5, 6, 4]\n\n### Output:\nlist1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4}",
        "1196": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following code from python 2.x to python 3.x.\n\n### Input:\nimport csv\ncsvReader = csv.reader(open(\"filename.csv\", \"rb\"))\n\n### Output:\nimport csv\n\nwith open(\"filename.csv\", 'r', newline='') as f:\n    csvReader = csv.reader(f)",
        "1197": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutpus the number of unique elements in a Python list.\n\n### Input:\nlist = [1, 2, 2, 3, 4, 4, 4]\n\n### Output:\nunique_elements = set(list)\nprint(\"Number of unique elements:\", len(unique_elements))",
        "1198": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that takes an array of numbers and returns an array of only the even numbers.\n\n### Input:\n[2, 5, 8, 9, 10, 13, 11]\n\n### Output:\ndef keep_even_only(arr):\n    return [n for n in arr if n%2 == 0]\n\narr = [2, 5, 8, 9, 10, 13, 11]\neven_arr = keep_even_only(arr)\n\nprint(even_arr)\n\n# Output:\n# [2, 8, 10]",
        "1199": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm for an array of integers using Python.\n\n### Input:\n[4, 2, 9, 7, 3]\n\n### Output:\ndef sort(array):\n  # base case: if array is empty or has only one element, it is already sorted\n  if len(array) <= 1:\n    return array\n\n  # divide array into two halves\n  midpoint = len(array) \/\/ 2\n  left = array[:midpoint]\n  right = array[midpoint:]\n\n  # recursively sort left and right subarrays\n  left = sort(left)\n  right = sort(right)\n\n  # merge two sorted halfs\n  return merge(left, right)\n\ndef merge(left, right):\n  result = []\n  left_index = 0 # index of the left subarray\n  right_index = 0 # index of the right subarray\n\n  # keep going until one of the two subarrays is depleted\n  while left_index < len(left) and right_index < len(right):\n    if left[left_index] <= right[right_index]:\n      # add the smallest element and increment its index\n      result.append(left[left_index])\n      left_index += 1\n    else:\n      result.append(right[right_index])\n      right_index += 1\n  \n  # we must have reached the end of the left or right subarray\n  # append all remaining elements\n  for i in range(left_index, len(left)):\n    result.append(left[i])\n  for i in range(right_index, len(right)):\n    result.append(right[i])\n  \n  return result\n\n# Test code\narray = [4, 2, 9, 7, 3]\nsorted_array = sort(array)\nprint(sorted_array)",
        "1200": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize array sorting to sort an array in Python.\n\n### Input:\narr = [10, 7, 8, 4, 2, 9]\n\n### Output:\narr.sort() \nprint(arr)",
        "1201": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that returns the maximum of two given numbers.\n\n### Input:\n\n\n### Output:\ndef maxOfTwo Numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\nprint(maxOfTwoNumbers(4, 6))",
        "1202": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a mix of SQL and Python, build a program to read from a database table into a pandas dataframe, perform some manipulation on that data, and return the manipulated data back to the database table.\n\n### Input:\n\n\n### Output:\n# Establish an SQL connection \nimport sqlite3\nconn = sqlite3.connect(\"mydatabase.db\")\n\n# Create a cursor object \nc = conn.cursor()\n\n# Execute SQL Query \nc.execute(\"SELECT * FROM TABLE\")\n\n# Store the result in a dataframe \nimport pandas as pd\ndf = pd.DataFrame(c.fetchall()) \n\n# Perform some manipulation on the data \n# E.g. Add a new column \ndf['new_col'] = df['old_col1'] + df['old_col2']\n\n# Update the table \ndf.to_sql(\"TABLE\", conn, if_exists='replace', index=False)\n\n# Close connection \nconn.close()",
        "1203": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function capable of generating a personalized Etsy product listing URL for a given product.\n\n### Input:\nProduct name: 'Tulip Breeze Necklace' \nProduct category: 'Jewelry'\nProduct price: $45\n\n### Output:\ndef generateURL(productName, productCategory, productPrice):\n productName = productName.lower().replace(' ', '-')\n productCategory = productCategory.lower().replace(' ', '-')\n return 'https:\/\/www.etsy.com\/listing\/{}-{}-{}\/{}'.format(productName, productPrice, productCategory, productName)\n \ngeneratedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)\n# https:\/\/www.etsy.com\/listing\/tulip-breeze-necklace-45-jewelry\/tulip-breeze-necklace",
        "1204": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a class in Python to represent a rectangle with two fields: width and height.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height",
        "1205": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for classifying customer data.\n\n### Input:\ncustomer_data = [\n    {\"name\": \"John Doe\", \"age\": 25, \"gender\": \"Male\"},\n    {\"name\": \"Jane Doe\", \"age\": 30, \"gender\": \"Female\"},\n    {\"name\": \"Pat Smith\", \"age\": 75, \"gender\": \"Unknown\"}\n]\n\n### Output:\nimport pandas as pd\n\ndf = pd.DataFrame(customer_data)\ndf[\"age_category\"] = df[\"age\"].apply(lambda a: \"Young\" if 0 < a <= 20 else \"Middle-aged\" if 21 <= a <= 60 else \"Senior\")\ndf[\"gender_category\"] = df[\"gender\"].apply(lambda g: \"Male\" if g == \"Male\" else \"Female\" if g == \"Female\" else \"Other\")\n\nprint(df)",
        "1206": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to convert centimeter to inches.\n\n### Input:\n\n\n### Output:\ndef centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches)",
        "1207": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that checks if all numbers in an array are greater than, equal to, or less than a given number.\n\n### Input:\n[3, 5,7], 4\n\n### Output:\ndef checkNum(arr, num):\n    response = []\n    for element in arr: \n        if element > num: \n            response.append('greater than')\n        elif element < num:\n            response.append('less than')\n        else:\n            response.append('equal to')\n    return response\n\nnums = [3,5,7]\nout = checkNum(nums, 4)\nprint(out)",
        "1208": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to classify the sentiment of a list of comments with Python.\n\n### Input:\ncomments = [\"This product is great!\", \"I hate this product\", \"Not sure whether to buy it\"]\n\n### Output:\ndef classify_sentiment(comments):\n    results = []\n    for comment in comments:\n        if \"great\" in comment or \"love\" in comment:\n            results.append(\"positive\")\n        elif \"hate\" in comment or \"bad\" in comment:\n            results.append(\"negative\")\n        else: \n            results.append(\"neutral\")\n    return results\n\nprint(classify_sentiment(comments))",
        "1209": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a two-player game of Blackjack in Python.\n\n### Input:\n\n\n### Output:\nfrom random import shuffle\nfrom itertools import product\n\ndeck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S']))\nshuffle(deck)\n\nplayer1_score = 0\nplayer2_score = 0\n\ndef deal_cards(player):\n    card1 = deck.pop()\n    card2 = deck.pop()\n    player.append(card1)\n    player.append(card2)\n    return player\n\nplayer1 = deal_cards([])\nplayer2 = deal_cards([])\n\n# Player 1 turn\nplayer1_score = 0\nfor i in range(len(player1)):\n    card_score = 0\n    if (player1[i][0] == 'A'):\n        card_score = 11\n    elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player1[i][0])\n        \n    player1_score += card_score\n\n# Player 2 turn\nplayer2_score = 0\nfor i in range(len(player2)):\n    card_score = 0\n    if (player2[i][0] == 'A'):\n        card_score = 11\n    elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player2[i][0])\n        \n    player2_score += card_score\n\n# Checking the winner\nif (player1_score > player2_score):\n    print(\"Player 1 wins!\")\nelif (player2_score > player1_score):\n    print(\"Player 2 wins!\")\nelse:\n    print(\"It's a Tie!\")",
        "1210": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the length of a string.\n\n### Input:\n\n\n### Output:\ndef string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12",
        "1211": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an logging utility in Python that prints the timestamp along with the logged content for each log entry.\n\n### Input:\nNot applicable.\n\n### Output:\nimport datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message')",
        "1212": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print out 10 random values between 1 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\nfor i in range(10):\n    print(random.randint(1, 10))",
        "1213": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers.\n\n### Input:\nlist=[2,4,5,7,1,3]\n\n### Output:\nlist=[2,4,5,7,1,3]\n\neven_sum= 6\nodd_sum= 15\n\ndef sum_even_odd(list):\n    even_sum=0\n    odd_sum=0\n    \n    for num in list:\n        if num % 2 == 0:\n            even_sum+=num\n        else:\n            odd_sum+=num \n    \n    print(\"even_sum=\",even_sum)\n    print(\"odd_sum=\",odd_sum)\n    \nsum_even_odd(list)",
        "1214": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the testing of a Python Flask application by writing a script that will run unit tests on the models.\n\n### Input:\nNot applicable\n\n### Output:\nimport unittest\nfrom flask_testing import TestCase\nfrom app import db, Task\n\nclass TestModel(TestCase):\n def create_app(self):\n return app\n\n def setUp(self):\n db.create_all()\n self.task = Task(description='Description')\n db.session.add(self.task)\n db.session.commit()\n\n def tearDown(self):\n db.session.remove()\n db.drop_all()\n\nclass TestTask(TestModel):\n def test_task_creation(self):\n self.assertEqual('Description', self.task.description)\n\nif __name__ == '__main__':\n unittest.main()",
        "1215": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a python function from a set of instructions using list comprehension.\n\n### Input:\nDefine a function that takes a list of numbers and returns a list containing only the odd numbers from the given list.\n\n### Output:\ndef odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]",
        "1216": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python groupby function that returns the top 3 most frequent elements in each group.\n\n### Input:\n\n\n### Output:\ndef top_frequent(data, key):\n  grouped = data.groupby(key)\n  result = []\n\n  for name, group in grouped:\n    counts = group.value_counts()\n    top_3 = counts.nlargest(3).index.tolist()\n    result.append((name, top_3))\n  \n  return result",
        "1217": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function that accepts a number n as input and outputs its nth prime number.\n\n### Input:\n\n\n### Output:\ndef nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
        "1218": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a binary search algorithm in Python that takes in an input list and a target value to search for.\n\n### Input:\n\n\n### Output:\ndef binary_search(arr,target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high: \n    mid = (low + high) \/\/ 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nindex = binary_search(arr, target)\nif index != -1: \n    print(\"Element is present at index\", index)\nelse: \n    print(\"Element is not present in the array\")",
        "1219": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code so that it runs more efficiently.\n\n### Input:\ndef calculateSum(a, b): \n    total = 0 \n    \n    for i in range(a,b+1): \n        total += i \n \n    return total\n\n### Output:\ndef calculateSum(a, b): \n    return int((b - a + 1) * (a + b) \/ 2)",
        "1220": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based RPG game in Python. The game should involve player navigation, be randomly generated, and include enemies the player must defeat in order to win.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport time\n\n# Create classes\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.hp = 100\n        self.position = [0, 0]\n\nclass Enemy:\n    def __init__(self, name):\n        self.name = name\n        self.hp = random.randint(50, 100)\n\n# Initialize globals\nplayer = Player(input(\"What is your name? \"))\nenemies = []\ndone = False\n\n# Game loop\nwhile not done:\n    print(\"You are in room ({}, {})\".format(player.position[0], \n                                            player.position[1]))\n    print(\"1. Move\")\n    print(\"2. Check HP\")\n    print(\"3. Exit Game\")\n    action = int(input(\"What do you want to do? \"))\n\nif action == 1:\n    # Movement\n    x = int(input(\"Move how many units on the x-axis? \"))\n    y = int(input(\"Move how many units on the y-axis? \"))\n    player.position[0] += x\n    player.position[1] += y\n\nelif action == 2:\n    # Check HP\n    print(\"Your HP is {}\".format(player.hp))\n\nelif action == 3:\n    # Exit Game \n    done = True\n\n# Generate enemies randomly\nif random.random() < 0.1:\n    enemies.append(Enemy(\"Rat\"))\n    print(\"An enemy appeared!\")\n\n# Combat\nfor enemy in enemies:\n    print(\"A {} approaches!\".format(enemy.name))\n    print(\"What do you do? 1. Fight 2. Flee\")\n    action = int(input(\">\"))\n\n    if action == 1:\n        fight(player, enemy)",
        "1221": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to filter strings using a filter function as a parameter.\n\n### Input:\n\n\n### Output:\ndef filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered",
        "1222": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given sentence to uppercase using Python.\n\n### Input:\nThis is a sample sentence.\n\n### Output:\nsentence = \"This is a sample sentence.\"\noutput = sentence.upper()\nprint(output)",
        "1223": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to perform a Prefix Sum operation on an array.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef prefix_sum(arr):\nresult = []\ns = 0\nfor x in arr:\n    s += x\n    result.append(s)\nreturn result\n\narr = [1, 2, 3, 4]\nprefix_sum(arr)",
        "1224": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the number of elements in a given array before the return value is -1.\n\n### Input:\nArray = [2, 3, -1, 5, 4, 7]\n\n### Output:\ndef countElements(Array): \n    count = 0\n    for i in Array: \n        if i != -1: \n            count = count + 1\n        else: \n            break\n    return count",
        "1225": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code editor program in Python to easily format code and highlight syntax.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\nfrom tkinter import filedialog, Text, Menu\n\n# root window configuration\nroot = tk.Tk()\nroot.title(\"Code Editor\")\n\n# text area where code is written\ntextArea = Text(root, relief=\"sunken\")\ntextArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = \"nsew\")\n\n# sets the scrollbar x y\nscrollbar = tk.Scrollbar(textArea)\ntextArea.configure(xscrollcommand=scrollbar.set)\nscrollbar.config(command=textArea.yview)\nscrollbar.grid(row=0, column=3, sticky='nsew')\n\n# open file\ndef open_file():\n    global filename\n    filename = filedialog.askopenfilename(defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    if filename == \"\":\n        filename = None\n    else:\n        root.title(f\"Code Editor - {filename}\")\n        textArea.delete(1.0, tk.END)\n        f = open(filename, \"r\")\n        textArea.insert(1.0, f.read())\n        f.close()\n\n# save file\ndef save_file():\n    if filename == None:\n        save_as()\n    else:\n        f = open(filename, \"w\")\n        f.write(textArea.get(1.0, tk.END))\n        f.close()\n\n# save as file\ndef save_as():\n    global filename\n    filename = filedialog.asksaveasfilename(initialfile=\"Untitled.txt\", defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    f = open(filename, \"w\")\n    f.write(textArea.get(1.0, tk.END))\n    f.close()\n\n# creating the statusbar\nstatusBar = tk.Label(root, text=\"Status Bar\")\nstatusBar.grid(row=1, column=0, columnspan=3, sticky=\"ew\")\n\n# creating the menubar\nmenubar = Menu(root)\nroot.config(menu=menubar)\n\n# creating the options for the file menu\nfileMenu = Menu(menubar)\nmenubar.add_cascade(label=\"File\", menu=fileMenu)\nfileMenu.add_command(label=\"Open\", command=open_file)\nfileMenu.add_command(label=\"Save\", command=save_file)\nfileMenu.add_command(label=\"Save As\", command=save_as)\n\n# coding syntax highlighting\ntextArea.configure(bg=\"grey\", fg=\"white\")\n\n# loop to run application\nroot.mainloop()",
        "1226": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that can save blog posts to a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "1227": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to analyze a sentiment analysis dataset. The dataset contains 3000 rows of tweets, and each row contains the content of the tweets and the corresponding sentiment label (either 0 for negative, or 1 for positive).\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('.\/dataset.csv')\n\n# Get the text and the labels\ntexts = data['text'].values\nlabels = data['label'].values\n\n# Generate a dictionary of all the words in the dataset\nwords = set()\nfor text in texts:\n for word in text.split():\n words.add(word)\n\n# Create a dictionary of word counts\nword_counts = {}\nfor word in words:\n word_counts[word] = 0\n\n# Count the number of times each word appears in each sentiment label\nfor i in range(len(texts)):\n for word in texts[i].split():\n if labels[i] == 0:\n word_counts[word] -= 1\n else:\n word_counts[word] += 1\n\n# Print out the words with the highest sentiment polarity\nsorted_words = sorted(word_counts.items(), key=lambda x: x[1])\n\nfor word, count in sorted_words[:10]:\n print(f'{word}: {count}')",
        "1228": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a strategy pattern in Python to manage different behaviors for different objects.\n\n### Input:\nNot applicable\n\n### Output:\nclass Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, func=None):\n        if func:\n            self.execute = func\n\n    def execute(self):\n        \"\"\"The default method that prints 'Hello world!'\"\"\"\n        print(\"Hello world!\")\n\n# Replace by other strategies\ndef execute_replacement1():\n    print(\"Hola mundo!\")\n\ndef execute_replacement2():\n    print(\"Mere saath kaam kar!\")\n\n# Instantiate the strategy\ns1 = Strategy()\n# Execute the strategy\ns1.execute()\n\n# Create replacement strategy 1\ns2 = Strategy(execute_replacement1)\n# Execute the strategy\ns2.execute()\n\n# Create replacement strategy 2\ns3 = Strategy(execute_replacement2)\n# Execute the strategy\ns3.execute()",
        "1229": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a PipelineManager class with methods to list, get, install, and delete pipelines. The install method should take a pipeline ID and start the installation of the pipeline in another thread. The delete method should start the uninstallation of the pipeline in another thread and remove the image file if it exists. The class should import several modules and classes, including ipdb, os, shutil, json, zipfile, datetime, time, uuid, subprocess, requests, config, common, postgresql, and model.\n\n### Input:\n\n\n### Output:\n#!env\/python3\n# coding: utf-8\ntry:\n    import ipdb\nexcept ImportError:\n    pass\n\n\nimport os\nimport shutil\nimport json\nimport zipfile\nimport datetime\nimport time\nimport uuid\nimport subprocess\nimport requests\n\n\n\nfrom config import *\nfrom core.framework.common import *\nfrom core.framework.postgresql import execute\nfrom core.model import *\n\n\n\n\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n# PIPELINE MANAGER\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \nclass PipelineManager:\n    def __init__(self):\n        pass\n\n\n    def list(self):\n        \"\"\"\n            List all pipelines with minimum of data\n        \"\"\"\n        sql = \"SELECT id, name, type, status, description, version, image_file_id, starred, installation_date, manifest, documents FROM pipeline ORDER BY id\"\n        result = []\n        for res in execute(sql): \n            result.append({\n                \"id\": res.id,\n                \"name\": res.name,\n                \"description\": res.description,\n                \"type\": res.type,\n                \"status\": res.status,\n                \"version\": res.version,\n                \"image_file_id\": res.image_file_id,\n                \"starred\": res.starred,\n                \"installation_date\": res.installation_date.isoformat(),\n                \"manifest\": res.manifest,\n                \"documents\": res.documents\n            })\n        return result\n\n    def get(self, fields=None, query=None, order=None, offset=None, limit=None, depth=0):\n        \"\"\"\n            Generic method to get pipelines according provided filtering options\n        \"\"\"\n        if not isinstance(fields, dict):\n            fields = None\n        if query is None:\n            query = {}\n        if order is None:\n            order = \"name, installation_date desc\"\n        if offset is None:\n            offset = 0\n        if limit is None:\n            limit = RANGE_MAX\n        pipes = Session().query(Pipeline).filter_by(**query).order_by(order).limit(limit).offset(offset).all()\n        for p in pipes: p.init(depth)\n        return pipes\n\n\n\n    def install_init (self, name, metadata={}):\n        pipe = Pipeline.new()\n        pipe.name = name\n        pipe.status = \"initializing\"\n        pipe.save()\n\n        if metadata and len(metadata) > 0:\n            pipe.load(metadata)\n        log('core.PipeManager.register : New pipe registered with the id {}'.format(pipe.id))\n        return pipe\n\n\n\n    def install_init_image_upload(self, filepath, file_size, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be uploaded on the server.\n            Create an entry for the pipeline and the file (image that will be uploaded) in the database.\n            Return the Pipeline and the File objects created\n\n            This method shall be used to init a resumable upload of a pipeline \n            (the pipeline\/image are not yet installed and available, but we need to manipulate them)\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.upload_init(filepath, file_size)\n        pipe = self.install_init(filepath, pipe_metadata)\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe, pfile\n\n\n\n    async def install_init_image_url(self, url, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved via an url.\n            Create an entry for the pipeline and the file (image) in the database.\n            Async method as the download start immediatly, followed by the installation when it's done\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        raise NotImplementedError(\"TODO\")\n\n\n\n    def install_init_image_local(self, filepath, move=False, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have to be retrieved on the local server.\n            Create an entry for the pipeline and the file (image) in the database.\n            Copy the local file into dedicated directory and start the installation of the Pipeline\n\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = core.files.from_local(filepath, move)\n        pipe = self.install_init(os.path.basename(filepath), pipe_metadata)\n\n        # FIXME: Sometime getting sqlalchemy error 'is not bound to a Session' \n        # why it occure here ... why sometime :\/ \n        check_session(pfile)\n        check_session(pipe)\n\n        pipe.image_file_id = pfile.id\n        pipe.save()\n        return pipe\n\n\n    def install_init_image(self, file_id, pipe_metadata={}):\n        \"\"\" \n            Initialise a pipeline installation. \n            To use if the image have already been uploaded the local server via the regovar file api.\n            Create an entry for the pipeline in the database.\n            Return the Pipeline object ready to be used\n        \"\"\"\n        from core.core import core\n\n        pfile = File.from_id(file_id)\n        if pfile:\n            pipe = self.install_init(os.path.basename(pfile.path), pipe_metadata)\n            pipe.image_file_id = file_id\n            pipe.save()\n            return pipe\n        return None\n    \n\n\n    def check_manifest(self, manifest):\n        \"\"\"\n            Check that manifest (json) is valid and return the full version completed \n            with default values if needed\n        \"\"\"\n        missing = \"\"\n        for k in [\"name\", \"version\"]:\n            if k not in manifest.keys():\n                missing += k + \", \"                \n        if missing != \"\":\n            missing = missing[:-2]\n            raise RegovarException(\"FAILLED Checking validity of manifest (missing : {})\".format(missing))\n\n        # 2- Default value for optional fields in mandatory file\n        default = {\n            \"description\": \"\",\n            \"type\": \"job\",\n            \"contacts\": [],\n            \"regovar_db_access\": False,\n            \"inputs\": \"\/pipeline\/inputs\",\n            \"outputs\": \"\/pipeline\/outputs\",\n            \"databases\": \"\/pipeline\/databases\",\n            \"logs\": \"\/pipeline\/logs\"\n        }\n        for k in default.keys():\n            if k not in manifest.keys():\n                manifest[k] = default[k]\n\n        # 3- check type\n        if manifest[\"type\"] not in [\"job\", \"importer\", \"exporter\", \"reporter\"]:\n            raise RegovarException(\"FAILLED Checking validity of manifest (type '{}' not supported)\".format(manifest[\"type\"]))\n\n\n        log('Validity of manifest checked')\n        return manifest\n\n\n\n    def install(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the installation of the pipeline. (done in another thread)\n            The initialization shall be done (image ready to be used)\n        \"\"\"\n        from core.core import core\n\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if not pipeline : \n            raise RegovarException(\"Pipeline not found (id={}).\".format(pipeline_id))\n        if pipeline.status != \"initializing\":\n            raise RegovarException(\"Pipeline status ({}) is not \\\"initializing\\\". Cannot perform another installation.\".format(pipeline.status))\n        if pipeline.image_file and pipeline.image_file.status not in [\"uploaded\", \"checked\"]:\n            raise RegovarException(\"Wrong pipeline image (status={}).\".format(pipeline.image_file.status))\n\n        if not pipeline.image_file or pipeline.image_file.status in [\"uploaded\", \"checked\"]:\n            if asynch:\n                run_async(self.__install, pipeline)\n            else:\n                pipeline = self.__install(pipeline)\n\n        return pipeline\n\n\n    def __install(self, pipeline):\n        from core.core import core\n        # Dezip pirus package in the pirus pipeline directory\n        root_path = os.path.join(PIPELINES_DIR, str(pipeline.id))\n        log('Installation of the pipeline package : ' + root_path)\n        os.makedirs(root_path)\n        os.chmod(pipeline.image_file.path, 0o777)\n\n        # TODO: Check zip integrity and security before extracting it\n        #       see python zipfile official doc\n        with zipfile.ZipFile(pipeline.image_file.path,\"r\") as zip_ref:\n            zip_ref.extractall(root_path)\n\n            # check package tree\n            # find root folder\n            files = [i.filename for i in zip_ref.infolist()]\n            for f in files:\n                if f.endswith(\"manifest.json\"): break\n            zip_root = os.path.dirname(f)\n            # remove intermediate folder\n            if zip_root != \"\":\n                zip_root = os.path.join(root_path, zip_root)\n                for filename in os.listdir(zip_root):\n                    shutil.move(os.path.join(zip_root, filename), os.path.join(root_path, filename))\n                os.rmdir(zip_root)\n\n        # Load manifest\n        try:\n            log(os.path.join(root_path, \"manifest.json\"))\n            with open(os.path.join(root_path, \"manifest.json\"), \"r\") as f:\n                data = f.read()\n                log(data)\n                # Fix common parsing problem regarding json syntaxe\n                data = data.replace(\"False\", \"false\")\n                data = data.replace(\"True\", \"true\")\n                manifest = json.loads(data)\n                manifest = self.check_manifest(manifest)\n                pipeline.developpers = manifest.pop(\"contacts\")\n                pipeline.manifest = manifest \n\n                # list documents available\n                pipeline.documents = {\n                    \"about\": os.path.join(root_path, \"doc\/about.html\"),\n                    \"help\": os.path.join(root_path, \"doc\/help.html\"),\n                    \"icon\": os.path.join(root_path, \"doc\/icon.png\"),\n                    \"icon2\": os.path.join(root_path, \"doc\/icon.jpg\"),\n                    \"form\": os.path.join(root_path, \"form.json\"),\n                    \"license\":os.path.join(root_path, \"LICENSE\"),\n                    \"readme\": os.path.join(root_path, \"README\")\n                }\n                for k in pipeline.documents.keys():\n                    if not os.path.exists(pipeline.documents[k]):\n                        pipeline.documents[k] = None\n                p = pipeline.documents.pop(\"icon2\")\n                if not pipeline.documents[\"icon\"]:\n                    pipeline.documents[\"icon\"] = p\n                pipeline.load(manifest)\n                pipeline.save()\n        except Exception as ex:\n            pipeline.status = \"error\"\n            pipeline.save()\n            raise RegovarException(\"Unable to open and read manifest.json. The pipeline package is wrong or corrupt.\", exception=ex)\n        \n        # Update and save pipeline status\n        pipeline.type = manifest[\"type\"]\n        pipeline.installation_date = datetime.datetime.now()\n        pipeline.status = \"installing\"\n        pipeline.save()\n        \n        # Install pipeline\n        result = core.container_manager.install_pipeline(pipeline)\n        return result\n\n\n\n\n    def delete(self, pipeline_id, asynch=True):\n        \"\"\"\n            Start the uninstallation of the pipeline. (done in another thread)\n            Remove image file if exists.\n        \"\"\"\n        from core.core import core\n\n        result = None\n        pipeline = Pipeline.from_id(pipeline_id, 1)\n        if pipeline:\n            result = pipeline.to_json()\n            # Clean container\n            try:\n                if asynch: \n                    run_async(self.__delete, pipeline) \n                else: \n                    self.__delete(pipeline)\n            except Exception as ex:\n                war(\"core.PipelineManager.delete : Container manager failed to delete the container with id {}.\".format(pipeline.id))\n            try:\n                # Clean filesystem\n                shutil.rmtree(pipeline.path, True)\n                # Clean DB\n                core.files.delete(pipeline.image_file_id)\n                Pipeline.delete(pipeline.id)\n            except Exception as ex:\n                raise RegovarException(\"core.PipelineManager.delete : Unable to delete the pipeline's pirus data for the pipeline {}.\".format(pipeline.id), ex)\n        return result\n\n\n    def __delete(self, pipeline):\n        from core.core import core\n        \n        try:\n            core.container_manager.uninstall_pipeline(pipeline)\n        except Exception as ex:\n            raise RegovarException(\"Error occured during uninstallation of the pipeline. Uninstallation aborded.\", ex)\n \n",
        "1230": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read a CSV and converting the contents to a dictionary.\n\n### Input:\n\n\n### Output:\nimport csv\n\ndef csv_to_dict(filename):\n with open(filename) as csv_file:\n reader = csv.DictReader(csv_file)\n csv_dict = {}\n for row in reader:\n csv_dict[row['Date']] = row['Product']\n return csv_dict",
        "1231": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a function to format a given address into a human-readable form.\n\n### Input:\n60 Fifth Avenue, New York\n\n### Output:\ndef format_address(address):\n    address_items = address.split(',')\n    street = address_items[0]\n    city_state = address_items[1].split()\n    city = city_state[0]\n    state = city_state[1]\n    formatted_address = street + ', ' + city + ', ' + state\n\n    return formatted_address\n\naddress = '60 Fifth Avenue, New York'\nformatted_address = format_address(address)\nprint(formatted_address)",
        "1232": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove all non-alphanumeric characters in a string.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str)",
        "1233": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a sentence based on the input text.\n\n### Input:\nThe quick brown fox jumps over the lazy dog.\n\n### Output:\n\"\"\"\nGenerate a sentence based on the input text\n\"\"\"\n\nimport random\n\n#get the user input\nuser_input = \"The quick brown fox jumps over the lazy dog.\"\n\n#split the string into a list of words\nword_list = user_input.split()\n\n#shuffle the list\nrandom.shuffle(word_list)\n\n#convert the list back to a string\ngenerated_sentence = ' '.join(word_list)\n\n#print the generated sentence\nprint(generated_sentence)",
        "1234": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to remove the duplicate elements from the list\n\n### Input:\nL = [1, 2, 2, 3, 4, 4]\n\n### Output:\nL = [1, 2, 2, 3, 4, 4] \n\nL = list(set(L)) \n\nprint(L)",
        "1235": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a program in Python for searching for a string in a list.\n\n### Input:\nvalue = 'apple'\nlist = ['bannanas', 'oranges', 'apple']\n\n### Output:\ndef search(value, list):\n    for i in range(len(list)):\n        if list[i] == value:\n            return i\n    return -1\n\nvalue= 'apple'\nlist = ['bannanas', 'oranges', 'apple']\nprint(search(value, list))",
        "1236": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to generate a unique six-character alphanumeric string.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef get_unique_string():\n    characters = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\nunique_string = get_unique_string()\nprint(unique_string)",
        "1237": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a customer that stores the customer\u2019s first name, last name and email address.\n\n### Input:\n\n\n### Output:\nclass Customer:\n    def __init__(self, first_name, last_name, email):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n\ncustomer = Customer(\"John\", \"Smith\", \"john.smith@example.com\")",
        "1238": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for an employee with variable type member fields of name, age, and salary.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary",
        "1239": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password using the given conditions.\n\n### Input:\nMinimum length = 8 \nMaximum length = 15 \nMust contain at least one uppercase letter \nMust contain at least one lowercase letter\nMust contain at least one digit\nMust contain at least one special character\n\n### Output:\nimport string \nimport random \n\ndef generate_password(length):\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_chars) for _ in range(length))\n    if (any(c.islower() for c in password)\n        and any(c.isupper() for c in password)\n        and any(c.isdigit() for c in password)\n        and any(c in string.punctuation for c in password)):\n       return password\n    else:\n       return generate_password(length)\n  \n# Create random passwords with length 10 \nx = generate_password(10) \nprint ('Random Password :', x)",
        "1240": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an URL as a string, write a program in Python to find the domain name.\n\n### Input:\nurl = \"https:\/\/www.google.com\"\n\n### Output:\ndef get_domain_name(url): \n    return url.split(\"\/\")[2]\n\nprint(get_domain_name(\"https:\/\/www.google.com\"))  # prints www.google.com",
        "1241": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to generate a list of prime numbers between 2 and 1000.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(lower, upper):\n  prime_numbers = []\n  for num in range(lower, upper + 1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        prime_numbers.append(num)\n  return prime_numbers",
        "1242": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to execute the following tasks:\n\n### Input:\nfor i in range(1, 11):\n    print(i)\n\n### Output:\nfor i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2))",
        "1243": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a design pattern using object-oriented-programming concepts in Python that returns the sum of results from multiple classes.\n\n### Input:\n\n\n### Output:\nclass Computer: \n    def __init__(self, name): \n        self.name = name \n\n    def calculate(self): \n        pass\n\n# Let's create a class to add two numbers\nclass Add(Computer): \n    def calculate(self, x, y): \n        return x + y\n\n# Let's create a class to multiply two numbers\nclass Multiply(Computer): \n    def calculate(self, x, y): \n        return x * y\n\n# Client code to use the classes above \nclass Client(Computer): \n    # Utility method to calculate sum \n    def sum(self, a, b): \n        s = Add(self.name)\n        m = Multiply(self.name)\n        total = s.calculate(a, b) + m.calculate(a, b) \n        print(\"Result of sum and multiply\", total)\n        return total \n\n# Create a client object\nc = Client(\"Comp\")\nc.sum(2, 6)  # Result of sum and multiply 14",
        "1244": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print out the prime numbers up to a given limit.\n\n### Input:\nAn integer limit of 100.\n\n### Output:\ndef is_prime(n):\n if n == 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n\n# Print out prime numbers from 1 to 100\nlimit = 100\n\nfor i in range(1, limit+1):\n if is_prime(i):\n print(i)",
        "1245": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to create a web server to handle two resources using the \"GET\" method.\n\n### Input:\n\n\n### Output:\nimport http.server\n\nclass myHandler(http.server.BaseHTTPRequestHandler):\n\tdef do_GET(self):\n\t\tif self.path == '\/page1':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 1\")\n\t\telif self.path == '\/page2':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 2\")\n\t\telse:\n\t\t\tself.send_error(404)\n\nhttpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler)\nhttpd.serve_forever()",
        "1246": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate a 8-letter random alphanumeric string.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef randomString(stringLength=8):\n lettersAndDigits = string.ascii_letters + string.digits\n return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint(randomString()) \/\/ output '7Oti2cgn'",
        "1247": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to implement a bubble sort in Python.\n\n### Input:\nExample array to sort: [4, 2, 9, 12, 3, 5, 7]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "1248": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the intersection point of two lines\n\n### Input:\n# Line 1\nl1_m = 3\nl1_c = 5\n# Line 2\nl2_m = 7\nl2_c = 9\n\n### Output:\n# define a function \ndef getIntersectionPoint(line1, line2): \n    # line1 (slope and intercept) \n    l1_m = line1[0]\n    l1_c = line1[1]\n  \n    # line2 (slope and intercept) \n    l2_m = line2[0]\n    l2_c = line2[1]\n    \n    x = (l2_c - l1_c) \/ (l1_m - l2_m)\n    y = l1_m * x + l1_c\n    return (x, y) \n  \n# given two lines\nline1 = (3, 5) \nline2 = (7, 9)\n  \n# calculate intersection point\nintersection_point = getIntersectionPoint(line1, line2)\n  \n# print the point\nprint(\"Intersection point of lines is:\", intersection_point)",
        "1249": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON string, write a Python program that prints out the values for each key.\n\n### Input:\n{\"FirstName\": \"John\", \"LastName\": \"Smith\"}\n\n### Output:\nimport json\n\ndata_string = '{\"FirstName\": \"John\", \"LastName\": \"Smith\"}'\ndata = json.loads(data_string)\n\nfor key, value in data.items(): \n    print(\"{} = {}\".format(key, value))",
        "1250": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius.\n\n### Input:\ntemperatures_fahrenheit = [32, 64, 78, -10]\n\n### Output:\ntemperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)\/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius)",
        "1251": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that extracts the text from a webpage\n\n### Input:\nURL: https:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())",
        "1252": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function or class in Python to parse an Excel sheet and extract all strings that are in bold.\n\n### Input:\nEXCEL SHEET CONTENT ;\n\n| Customer ID | Name | Date |\n|------------|------|------|\n|      12345 | John | 10\/9 |\n| **STRING1** | Mary | 12\/3 |\n|     54321  | Joe  | 5\/7  |   \n| **STRING2** | Paul | 3\/1  |\n\n### Output:\nimport xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2']",
        "1253": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to represent a Rectangle, which has the two attributes 'length' and 'width'.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width",
        "1254": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the name and age of all customers in a list.\n\n### Input:\ncustomers = [\n {'name': 'John', 'age': 25},\n {'name': 'Bob', 'age': 40},\n {'name': 'Alice', 'age': 10},\n {'name': 'Mark', 'age': 35},\n]\n\n### Output:\nfor customer in customers:\n  print(f\"Name: {customer['name']}, Age: {customer['age']}\")",
        "1255": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that constructor prints \u201cHello World\u201d.\n\n### Input:\n\n\n### Output:\nclass HelloWorld:\n    def __init__(self):\n        print(\u201cHello World\u201d)",
        "1256": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that displays the Fibonacci sequence for a given value.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))",
        "1257": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an edit script for transforming an input text.\n\n### Input:\nText 1: He went to the store\nText 2: She visited the store\n\n### Output:\n#!\/usr\/bin\/env python\n\ntext1 = \"He went to the store\"\ntext2 = \"She visited the store\"\n\nedited_text = text1[:2] + text2[2:]\n\nprint edited_text",
        "1258": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that extracts the titles and summary from the reviews on a certain web page.\n\n### Input:\nhttps:\/\/www.example.com\/reviews\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \u201chttps:\/\/www.example.com\/reviews\u201d\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \u201chtml.parser\u201d)\n\ntitles = []\nsummaries = []\n\nfor review in soup.find_all(\u2018div\u2019, {\u2018class\u2019: \u2018review\u2019}):\n titles.append(review.find(\u2018h3\u2019).text)\n summaries.append(review.find(\u2018p\u2019).text)",
        "1259": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nName different Python string methods.\n\n### Input:\n\n\n### Output:\nString methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill().",
        "1260": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to process user input and generate a response according to the user's query.\n\n### Input:\nSample queries:\n\n\"Give me the weather in New York\"\n\n\"What is the population of China?\"\n\n### Output:\n# Libraries\nimport requests\nimport json\n\n# Get user input\nuser_input = input('Please enter your query: ')\n\n# Process user input\nif 'weather' in user_input:\n # Get weather data\n city = user_input.split()[-1] # extract city from user query \n r = requests.get(f'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&appid=YOUR_API_KEY')\n data = json.loads(r.text) \n\n# Output response\n if data['cod'] == '404':\n print('City not found!')\n else:\n print(f'The temperature in {city} is: {data[\"main\"][\"temp\"]} \u00b0C')\n\nelif 'population' in user_input:\n # Get population data\n country = user_input.split()[-1] # extract country from user query\n r = requests.get(f'https:\/\/restcountries.eu\/rest\/v2\/name\/{country}')\n data = json.loads(r.text)[0] # extract population from API response\n\n# Output response\n print(f'The population of {country} is: {data[\"population\"]}')\n\nelse:\n print(\"I'm sorry, I don't understand.\")",
        "1261": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a payment processing API in Python that takes in a customer's credit card information and validates it using a third-party payment processor like Stripe.\n\n### Input:\nNot applicable\n\n### Output:\nimport stripe\n\nstripe.api_key = 'sk_test_YOUR_KEY'\n\ndef process_payment(card_info):\n    # validate the credit card information\n    if not stripe.Token.create(\n        card={\n            'number': card_info['number'],\n            'exp_month': card_info['exp_month'],\n            'exp_year': card_info['exp_year'],\n            'cvc': card_info['cvc'],\n        },\n    ):\n        return False\n\n    # create and process the charge:\n    stripe.Charge.create(\n        amount=card_info['amount'],\n        currency='usd',\n        source=card_info['token'],\n        description='Example charge',\n    )\n\n    return True",
        "1262": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python code to calculate the sum of two squares given x and y as input.\n\n### Input:\n\n\n### Output:\ndef sum_squares(x, y):\n    return x**2 + y**2\n\nx = 2\ny = 4\ns = sum_squares(x, y)\nprint(\"The sum of two squares is {}\".format(s))",
        "1263": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for calculating the Fibonacci sequence for the given number.\n\n### Input:\n\n\n### Output:\ndef fibonacci_sequence(n):\n a, b = 0, 1\n for i in range(n):\n a, b = b, a + b\n return a",
        "1264": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a system to detect plagiarism in Python based on Levenshtein similarity.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk \nfrom nltk.metrics import edit_distance \n\ndef levenshtein_similarity(string1, string2):\n    edit_dist = edit_distance(string1, string2)\n    similarity = 1-(edit_dist\/max(len(string1), len(string2)))\n    return similarity\n\ndef detect_plagiarism(s1, s2):\n    similarity_score = levenshtein_similarity(s1, s2)\n    if  similarity_score > 0.75: \n        return \"The texts have high similarity\"\n    elif  similarity_score > 0.5:\n        return \"The texts have moderate similarity\"\n    else:\n        return \"The texts have low similarity\"",
        "1265": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can recognize the handwritten digits using OpenCV library?\n\n### Input:\n\n\n### Output:\n\"\"\"\nRecognize handwritten digits using OpenCV library\n\"\"\"\nimport cv2\nimport numpy as np\n\n# Load the model\nmodel = cv2.ml.SVM_load('svm_model.xml')\n\n# Read the input image\nimg = cv2.imread('input.png')\n\n# Convert to grayscale and apply Gaussian filtering\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nimg_gray = cv2.GaussianBlur(img_gray, (5,5), 0)\n\n# Threshold the image\nret, img_thresh = cv2.threshold(img_gray, 90, 255, cv2.THRESH_BINARY_INV)\n\n# Find contours\n_, ctrs, _ = cv2.findContours(img_thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# Get rectangles contains each contour\nrects = [cv2.boundingRect(ctr) for ctr in ctrs]\n\n# For each rectangular region, calculate HOG features and predict\n# the digit using Linear SVM.\nfor rect in rects:\n    # Draw the rectangles\n    #cv2.rectangle(img, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 3) \n    # Make the rectangular region around the digit\n    leng = int(rect[3] * 1.6)\n    pt1 = int(rect[1] + rect[3] \/\/ 2 - leng \/\/ 2)\n    pt2 = int(rect[0] + rect[2] \/\/ 2 - leng \/\/ 2)\n    roi = img_thresh[pt1:pt1+leng, pt2:pt2+leng]\n    # Resize the image\n    roi = cv2.resize(roi, (64, 64), interpolation=cv2.INTER_AREA)\n    roi = cv2.dilate(roi, (3, 3))\n    # Calculate the HOG features\n    roi_hog_fd = hog(roi, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), visualize=False)\n    roi_hog_fd = np.asarray(roi_hog_fd, dtype=np.float32)\n    # Predict the digit using Linear SVM\n    nbr = model.predict(roi_hog_fd)\n    #cv2.putText(img, str(int(nbr[0][0])), (rect[0], rect[1]),cv2.FONT_HERSHEY_DUPLEX, 2, (0, 255, 255), 3)\n    print(int(nbr[0][0]))",
        "1266": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a class method in Python to initialize an object's fields.\n\n### Input:\n\n\n### Output:\nclass SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2",
        "1267": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to trace any recursive function on the screen.\n\n### Input:\n\n\n### Output:\ndef trace_function(F):\n    def wrapper(*args, **kwargs):\n        print(F.__name__ + str(args) + str(kwargs))\n        value = F(*args, **kwargs)\n        print(F.__name__ + \" returns \" + str(value))\n        return value\n    return wrapper",
        "1268": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse MongoDB and Python to store customer information with needed fields.\n\n### Input:\nNot applicable\n\n### Output:\n# Import the needed libraries\nfrom pymongo import MongoClient\n\n# Connect to the MongoDB client\nclient = MongoClient('localhost:27017')\n\n# Create an instance of a MongoDB database\ndb = client['customer_database']\n\n# Create the customers collection\ncustomers = db.create_collection('customers')\n\n# Add the needed fields\ncustomers.create_index([(\"Name\", 1)], unique=True)\ncustomers.create_index([(\"Phone Number\", 1)], unique=True)\ncustomers.create_index([(\"Email\", 1)], unique=True)\ncustomers.create_index([(\"Address\", 1)], unique=True)",
        "1269": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate python code to encode a given string in base64.\n\n### Input:\nstring = 'This is a test string.'\n\n### Output:\ndef base64_encode(string):\n    encoded_string = base64.b64encode(string.encode('utf-8')) \n    return encoded_string.decode('utf-8')",
        "1270": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the common elements from two sorted lists.\n\n### Input:\nlist1=[1,3,5,7]\nlist2=[2,3,6,7]\n\n### Output:\ndef print_common_elements(list1, list2):\n    result = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            i += 1\n        elif list2[j] < list1[i]: \n            j += 1\n        else: \n            result.append(list1[i])\n            i += 1\n            j += 1\n      \n    for i in range(len(result)):\n        print(result[i],end=\" \")",
        "1271": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a random forest classifier in Python which predicts if a house is affordable or not based on its features such as location, size, number of bedrooms, number of bathrooms, etc.\n\n### Input:\n[\n  {\n    \"location\": \"downtown\",\n    \"size\": 2650,\n    \"bedrooms\": 3,\n    \"bathrooms\": 2,\n    \"price\": 540000,\n    \"label\": \"affordable\"\n  },\n  {\n    \"location\": \"uptown\",\n    \"size\": 3600,\n    \"bedrooms\": 5,\n    \"bathrooms\": 4,\n    \"price\": 750000,\n    \"label\": \"not affordable\"\n  },\n  {\n    \"location\": \"rural\",\n    \"size\": 2500,\n    \"bedrooms\": 4,\n    \"bathrooms\": 2,\n    \"price\": 400000,\n    \"label\": \"affordable\"\n  },\n  {\n    \"location\": \"suburban\",\n    \"size\": 3500,\n    \"bedrooms\": 5,\n    \"bathrooms\": 3,\n    \"price\": 500000,\n    \"label\": \"not affordable\"\n  }\n]\n\n### Output:\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in data\ndata = pd.read_csv('data.csv')\n\n# Train the classifier\nfeatures = ['location', 'size', 'bedrooms', 'bathrooms', 'price']\nX = data[features]\ny = data['label']\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\nprint(predictions)",
        "1272": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python program that resize an array of integers in place?\n\n### Input:\narr = [10, 20, 30, 40]\nnew_size = 6\n\n### Output:\n\"\"\"\nProviding a Python program that resizes an array of integers in place\n\"\"\"\ndef resize_array(arr, new_size):\n    # base case\n    if len(arr) == new_size:\n        return\n\n    # add elements to increase the size\n    if len(arr) < new_size:\n        for _ in range(new_size - len(arr)):\n            arr.append(0)\n\n    # delete elements to decrease the size    \n    elif len(arr) > new_size:\n        for _ in range(len(arr) - new_size):\n            arr.remove(arr[-1])\n\nif __name__ == '__main__':\n    arr = [10, 20, 30, 40]\n    new_size = 6\n    resize_array(arr, new_size)\n    print(arr)",
        "1273": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out unique elements from an array.\n\n### Input:\narr = [3, 6, 3, 2, 7, 5, 6]\n\n### Output:\narr = [3, 6, 3, 2, 7, 5, 6]\n\ndef unique_elements(arr):\n  return list(set(arr))\n\nunique_arr = unique_elements(arr)\nprint(unique_arr)",
        "1274": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to split a string on any whitespace.\n\n### Input:\nString to be split = \"Python is an interpreted language.\"\n\n### Output:\ndef splitOnWhitespace(inputString):\n\twords = inputString.split()\n\treturn words\n\nstringToBeSplit = \"Python is an interpreted language.\"\nwords = splitOnWhitespace(stringToBeSplit)\nprint(words) \/\/ Output: ['Python', 'is', 'an', 'interpreted', 'language.']",
        "1275": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a ML model in Python to classify different types of fruits.\n\n### Input:\nDataset containing images of fruits\n\n### Output:\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom tensorflow.keras.utils import to_categorical\n\n# Load the dataset\nX = np.load('fruits-images.npy')\ny = np.load('fruits-labels.npy')\ny = to_categorical(y)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(100,100,3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\n\n# Compile and fit\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs=15, batch_size=32, validation_data=(X_test, y_test))\n\n# Plot the accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()",
        "1276": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a natural language processing (NLP) program in Python to classify words into five categories\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other",
        "1277": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the current timestamp\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))",
        "1278": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to receive user input and calculate the sum of every number entered.\n\n### Input:\n\n\n### Output:\nnumbers = []\nwhile True:\n    userInput = input(\"Enter a number: \") \n    if userInput == 'done':\n        break\n    try:\n        userInput = int(userInput)\n        numbers.append(userInput)\n    except ValueError:\n        print(\"Invalid input, please enter a valid number\")\n\nprint(\"Sum of entered numbers : \" + str(sum(numbers)))",
        "1279": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the area of a given trapezoid.\n\n### Input:\nbase1 = 2\nbase2 = 4\nheight = 3\n\n### Output:\ndef area_trapezoid(base1, base2, height):\n return (base1 + base2) * (height \/ 2)\n \nprint(area_trapezoid(2, 4, 3)) # Output: 9.0",
        "1280": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpgrade the following code so that it runs on Python 3\n\n### Input:\n#This code runs on python 2\nprint \"Hello World!\"\n\n### Output:\nprint(\"Hello World!\")",
        "1281": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that reads a list of names and picks a random name from that list.\n\n### Input:\nJohn, Mary, Paul, Gerry\n\n### Output:\nimport random\n\nnames = [\"John\", \"Mary\", \"Paul\", \"Gerry\"]\n\nprint(\"The randomly chosen name is\", random.choice(names))",
        "1282": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code using the Pandas package to filter out rows with a specific condition in a table data.\n\n### Input:\nTable data:\n\nCountry | Population | Area | GDP\n\nUSA | 330,000,000 | 3,796,000 | 21,427,000\n\nChina | 1,400,000,000 | 9,596,961 | 14,140,163\n\nFrance | 67,000,000 | 640,679 | 2,777,000\n\n### Output:\nimport pandas as pd\n\n# Read data\ndata = {'Country': ['USA', 'China', 'France'], \n        'Population': [330000000, 1400000000, 67000000], \n        'Area': [3796000, 9596961, 640679], \n        'GDP': [21427000,14140163,2777000]}\ndf = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP'])\n\n# Filter for rows with a population higher than 500 million\nlarge_countries = df[df['Population'] > 500000000]\nprint(large_countries)",
        "1283": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python program that returns the largest number in a list of numbers?\n\n### Input:\n[4, 8, 2, 6, 9]\n\n### Output:\ndef largestNumber(list): \n    maximum = list[0] \n      \n    for num in list: \n        if num > maximum: \n            maximum = num \n    return maximum \n  \nlist = [4, 8, 2, 6, 9] \nlargestNumber = largestNumber(list) \n  \nprint(\"Largest number in the given list is:\", largestNumber)",
        "1284": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a linear search algorithm to find an element in a list.\n\n### Input:\nx = [1, 5, 8, 3], n = 8\n\n### Output:\ndef linear_search(x, n):\n    found = False\n    for i in range(len(x)):\n        if x[i] == n:\n            found = True\n            break\n\n    if found == True:\n        print('Element', n, 'found at position', i)\n    else:\n        print('Element', n, 'not found')\n\nx = [1, 5, 8, 3]\nn = 8\n\nlinear_search(x, n)",
        "1285": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code to use list comprehension.\n\n### Input:\nmy_list = []\nfor value in range(10):\n my_list.append(value * 2)\n\n### Output:\nmy_list = [value * 2 for value in range(10)]",
        "1286": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search algorithm in Python using a binary search, that takes an array of integers and a number as an argument and returns the position of the number within the array if the number exists.\n\n### Input:\narray = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\nnumber = 15\n\n### Output:\ndef binary_search(array, target):\n  left = 0\n  right = len(array) - 1\n  while left <= right:\n      middle = (left + right)\/\/2\n      if array[middle] < target:    \n          left = middle + 1\n      elif array[middle] > target:  \n          right = middle - 1\n      else:                         \n          return middle             \n  return -1                        \n\nposition = binary_search(array, number) \nif position == -1:\n  print(\"Number not found in array.\")\nelse:\n  print(f\"{number} found at position {position}\")",
        "1287": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python function to handle keyboard interrupts.\n\n### Input:\ndef main():\n try:\n counter = 0\n while True:\n print(counter)\n counter += 1\n time.sleep(1)\n \nexcept KeyboardInterrupt:\n print('Goodbye!')\n\n### Output:\ndef main():\n try:\n counter = 0\n while True:\n print(counter)\n counter += 1\n time.sleep(1)\n \n except KeyboardInterrupt:\n print('Goodbye!') \n sys.exit()",
        "1288": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a regex pattern that matches two different words and prints out the second word if found.\n\n### Input:\ntext = \"Learn Python now or learn Java later\n\n### Output:\npattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\"",
        "1289": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API route in Python to return the top three highest-priced products.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nproducts = [\n {\n  \"name\": \"book\",\n  \"price\": 15\n }, \n {\n  \"name\": \"pen\",\n  \"price\": 5\n }, \n {\n  \"name\": \"tablet\",\n  \"price\": 200\n }, \n {\n  \"name\": \"chair\",\n  \"price\": 80\n }\n]\n\n@app.route(\"\/top_three_products\", methods=[\"GET\"])\ndef get_top_three_products():\n   # Sort the list of products by price in descending order\n   sorted_products = sorted(products, key=lambda product: -product['price'])\n   # Return only the top 3 products\n   highest_priced_products = sorted_products[:3]\n   return jsonify(highest_priced_products)\n\nif __name__ == \"__main__\":\n    app.run()",
        "1290": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python to determine the ideal stock portfolio allocation.\n\n### Input:\nExample data of stock prices and number of available stocks.\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1\/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation)",
        "1291": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encode the given string using a Caesar Cipher.\n\n### Input:\nString: `attack`\nCipher: Rotate 3 positions\n\n### Output:\ndef caesar_cipher_encode(input_string, cipher):\n    output = ''\n    for c in input_string:\n        ascii_val = ord(c)\n        if (ascii_val > 64 and ascii_val < 91) or (ascii_val > 96 and ascii_val < 123):\n            new_ascii_val = ascii_val + cipher\n            if (ascii_val > 64 and ascii_val < 91 and new_ascii_val > 90) or (ascii_val > 96 and ascii_val < 123 and new_ascii_val > 122):\n                new_ascii_val = ascii_val - 26 + cipher\n            output += chr(new_ascii_val)\n        else:\n            output += c\n    return output",
        "1292": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that prints \"Hello, World!\" whenever it is run.\n\n### Input:\n\n\n### Output:\n#Python program to print \"Hello World!\"\n\nprint(\"Hello, World!\")",
        "1293": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate 10 random numbers between 1 and 100.\n\n### Input:\n\n\n### Output:\nimport random\n\nfor i in range(10):\n    print(random.randint(1,100))",
        "1294": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class and object in python to model the bill of a restaurant.\n\n### Input:\n\n\n### Output:\nclass Bill:\n    def __init__(self, items):\n        self.items = items\n        self.total_cost = 0.0\n\n    def calculate_total_cost(self):\n        for item in self.items:\n            self.total_cost += item['price']\n        return self.total_cost\n\n# Create an object of Bill\nrestaurant_bill = Bill([{'item': 'burger', 'price': 10.99}, {'item': 'fries', 'price': 2.49}])\nprint(restaurant_bill.calculate_total_cost())",
        "1295": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a list of words and create a dictionary with the words as keys and the frequency of each word as the values.\n\n### Input:\nwords = ['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n### Output:\nwords_dict = {}\nfor word in words:\n    if word in words_dict:\n        words_dict[word] += 1\n    else:\n        words_dict[word] = 1\n\nprint(words_dict)\n\n# Output\n# {'a': 3, 'b': 2, 'c': 1, 'd': 1}",
        "1296": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a user-defined function in Python for finding the sum of squares of three numbers.\n\n### Input:\n\n\n### Output:\ndef sumOfSquares(a, b, c):\n     return a*a + b*b + c*c",
        "1297": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse the words in this sentence using Python.\n\n### Input:\n\"This is a sentence.\"\n\n### Output:\n\"sentence. a is This\"",
        "1298": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to classify animals into mammals, birds, and fishes using decision tree.\n\n### Input:\nAnimals = [\"dog\", \"cat\", \"elephant\", \"owl\", \"tuna\", \"salmon\"]\n\n### Output:\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Creating pandas dataframe to hold the animal data\nanimals_df = pd.DataFrame({'Animal': Animals})\n\n# Create target variable Mammal, Bird and Fish\nmammals = ['dog', 'cat', 'elephant']\nbirds = ['owl']\nfishes = ['tuna', 'salmon']\n\nanimals_df['Mammal'] = animals_df.Animal.apply(lambda x: 1 if x in mammals else 0)\nanimals_df['Bird'] = animals_df.Animal.apply(lambda x: 1 if x in birds else 0)\nanimals_df['Fish'] = animals_df.Animal.apply(lambda x: 1 if x in fishes else 0)\n\n\n# Create the target variable using the code labels\nanimals_df['target'] = animals_df.Mammal.astype(str) + '_' + animals_df.Bird.astype(str) + '_' + animals_df.Fish.astype(str)\n\n#drop unwanted columns\nanimals_df.drop(columns = ['Mammal', 'Bird', 'Fish'], inplace=True)\n\n# Create decision tree classifier object\nclf = DecisionTreeClassifier()\n\n# Train the model using the data\nclf.fit(animals_df[['Animal']], animals_df['target'])",
        "1299": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a recommendation system in Python to suggest movies to a user based on their previous ratings.\n\n### Input:\n\n\n### Output:\ndef movie_recommender_system(user):\n    \"\"\"\n    This function uses a collaborative filtering algorithm \n    to suggest movies to the given user\n    \"\"\"\n    # Get the list of rated movies by the user\n    user_movies = user.get_rated_movies()\n\n    # Get the list of ratings given by other users\n    user_ratings = user.get_ratings()\n\n    # Calculate the similarity between the user and other users\n    user_similarity = user.calculate_similarity(user_movies, user_ratings)\n\n    # Get the list of movies rated highly by other users\n    other_rated_movies = user.get_top_rated_movies(user_ratings) \n\n    # Find the movies which the user has not seen so far, but recommended by other users\n    unseen_movies = [m for m in other_rated_movies if m not in user_movies]\n    \n    # Sort the movies based on their similarity and the ratings given by other users\n    sorted_movies = sorted(unseen_movies, \n                            key=lambda m: user_similarity[m] * user_ratings[m], \n                            reverse=True)\n    \n    # Get the top 10 movies\n    top_movies = sorted_movies[:10]\n\n    return top_movies",
        "1300": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for sorting a list of words into alphabetical order.\n\n### Input:\n[\"dog\", \"cat\", \"apple\", \"banana\"]\n\n### Output:\ndef sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)",
        "1301": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python program to calculate the maximum length of a string.\n\n### Input:\nlist_of_strings = [\"dog\", \"cat\", \"elephant\", \"bird\"]\n\n### Output:\nmax_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length)",
        "1302": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that contains functions to format and plot data using Plotly. To use the code, import it into your Python environment and call the functions as needed. The main function is \"post\", which takes in a filename, data, and optional parameters to customize the plot. The \"format_data\" function can be used to convert raw data into a format that can be plotted using the other functions. The \"get_histogram\", \"get_scatter2d\", and \"get_scatter3d\" functions generate different types of plots based on the input data.\n\n### Input:\n\n\n### Output:\n\nimport os\nimport json\nfrom dateutil.parser import parse\n\nimport plotly\nfrom plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure\n\n\n__version__ = '0.0.1'\n\n\ndef is_numeric(x):\n    \n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_date(d):\n    \n    try:\n        parse(d)\n        return True\n    except ValueError, AttributeError:\n        return False\n\n\ndef is_string(x):\n    return is_numeric(x) + is_date(x) == 0\n\n\ndef format_data(data):\n    \n    data = json.loads(''.join(data))\n    \n    keys = data[0].keys()\n    \n    # Check column type\n    sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ]\n    \n    values = [ [ d.get(key) for key in keys ] for d in data ]\n    values = zip(*values)\n    \n    if len(sidx) == 1:\n        text = values.pop(sidx[0])\n        keys.pop(sidx[0])\n    else:\n        text = None\n    \n    return {\n        'layout': {\n            'axes': keys\n        },\n        'data': {\n            'values': values,\n            'text': text\n        }\n    }\n\n\ndef get_histogram(data):\n    \n    values = data['values']\n    return Data([\n        Histogram(\n            x=values\n        )\n    ])\n\n\ndef get_scatter2d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter(\n            x=values[0],\n            y=values[1],\n            mode='markers',\n            text=data['text']\n        )\n    ])\n\n\ndef get_scatter3d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter3d(\n            x=values[0],\n            y=values[1],\n            z=values[2]\n        )\n    ])\n\n\ndef post(filename, data, fileopt='new', title=None, world_readable=True):\n    \n    # Get username and api key\n    username = os.environ.get('PLOTLY_USERNAME')\n    api_key = os.environ.get('PLOTLY_API_KEY')\n    \n    plotly.tools.set_credentials_file(username=username, api_key=api_key)\n    \n    axes = data['layout']['axes']\n    \n    nAxes = len(axes)\n    \n    get_data = {\n        1: get_histogram,\n        2: get_scatter2d,\n        3: get_scatter3d\n    }\n    \n    axes_kwargs = ['xaxis', 'yaxis', 'zaxis']\n    axes_obj = [XAxis, YAxis, ZAxis]\n    \n    layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) }\n    dataobj = get_data[nAxes](data['data'])\n    layout = Layout(**layout_kwargs)\n    \n    fig = Figure(data=dataobj, layout=layout)\n    \n    r = plotly.plotly.plot(fig, filename=filename)\n    print r\n    ",
        "1303": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for searching for a pattern in a given text.\n\n### Input:\nText: \"The cat jumped over the fence\"\nPattern: \"cat\"\n\n### Output:\nimport re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")",
        "1304": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following statement as a valid Python statement, an invalid Python statement or a comment.\n\n### Input:\nprint(\"Hello Python!\")\n\n### Output:\nValid Python statement.",
        "1305": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a programming language and a library for text classification.\n\n### Input:\n\n\n### Output:\nPython is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification.",
        "1306": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a text-based progress bar using Python.\n\n### Input:\n\n\n### Output:\nimport sys \n\ndef progress_bar(iteration, total, length=50, fill='\u2588'):\n    iteration = iteration + 1\n    percent = (\"{0:.1f}\").format(100 * (iteration \/ float(total)))\n    filledLength = int(length * iteration \/\/ total)\n    bar = fill * filledLength + '-' * (length - filledLength)\n    sys.stdout.write('\\r |{}| {}% {}'.format(bar,percent, \"Complete\"))\n    sys.stdout.flush()",
        "1307": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot in Python that records customer requests and stores them in a database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\n# Connect to the database\ncon = sqlite3.connect('customer_requests.db')\ncursor = con.cursor()\n\n# Create the customer table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\")\n\n# Create and run the chatbot\ndef chatbot():\n    print(\"Welcome to the chatbot! Enter 'exit' to quit.\\n\")\n    while True:\n        response = input(\"You: \")\n        if response == 'exit':\n            break\n        else:\n            print(\"Chatbot: Your request has been recorded.\\n\")\n            # Store the request in the database\n            con.execute(f\"INSERT INTO customer_requests(request) VALUES ('{response}')\")\n            con.commit()\n\nchatbot()",
        "1308": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to return the first two elements of a list.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2]",
        "1309": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a list of prime numbers between 2 and 30.\n\n### Input:\n\n\n### Output:\n# Generate a list of prime numbers between 2 and 30\n\n# Generate a list of all numbers between 2 and 30\nnumbers = range(2, 31)\n\n# Loop over all numbers\nfor num in numbers:\n    prime_flag = True\n    # Check if the number is divisible by any other between 2 and itself\n    for i in range(2, num):\n        if (num % i == 0):\n            prime_flag = False\n            break\n \n    # If the number is not divisible by any other number, it is prime\n    if prime_flag:\n        print(num)",
        "1310": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that converts a given number from one numeric base to another.\n\n### Input:\nnumber = 42\nfrom_base = 10\nto_base = 16\n\n### Output:\ndef convert_number(number, from_base, to_base): \n    # convert number to base 10 \n    result = int(str(number), from_base) \n  \n    # convert base 10 to new base \n    res = \"\"\n    while result > 0:\n        res += str(result % to_base)\n        result \/\/= to_base\n    res = res[::-1] \n  \n    return res",
        "1311": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to flatten a given array of arrays.\n\n### Input:\n[[1,2,[3]],4]\n\n### Output:\ndef flatten_list(arr):\n  result = []\n  for element in arr:\n    if type(element) == list:\n      result += flatten_list(element)\n    else:\n      result.append(element)\n  return result\n\narr = [[1,2,[3]],4]\n\nprint(flatten_list(arr)) # [1, 2, 3, 4]",
        "1312": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script using requests library to get the weather forecast of 8 cities.\n\n### Input:\n[\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]\n\n### Output:\nimport requests\n\n# list of cities for which we want the weather forecast\ncities = [\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]\n\n# api key\napi_key = YOUR_API_KEY\n\n# base url for the weather api\nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID=\" + api_key\n\n# create an empty list to store weather data\nweather_data = []\n\n# loop through the cities and get the weather data\nfor city in cities:\n\t# make a request to the api\n\tr = requests.get(url.format(city)).json()\n\t# store the weather data in the list\n\tweather_data.append(r)\n\n# print the weather data\nprint(weather_data)",
        "1313": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to return the index of a given number in a sorted list.\n\n### Input:\n\n\n### Output:\ndef index_of(number, lst): \n    hi = len(lst) \n    lo = 0\n    index = -1\n\n    while hi > lo: \n        mid = (hi + lo)\/\/2\n        if lst[mid] < number: \n            lo = mid + 1\n        elif lst[mid] > number: \n            hi = mid \n        else: \n            index = mid \n            return index \n    return index",
        "1314": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to represent a book in Python.\n\n### Input:\n\n\n### Output:\nclass Book:\n    # Attributes\n    title = \"\"\n    author = \"\"\n    pages = 0\n\n    # Constructor\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n# Create a book object\nbook = Book(\"The Catcher in the Rye\", \"JD Salinger\", 277)",
        "1315": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can recognize handwritten letters.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)",
        "1316": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for a person in Python which includes name and age as attributes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age)",
        "1317": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python script to build a tree from a list of parent-child relationships.\n\n### Input:\n[ (1, 2), (1, 3), (2, 4), (2, 5), (4, 6), (4, 7) ]\n\n### Output:\n# Python \nclass Node: \n  def __init__(self, data): \n    self.data = data \n    self.children = [] \n  \ndef buildTree(relationships): \n  tree = {} \n  for parent, child in relationships: \n    if parent not in tree: \n      tree[parent] = Node(parent) \n    parent_node = tree[parent] \n    if child not in tree: \n      tree[child] = Node(child) \n    child_node = tree[child] \n    parent_node.children.append(child_node) \n  return tree[1]",
        "1318": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI program in Python which can play the game tic-tac-toe.\n\n### Input:\n\n\n### Output:\ndef tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False",
        "1319": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that stores user data into a SQL database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\n# create database connection\nconn = sqlite3.connect('user_data.db')\nc = conn.cursor()\n\n# create database table\nc.execute('''CREATE TABLE users\n       (name TEXT, age INTEGER, city TEXT)''')\n\n# add user data\nc.execute(\"INSERT INTO users VALUES ('John', 24, 'New York')\")\nc.execute(\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\")\nc.execute(\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\")\n\n# save and close database connection\nconn.commit()\nconn.close()",
        "1320": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print the prime factors of a given positive integer.\n\n### Input:\n\n\n### Output:\ndef primeFactors(n): \n      \n    factors = []\n    while n % 2 == 0: \n        factors.append(2) \n        n = n \/ 2\n  \n    for i in range(3, int(sqrt(n))+1, 2): \n          \n        while n % i== 0: \n            factors.append(i) \n            n = n \/ i \n          \n    if n > 2: \n        factors.append(n) \n  \n    return factors \n  \nn = 315\nprint(primeFactors(n))",
        "1321": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to convert any number from 0 to 999 to its corresponding word.\n\n### Input:\nInput number: 259\n\n### Output:\ndef number_to_words(num):\n  units = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n           \"eight\", \"nine\"]\n  teens = [\"\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n          \"seventy\", \"eighty\", \"ninety\"]\n  hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\",\n              \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\",\n              \"ninehundred\"]\n\n  num_str = str(num)\n  result = \"\"\n\n  if num == 0:\n    result = \"zero\"\n\n  elif len(num_str) == 3:\n    result += hundreds[int(num_str[0])] + \" \"\n    if int(num_str[1:]) != 0:\n      result += number_to_words(int(num_str[1:]))\n\n  elif len(num_str) == 2:\n    if int(num_str[0]) == 1:\n      result += teens[int(num_str[1])]\n    else:\n      result += tens[int(num_str[0])] + \" \"\n      if int(num_str[1]) != 0:\n        result += units[int(num_str[1])]\n\n  elif len(num_str) == 1:\n    result += units[int(num_str[0])]\n\n  return result\n  \nprint(number_to_words(259))",
        "1322": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to uniformly convert any data format into a JSON format.\n\n### Input:\nThis is an example of a string in XML format:\n\n<note>\n <to>Tove<\/to>\n <from>Jani<\/from>\n <heading>Reminder<\/heading>\n <body>Don't forget me this weekend!<\/body>\n<\/note>\n\n### Output:\nimport json\n\ndef convert_to_json(data):\n    \"\"\"Convert any data format into a JSON format.\"\"\"\n    try:\n        # check if data is string\n        if isinstance(data, str):\n            return json.loads(data)\n        # check if data is xml\n        elif data.tag == 'note':\n            return {\n                'to': data.find('to').text,\n                'from': data.find('from').text, \n                'heading': data.find('heading').text,\n                'body': data.find('body').text,\n            }\n    except Exception as e:\n        raise e",
        "1323": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all subsets of a given set.\n\n### Input:\n\n\n### Output:\ndef generate_subset(input_set):\n    subsets = [[]]\n \n    for elem in input_set:\n        n = len(subsets)\n        for i in range(n):\n            current_subset = subsets[i]\n            subsets.append(current_subset + [elem])\n \n    return subsets",
        "1324": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to print the nth Fibonacci number in Python.\n\n### Input:\n\n\n### Output:\ndef fibonacci_n(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nn = 9\nprint(fibonacci_n(n))",
        "1325": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert degrees Celsius to degrees Fahrenheit given a value in Celsius.\n\n### Input:\nValue: 32\n\n### Output:\n# Function to convert degrees Celsius to degrees Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n return (celsius * 9\/5) + 32\n\n# Input Celsius value\ncelsius = 32\n\n# Calculate Fahrenheit\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f'{celsius} Celsius is {fahrenheit} Fahrenheit')",
        "1326": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a greedy algorithm in Python to complete a given optimization task.\n\n### Input:\n\n\n### Output:\ndef greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result",
        "1327": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that counts the occurrences of each letter of the alphabet in a given sentence.\n\n### Input:\nSentence:   'The quick brown fox jumps over the lazy dog.'\n\n### Output:\n# Create a dictionary to store the count of each letter \nletter_counts = {}\n\n# Loop through each letter in the given sentence\nfor letter in 'The quick brown fox jumps over the lazy dog.':\n     # Check if the letter is present in the dictionary\n     if letter in letter_counts:\n         # Increment the count if the key is present\n         letter_counts[letter] += 1\n     else:\n         # Initialize the count if the key is not present\n         letter_counts[letter] = 1\n\n# Print the output in a nice format\nfor key,val in letter_counts.items():\n    print(key, '-', val)",
        "1328": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the number present in an inputted string.\n\n### Input:\nstring_1 = \"The temperature is 24 degrees Celsius\"\n\n### Output:\ndef print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]",
        "1329": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to re-rank the numbers in descending order.\n\n### Input:\nnumbers = [4, 7, 2, 3]\n\n### Output:\nnumbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "1330": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-means clustering algorithm in Python to cluster a given dataset.\n\n### Input:\n\n\n### Output:\nfrom sklearn.cluster import KMeans\n\ndef k_means_clustering(data, num_clusters):\n    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    return labels",
        "1331": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API in Python to fetch location information using geopoints.\n\n### Input:\n\n\n### Output:\n# Import relevant modules\nimport requests\nimport json\n\n# Url for API\nURL = \"https:\/\/api.example.com\/geocode\"\n\n# Create function to fetche location information\ndef get_location_info(lat, lon):\n    PARAMS = {'lat': lat, 'lon': lon}\n    response = requests.get(url=URL, params=PARAMS)\n    output = json.loads(response.text)\n    return output\n\n# Call the function\nlocation_info = get_location_info(lat, lon)",
        "1332": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in python to capitalize the first letter of each word in a string.\n\n### Input:\nmy name is john\n\n### Output:\ndef capitalize(string):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)",
        "1333": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter.\n\n### Input:\n['cat', 'dog', 'fish','apple']\nletter: 'a'\n\n### Output:\ndef count_elements_with_letter(arr,letter):\n   count = 0\n   for a in arr:\n      if letter in a:\n         count += 1 \n   \n   return count \n\ncount_elements_with_letter(['cat','dog','fish','apple'], 'a')\n# output: 3",
        "1334": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that is able to parse a input string and extract all words that have at least 4 characters.\n\n### Input:\ninput_string = 'This is a sample string'\n\n### Output:\ndef extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string']",
        "1335": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a given string in valid json format\n\n### Input:\nstr = '{\"key1\": \"value1\", \"key2\": \"value2\"}'\n\n### Output:\nimport json\n\ndef str_to_json(json_string):\n    # convert the string to dictionary\n    json_dict = json.loads(json_string) \n    # convert the dictionary to json\n    json_data = json.dumps(json_dict) \n    # return json\n    return json_data",
        "1336": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python for encrypting a given string with a given key.\n\n### Input:\nKey: \"mykey123\"\nString: \"My secret message\"\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message')",
        "1337": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that prints a matrix of size n x m containing random numbers.\n\n### Input:\nn=3, m=2\n\n### Output:\nimport random\n\ndef random_matrix(n, m):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(random.randint(1,100))\n        matrix.append(row)\n    return matrix\n\nres = random_matrix(3, 2)\nprint(res)",
        "1338": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to get the min and max elements of an array.\n\n### Input:\n\n\n### Output:\ndef min_and_max(array):\n    min_element = array[0]\n    max_element = array[0]\n    for element in array:\n        if element < min_element:\n            min_element = element\n        elif element > max_element:\n            max_element = element \n    return (min_element, max_element)",
        "1339": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine the category of a given number based on predefined criteria.\n\n### Input:\n28\ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\n### Output:\ndef define_category(num, criteria):\n    if num >= criteria[\"low\"][0] and num <= criteria[\"low\"][1]:\n        return \"low\"\n    elif num >= criteria[\"medium\"][0] and num <= criteria[\"medium\"][1]:\n        return \"medium\"\n    elif num >= criteria[\"high\"][0] and num <= criteria[\"high\"][1]:\n        return \"high\"\n    else:\n        return \"not found\"\n\nnum = 28 \ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\ncategory = define_category(num, criteria)\n\nprint(category)",
        "1340": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to filter a given list of strings and return a new list of strings containing only unique elements.\n\n### Input:\nThe list is: [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\n\n### Output:\ndef filter_list(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\nstrings = [\"abc\", \"def\", \"abc\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"pqr\"]\nfiltered_strings = filter_list(strings)\nprint(filtered_strings)\n\n# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']",
        "1341": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code by removing any redundant or unnecessary operations.\n\n### Input:\ns = \"\"\nfor i in range(0, 10):\n    for x in range(0, 10):\n        for y in range(0, 10):\n            s += str(i) + str(x) + str(y)\n\n### Output:\ns = \"\"\nfor i in range(0, 10):\n    for x in range(0, 10):\n        s += str(i) + str(x) + ''.join([str(y) for y in range(0, 10)])",
        "1342": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that converts a sentence to upper case.\n\n### Input:\n\"This is an example sentence.\"\n\n### Output:\ndef sentence_to_upper(sentence):\n    return sentence.upper()\n\nprint(sentence_to_upper(\"This is an example sentence.\"))",
        "1343": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())",
        "1344": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that converts an array of strings into a dictionary containing character counts.\n\n### Input:\n[\"hello\", \"world\", \"the\"]\n\n### Output:\ndef array_to_char_count_dict(arr):\n    character_count = {}\n    for string in arr:\n        for char in string:\n            if char in character_count:\n                character_count[char] += 1\n            else:\n                character_count[char] = 1\n    return character_count\n\narr = [\"hello\", \"world\", \"the\"]\nprint(array_to_char_count_dict(arr))\n# Output: {'h': 1, 'e': 2, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1, 't': 1}",
        "1345": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python which prints the Fibonacci sequence up to the given number n.\n\n### Input:\n\n\n### Output:\ndef print_fibonacci_seq(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a + b\n\nif __name__ == '__main__':\n    n = 100\n    print_fibonacci_seq(n)",
        "1346": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate an algorithm from Java to Python to delete a node in a linked list.\n\n### Input:\nNot applicable\n\n### Output:\n# Python function to delete a node \n# in a Linked List. \nclass Node: \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to delete node from Linked List \ndef deleteNode(head, position): \n    # If linked list is empty \n    if head == None: \n        return \n\n    temp = head \n \n    # If head needs to be removed \n    if position == 0: \n        head = temp.next\n        temp = None\n        return head \n\n    # Find previous node of the node to be deleted \n    for i in range(position -1 ): \n        temp = temp.next\n        if temp is None: \n            break\n \n    # If position is more than number of nodes \n    if temp is None: \n        return \n \n    if temp.next is None: \n        return \n\n    # Node temp.next is the node to be deleted \n    # store pointer to the next of node to be deleted \n    next = temp.next.next\n\n    # Unlink the node from linked list \n    temp.next = None\n \n    temp.next = next \n\n    return head",
        "1347": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSimplify a fraction using a provided Python code.\n\n### Input:\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n### Output:\ndef simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator",
        "1348": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings in as arguments and returns a boolean value indicating if the strings have the same letter case.\n\n### Input:\nString1: Hello\nString2: HeLLo\n\n### Output:\ndef same_case(string1, string2): \n\n    # Take the lengths of two strings into consideration \n    if len(string1) != len(string2): \n        return False\n        \n    # Compare character by character \n    # If any one of the characters are not of same case \n    # return false \n    for x, y in zip(string1, string2): \n        if x.islower() != y.islower(): \n            return False\n\n    # If execution reaches this point \n    # it means that all characters of both strings \n    # are having same case \n    return True",
        "1349": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort in Python.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(lst):\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst",
        "1350": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.\n\n### Input:\narr = [1, 4, 9, 6, 2, 5, 9, 7]\n\n### Output:\ndef is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True",
        "1351": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to remove any duplicates from a list of integers in Python.\n\n### Input:\n[1, 1, 2, 3, 4, 4, 5]\n\n### Output:\ndef remove_duplicates(lst): \n    final_list = [] \n    for num in lst: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n    \nlst = [1, 1, 2, 3, 4, 4, 5] \nprint(remove_duplicates(lst))",
        "1352": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Tkinter library, write a Python program to create a window with two buttons: One for stopping a program, and the other for starting a program.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\n# Create window\nroot = tk.Tk()\n\n# Create two buttons\nstop_button = tk.Button(root, text=\"Stop Program\", command=stop_program)\nstart_button = tk.Button(root, text=\"Start Program\", command=start_program)\n\n# Place two buttons in the window\nstop_button.pack()\nstart_button.pack()\n\n# Display window\nroot.mainloop()",
        "1353": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python to sort a list of names by alphabetical order.\n\n### Input:\nnames = [\"John\", \"Sara\", \"Joseph\", \"James\"]\n\n### Output:\nnames.sort()\nprint(names)",
        "1354": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.\n\n### Input:\n[4, 9, 16, 25]\n\n### Output:\ndef to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict",
        "1355": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python program given below, so that it computes the factorial of the given number n.\n\n### Input:\ndef factorial(n):\t\n    # TODO\n\n### Output:\ndef factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "1356": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClone a remote Git repository using a Python program.\n\n### Input:\n\n\n### Output:\nimport git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https:\/\/github.com\/username\/repo.git\")",
        "1357": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to calculate the factorial of a number.\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n if n == 0:\n   return 1\n else:\n   return n * factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\n\nfactorial = factorial(num)\n\nprint(\"The factorial of\",num,\"is\",factorial)",
        "1358": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17",
        "1359": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sentence, write a Python program to capitalise the first letter of each word.\n\n### Input:\nSentence: hello world\n\n### Output:\nwords = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string)",
        "1360": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in python that takes two strings and returns the longest substring that is common to both strings.\n\n### Input:\ns1 = \"abcde\"\ns2 = \"xabxcdxxef\"\n\n### Output:\ndef longest_common_substring(s1, s2):\n    \"\"\"\n    This function takes two strings and returns the longest substring\n    that is common to both strings.\n    :param s1: string\n    :param s2: string\n    :return: longest common substring\n    \"\"\"\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]",
        "1361": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print all the prime numbers between 0 and 100.\n\n### Input:\nNot applicable\n\n### Output:\ndef print_prime_numbers():\n for num in range(0, 101):\n if num > 1:\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n print(num)\n\nprint_prime_numbers()",
        "1362": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compute the frequency of unique words from a given string.\n\n### Input:\n\n\n### Output:\ndef unique_words_freq(string): \n words = string.split() \n words_freq = {}\n for word in words: \n if word not in words_freq.keys(): \n words_freq[word] = 1 \n else: \n words_freq[word] += 1 \n \n return words_freq\n\nresult = unique_words_freq(\"Hello world, hello world\")\nprint(result)",
        "1363": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a simple Maze game where the player starts at position (0,0) and needs to find the goal position (4,4) by navigating the maze.\n\n### Input:\nNot applicable\n\n### Output:\n# Maze Class \nclass Maze: \n  \n    # Maze constructor \n    def __init__(self): \n        self.n = 5\n        self.maze = [[ 1, 0, 0, 0, 1 ], \n                     [ 1, 1, 1, 0, 1 ], \n                     [ 0, 0, 0, 0, 0 ], \n                     [ 0, 1, 1, 1, 1 ], \n                     [ 0, 1, 0, 0, 1 ]] \n   \n    # function to print the maze \n    def printMaze(self): \n        for i in range(self.n): \n            for j in range(self.n): \n                print(self.maze[i][j], end =\" \") \n            print () \n   \n    # function to check if maze is solved or not \n    def isSolved(self, x, y): \n        if x == self.n - 1 and y == self.n - 1: \n            return True\n        return False\n\n# Driver Function \nif __name__ == \"__main__\": \n    mazeObj = Maze() \n    mazeObj.printMaze() \n    print(\"Is the maze solved? :\", \n          mazeObj.isSolved(0, 0))",
        "1364": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct program in Python to perform two dimensional binary search\n\n### Input:\narr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]\n\n### Output:\ndef binarySearch2D(arr, key):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) \/\/ 2\n        if arr[mid][0] == key:\n            return True\n        elif arr[mid][0] > key:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n\narr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]\nkey = 3\n\nif binarySearch2D(arr, key):\n    print(True) \nelse :\n    print(False)",
        "1365": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a text summarizer in Python that takes a text input and returns a summary of the text in two sentences.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport re\n\ndef summarize_text(text):\n \"\"\"\n A basic text summarizer that takes a text input and returns a summary of the text in two sentences.\n \"\"\"\n\n # Tokenize the text\n tokens = nltk.sent_tokenize(text)\n # Get the frequency of each word\n word_frequencies = {}\n for word in nltk.word_tokenize(text):\n if word not in word_frequencies.keys():\n word_frequencies[word] = 1\n else:\n word_frequencies[word] += 1\n\n # Get the maximum frequency\n maximum_frequency = max(word_frequencies.values())\n\n # Compute the weight of each word\n for word in word_frequencies.keys():\n word_frequencies[word] = (word_frequencies[word]\/maximum_frequency)\n\n # Generate the summary\n sentence_scores = {}\n for sent in tokens:\n for word in nltk.word_tokenize(sent.lower()):\n if word in word_frequencies.keys():\n if len(sent.split(' ')) < 30:\n if sent not in sentence_scores.keys():\n sentence_scores[sent] = word_frequencies[word]\n else:\n sentence_scores[sent] += word_frequencies[word]\n\n # Get the two highest-scoring sentences\n summary_sentences = heapq.nlargest(2, sentence_scores, key=sentence_scores.get) \n\n # Construct the summary\n summary = ' '.join(summary_sentences)\n return summary",
        "1366": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that uses an API to retrieve data from a given web page and displays the relevant information to the user.\n\n### Input:\nSample Webpage: \nhttps:\/\/www.example.com\/page1\n\n### Output:\nimport requests \n\n# api-endpoint \nURL = \"https:\/\/www.example.com\/page1\"\n  \n# sending get request and saving the response as response object \nr = requests.get(url = URL) \n  \n# extracting data in json format \ndata = r.json() \n  \n# extracting relevant data \nstatus = data['status'] \nsub_title = data['sub_title'] \nmax_clients = data['max_clients'] \n\n# printing extracted data  \nprint(\"Status:\", status) \nprint(\"Sub Title:\", sub_title)\nprint(\"Max Clients:\", max_clients)",
        "1367": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to detect duplicate values in a given array.\n\n### Input:\n[5, 2, 1, 5, 9, 1, 3]\n\n### Output:\ndef find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates",
        "1368": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm in Python that is capable of sorting very large lists.\n\n### Input:\n[25, 6, 7, 3, 12, 89, 74, 55]\n\n### Output:\ndef sort(array):\n    for i in range(len(array)):\n        low = i\n        for j in range(i+1, len(array)):\n            if array[low] > array[j]:\n                low = j\n        array[i], array[low] = array[low], array[i]\n    return array\n \nexample = [25, 6, 7, 3, 12, 89, 74, 55]\nsorted_array = sort(example)\nprint(sorted_array)",
        "1369": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for downloading a web page's HTML content.\n\n### Input:\nhttp:\/\/example.com\n\n### Output:\nimport requests\n \nurl = 'http:\/\/example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html)",
        "1370": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code that takes the starting and ending numbers of a range, and returns the largest prime within that range.\n\n### Input:\n3, 22\n\n### Output:\ndef largest_prime_in_range(start, end):\n    largest_prime = 0\n    # Iterate over the range\n    for i in range(start, end + 1):\n        # Check if number is prime\n        is_prime = True\n        if i > 1:\n            for j in range(2, ceil(sqrt(i))+ 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n        # Check if number is the largest prime\n        if is_prime and i > largest_prime:\n            largest_prime = i\n\n    return largest_prime\n\nif __name__ == '__main__':\n    output = largest_prime_in_range(3, 22)\n    print(output)",
        "1371": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the sum of two numbers using a for loop.\n\n### Input:\n\n\n### Output:\ndef sum_of_two(x, y):\n  result = 0\n  for i in range(x, y+1):\n    result += i\n  return result",
        "1372": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension.\n\n### Input:\nNot applicable\n\n### Output:\nnumbers = [x for x in range(1, 11)]",
        "1373": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a circle with a center and a radius.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle((1, 2), 5)\nprint(f\"Area of the circle: {circle.area()}\")\nprint(f\"Circumference of the circle: {circle.circumference()}\")",
        "1374": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a loop in Python to find the highest value in an array?\n\n### Input:\narr = [2, 3, 9, 1, 4, 5]\n\n### Output:\nmax_val = arr[0]\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val)",
        "1375": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to compute the maximum sum of any subpolygon within a given array of N points\n\n### Input:\nN = 5\npoints = [[1, 2], [2, 8], [4, 6], [8, 0], [7, -1]]\n\n### Output:\ndef max_subpolygon_sum(N, points):\n  maximum_sum = 0\n  for i in range(N):\n    for j in range(i+1, N):\n      for k in range(j+1, N):\n        for l in range(k+1, N):\n          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]\n          maximum_sum = max(maximum_sum, current_sum)\n  return maximum_sum\n\nmax_sum = max_subpolygon_sum(N, points)\nprint(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')",
        "1376": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to evaluate a given string and return a Boolean value.\n\n### Input:\nString = \u201cThe sky is blue\u201d\n\n### Output:\ndef evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False",
        "1377": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program that can generate random numbers between 1 and 1000.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_number():\n    return random.randint(1, 1000)\n\nprint(random_number())",
        "1378": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to extract domain name from given URLs.\n\n### Input:\n\"http:\/\/www.google.com\"\n\n### Output:\nimport re\ndef extract_domain_name(url):\n    regex = r\":\/\/([^\/]+)\/?\"\n    match = re.search(regex, url)\n \n    if match:\n        return match.group(1)\n\nurl = \"http:\/\/www.google.com\"\ndomain_name = extract_domain_name(url)\nprint(domain_name)\n \n# Output: \n# google.com",
        "1379": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes in a 2D array of integers and return the sum of all elements in the array.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef sumArray(arr):\n  sum = 0\n  for i in range(len(arr)):\n    for j in range(len(arr[i])):\n      sum += arr[i][j]\n      \n  return sum\n\nsumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45",
        "1380": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that automatically prints out a Fibonacci sequence of length n.\n\n### Input:\n\n\n### Output:\ndef print_fibonacci(length):\n    a = 0 \n    b = 1\n\n    while length > 0:\n        print(a)\n        temp = a \n        a = b \n        b = temp + b \n        length = length - 1",
        "1381": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm for sorting a list in Python.\n\n### Input:\n\n\n### Output:\ndef sort_list(list):\n   for i in range(len(list)-1):          # loop over index i from 0 to n-2\n       small = i                         # set minimum index to i\n       for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1\n           if list[j] < list[small]:      # compare list[j] with list[small]\n               small = j                  # update minimum index\n       list[i], list[small] = list[small], list[i]  # swap list[i] and list[small]\n   return list\n\n\n# Main program\nlist = [ 3, 8, 4, 6, 2, 9, 7]\nprint (\"Original list:\", list)\nsort_list(list)\nprint (\"Sorted list:\", list)",
        "1382": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code tests BIP forks in Python 2. To run the test, follow these steps: \n\n1. Start a single node.\n2. Use regtest lock-in with 108\/144 block signalling.\n3. Activate after a further 144 blocks.\n4. Mine 2 blocks and save coinbases for later use.\n5. Mine 141 blocks to transition from DEFINED to STARTED.\n6. Mine 100 blocks signalling readiness and 44 not in order to fail to change state this period.\n7. Mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN).\n8. Mine a further 143 blocks (LOCKED_IN).\n9. Test that enforcement has not triggered (which triggers ACTIVE).\n10. Test that enforcement has triggered.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT\/X11 software license, see the accompanying\n# file COPYING or http:\/\/www.opensource.org\/licenses\/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108\/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main()",
        "1383": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the largest and smallest element in an array.\n\n### Input:\narr = [3, 7, 1, 12, 5]\n\n### Output:\ndef find_min_max(arr):\n    min, max = arr[0], arr[0]\n    for item in arr:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    return min, max\n\n# test\narr = [3, 7, 1, 12, 5]\nmin, max = find_min_max(arr)\nprint(f'min: {min}, max: {max}')",
        "1384": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that takes a single number as an argument, which indicates an array size, and calculate the median value of the array\n\n### Input:\narr_size = 10\n\n### Output:\nclass MedianCalculator:\n    def __init__(self, arr_size):\n        self.arr_size = arr_size\n        self.arr = []\n    \n    def calculate_median(self):\n        if self.arr_size == 0:\n            return 0\n        elif self.arr_size == 1:\n            return self.arr[0]\n        else:\n            self.arr.sort()\n            if self.arr_size % 2 == 0:\n                mid1 = self.arr_size \/\/ 2 - 1\n                mid2 = self.arr_size \/\/ 2\n                return (self.arr[mid1] + self.arr[mid2]) \/ 2\n            else:\n                return self.arr[self.arr_size \/\/ 2]",
        "1385": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract all emails from an HTML page.\n\n### Input:\n<html>\n<head>\n  <title>Page title<\/title>\n<\/head>\n<body>\n  <p>For more information email us at info@example.com.<\/p>\n  <p>You can also contact john@example.com.<\/p>\n<\/body>\n<\/html>\n\n### Output:\nimport re\n\nhtml_str = \"\"\"\n<html>\n<head>\n  <title>Page title<\/title>\n<\/head>\n<body>\n  <p>For more information email us at info@example.com.<\/p>\n  <p>You can also contact john@example.com.<\/p>\n<\/body>\n<\/html>\"\"\"\n\nemails = re.findall(r'\\S+@\\S+', html_str)\nprint(emails)\n\n# Output: ['info@example.com', 'john@example.com']",
        "1386": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python module for image manipulation. To use it, import the module and create an instance of the ImageHelper class. The module provides several methods for image manipulation, including comparison, loading, cropping, bordering, resizing, colorizing, and saving. To manipulate an image, call the manipulate method and pass in the source image file path and any desired options. The method will return True if the image was successfully manipulated and saved, False if there was an error, or the manipulated image if no save destination was specified.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n\n\nimport tempfile\n\nfrom dp_tornado.engine.helper import Helper as dpHelper\n\n\nclass ImageHelper(dpHelper):\n    def compare(self, i1, i2, error=0):\n        i1 = self.load(i1)\n        i2 = self.load(i2)\n\n        if not i1 or not i2:\n            return None\n\n        s1 = i1.size\n        s2 = i2.size\n\n        if s1[0] != s2[0] or s2[1] != s2[1]:\n            print('size ne,', s1, s2)\n            return False\n\n        i1 = i1.load()\n        i2 = i2.load()\n\n        for i in range(s1[0]):\n            for j in range(s1[1]):\n                if i1[i, j] != i2[i, j]:\n                    if error:\n                        for k in range(len(i1[i, j])):\n                            if abs(i1[i, j][k] - i2[i, j][k]) > error:\n                                print('pixel ne,', i1[i, j], i2[i, j], abs(i1[i, j][k] - i2[i, j][k]), error)\n                                return False\n                    else:\n                        return False\n\n        return True\n\n    def _driver(self, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        if options and 'driver' in options and options['driver'] == 'wand':\n            return self.helper.io.image.driver.wand\n\n        return self.helper.io.image.driver.pillow\n\n    def load(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        tmp = None\n        drivers = []\n\n        pillow_image = self.helper.io.image.driver.pillow.Image\n        wand_image = self.helper.io.image.driver.wand.Image\n\n        if pillow_image:\n            drivers.append(pillow_image)\n\n        if wand_image:\n            drivers.append(wand_image)\n\n        try:\n            if isinstance(src, tuple(drivers)):\n                return src\n\n            elif self.helper.web.url.validate(src):\n                code, res = self.helper.web.http.get.raw(src)\n\n                if code != 200:\n                    raise Exception('The specified image url is invalid.')\n\n                tmp = tempfile.NamedTemporaryFile(delete=False)\n                tmp.write(res)\n                tmp.close()\n\n                tmp = tmp.name\n\n            else:\n                tmp = None\n\n            if not tmp and not src:\n                raise Exception('The specified image is invalid.')\n\n            img = self._driver(options=options).load(tmp if tmp else src)\n\n            if not img:\n                raise Exception('The specified image is invalid.')\n\n            return img\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n        finally:\n            if tmp:\n                self.helper.io.file.remove(tmp)\n\n    def execute(self, src, fn, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        img = self.load(src, options=options)\n\n        if not img:\n            return False\n\n        try:\n            return fn(img, options)\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n\n    def size(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            if not img:\n                return -1, -1\n\n            return img.width, img.height\n\n        return self.execute(src, fn, options=options)\n\n    def crop(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            crop = kwargs['crop'] if 'crop' in kwargs else None\n\n            if not crop:\n                return img\n\n            e_top = 0\n            e_left = 0\n            e_right = 0\n            e_bottom = 0\n\n            if self.helper.misc.type.check.string(crop):\n                crop = crop.split(',')\n                crop = [int(e.strip()) for e in crop]\n\n            if self.helper.misc.type.check.numeric(crop):\n                e_top = e_left = e_right = e_bottom = crop\n\n            elif isinstance(crop, (tuple, list)):\n                if len(crop) == 1:\n                    e_top = e_left = e_right = e_bottom = crop[0]\n\n                elif len(crop) == 2:\n                    e_top = e_bottom = crop[0]\n                    e_left = e_right = crop[1]\n\n                elif len(crop) == 4:\n                    e_top = crop[0]\n                    e_right = crop[1]\n                    e_bottom = crop[2]\n                    e_left = crop[3]\n\n            img = self._driver(options=kwargs).crop(img, e_left, e_top, img.size[0] - e_right, img.size[1] - e_bottom)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def border(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not border:\n                return img\n\n            if '_org' in kwargs and 'radius' in kwargs and kwargs['radius']:\n                return img\n\n            img = self._driver(options=kwargs).border(img, border, border_color)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def radius(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            radius = int(kwargs['radius'] or 0) if 'radius' in kwargs else None\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n            border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000'\n\n            if not radius:\n                return img\n            elif '__radius_processed__' in img.__dict__:\n                return img\n\n            img = self._driver(options=kwargs).radius(img, radius, border, border_color)\n            img.__dict__['__radius_processed__'] = True\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def colorize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            colorize = kwargs['colorize'] if 'colorize' in kwargs else None\n\n            if not colorize:\n                return img\n\n            img = self._driver(options=kwargs).colorize(img, colorize)\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def resize(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            size = kwargs['size'] if 'size' in kwargs else None\n            mode = kwargs['mode'] if 'mode' in kwargs else None\n            scale = int(kwargs['scale']) if 'scale' in kwargs else 1\n            limit = True if 'limit' in kwargs and kwargs['limit'] else False\n            border = int(kwargs['border']) if 'border' in kwargs else 0\n\n            if not size:\n                return img\n\n            width_new, height_new = size\n            width_origin, height_origin = img.size\n\n            if scale > 1:\n                if limit:\n                    scale_max_width = float(width_origin) \/ float(width_new)\n                    scale_max_height = float(height_origin) \/ float(height_new)\n\n                    scale_max = min(scale, scale_max_width, scale_max_height)\n                else:\n                    scale_max = scale\n\n                if scale_max > 1:\n                    width_new = int(width_new * scale_max)\n                    height_new = int(height_new * scale_max)\n\n            if not width_new:\n                width_new = width_origin * height_new \/ height_origin\n                mode = self.helper.io.image.mode.resize\n\n            if not height_new:\n                height_new = height_origin * width_new \/ width_origin\n                mode = self.helper.io.image.mode.resize\n\n            if border:\n                width_new -= border * 2\n                height_new -= border * 2\n\n            if not mode:\n                mode = self.helper.io.image.mode.resize\n\n            if mode not in self.helper.io.image.mode.modes:\n                raise Exception('The specified mode is not supported.')\n\n            seqs = []\n\n            for i, im in self._driver(options=kwargs).iter_seqs(img, kwargs):\n                # Image Resizing\n                if mode == self.helper.io.image.mode.center:\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new, kwargs)\n\n                elif mode == self.helper.io.image.mode.fill:\n                    ratio_origin = float(width_origin) \/ float(height_origin)\n                    ratio_new = float(width_new) \/ float(height_new)\n\n                    if ratio_origin > ratio_new:\n                        tw = int(round(height_new * ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, tw, height_new)\n                        left = int(round((tw - width_new) \/ 2.0))\n                        im = self._driver(options=kwargs).crop(im, left, 0, left + width_new, height_new)\n\n                    elif ratio_origin < ratio_new:\n                        th = int(round(width_new \/ ratio_origin))\n                        im = self._driver(options=kwargs).resize(im, width_new, th)\n                        top = int(round((th - height_new) \/ 2.0))\n                        im = self._driver(options=kwargs).crop(im, 0, top, width_new, top + height_new)\n\n                    else:\n                        im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                elif mode == self.helper.io.image.mode.resize:\n                    if width_new > width_origin or height_new > height_origin:\n                        width_new = width_origin\n                        height_new = height_origin\n\n                    im = self._driver(options=kwargs).resize(im, width_new, height_new)\n\n                seqs.append(im)\n\n            img = seqs[0]\n            seqs.remove(img)\n            img.__dict__['__frames__'] = seqs\n\n            return img\n\n        return self.execute(src, fn, options=options)\n\n    def save(self, src, options=None, **o_kwargs):\n        if not options and o_kwargs:\n            options = o_kwargs\n\n        def fn(img, kwargs):\n            ext = kwargs['format'] if 'format' in kwargs else None\n            dest = kwargs['dest'] if 'dest' in kwargs else None\n\n            if not dest:\n                return None\n\n            if not ext and self.helper.misc.type.check.string(dest):\n                ext = self.helper.io.path.ext(dest, dot='').lower()\n\n            if not ext and self.helper.misc.type.check.string(src):\n                ext = self.helper.io.path.ext(src, dot='').lower()\n\n            if not ext and '_org' in kwargs and kwargs['_org'] and self.helper.misc.type.check.string(kwargs['_org']):\n                ext = self.helper.io.path.ext(kwargs['_org'], dot='').lower()\n\n            if dest == 's3':\n                # TODO\n                return False\n\n            if not self._driver(options=kwargs).save(img, ext, dest, kwargs):\n                return False\n\n            return True\n\n        return self.execute(src, fn, options=options)\n\n    def manipulate(self, src, options=None, **kwargs):\n        if not options and kwargs:\n            options = kwargs\n\n        options['_org'] = src\n\n        try:\n            img = self.load(src, options=options)\n\n            # Crop\n            img = self.crop(img, options=options)\n\n            if not img:\n                return False\n\n            # Resize\n            img = self.resize(img, options=options)\n\n            if not img:\n                return False\n\n            # Radius\n            img = self.radius(img, options=options)\n\n            if not img:\n                return False\n\n            # Border\n            img = self.border(img, options=options)\n\n            if not img:\n                return False\n\n            # Colorize\n            img = self.colorize(img, options=options)\n\n            if not img:\n                return False\n\n            # Save\n            saved = self.save(img, options=options)\n\n            if saved is None:\n                return img\n            elif saved is False:\n                return False\n\n            return True\n\n        except Exception as e:\n            self.logging.exception(e)\n\n            return False\n",
        "1387": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the longest palindromic substring from a given string.\n\n### Input:\nstring = \"forgeeksskeegfor\"\n\n### Output:\n# Function to find longest palindromic substring \ndef longest_palindromic_substring(string): \n    maxLength = 1\n\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point\n    # of even and length palindromes\n    for i in range(1, length): \n        # Find the longest even length palindrome with center\n        # points as i - 1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low\n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n        # Find the longest odd length palindrome with center\n        # point as i\n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength:\n\t\t\t    start = low \n\t\t\t    maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n    # print the substring\n    print(string[start: start + maxLength])\n  \n# Driver code \nstring = \"forgeeksskeegfor\"\n\nlongest_palindromic_substring(string)",
        "1388": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the area of a provided room.\n\n### Input:\nThe room has length 5 meters, width 8 meters and height 3 meters.\n\n### Output:\nlength_meters = 5\nwidth_meters = 8\nheight_meters = 3\n\n# Calculate area of room\nroom_area_meters_squared = length_meters * width_meters * height_meters\n\n# Print the area\nprint(f\"The area of the room is {room_area_meters_squared} meters squared.\")",
        "1389": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to implement Merge Sort algorithm.\n\n### Input:\n\n\n### Output:\ndef merge_sort(arr): \n    # Base case \n    if len(arr) <= 1:\n        return arr\n    else: \n        # Split array into two halves \n        mid = len(arr)\/\/2\n        left = arr[:mid] \n        right = arr[mid:] \n\n        # Call merge_sort recursively with each half \n        left = merge_sort(left) \n        right = merge_sort(right)\n    \n        # Merge each half \n        return merge(left, right) \n \ndef merge(left, right): \n  \n    # Initialize variables \n    result = [] \n    left_index = 0\n    right_index = 0\n   \n    # result will be a sorted array\n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            result.append(left[left_index]) \n            left_index += 1\n        else: \n            result.append(right[right_index]) \n            right_index += 1\n    \n     # If left is longer, add remaining elements\n    result += left[left_index:] \n\n    # If right is longer, add remaining elements\n    result += right[right_index:] \n    return result",
        "1390": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, generate a function to extract data from a MySQL table, given a query string.\n\n### Input:\nquery_string = \"SELECT * FROM student WHERE course='Python'\"\n\n### Output:\ndef extract_data_from_mysql(query_string):\n    conn = mysql.connector.connect(host=\"localhost\", user=\"root\", passwd=\"password\", database=\"student\")\n    \n    cursor = conn.cursor()\n    cursor.execute(query_string)\n    \n    result = cursor.fetchall()\n    \n    conn.close()\n    \n    return result",
        "1391": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to filter out empty strings from a given list.\n\n### Input:\n[\"Hello\", \"\", \"Python\", \"World\", \"\"]\n\n### Output:\ndef remove_empty_strings(lst):\n    filtered_list = []\n    for item in lst:\n        if item != \"\":\n            filtered_list.append(item)\n    return filtered_list\n\nfiltered_list = remove_empty_strings([\"Hello\", \"\", \"Python\", \"World\", \"\"])\nprint(filtered_list)",
        "1392": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to compute the intersection of two given arrays.\n\n### Input:\n\n\n### Output:\ndef intersection(arr1,arr2):\n  return set(arr1).intersection(set(arr2))",
        "1393": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an array of all the prime numbers within a given range.\n\n### Input:\nlower = 20\nupper = 40\n\n### Output:\ndef generate_primes(lower, upper):\n    \"\"\"\n    This functions returns an array of all the prime numbers within a given range.\n    \"\"\"\n    prime_list = []\n    for num in range(lower, upper + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list",
        "1394": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to track inventory.\n\n### Input:\n\n\n### Output:\nclass Inventory:\n  def __init__(self):\n    # Declare an empty dictionary to hold inventory information\n    self.inventory = {}\n \n  # Function for adding product\n  def add_product(self, product_name, quantity):\n    # If product_name exists in inventory, add quantity to existing product's quantity\n    if product_name in self.inventory.keys():\n      self.inventory[product_name] += quantity\n    else:\n      # If product_name is not in inventory, add it to inventory\n      self.inventory[product_name] = quantity\n \n  # Function for removing product\n  def remove_product(self, product_name, quantity):\n    # If product_name exists in inventory and there's insufficient quantity, print an error message\n    if product_name in self.inventory.keys() and self.inventory[product_name] < quantity:\n      print(\"Error: Insufficient Quantity!\")\n    else:\n      # If product_name is in inventory and there's sufficient quantity, remove product from inventory\n      self.inventory[product_name] -= quantity\n      if self.inventory[product_name] == 0:\n        del self.inventory[product_name]\n \n  # Function for printing inventory\n  def print_inventory(self):\n    print(\"Inventory:\")\n    # Iterate through keys and values of inventory and print them\n    for product_name, quantity in self.inventory.items():\n      print(product_name + \" : \" + str(quantity))",
        "1395": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two given strings in terms of length, characters, and case sensitivity.\n\n### Input:\nString 1: 'Hello World'\nString 2: 'hello world!'\n\n### Output:\ndef compare_strings(str1, str2):\n # compare string length\n if len(str1) > len(str2):\n print('String 1 is longer than String 2')\n elif len(str2) > len(str1):\n print('String 2 is longer than String 1')\n else:\n print('Strings are of equal length')\n\n # compare characters\n common_chars = set(str1).intersection(set(str2))\n if len(common_chars) == min(len(str1), len(str2)):\n print('Strings have same characters')\n\n # compare case sensitivity\n if str1.lower() == str2.lower():\n print('Strings are equal in terms of case sensitivity')\n\nstr1 = 'Hello World'\nstr2 = 'hello world!'\n\ncompare_strings(str1, str2);",
        "1396": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values.\n\n### Input:\nmy_list = [1,1,2,3,4,4,4,4,5,6]\n\n### Output:\nmy_dict = {}\n\nfor item in my_list:\n    if item not in my_dict:\n        my_dict[item] = 0\n    my_dict[item] += 1\n\nprint(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}",
        "1397": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers.\n\n### Input:\nnum1 = 4\nnum2 = 5\n\n### Output:\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('\/add', methods=['GET'])\ndef add():\n num1 = float(request.args.get('num1'))\n num2 = float(request.args.get('num2'))\n\n sum = num1 + num2\n\n return str(sum)\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "1398": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a Fibonacci series up to 5 terms.\n\n### Input:\n\n\n### Output:\ndef fibonacci(num): \n  # Initializing first two numbers of the series \n  a = 0\n  b = 1\n  print(\"Fibonacci series: \", end = \" \") \n  for i in range(num): \n    # Generating next number in the series \n    c = a + b\n    a = b\n    b = c \n    # printing the generated number in the series \n    print(c, end =\" \") \n  \n# Get number of terms to generate in the series\nnum = 5\n\n#Calling fibonacci function  \nfibonacci(num)",
        "1399": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 5x5 matrix consisting of numerical entries in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nrandom_matrix = np.random.randint(1, 100, size=(5, 5))\nprint(random_matrix)",
        "1400": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes two strings and checks if they are anagrams (i.e., if they contain the same characters in the same order).\n\n### Input:\nStrings: \"Hello\", \"World\"\n\n### Output:\ndef isAnagram(str1, str2):\n    # Convert the strings to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n\n    # Sort the strings\n    str1sorted = ''.join(sorted(str1))\n    str2sorted = ''.join(sorted(str2))\n\n    # Check if sorted strings are equal \n    if(str1sorted == str2sorted):\n        return True\n    else:\n        return False\n\n# Test\nprint(isAnagram('Hello', 'World'))",
        "1401": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python visualization to display a bar chart of the results of some data.\n\n### Input:\nArray of word strings and the associated frequency \n[\n  [\"word1\", 5], \n  [\"word2\", 8], \n  [\"word3\", 3],\n  [\"word4\", 2],\n]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nwords = [\"word1\", \"word2\", \"word3\", \"word4\"]\nfrequencies = [5, 8, 3, 2]\n\nplt.bar(words, frequencies)\nplt.title(\"Word Frequency Chart\")\nplt.xlabel(\"Words\")\nplt.ylabel(\"Frequency\")\nplt.show()",
        "1402": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to return the n-th element of a given list.\n\n### Input:\nlist_input = [1, 3, 5, 7, 9]\nn = 3\n\n### Output:\ndef get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))",
        "1403": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a solution to improve the following Python code to minimize the running time.\n\n### Input:\ndef reverse_list(input_list): \n    rev_list = [] \n    for i in range(len(input_list)-1,-1,-1): \n        rev_list.append(input_list[i]) \n    return rev_list\n\n### Output:\ndef reverse_list(input_list): \n    left = 0\n    right = len(input_list) - 1\n    while left < right:\n        input_list[left], input_list[right] = input_list[right], input_list[left]\n        left += 1\n        right -= 1\n        \n    return input_list",
        "1404": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search through a list of names and print out any names that contain the letter 'a'.\n\n### Input:\nnames = [\"John\", \"Paul\", \"George\", \"Ringo\", \"Adam\", \"Peter\", \"Alice\", \"Karen\", \"Jerry\"]\n\n### Output:\nnames = [\"John\", \"Paul\", \"George\", \"Ringo\", \"Adam\", \"Peter\", \"Alice\", \"Karen\", \"Jerry\"]\n\nfor name in names:\n if 'a' in name:\n print(name)\n\n# Output\nAdam\nAlice\nKaren",
        "1405": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of strings and count all occurrences of a particular word in the list.\n\n### Input:\n[\"how\", \"how\", \"are\", \"you\", \"how\", \"are\", \"you\"], \"how\"\n\n### Output:\ndef countOccurrences(words, target):\n    count = 0\n    for word in words:\n        if word == target:\n            count += 1\n    \n    return count\n\nprint(countOccurrences([\"how\", \"how\", \"are\", \"you\", \"how\", \"are\", \"you\"], \"how\"))",
        "1406": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two integers and returns the larger with the smaller one as its divisor.\n\n### Input:\nInput integers: 10, 20\n\n### Output:\ndef get_larger_number_divisible_by_smaller(num1, num2):\n  max_num = max(num1, num2)\n  min_num = min(num1, num2)\n\n  return max_num if max_num % min_num == 0 else None\n\nresult = get_larger_number_divisible_by_smaller(10, 20)\nprint(result) # 20",
        "1407": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following python code to include a trycatch block.\n\n### Input:\ndef add_number(a, b):\n    return a + b\n\n### Output:\ndef add_number(a, b):\n    try:\n        return a + b \n    except TypeError:\n        print(\"Please enter numeric values\")",
        "1408": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that defines a TestMailNotifier class and several methods for testing a NotifierBase class. To use this code, you can create an instance of the TestMailNotifier class and call its methods to test the behavior of the NotifierBase class. To run the tests, you can execute the script.\n\n### Input:\n\n\n### Output:\n# This file is part of Buildbot.  Buildbot is free software: you can\n# redistribute it and\/or modify it under the terms of the GNU General Public\n# License as published by the Free Software Foundation, version 2.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n# details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51\n# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Copyright Buildbot Team Members\n\n\nimport copy\nimport sys\n\nfrom mock import Mock\n\nfrom twisted.internet import defer\nfrom twisted.trial import unittest\n\nfrom buildbot import config\nfrom buildbot.process.results import CANCELLED\nfrom buildbot.process.results import EXCEPTION\nfrom buildbot.process.results import FAILURE\nfrom buildbot.process.results import SUCCESS\nfrom buildbot.process.results import WARNINGS\nfrom buildbot.reporters.notifier import NotifierBase\nfrom buildbot.test.fake import fakedb\nfrom buildbot.test.fake import fakemaster\nfrom buildbot.test.util.config import ConfigErrorsMixin\nfrom buildbot.test.util.misc import TestReactorMixin\nfrom buildbot.test.util.notifier import NotifierTestMixin\n\npy_27 = sys.version_info[0] > 2 or (sys.version_info[0] == 2\n                                    and sys.version_info[1] >= 7)\n\n\nclass TestMailNotifier(ConfigErrorsMixin, TestReactorMixin,\n                       unittest.TestCase, NotifierTestMixin):\n\n    def setUp(self):\n        self.setUpTestReactor()\n        self.master = fakemaster.make_master(self, wantData=True, wantDb=True,\n                                             wantMq=True)\n\n    @defer.inlineCallbacks\n    def setupNotifier(self, *args, **kwargs):\n        mn = NotifierBase(*args, **kwargs)\n        mn.sendMessage = Mock(spec=mn.sendMessage)\n        mn.sendMessage.return_value = \"<message>\"\n        yield mn.setServiceParent(self.master)\n        yield mn.startService()\n        return mn\n\n    def test_init_enforces_tags_and_builders_are_mutually_exclusive(self):\n        with self.assertRaises(config.ConfigErrors):\n            NotifierBase(tags=['fast', 'slow'], builders=['a', 'b'])\n\n    def test_init_warns_notifier_mode_all_in_iter(self):\n        with self.assertRaisesConfigError(\n               \"mode 'all' is not valid in an iterator and must be passed in as a separate string\"):\n            NotifierBase(mode=['all'])\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_sends_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"passing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        mn.buildMessage.assert_called_with(\n            \"whole buildset\",\n            builds, SUCCESS)\n        self.assertEqual(mn.buildMessage.call_count, 1)\n\n    @defer.inlineCallbacks\n    def test_buildsetComplete_doesnt_send_message(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n        # disable passing...\n        mn = yield self.setupNotifier(buildSetSummary=True,\n                                      mode=(\"failing\", \"warnings\"),\n                                      builders=[\"Builder1\", \"Builder2\"])\n\n        mn.buildMessage = Mock()\n        yield mn.buildsetComplete('buildset.98.complete',\n                                  dict(bsid=98))\n\n        self.assertFalse(mn.buildMessage.called)\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_ignores_unspecified_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['slow']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_tags(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        build['builder']['tags'] = ['fast']\n        mn = yield self.setupNotifier(tags=[\"fast\"])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['checkin'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_schedulers_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(schedulers=['some-random-scheduler'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_sends_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['master'])\n        self.assertTrue(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def test_isMessageNeeded_branches_doesnt_send_mail(self):\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        build = builds[0]\n        # force tags\n        mn = yield self.setupNotifier(branches=['some-random-branch'])\n        self.assertFalse(mn.isMessageNeeded(build))\n\n    @defer.inlineCallbacks\n    def run_simple_test_sends_message_for_mode(self, mode, result, shouldSend=True):\n        _, builds = yield self.setupBuildResults(result)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def run_simple_test_ignores_message_for_mode(self, mode, result):\n        return self.run_simple_test_sends_message_for_mode(mode, result, False)\n\n    def test_isMessageNeeded_mode_all_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", SUCCESS)\n\n    def test_isMessageNeeded_mode_all_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", FAILURE)\n\n    def test_isMessageNeeded_mode_all_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", WARNINGS)\n\n    def test_isMessageNeeded_mode_all_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_all_for_cancelled(self):\n        return self.run_simple_test_sends_message_for_mode(\"all\", CANCELLED)\n\n    def test_isMessageNeeded_mode_failing_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_failing_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"failing\", FAILURE)\n\n    def test_isMessageNeeded_mode_failing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_failing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"failing\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_exception_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", SUCCESS)\n\n    def test_isMessageNeeded_mode_exception_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", FAILURE)\n\n    def test_isMessageNeeded_mode_exception_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"exception\", WARNINGS)\n\n    def test_isMessageNeeded_mode_exception_for_exception(self):\n        return self.run_simple_test_sends_message_for_mode(\"exception\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_warnings_for_success(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", SUCCESS)\n\n    def test_isMessageNeeded_mode_warnings_for_failure(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", FAILURE)\n\n    def test_isMessageNeeded_mode_warnings_for_warnings(self):\n        return self.run_simple_test_sends_message_for_mode(\"warnings\", WARNINGS)\n\n    def test_isMessageNeeded_mode_warnings_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"warnings\", EXCEPTION)\n\n    def test_isMessageNeeded_mode_passing_for_success(self):\n        return self.run_simple_test_sends_message_for_mode(\"passing\", SUCCESS)\n\n    def test_isMessageNeeded_mode_passing_for_failure(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", FAILURE)\n\n    def test_isMessageNeeded_mode_passing_for_warnings(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", WARNINGS)\n\n    def test_isMessageNeeded_mode_passing_for_exception(self):\n        return self.run_simple_test_ignores_message_for_mode(\"passing\", EXCEPTION)\n\n    @defer.inlineCallbacks\n    def run_sends_message_for_problems(self, mode, results1, results2, shouldSend=True):\n        _, builds = yield self.setupBuildResults(results2)\n\n        mn = yield self.setupNotifier(mode=mode)\n\n        build = builds[0]\n        if results1 is not None:\n            build['prev_build'] = copy.deepcopy(builds[0])\n            build['prev_build']['results'] = results1\n        else:\n            build['prev_build'] = None\n        self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend)\n\n    def test_isMessageNeeded_mode_problem_sends_on_problem(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_problem_ignores_successful_build(self):\n        return self.run_sends_message_for_problems(\"problem\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_problem_ignores_two_failed_builds_in_sequence(self):\n        return self.run_sends_message_for_problems(\"problem\", FAILURE, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_sends_on_change(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, SUCCESS, True)\n\n    def test_isMessageNeeded_mode_change_sends_on_failure(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, FAILURE, True)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build(self):\n        return self.run_sends_message_for_problems(\"change\", None, FAILURE, False)\n\n    def test_isMessageNeeded_mode_change_ignores_first_build2(self):\n        return self.run_sends_message_for_problems(\"change\", None, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence(self):\n        return self.run_sends_message_for_problems(\"change\", SUCCESS, SUCCESS, False)\n\n    def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence2(self):\n        return self.run_sends_message_for_problems(\"change\", FAILURE, FAILURE, False)\n\n    @defer.inlineCallbacks\n    def setupBuildMessage(self, **mnKwargs):\n\n        _, builds = yield self.setupBuildResults(SUCCESS)\n\n        mn = yield self.setupNotifier(**mnKwargs)\n\n        mn.messageFormatter = Mock(spec=mn.messageFormatter)\n        mn.messageFormatter.formatMessageForBuildResults.return_value = {\"body\": \"body\", \"type\": \"text\",\n                                                                         \"subject\": \"subject\"}\n        yield mn.buildMessage(\"mybldr\", builds, SUCCESS)\n        return (mn, builds)\n\n    @defer.inlineCallbacks\n    def test_buildMessage_nominal(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",))\n\n        build = builds[0]\n        mn.messageFormatter.formatMessageForBuildResults.assert_called_with(\n            ('change',), 'mybldr', build['buildset'], build, self.master,\n            None, ['me@foo'])\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        mn.sendMessage.assert_called_with('body', 'subject', 'text', 'mybldr', SUCCESS, builds,\n                                          ['me@foo'], [], [])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addLogs(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addLogs=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the logs are send\n        self.assertEqual(mn.sendMessage.call_args[0][8][0]['logid'], 60)\n        # make sure the log has content\n        self.assertIn(\n            \"log with\", mn.sendMessage.call_args[0][8][0]['content']['content'])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatch(self):\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure the patch are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7],\n                         [{'author': 'him@foo',\n                           'body': b'hello, world',\n                           'comment': 'foo',\n                           'level': 3,\n                           'patchid': 99,\n                           'subdir': '\/foo'}])\n\n    @defer.inlineCallbacks\n    def test_buildMessage_addPatchNoPatch(self):\n        SourceStamp = fakedb.SourceStamp\n\n        class NoPatchSourcestamp(SourceStamp):\n\n            def __init__(self, id, patchid):\n                super().__init__(id=id)\n        self.patch(fakedb, 'SourceStamp', NoPatchSourcestamp)\n        mn, builds = yield self.setupBuildMessage(mode=(\"change\",), addPatch=True)\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        # make sure no patches are sent\n        self.assertEqual(mn.sendMessage.call_args[0][7], [])\n\n    @defer.inlineCallbacks\n    def test_workerMissingSendMessage(self):\n\n        mn = yield self.setupNotifier(watchedWorkers=['myworker'])\n\n        yield mn.workerMissing('worker.98.complete',\n                               dict(name='myworker',\n                                    notify=[\"workeradmin@example.org\"],\n                                    workerinfo=dict(admin=\"myadmin\"),\n                                    last_connection=\"yesterday\"))\n\n        self.assertEqual(mn.sendMessage.call_count, 1)\n        text = mn.sendMessage.call_args[0][0]\n        recipients = mn.sendMessage.call_args[1]['users']\n        self.assertEqual(recipients, ['workeradmin@example.org'])\n        self.assertIn(\n            b\"has noticed that the worker named myworker went away\", text)\n",
        "1409": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python with Scikit-Learn to classify data into 3 categories.\n\n### Input:\n\n\n### Output:\n#import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.svm import SVC\n\n#load the dataset\ndataset = datasets.load_iris()\n\n#split the data into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(dataset.data, dataset.target, \n                                                    test_size=0.2, random_state=42)\n\n#build the model\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\n#predict for test data\ny_pred = svc.predict(x_test)\n\n#evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)\n\nprint(classification_report(y_test, y_pred))",
        "1410": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the power of a given number n using an iterative approach.\n\n### Input:\n\n\n### Output:\ndef power_iterative(n, exponent):\n  # First, set an initial product value\n  product = 1\n  # Iterate up to the desired power\n  for _ in range(exponent):\n    product *= n\n  # Return the product\n  return product\n\npower = power_iterative(3, 4)\nprint(power)",
        "1411": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which can classify whether an animal is a bird or a mammal.\n\n### Input:\nclassify(\"hummingbird\")\n\n### Output:\ndef classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\"",
        "1412": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to detect and remove a given pattern in a string.\n\n### Input:\nString: \u201cI am learning Python programming\u201d\nPattern: \u201clearning\u201d\n\n### Output:\n\"\"\"\nDevelop a program to detect and remove a given pattern in a string\n\ndef remove_pattern(string, pattern):\n    # Replace the pattern in the string with an empty string \n    modified_string = string.replace(pattern, '')\n    \n    return modified_string\n\nif __name__ == '__main__':\n    string = 'I am learning Python programming'\n    pattern = 'learning'\n    print(remove_pattern(string, pattern))\n\"\"\"",
        "1413": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print the armstrong numbers between 0 and 1000.\n\n### Input:\n\n\n### Output:\nfor num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x \/\/ 10\n        s += d ** order\n    if num == s:\n        print(num)",
        "1414": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that validates input to confirm that it is of the correct type.\n\n### Input:\nuserInput: a product quantity\n\n### Output:\nclass InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True",
        "1415": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to get all the comments from a specific Reddit post.\n\n### Input:\nhttps:\/\/www.reddit.com\/r\/ProgrammerHumor\/comments\/hfpmoo\/people_ask_me_why_i_learn_so_many_programming\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the URL\nurl = \"https:\/\/www.reddit.com\/r\/ProgrammerHumor\/comments\/hfpmoo\/people_ask_me_why_i_learn_so_many_programming\/\"\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all the comments from the page\ncomments = []\nfor comment in soup.find_all(\"div\", class_=\"md\"):\n    comments.append(comment.text)\n\n# Print all the comments\nfor comment in comments:\n    print(comment)",
        "1416": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.\n\n### Input:\n\n\n### Output:\ndef sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 \/ 3) * math.pi * (radius ** 3)",
        "1417": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python for outputting the numbers in the range of 5-15.\n\n### Input:\n\n\n### Output:\nfor i in range(5, 16): \n    print (i)",
        "1418": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given list using bubble sort in Python.\n\n### Input:\nlist = [3,5,2,4,7,5]\n\n### Output:\ndef bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list))",
        "1419": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Person, with first name and last name attributes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name)",
        "1420": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings and returns the Levenshtein distance between them.\n\n### Input:\n\n\n### Output:\ndef levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n# base cases \n    for i in range(m + 1): \n        dp[i][0] = i \n    for j in range(n + 1): \n        dp[0][j] = j\n  \n    # fill the dp table \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],        # Insert \n                                   dp[i - 1][j],        # Remove \n                                   dp[i - 1][j - 1])    # Replace \n  \n    return dp[m][n]",
        "1421": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to remove duplicates from an array of integers while preserving the order of the elements.\n\n### Input:\n[1, 8, 10, 4, 1, 8, 8]\n\n### Output:\ndef remove_duplicates(arr):\n  seen = set()\n  result = []\n\n  for item in arr:\n    if item not in seen:\n      seen.add(item)\n      result.append(item)\n\n  return result\n\narr = [1, 8, 10, 4, 1, 8, 8]\n\nprint(remove_duplicates(arr)) # Output: [1, 8, 10, 4]",
        "1422": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI script in Python that can play Tic-Tac-Toe.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nboard = np.array([[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]])\n\ndef is_valid(x, y):\n return 0 <= x < 3 and 0 <= y < 3\n\ndef make_move(player, x, y):\n if is_valid(x, y):\n board[x, y] = player\n else:\n raise ValueError(\"Invalid move\")\n\ndef check_victory():\n xs, ys = np.where(board == 0)\n # Check vertically\n vertical = board == board.T\n # Check diagonally\n diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all()\n \n if any(vertical) or diagonal:\n return True\n \n return False\n\ndef ai_make_move(player):\n xs, ys = np.where(board == 0)\n for x, y in zip(xs, ys):\n board[x, y] = player\n if check_victory():\n return\n board[x, y] = 0 # Reset\n\nif __name__ == \"__main__\":\n # Set the board state\n board = np.array([[1, 0, -1],\n [-1, 1, 0],\n [0, 0, 1]])\n\n # AI player\n ai_make_move(-1)\n print(board)",
        "1423": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age).\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Create an empty list\ndata = []\n\n# Generate 20 names and ages\nfor i in range(20):\n name = 'Name ' + str(i)\n age = random.randint(18, 70)\n\n# Append the data to the list\n data.append([name, age])\n\n# Print out the list\nprint(data)\n\n# [['Name 0', 64],\n#  ['Name 1', 18],\n#  ['Name 2', 24],\n#  ['Name 3', 36],\n#  ['Name 4', 34],\n#  ['Name 5', 28],\n#  ['Name 6', 56],\n#  ['Name 7', 42],\n#  ['Name 8', 68],\n#  ['Name 9', 24],\n#  ['Name 10', 50],\n#  ['Name 11', 20],\n#  ['Name 12', 54],\n#  ['Name 13', 40],\n#  ['Name 14', 61],\n#  ['Name 15', 40],\n#  ['Name 16', 41],\n#  ['Name 17', 38],\n#  ['Name 18', 56],\n#  ['Name 19', 41]]",
        "1424": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping script using Python and the requests library to extract a list of titles from a webpage.\n\n### Input:\nhttps:\/\/www.example.com\/titles\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the url\nurl = \"https:\/\/www.example.com\/titles\"\n\n# send the request and get the response\nresponse = requests.get(url)\n\n# parse the response\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# find all the <h3> elements in the page\nh3_elements = soup.find_all('h3')\n\n# extract the titles from the <h3> elements and print them\nfor element in h3_elements:\n print(element.text)",
        "1425": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to fetch the titles and URLs of trending news stories from BBC news.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# fetch the html from the BBC news website\nhtml = requests.get('https:\/\/www.bbc.co.uk\/news').content\nsoup = BeautifulSoup(html, 'html.parser')\n\n# extract the titles and URLs of the trending news stories\ntrending_stories = soup.find('div', {'aria-label': 'Top stories'})\nstories = trending_stories.find_all('div', class_='gs-container gs-u-ph-')\n\ntitles = [s.find('h3', {'class': 'gs-u-mb-0'}).get_text() for s in stories]\nurls = [s.find('a')['href'] for s in stories]\n\n# print the titles and URLs\nfor title, url in zip(titles, urls):\n print(title, url)",
        "1426": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print a sorted list of the given input string.\n\n### Input:\nInput string: computer\n\n### Output:\ndef sortString(inputString): \n  \n    words = inputString.split() \n    words.sort() \n  \n    for i in words: \n        print(i) \n          \nsortString(inputString)",
        "1427": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python to create a random binary tree.\n\n### Input:\n\n\n### Output:\ndef create_tree(max_depth):\n    depth = random.randint(0, max_depth)\n    if depth == 0:\n        return random.choice([0, 1])\n    else:\n        left = create_tree(depth - 1)\n        right = create_tree(depth - 1)\n        return (left, right)",
        "1428": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python that takes a list of numbers and returns its average.\n\n### Input:\n[7, 8, 10, 4, 11]\n\n### Output:\ndef avg(list): \n\tsum = 0\n\tfor item in list:\n\t\tsum += item \n\treturn sum \/ len(list) \n\nlist1 = [7, 8, 10, 4, 11]\nresult = avg(list1) \n  \nprint(\"Average of all items: \", result)",
        "1429": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.\n\n### Input:\ns1 = \"hello\", s2 = \"lloeh\"\n\n### Output:\ndef is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)",
        "1430": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code snippet in Python to eliminate all the negative numbers in a given list.\n\n### Input:\nlist = [-3, -2, 0, 4, 5]\n\n### Output:\nlist = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list)",
        "1431": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm in Python that can sort this specific array.\n\n### Input:\n\n\n### Output:\ndef sortArray(list): \n    for i in range(len(list)-1):\n        minIndex = i \n        for j in range(i+1, len(list)):\n            if list[minIndex] > list[j]:\n                minIndex = j \n        list[i], list[minIndex] = list[minIndex], list[i]\n    return list",
        "1432": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of 100,000 random numbers from 0 to 1 using NumPy in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nrandom_numbers = np.random.uniform(0, 1, 100000)",
        "1433": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compute a similarity score between two input strings.\n\n### Input:\n\n\n### Output:\ndef get_similarity_score(str1, str2):\n    str1_words = str1.split()\n    str2_words = str2.split()\n\n    common_words = set(str1_words).intersection(str2_words)\n    num_common_words = len(common_words)\n\n    score = num_common_words \/ len(str1_words) * len(str2_words)\n    return score",
        "1434": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to return the square root of a number.\n\n### Input:\nA number: 49\n\n### Output:\nimport math\n\ndef square_root(num):\n    return math.sqrt(num)\n\nnum = 49\nprint(\"Square root of \", num, \" is: \", square_root(num))",
        "1435": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following pseudocode in Python\n\n### Input:\nFunction Multiply(a, b) \n  Product = 0 \n  i = 0 \n  While i < b \n    Product = Product + a \n    i = i + 1 \n  End While \n  Return Product\n\n### Output:\ndef Multiply(a, b):\n    product = 0\n    i = 0 \n    while i < b:\n        product = product + a\n        i = i + 1\n    return product",
        "1436": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the data type of each variable in the given Python snippet.\n\n### Input:\nx = 5\nname = \"John\"\ny = [1, 2, 3]\n\n### Output:\nx is an integer, name is a string, and y is a list.",
        "1437": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the purpose of Python decorators?\n\n### Input:\n\n\n### Output:\nThe purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called.",
        "1438": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a Naive Bayes classifier in Python with the given dataset.\n\n### Input:\nDataset: basketball_players.csv\n\n### Output:\n# Load libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Load dataset\ndata = pd.read_csv('basketball_players.csv')\n\n# Split into features and target\nX = data.drop(columns=['position'])\ny = data['position'] \n\n# Split into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Fit Naive Bayes classifier\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)",
        "1439": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for training a K-Means algorithm on the following dataset.\n\n### Input:\nDataset: \n[2, 34], \n[3, 4], \n[7, 24], \n[5, 14], \n[8, 22], \n[10, 21]\n\n### Output:\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# generate dataset\nX = np.array([[2, 34], [3, 4], [7, 24], [5, 14], [8, 22], [10, 21]])\n\n# train K-Means\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\n# assign clusters\nclusters = kmeans.predict(X)\n\n# print data with respective clusters\nprint(\"Data | Cluster\")\nfor i in range(len(X)):\n print(X[i], \"|\", clusters[i])",
        "1440": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that reads in a file of the CODA format and performs some basic statistical computations. The script requires an index.txt and chain.txt file, which it will automatically identify for internal use. The script can output mean, standard deviation, and confidence interval (default 95%), and can plot a histogram or trace plot. To use the script, run \"coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\" in the terminal, where xx is the desired percentile, variable, or number of bins.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/env python\n\n# Written by Vasaant S\/O Krishnan Friday, 19 May 2017\n# Run without arguments for instructions.\n\nimport sys\nusrFile = sys.argv[1:]\n\nif len(usrFile) == 0:\n    print \"\"\n    print \"# Script to read in file of the CODA format and perform some basic\"\n    print \"# statistical computations. An index.txt and chain.txt file must be\"\n    print \"# provided and the script will automatically identify them for internal\"\n    print \"# use. Options are:\"\n    print \"\"\n    print \"# print = Outputs mean, std and confidence interval (default 95%).\"\n    print \"# var   = Specify your required variable for hist, trace.\"\n    print \"# per   = Specify your required confidence interval (requires var=).\"\n    print \"# hist  = Plot histogram (requires var=).\"\n    print \"# bins  = Choose bin size (default bins=100)\"\n    print \"# trace = Trace plot (requires var=).\"\n    print \"\"\n    print \" -->$ coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\"\n    print \"\"\n    exit()\n\nimport re\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n\n\n#=====================================================================\n#   Define variables.\n#\nints         = '\\s+?([+-]?\\d+)'              # Integers for regex\n#floats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?)'    # Floats or int\nfloats       = '\\s+?([+-]?\\d+(?:\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?'    # Floats or int or scientific\ncodaFiles    = []                            # CODAindex and CODAchain files\nindexFileFnd = False                         # CODAindex file identified?\nchainFileFnd = False                         # CODAchain file identified?\nindexCodes   = {}                            # Dictionary containing CODAindex info.\n# chainIndx    = []                          # Indexes\/Column 1 of CODAchain.txt file\nchainData    = []                            #    Data\/Column 2 of CODAchain.txt file\npercentile   = 95.0                          # Default percentile\nbins         = 100                           # Default number of bins for histogram\nreqIndxCode  = ''                            # User requested varible for hist, trace\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine which are the CODAindex and CODAchain files and\n#   automatically assign them to their respective variables.\n#\nfor i in usrFile:\n    codaSearch = re.search('.txt',i)\n    if codaSearch:\n        codaFiles.append(i)\n\nif len(codaFiles) == 2:    # Assuming 1 index and 1 chain file\n    for j in codaFiles:\n        with open(j,'r') as chkTyp:    # Run a quick check on the first line only\n            firstLine = chkTyp.readline()\n            codaIndex = re.search('^(\\S+)' + ints   + ints + '$', firstLine)\n            codaChain = re.search('^(\\d+)' + floats +        '$', firstLine)\n            if codaIndex:\n                indexFile = j\n                indexFileFnd = True\n            if codaChain:\n                chainFile = j\n                chainFileFnd = True\nelse:\n    print \"Insfficient files of CODA*.txt format.\"\n    print \"Check your input files.\"\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine percentile\n#\nfor i in usrFile:\n    userPercentile = re.search('per=([+-]?\\d+(?:\\.\\d+)?)',i)\n    if userPercentile:\n        percentile = abs(float(userPercentile.group(1)))\n        usrFile.append('print')\n#=====================================================================\n\n\n\n#=====================================================================\n#   Determine user requested variable from CODAIndex file\n#\nfor i in usrFile:\n    userReqCodaIndx = re.search('var=(\\S+)',i)\n    if userReqCodaIndx:\n        reqIndxCode = str(userReqCodaIndx.group(1))\n\n#   ... same for number of bins:\nfor i in usrFile:\n    userReqBins = re.search('bins=(\\d+)',i)\n    if userReqBins:\n        bins = int(userReqBins.group(1))\n        usrFile.append('hist')\n#=====================================================================\n\n\n\nif indexFileFnd and chainFileFnd:\n    #=====================================================================\n    #    Harvest index file for the variable list and corresponding\n    #    [start,stop] coords:\n    #\n    for line in open(indexFile, 'r'):\n        reqIndex = re.search('^(\\S+)' + ints   + ints + '$', line)\n        if reqIndex:\n            key   =  str(reqIndex.group(1))\n            value = [int(reqIndex.group(2)), int(reqIndex.group(3))]\n        indexCodes[key] = value\n\n    maxElement = max(indexCodes, key = indexCodes.get)    # The key with the largest value\n    chainLen   = max(indexCodes[maxElement])              # The largest value (expected amt. of data)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    I thought that initialising the arrays before filling them\n    #    would be faster. It is not.\n    #\n    # chainIndx = np.zeros(chainLen)\n    # chainData = np.zeros(chainLen)\n    # with open(chainFile, 'r') as harvestVals:\n    #     for i in range(chainLen):\n    #         currLine = harvestVals.readline()\n    #         reqChain = re.search('^(\\d+)' + floats + '$', currLine)\n    #         if reqChain:\n    #             chainIndx[i] =   int(reqChain.group(1))\n    #             chainData[i] = float(reqChain.group(2))\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Harvest chain file\n    #\n    for line in open(chainFile, 'r'):\n        reqChain = re.search('^(\\d+)' + floats + '$', line)\n        if reqChain:\n            #chainIndx.append(  int(reqChain.group(1)))\n            chainData.append(float(reqChain.group(2)))\n    #chainIndx = np.array(chainIndx)\n    chainData = np.array(chainData)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Basic check on the harvest by comparing harvested vs. expected\n    #    no. of data.\n    #\n    if len(chainData) != chainLen:\n        print \"    Warning! \"\n        print \"    %10d lines expected  from %s.\"%(chainLen,indexFile)\n        print \"    %10d lines harvested from %s.\"%(len(chainData),chainFile)\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Output some basic statistics to the terminal.\n    #\n    if 'print' in usrFile:\n        print \"\\n%20s %10s %10s\"%(\"mean\",\"std\",str(percentile)+\"%\")\n        for i in indexCodes:\n            strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n            stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n\n            npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])    # Numpy sorts internally\n            minPer    = npPerTile[0]\n            maxPer    = npPerTile[1]\n            print \"%8s  %10.4f %10.4f %6d, %6.3f\"%(i, chainData[strtIndx:stopIndx].mean(),\n                                                      chainData[strtIndx:stopIndx].std(),\n                                                     minPer,maxPer\n                                                  )\n        print \"\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Trace plot that gives the variable value as a function of its\n    #    rank (or position in the chain)\n    #\n    if 'trace' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    traceRank = range(stopIndx-strtIndx)\n                    plt.plot(traceRank,chainData[strtIndx:stopIndx])\n                    plt.xlabel('Rank')\n                    plt.ylabel('Variable: '+i)\n                    plt.show()\n        else:\n            print \"No variable selected by user for trace plot.\"\n    #=====================================================================\n\n\n\n    #=====================================================================\n    #    Histogram\n    #\n    if 'hist' in usrFile:\n        if reqIndxCode != '':\n            for i in indexCodes:\n                if reqIndxCode == i:\n                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1\n                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end\n                    [n, bins, patches] = plt.hist(chainData[strtIndx:stopIndx],\n                                                  bins    =  bins,\n                                                  normed  =  True,\n                                                  histtype= 'step'\n                                                  )\n\n                    y = mlab.normpdf(bins, chainData[strtIndx:stopIndx].mean(),\n                                           chainData[strtIndx:stopIndx].std()\n                                     )\n\n                    npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])\n                    maxPer    = npPerTile[1]\n                    plt.axvline(x=maxPer, color='k', label=str(percentile)+'%',ls=':',lw=0.8)\n\n                    plt.plot(bins,y,'--')\n                    plt.ylabel('Variable: '+i)\n                    plt.legend(frameon=False)\n                    plt.show()\n        else:\n            print \"No variable selected by user for histogram.\"\n    #=====================================================================\n",
        "1441": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to join two given strings if they have compatible characters.\n\n### Input:\nstring1 = \"Python\"\nstring2 = \"programming\"\n\n### Output:\njoined_string = 'Programmingpython'",
        "1442": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that scrambles the input string by randomly switching the positions of the characters.\n\n### Input:\nHello World\n\n### Output:\nimport random\n\ninput_string = \"Hello World\"\n\n#Split the given string\nstring_list = list(input_string)\nrandom.shuffle(string_list)\n\n#Form the scrambled string\nscrambled_string = \"\".join(string_list) \n\nprint(\"Scrambled string:\",scrambled_string)",
        "1443": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following sentence into Python code: \"Print 'Welcome' 5 times\".\n\n### Input:\n\n\n### Output:\nfor i in range(5):\n  print(\"Welcome\")",
        "1444": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.\n\n### Input:\n\n\n### Output:\nfrom spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}')",
        "1445": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of all permutations of the letters in a given word using Python.\n\n### Input:\nword = 'ABC'\n\n### Output:\nimport itertools\n\nset_ABC = set(list('ABC'))\nall_permutations = list(itertools.permutations(set_ABC))\n\n# print all obtained permutations\n{print(''.join(words)) for words in all_permutations}",
        "1446": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the standard deviation of given data.\n\n### Input:\n[20, 10, 15, 25]\n\n### Output:\nimport statistics\ndef calculate_std_dev(arr):\n\treturn statistics.stdev(arr)",
        "1447": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate 10 random passwords. The script should prompt the user to enter a length for the passwords.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length=8):\n password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))\n return password\n\nlength = int(input('Please enter a length for the passwords (minimum 8 characters): '))\nfor i in range(10):\n print(generate_password(length))",
        "1448": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if two strings are isomorphic.\n\n### Input:\ns1 = \"foo\", s2 = \"app\"\n\n### Output:\ndef is_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    for i, char in enumerate(s1):\n        if char in s1_dict:\n            if s1_dict[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True",
        "1449": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most frequent value in the given array in Python.\n\n### Input:\n[2, 3, 4, 2, 5, 3]\n\n### Output:\nfrom collections import Counter\n\ndef most_frequent(input_list):\n    count = Counter(input_list)\n    max_freq = max(count.values())\n    for num, freq in count.items():\n        if freq == max_freq:\n            most_frequent_element = num\n    return most_frequent_element\n\nresult = most_frequent([2, 3, 4, 2, 5, 3])\nprint(result)",
        "1450": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.\n\n### Input:\nword = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')\n\n### Output:\nword = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')",
        "1451": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an integer number as an input and calculates the sum of the even factors of that number.\n\n### Input:\n50\n\n### Output:\ndef get_sum_even_factors(n):\n    sum = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n# Test \ninput_num = 50\nprint(get_sum_even_factors(input_num)) # returns 196",
        "1452": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for the game \"Rock, Paper, Scissors\". The program should have basic functions to play the game (i.e. prompting user input, random computer choice etc.) and handle the game logic of determining the winner.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Game Options\nROCK = 'rock'\nPAPER = 'paper'\nSCISSORS = 'scissors'\ngame_options = [ROCK, PAPER, SCISSORS]\n\n# Game logic which determines the winner\ndef find_winner(player_option, computer_option):\nif player_option == computer_option:\n return 'draw'\n\nif player_option == ROCK:\n if computer_option == PAPER:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == PAPER:\n if computer_option == SCISSORS:\n  return 'computer'\n else:\n  return 'player'\n\nif player_option == SCISSORS:\n if computer_option == ROCK:\n  return 'computer'\n else:\n  return 'player'\n\n# Main game loop\nwhile True:\n# Get user input\nplayer_option = input('Enter Rock, Paper, or Scissors: ').lower()\n\n# Check to make sure input is valid\nif player_option in game_options:\n\n# Get computer's option\ncomputer_option = random.choice(game_options)\n\n# Print out computer's option\nprint(f'Computer chose {computer_option}')\n\n# Determine the winner\nwinner = find_winner(player_option, computer_option)\n\n# Print out the winner\nif winner == 'computer':\n print('Computer won!')\nelif winner == 'player':\n print('Congratulations, you won!')\nelse:\n print('It was a draw!')\n\n# Check if player wants to play another game\nplay_again = input('Do you want to play again? [y\/n] ')\nif play_again == 'n':\n break\n\nelse:\n print('Please enter a valid option.')",
        "1453": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to display the total number of odd numbers between a given range\n\n### Input:\n1 and 8\n\n### Output:\ndef odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count",
        "1454": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to print the number of elements in an array\n\n### Input:\narr = [1, 2, 3, 4]\n\n### Output:\narr = [1, 2, 3, 4]\n\nprint(len(arr))",
        "1455": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to print out binary numbers between 1 and N.\n\n### Input:\n3\n\n### Output:\ndef print_binary(n):\n if n == 0:\n  return\n \n print_binary(n-1)\n print(bin(n))\n \nprint_binary(3)\n \n# Output: \n# 0b1\n# 0b10\n# 0b11",
        "1456": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to delete duplicates from a list.\n\n### Input:\n[1,1,3,4,4,5]\n\n### Output:\ndef remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])",
        "1457": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to predict customer churn using the given dataset.\n\n### Input:\nThe given dataset contains customers demographic information and their past month usage records.\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# read dataset\ndataset = pd.read_csv('customer_churn.csv')\n\n# separate features(X) and labels (y)\ny = dataset.churn\nX = dataset.drop('churn', axis=1)\n\n# split dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# create and train the model\nmodel = LogisticRegression(solver='liblinear').fit(X_train, y_train)\n\n# predict using the model\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)",
        "1458": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake a string and output a list of all the words comprising the string\n\n### Input:\nString: Python is a programming language.\n\n### Output:\n[\u2018Python\u2019, \u2018is\u2019, \u2018a\u2019, \u2018programming\u2019, \u2018language\u2019]",
        "1459": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI agent in Python that learns to play Tetris and maximizes its score.\n\n### Input:\nNot applicable\n\n### Output:\nimport gym\nimport numpy as np\n\nfrom stable_baselines.common.policies import MlpPolicy\nfrom stable_baselines.common.vec_env import DummyVecEnv\nfrom stable_baselines import PPO2\n\n# Training hyperparameters\nn_timesteps = 500000\n\n# Create the environment\nenv = gym.make('Tetris-v0')\nenv = DummyVecEnv([lambda: env])\n\n# Create the agent\nmodel = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)\n\n# Train the agent\nmodel.learn(total_timesteps=n_timesteps)\n\n# Test the agent\nenv.reset()\nstate, done = env.reset(), False\ntotal_reward = 0\n\nwhile not done:\n    action, _states = model.predict(state)\n    state, reward, done, info = env.step(action)\n    total_reward += reward # accumulate the reward\n\nprint('Total Reward: ', total_reward)",
        "1460": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python for computing the area of a triangle.\n\n### Input:\n\n\n### Output:\ndef area_triangle(base, height):\n    return (base * height) \/ 2",
        "1461": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the probability of an event happening given a set of probability data.\n\n### Input:\nprobability_data = [0.4, 0.6, 0.2, 0.9]\nevent = \"A\"\n\n### Output:\n# define the function\ndef calculate_probability(probability_data, event):\n # define the probability of the event\n probability = 0\n\n # iterate over each probability in the data\n for p in probability_data:\n # check if the event matches\n if event == p:\n # add the probability to the sum\n probability += p\n\n # return the calculated probability\n return probability\n\n# the input\nprobability_data = [0.4, 0.6, 0.2, 0.9]\nevent = \"A\"\n\n# call the function\nprobability = calculate_probability(probability_data, event)\n\n# print the result\nprint(f\"The probability of event {event} happening is {probability}\")",
        "1462": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Deep Neural Network in Python that classifies if a credit card transaction is fraudulent or not.\n\n### Input:\nNot applicable\n\n### Output:\n# Import the necessary packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\n\n# Create the neural network\ndef build_model(input_dim):\n    model = Sequential()\n    model.add(Dense(64,input_dim=input_dim, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(2, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001),\n    metrics=['accuracy'])\n    return model\n\n# Load and prepare the data\nX = np.load(\"x_data.npy\")\ny = np.load(\"y_data.npy\")\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Initialize the model and train it\ninput_dim = X_train.shape[1]\nmodel = KerasClassifier(build_fn=lambda: build_model(input_dim))\nmodel.fit(X_train, y_train, epochs=22, batch_size=32, verbose=1)\n\n# Evaluate the model accuracy\naccuracy = model.score(X_test, y_test)\nprint(\"Accuracy: \", accuracy)\n##\n\n6. Instruction: Create a react app for a small business website. The app should include an About Us page, a Contact Us page, and pages for each of the services offered by the business.\n\n6. Input:\nNot applicable\n\n6. Output:\nimport React from 'react';\nimport {\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom';\n\nimport '.\/App.css';\nimport '.\/AboutUs.css';\nimport '.\/ContactUs.css';\nimport '.\/Services.css';\n\nimport AboutUs from '.\/AboutUs.js';\nimport ContactUs from '.\/ContactUs.js';\nimport Services from '.\/Services.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Business Name<\/h1>\n        <nav>\n          <Link to=\"\/\">Home<\/Link>\n          <Link to=\"\/about-us\">About Us<\/Link>\n          <Link to=\"\/contact-us\">Contact Us<\/Link>\n        <\/nav>\n      <\/header>\n      <Switch>\n        <Route path=\"\/\" exact>\n          <Services \/>\n        <\/Route>\n        <Route path=\"\/about-us\">\n          <AboutUs \/>\n        <\/Route>\n        <Route path=\"\/contact-us\">\n          <ContactUs \/>\n        <\/Route>\n      <\/Switch>\n    <\/div>\n  );\n}\n\nexport default App;",
        "1463": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for finding the longest common subsequence between two strings.\n\n### Input:\n\"AGGTAB\", \"GXTXAYB\"\n\n### Output:\ndef lcs(a, b): \n    lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)] \n    \n    # row 0 and column 0 are initialized to 0 already \n    for i, x in enumerate(a): \n        for j, y in enumerate(b): \n            if x == y: \n                lengths[i+1][j+1] = lengths[i][j] + 1\n            else: \n                lengths[i+1][j+1] = \\\n                    max(lengths[i+1][j], lengths[i][j+1]) \n  \n    # read the substring out from the matrix \n    result = \"\" \n    x, y = len(a), len(b) \n    while x != 0 and y != 0: \n        if lengths[x][y] == lengths[x-1][y]: \n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]: \n            y -= 1\n        else: \n            assert a[x-1] == b[y-1] \n            result = a[x-1] + result \n            x -= 1\n            y -= 1\n              \n    return result",
        "1464": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for detecting spam emails.\n\n### Input:\n\n\n### Output:\ndef detect_spam(email):\n  \"\"\"This function uses a combination of keyword matching, regex pattern matching \n  and machine learning algorithms to detect spam emails.\"\"\"\n  \n  # Keyword matching\n  spam_keywords = [\"unsubscribe\", \"offer\", \"discount\", \"special\"]\n  for keyword in spam_keywords:\n    if keyword in email:\n      return 1\n  \n  # Regex pattern matching\n  spam_pattern = r\"\\d{5}-\\d{5}-\\d{5}-\\d{5}\"\n  matches = re.search(spam_pattern, email)\n  if matches:\n    return 1\n  \n  # Machine learning\n  # Train a machine learning model and predict whether or not the given email is a spam\n  \n  return 0",
        "1465": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that generates random passwords with characters, numbers, and special characters.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n  password_length = 12\n  char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)\n  random.shuffle(char_list)\n  return ''.join(char_list[:password_length])\n\nprint(generate_password())",
        "1466": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that checks two given strings to see if they are anagrams of each other.\n\n### Input:\n\n\n### Output:\ndef is_anagram(s1, s2):\n    # Sort the strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # If sorted strings are equal \n    return s1 == s2 \n  \n# Driver code \ns1 = \"listen\"\ns2 = \"silent\"\nif (is_anagram(s1, s2)): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings aren't anagrams.\")",
        "1467": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to reverse a string with a lower time complexity.\n\n### Input:\nstring = \"Hello World!\"\n\n### Output:\ndef reverse_string(string): \n    return string[::-1] \n    \n# Time Complexity: O(n)\n# Space Complexity: O(1)",
        "1468": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python web scraper so that it only scrapes text between two HTML tags, and excludes text before or after those tags.\n\n### Input:\n`<h1>This is a title<\/h1>Some text before the tags<p>This should be scraped<\/p>Some text after the tags`\n\n### Output:\nimport re\n\ndef scrape_tags(text):\n regex = r\"<h1>(.*?)<\/h1>(.*?)<p>(.*?)<\/p>\"\n result = re.findall(regex, text)\n\n if result:\n return result[0][2]\n else:\n return None\n\ntext = '<h1>This is a title<\/h1>Some text before the tags<p>This should be scraped<\/p>Some text after the tags'\nprint(scrape_tags(text)) # This should be scraped",
        "1469": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for a Hangman game.\n\n### Input:\n\n\n### Output:\n\"\"\"\nHangman Game in Python\n\"\"\"\n \nimport random\n \ndef get_word(): \n\twords = [\"television\", \"hydrogen\", \"graduate\", \"programming\", \"python\", \"puppy\", \"application\"] \n\treturn random.choice(words) \n \ndef play(word): \n\tword_completion = \"_\" * len(word) \n\tguessed = False\n\tguessed_letters = [] \n\tguessed_words = [] \n\ttries = 6\n\tprint(\"Let's play Hangman!\") \n\tprint(display_hangman(tries)) \n\tprint(word_completion) \n\tprint(\"\\n\")\n\t\n\twhile not guessed and tries > 0: \n\t\tguess = input(\"Please guess a letter or word: \").lower() \n\t\tif len(guess) == 1 and guess.isalpha(): \n\t\t\tif guess in guessed_letters: \n\t\t\t\tprint(\"You already guessed the letter\", guess) \n\t\t\telif guess not in word: \n\t\t\t\tprint(guess, \"is not in the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_letters.append(guess) \n\t\t\telse: \n\t\t\t\tprint(\"Good job,\", guess, \"is in the word!\") \n\t\t\t\tguessed_letters.append(guess) \n\t\t\t\tword_as_list = list(word_completion) \n\t\t\t\tindices = [i for i, letter in enumerate(word) \n\t\t\t\t\t\t\tif letter == guess] \n\t\t\t\tfor index in indices: \n\t\t\t\t\tword_as_list[index] = guess \n\t\t\t\tword_completion = \"\".join(word_as_list) \n\t\t\t\tif \"_\" not in word_completion: \n\t\t\t\t\tguessed = True\n\t\telif len(guess) == len(word) and guess.isalpha(): \n\t\t\tif guess in guessed_words: \n\t\t\t\tprint(\"You already guessed the word\", guess) \n\t\t\telif guess != word: \n\t\t\t\tprint(guess, \"is not the word.\") \n\t\t\t\ttries -= 1\n\t\t\t\tguessed_words.append(guess) \n\t\t\telse: \n\t\t\t\tguessed = True\n\t\t\t\tword_completion = word \n\t\telse: \n\t\t\tprint(\"Not a valid guess.\") \n\t\t\t\n\t\tprint(display_hangman(tries)) \n\t\tprint(word_completion) \n\t\tprint(\"\\n\")\n \n\tif guessed: \n\t\tprint(\"Congrats, you guessed the word! You win!\")\n\telse: \n\t\tprint(\"Sorry, you ran out of tries. The word was \" + word + \". Maybe next time!\") \n\ndef display_hangman(tries): \n\tstages = [ \n\t\t\t\t\"  =========\\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |        \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |     | \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/| \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\",\n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |        \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |    \/  \\n  |        \\n  |        \\n  |        \\n__|__\", \n\t\t\t\t\"  =========\\n  |     O \\n  |    \/|\\\\ \\n  |    \/ \\\\ \\n  |        \\n  |        \\n  |        \\n__|__\"] \n\treturn stages[tries] \n \n \ndef main(): \n\tword = get_word() \n\tplay(word) \n\twhile input(\"Play Again? (Y\/N) \").upper() == \"Y\": \n\t\tword = get_word() \n\t\tplay(word) \n \nif __name__ == \"__main__\":\n\tmain()",
        "1470": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function for converting a series of hex values into a decimal integer in Python.\n\n### Input:\nhexvals = \"7a 0d 72\"\n\n### Output:\ndef convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal)",
        "1471": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program to run more efficiently.\n\n### Input:\nimport random\n\ndef find_max(lst):\n max_val = 0\n \n for i in range(len(lst)):\n   for j in range(len(lst)-1):\n     if lst[i] > lst[j] and lst[i] > max_val:\n       max_val = lst[i]\n       \n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer)\n\n### Output:\nimport random\n\ndef find_max(lst):\n max_val = max(lst)\n\n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer)",
        "1472": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program that takes in two strings and prints the one with the longer length.\n\n### Input:\nstring1:'Inception', string2: 'Interstellar'\n\n### Output:\nstring1 = 'Inception'\nstring2 = 'Interstellar'\n\nif len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2)",
        "1473": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to sort a list of words by their length.\n\n### Input:\nlst = ['bar','bird','cat']\n\n### Output:\nlst = sorted(lst, key=len)",
        "1474": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to sort a dictionary in descending order by its values\n\n### Input:\nd = {\"a\": 23, \"b\": 70, \"c\": 10}\n\n### Output:\nsorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True))\nprint(sorted_d)",
        "1475": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of 50 random numbers between 1 and 100 in Python.\n\n### Input:\n\n\n### Output:\nimport random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list)",
        "1476": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to connect to a PostgreSQL database.\n\n### Input:\n\n\n### Output:\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor()",
        "1477": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python with 3 hidden layers of size 50, 40 and 30 respectively.\n\n### Input:\nNot applicable\n\n### Output:\n# Define Neural Network\nmodel = tf.keras.Sequential([\n    # First Hidden Layer \n    tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim),\n    # Second Hidden Layer \n    tf.keras.layers.Dense(40, activation='relu'),\n    # Third Hidden Layer \n    tf.keras.layers.Dense(30, activation='relu'),\n    # Output Layer \n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])",
        "1478": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Car that has attributes for make, model and year.\n\n### Input:\n\n\n### Output:\nclass Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year\n\n  def get_make(self):\n    return self.make\n  \n  def get_model(self):\n    return self.model\n  \n  def get_year(self):\n    return self.year",
        "1479": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two given strings and checks if the first is a substring of the second one.\n\n### Input:\nstring_1 = 'cat'\nstring_2 = 'the cats meow'\n\n### Output:\ndef is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False",
        "1480": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers in an array, write a Python program to find the sum of the elements of the array.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum_elements(arr):\n result = 0\n for i in arr:\n result += i\n return result\n\nprint(sum_elements([1,2,3,4,5]))",
        "1481": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to generate a random letter from A to Z.\n\n### Input:\n\n\n### Output:\nimport random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)",
        "1482": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit a given text string and capitalize the first letter of every word.\n\n### Input:\nhello world.\n\n### Output:\ndef capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)",
        "1483": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to get the intersection of two given arrays.\n\n### Input:\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\n### Output:\ndef intersection_arr(arr1, arr2):\n    # create an empty list for storing the elements\n    result = []\n    \n    for element in arr1:\n        if element in arr2: \n            result.append(element)\n    \n    return result\n\na = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nintersect = intersection_arr(a, b)\nprint(intersect)",
        "1484": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to return the media according to the following criteria:\n\n### Input:\nGiven a list of numbers [1, 4, 7, 8, 10, 15, 21],\n\n### Output:\ndef get_median(num_list):\n    sorted_list = sorted(num_list)\n    length = len(sorted_list)\n    if (length % 2 == 0):\n        median = (sorted_list[length\/\/2] + sorted_list[length\/\/2 -1])\/2.0\n    else:\n        median = sorted_list[length\/\/2]\n    return median",
        "1485": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST API in Python for an employee database with fields for name, salary, and experience. The API should include CRUD operations to create, read, update, and delete entries.\n\n### Input:\n[{\n\"name\": \"John Doe\",\n\"salary\": 10000,\n\"experience\": 3\n},\n{\n\"name\": \"Alice Smith\",\n\"salary\": 12000,\n\"experience\": 4\n}]\n\n### Output:\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(name)\napi = Api(app)\n \nemployees = [\n {\n \"name\": \"John Doe\",\n \"salary\": 10000,\n \"experience\": 3\n },\n {\n \"name\": \"Alice Smith\",\n \"salary\": 12000,\n \"experience\": 4\n }\n]\n \nclass Employee(Resource):\n def get(self, name):\n for employee in employees:\n if(name == employee[\"name\"]):\n return employee, 200\n return \"Employee not found\", 404\n \n def post(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n return \"Employee with name {} already exists\".format(name), 400\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef put(self, name):\n parser = reqparse.RequestParser()\n parser.add_argument(\"salary\")\n parser.add_argument(\"experience\")\n args = parser.parse_args()\n \n for employee in employees:\n if(name == employee[\"name\"]):\n employee[\"salary\"] = args[\"salary\"]\n employee[\"experience\"] = args[\"experience\"]\n return employee, 200\n \n employee = {\n \"name\": name,\n \"salary\": args[\"salary\"],\n \"experience\": args[\"experience\"]\n }\n employees.append(employee)\n return employee, 201\n\ndef delete(self, name):\n global employees\n employees = [employee for employee in employees if employee[\"name\"] != name]\n return \"{} is deleted.\".format(name), 200\n \napi.add_resource(Employee, \"\/employee\/<string:name>\")\n \napp.run(debug=True)",
        "1486": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to convert a string to uppercase.\n\n### Input:\nhello world\n\n### Output:\ndef stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr)",
        "1487": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning algorithm in Python for predicting stock prices using historical data.\n\n### Input:\nHistorical Stock Price Data for AAPL (Apple stock) from Jan 1, 2010 to Dec 31, 2020\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the stock data\ndata = pd.read_csv('aapl_stock_data.csv')\n\n# Create the features and labels datasets\nX = data[['High', 'Low', 'Close', 'Volume']]\ny = data['Adj Close']\n\n# Create a linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Make predictions\npredictions = reg.predict(X)\n\n# Calculate the error between predictions and actual values\nerror = np.mean(np.abs((y - predictions) \/ y) * 100)\n\n# Print out the results\nprint('Mean Absolute Percent Error: {:.2f}%'.format(error))",
        "1488": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class named \u201cCar\u201d that has 3 fields: top_speed, make, and color.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, top_speed, make, color):\n        self.top_speed = top_speed\n        self.make = make\n        self.color = color",
        "1489": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in a string and returns a list of words from the string in reverse order.\n\n### Input:\nThe quick brown fox.\n\n### Output:\ndef reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))",
        "1490": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that can predict the number of sales of a product based on the features provided.\n\n### Input:\nFeatures: date, time, price, category, discount\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Start by loading in the data\ndata = pd.read_csv('sales_data.csv')\n\n# Extract the inputs and the targets\ninputs = data[['date', 'time', 'price', 'category', 'discount']]\ntargets = data.sales\n\n# Create the model and train it\nmodel = LinearRegression()\nmodel.fit(inputs, targets)\n\n# Make predictions\npredictions = model.predict(inputs)",
        "1491": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code that takes a string as a parameter and returns the number of different words present in that string.\n\n### Input:\nstring=\"The quick brown fox jumped over the lazy dog\"\n\n### Output:\ndef word_count(string):\n    words = string.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    output = word_count(\"The quick brown fox jumped over the lazy dog\")\n    print(output)",
        "1492": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random string of length 8 containing only alphabets and numbers.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits\n    string = ''.join(random.choice(chars) for _ in range(8))\n    return string",
        "1493": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.\n\n### Input:\n[6, 3, 10, 4]\n\n### Output:\ndef multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers",
        "1494": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes a list of words in variable \u2018words\u2019 and creates a new variable with the length of each word.\n\n### Input:\nwords = [\"Hello\", \"World\", \"I\", \"Love\", \"You\"]\n\n### Output:\nword_lengths = [len(word) for word in words]\n\nprint(word_lengths) # [5, 5, 1, 4, 3]",
        "1495": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named `Movie` that contains two parameters `title` and `rating`.\n\n### Input:\n\n\n### Output:\nclass Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating",
        "1496": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a loop in Python that iterates over a given list of strings and prints each string.\n\n### Input:\n[\"apple\", \"banana\", \"cherry\"]\n\n### Output:\nstrings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string)",
        "1497": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to classify the given list of numbers into two subgroups (positives and negatives).\n\n### Input:\nlist = [4, 5, -2, -7, 5]\n\n### Output:\ndef classify_numbers(list):\n    '''This function will classify the list of numbers into positives and negatives'''\n\n    positives = []\n    negatives = []\n\n    for n in list:\n        if n >= 0:\n            positives.append(n)\n        else:\n            negatives.append(n)\n\n    return positives, negatives",
        "1498": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.\n\n### Input:\narr = [1, 9, 3, 8, 4]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr)\n  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [1, 9, 3, 8, 4]\n\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])",
        "1499": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate all prime numbers between 1 and 10.\n\n### Input:\n\n\n### Output:\n# Python program to generate all prime numbers between two given numbers \n  \ndef generate_prime_numbers(low,high): \n    if low == 1: \n        low += 1\n    for num in range(low,high + 1):    # Iterating over the range \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                print(num) \n  \nlow = 1\nhigh = 10\n\ngenerate_prime_numbers(low,high)",
        "1500": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that improves a given string by replacing words with their synonyms.\n\n### Input:\n\"this is an example sentence\"\n\n### Output:\nimport nltk\n\ndef synonyms_words(text):\n    text_tokens = nltk.word_tokenize(text)\n    replacement_words = []\n    \n    for token in text_tokens:\n        synonyms = nltk.wordnet.synsets(token)\n        if synonyms:\n            replacement_words.append(synonyms[0].name().split('.')[0])\n        else:\n            replacement_words.append(token)\n\n    return ' '.join(replacement_words)\n\ntext = \"this is an example sentence\"\nprint(synonyms_words(text))",
        "1501": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to print the current time in the given timezone (America\/Chicago).\n\n### Input:\n\n\n### Output:\nimport datetime\nimport pytz\n \ndef print_time(timezone):\n    tz = pytz.timezone(timezone)\n    current_time = datetime.datetime.now(tz)\n    print(\"Current time in {tz}: {time}\".format(tz=timezone, time=str(current_time)))\n \nif __name__ == '__main__':\n    print_time('America\/Chicago')",
        "1502": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Natural Language Processing (NLP) system using Python to analyze sentences.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\n\ndef process_sentence(sentence):\n \"\"\"\n A basic NLP pipeline for analyzing a given sentence.\n \"\"\"\n tokens = nltk.word_tokenize(sentence) # Tokenize the sentence\n tagged = nltk.pos_tag(tokens) # Assign part-of-speech labels\n parsed = nltk.parse.stanford.StanfordParser().raw_parse(sentence) # Parse the sentence\n return tokens, tagged, parsed",
        "1503": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for representing a simple counter.\n\n### Input:\n\n\n### Output:\nclass Counter:\n    def __init__(self):\n        self.counter = 0\n\n    def increase(self):\n        self.counter += 1\n\n    def decrease(self):\n        self.counter -= 1\n\n    def getter(self):\n        return self.counter",
        "1504": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python package that contains a collection of functions for finding the average value of an array.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef average(array):\n '''\n Finds the average of all numbers in an array\n\n Args:\n array (list): List of numbers\n\n Returns:\n float: The average of all values in the array\n '''\n\n total = 0\n for value in array:\n total += value\n\n return total \/ len(array)",
        "1505": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the root of a quadratic equation.\n\n### Input:\ngiven equation is ax2+bx+c=0\n\n### Output:\ndef roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))\/(2*a)\n    root2 = (-b - math.sqrt(disc))\/(2*a)\n    return root1, root2",
        "1506": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python application using Flask and SQLAlchemy that returns a JSON object containing the results of a database query. The application should accept a query parameter that determines what data is returned.\n\n### Input:\nSELECT * FROM users WHERE age > 18\n\n### Output:\nimport json\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\n@app.route('\/query', methods=['GET'])\ndef get_data():\n query = request.args['query']\n users = db.session.execute(query)\n users_list = [dict(user) for user in users]\n return json.dumps({ \"users\": users_list })\n\nif name == 'main':\n app.run(debug=True)",
        "1507": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that implements functions for classes and objects.\n\n### Input:\n\n\n### Output:\n# Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area())",
        "1508": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop in Python to iterate through a list and print all elements that have an even length.\n\n### Input:\nList: [\"apples\", \"oranges\", \"bananas\", \"pineapples\"]\n\n### Output:\nlist_x = [\"apples\", \"oranges\", \"bananas\", \"pineapples\"]\nfor item in list_x:\n if(len(item) % 2 == 0):\n  print(item)\n#output: apples, oranges, pineapples",
        "1509": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Classical Python to extract the hostname from a given URL\n\n### Input:\nurl = \"http:\/\/www.example.com\/index.html\"\n\n### Output:\ndef get_hostname(url):\n    hostname = url.split(\"\/\")[2]\n    return hostname\n\nhostname  = get_hostname(url)\nprint(hostname)",
        "1510": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate anagrams from a given string.\n\n### Input:\n\n\n### Output:\ndef generate_anagrams(s):\n    if len(s) == 1:\n        return s\n\n    anagrams = [] \n    for i, letter in enumerate(s):\n        for anagram in generate_anagrams(s[:i] + s[i+1:]):\n            anagrams.append(letter + anagram)\n    return anagrams",
        "1511": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to find the longest increasing subsequence from an array\n\n### Input:\n[3, 4, -1, 0, 6, 2, 3]\n\n### Output:\ndef lis(arr):\n    n = len(arr)\n \n    # Initialize LIS values for all indices \n    lis = [1]*n\n \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1 : \n                lis[i] = lis[j]+1 \n \n    # Initialize maximum to 0 to get the maximum of all LIS \n    maximum = 0\n \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n \n    return maximum \n \narr = [3,4,-1,0,6,2,3]\nprint('Length of LIS is', lis(arr))",
        "1512": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that stores information about three sides of a triangle.\n\n### Input:\n\n\n### Output:\nclass Triangle:\ndef __init__(self, side1, side2, side3):\n self.side1 = side1\n self.side2 = side2\n self.side3 = side3\n \ndef get_area(self):\n s = (self.side1 + self.side2 + self.side3) \/ 2\n return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n \ndef is_equilateral(self):\n return self.side1 == self.side2 == self.side3",
        "1513": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to store the details of mobile phone\n\n### Input:\n\n\n### Output:\nclass MobilePhone:\n    def __init__(self, brand, model, year, display_size):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.display_size = display_size",
        "1514": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string as an argument and replace all vowels with underscores.\n\n### Input:\nteststring\n\n### Output:\ndef replace_vowels(input_string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    output_string = ''\n    for s in input_string:\n        if s in vowels:\n            output_string += '_'\n        else:\n            output_string += s\n    return output_string\n\nresult = replace_vowels('teststring')\nprint(result)",
        "1515": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the nearest 3 squares to a given number.\n\n### Input:\n30\n\n### Output:\ndef findNearestSquares(n):\n  nearestSquareList = []\n  i = 1\n  # Find all the nearest squares\n  while i * i <= n:\n    nearestSquareList.append(i * i)\n    i += 1\n  \n  # Find the nearest 3 squares\n  nearest3Squares = nearestSquareList[-3:]\n  \n  return nearest3Squares\n\nnearest3Squares = findNearestSquares(30)\nprint(nearest3Squares)\n\n# Output:\n# [25, 28, 29]",
        "1516": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read the contents of a JSON document and store it in a list.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\nwith open('data.json', 'r') as f:\n data = json.load(f)\n\ndata_list = []\n\nfor item in data:\n data_list.append(item)\n\nprint(data_list)",
        "1517": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string.\n\n### Input:\n\"Hello world hello world\"\n\n### Output:\ndef word_frequency(string):\n    word_freq = {} \n  \n    for word in string.split(): \n        if word in word_freq: \n            word_freq[word] += 1\n        else: \n            word_freq[word] = 1\n  \n    return word_freq \n      \nstring = \"Hello world hello world\"\nprint(word_frequency(string))",
        "1518": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to remove all occurrences of the character 'x' from a list\n\n### Input:\nNo Input\n\n### Output:\ndef remove_x(lst):\n    \"\"\"\n    Function to remove all occurrences of a character 'x' from a list.\n\n    Args:\n        lst (list): The list to process.\n\n    Returns:\n        A list with all occurrences of the character 'x' removed.\n    \"\"\"\n    \n    return [item for item in lst if item != 'x']",
        "1519": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that encapsulates a Queue data structure.\n\n### Input:\n\n\n### Output:\nclass Queue:\n  def __init__(self):\n    self.items = []\n\n  def is_empty(self):\n    return self.items == []\n\n  def enqueue(self, item):\n    self.items.insert(0, item)\n  \n  def dequeue(self):\n    return self.items.pop()\n\n  def size(self):\n    return len(self.items)",
        "1520": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a neural network model in Python to recognize a hand-written number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a neural network model in Python to recognize a hand-written number\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n#load the mnist dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n#discretize the images by flattening them\nx_train = x_train.reshape(-1, 784) \nx_test = x_test.reshape(-1, 784)\n\n#normalize the pixel values from 0 to 1\nx_train = x_train\/255.0\nx_test = x_test\/255.0\n\n#create a neural network model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#compile and train the model\nmodel.compile(\n    loss='sparse_categorical_crossentropy', metrics=['accuracy']\n)\nmodel.fit(x_train, y_train,  epochs = 10)\n\n#evaluate the model\nmodel.evaluate(x_test, y_test)",
        "1521": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements linear regression.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass LinearRegression:\n def __init__(self):\n self.weights = None\n self.bias = None\n\n def fit(self, X, y):\n\"\"\"\nFit the linear regression model to the given data\n\nParameters\n----------\nX : array-like, shape (n_samples, n_features)\nTraining data\n\ny : array-like, shape (n_samples,)\nTarget values\n\nReturns\n-------\nself : returns an instance of self.\n\"\"\"\n \n # Compute the weights and bias\n X = np.array(X)\n y = np.array(y)\n weights = np.dot(np.linalg.pinv(X), y)\n bias = y - np.dot(X, weights)\n \n self.weights = weights\n self.bias = bias\n \n def predict(self, x):\n\"\"\"\nPredict the output value for a given input\n\nParameters\n----------\nx : array-like, shape (n_samples, n_features)\nInput data\n\nReturns\n-------\ny : array-like, shape (n_samples,)\nPredicted output value\n\"\"\"\n \n # Return the predictions using the weights and bias\n predictions = np.dot(np.array(x), self.weights) + self.bias\n return predictions",
        "1522": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert the following expression in infix notation to postfix notation\n\n### Input:\nA * B + C - D\n\n### Output:\ndef infix_to_postfix(expression):\n    # Separate the expression by tokens\n    tokens = expression.split(' ')\n    \n    # Create an operator stack\n    op_stack = []\n    \n    # Create a list for the postfix output\n    postfix_output = []\n    \n    # Iterate through the tokens\n    for token in tokens:\n        # If token is an operator\n        if token == '+' or token == '-' or token == '*':\n            # Append it to the operator stack\n            op_stack.append(token)\n        # If token is an operand\n        else:\n            # Append it to the postfix output\n            postfix_output.append(token)\n            # Pop operands from the stack while not empty\n            while op_stack:\n                # Append it to the postfix output\n                postfix_output.append(op_stack.pop())\n                \n    # Return the postfix output as a string\n    return ' '.join(postfix_output)",
        "1523": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you create a 3D Array in python?\n\n### Input:\n\n\n### Output:\nA 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:\n\narray_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],\n                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],\n                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])",
        "1524": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a game controller class that stores and updates game state in Python\n\n### Input:\n\n\n### Output:\nclass GameController:\n    def __init__(self):\n        self.state = {'lives': 3, 'score': 0, 'level': 1}\n    \n    def update_game_state(self, lives, score, level):\n        self.state['lives'] = lives\n        self.state['score'] = score\n        self.state['level'] = level\n\n    def get_game_state(self):\n        return self.state",
        "1525": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a python code to satisfy the following requirements:\n\n### Input:\nGiven two dictionaries d1 and d2, create another dictionary d3 containing the keys from both dictionaries.\n\n### Output:\ndef merge_dictionaries(d1, d2):\n    d3 = {}\n    \n    for key in d1:\n        d3[key] = d1[key]\n    for key in d2:\n        d3[key] = d2[key]\n        \n    return d3",
        "1526": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to break the given sentence into words.\n\n### Input:\nsentence = \"This is an example sentence.\"\n\n### Output:\ndef break_sentence(sentence):  \n    return sentence.split(\" \")",
        "1527": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.\n\n### Input:\n\n\n### Output:\nimport string \n\ndef is_pangram(sentence): \n   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   for char in alphabet: \n      if char not in sentence.lower(): \n         return False\n   return True",
        "1528": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper with Python to extract the hyperlinks from a given website.\n\n### Input:\n\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef get_hyperlinks(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    links = []\n    for a in soup.find_all('a', href=True):\n        links.append(a['href'])\n    return links",
        "1529": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to optimize a classifier model in Python.\n\n### Input:\n\n\n### Output:\n# Importing necessary libraries \nimport numpy as np \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n# Defining the function which takes the classifier object and optimizes it\ndef optimize_model(classifier, parameters):\n    # Create a GridSearchCV object, which will use 5-fold cross validation \n    clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5)\n\n    # Fit the model on the training data \n    clf.fit(X_train, y_train)\n\n    # Predict the values on the test dataset\n    y_pred = clf.predict(X_test)\n\n    # Calculate the accuracy score\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    # Print the accuracy\n    print('Accuracy: {:.2f}%'.format(accuracy*100)) \n\n    # Return the best parameters and the classifier\n    return clf.best_params_, clf",
        "1530": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.\n\n### Input:\nA list of integers [-2, 4, -1, 5, 6]\n\n### Output:\ndef max_subarray_sum(arr):\n    current_sum = 0\n    max_sum = 0\n\n    for x in arr:\n        current_sum += x\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\nprint(result)",
        "1531": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm to count substrings in Python.\n\n### Input:\nstring: abcdabcd\nsubstring: cd\n\n### Output:\ndef count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
        "1532": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python regex expression to match any telephone number that has 8-12 digits with area code.\n\n### Input:\n\n\n### Output:\n^\\(?\\d{3}\\)?\\s?\\-?\\d{8,12}$",
        "1533": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate and print a random list of size n.\n\n### Input:\n8\n\n### Output:\nimport random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list)",
        "1534": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python using the scikit-learn library for classifying emails as ham or spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)",
        "1535": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python using the BeautifulSoup library. This scraper should be able to extract information from a web page and store it in a list of dictionaries.\n\n### Input:\nHTML document of a web page\n<html>\n <head>\n  <title>Example Page<\/title>\n <\/head>\n <body>\n  <h1>Welcome to my page!<\/h1>\n  <p>Here is some information about me:<\/p>\n  <ul>\n   <li>Name: John Smith<\/li>\n   <li>Age: 38<\/li>\n  <\/ul>\n <\/body>\n<\/html>\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\nfor li in soup.find_all('li'):\n    data.append({\n        'name': li.text.split(\":\")[0],\n        'value': li.text.split(\":\")[1]\n    })\n\nprint(data)\n# Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}]",
        "1536": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the factorial of a given number in Python.\n\n### Input:\n4\n\n### Output:\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(4))",
        "1537": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.\n\n### Input:\n\n\n### Output:\ndef rotateNodes(root): \n    # if node has a left child \n    if root.left is not None: \n        # we rotate clockwise \n        newRoot = root.left \n        root.left = newRoot.right \n        newRoot.right = root \n        root = newRoot \n  \n    # if node has a right child \n    if root.right is not None: \n        # we rotate counter clockwise \n        newRoot = root.right \n        root.right = newRoot.left  \n        newRoot.left = root \n        root = newRoot \n\n    return root",
        "1538": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that automatically generates bar charts for given data\n\n### Input:\n[1, 2, 3, 6, 5, 4, 7]\n\n### Output:\nimport matplotlib.pyplot as plt \n \n# Data to plot\ndata = [1, 2, 3, 6, 5, 4, 7]\n \n# Create the graph object\nplt.bar(range(len(data)), data, align='center')\n \n# Label the graph\nplt.xticks(range(len(data)), range(1, len(data)+1))\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Bar Graph')\n \n# Display the graph\nplt.show()",
        "1539": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to filter out strings that contain numbers.\n\n### Input:\n[\"apple\",\"hello123\",\"hi12345\", \"good15\"]\n\n### Output:\ndef filter_numbers(strings): \n    return [s for s in strings if not any(c.isdigit() for c in s)]\n\nif __name__ == '__main__':\n    strings = [\"apple\",\"hello123\",\"hi12345\", \"good15\"]\n    print (filter_numbers(strings))",
        "1540": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to generate a password of size n\n\n### Input:\n6\n\n### Output:\nimport string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password",
        "1541": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string.\n\n### Input:\nString 1 = \"Hello World!\"\nString 2 = \"World\"\n\n### Output:\ndef contains(s1, s2):\n return s2 in s1\n\nstring1 = \"Hello World!\"\nstring2 = \"World\"\n\nprint(contains(string1, string2)) # True",
        "1542": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a customer's online orders.\n\n### Input:\norders = [\n {'item': 'Pizza', 'price': 12.00}, \n {'item': 'Chips', 'price': 3.50}, \n {'item': 'Coke', 'price': 2.50}\n]\n\n### Output:\ntotal_cost = 0\nfor order in orders: \n total_cost += order['price']\n\nprint('Total cost is', total_cost)",
        "1543": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the number of words with distinct letters in a given string\n\n### Input:\nstring = 'hello world'\n\n### Output:\ndef count_distinct_letters(string):\n   distinct_letters = set()\n   for word in string.split(' '):\n        distinct_letters.update(set(word))\n   return len(distinct_letters)\n\n# example\nstring = 'hello world'\nprint(count_distinct_letters(string)) # 6",
        "1544": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python for generating a random integer between two given numbers (inclusive).\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_integer(start, end):\n  return random.randint(start, end)",
        "1545": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program to count the frequencies of characters in a string.\n\n### Input:\nstring = \"String Counting\"\n\n### Output:\ndef countCharacters(string): \n    # Create dictionary to return  \n    # count of each character \n    str_dict = {} \n  \n    # Count frequency of each \n    # character of the string \n    for i in string: \n        if i in str_dict: \n            str_dict[i] += 1\n        else: \n            str_dict[i] = 1\n  \n    return str_dict \n\n# Driver code \nstring = \"String Counting\"\n\n# Print result \nprint(countCharacters(string))",
        "1546": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to test a condition\n\n### Input:\nTest whether a given number is greater than 5.\n\n### Output:\ndef test_gt_5(num):\n    return num > 5",
        "1547": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that represents a 3D Cube and initializes all side lengths to 10.\n\n### Input:\n\n\n### Output:\nclass Cube:\n    def __init__(self):\n        self.sideLengthA = 10\n        self.sideLengthB = 10\n        self.sideLengthC = 10",
        "1548": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python object literal from a dictionary.\n\n### Input:\nmy_dict = {'a':1, 'b':2, 'c':3}\n\n### Output:\nmy_obj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}",
        "1549": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following snippet of Python code as data wrangling, visualization, or machine learning.\n\n### Input:\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X, y)\n\n### Output:\nMachine learning.",
        "1550": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a sentence as an argument and returns the same sentence but with all the words reversed.\n\n### Input:\nsentence = \"This is a test sentence\"\n\n### Output:\ndef reverse_sentence(sentence):\n reversed_sentence = \" \".join(sentence.split()[::-1])\n return reversed_sentence\n\nprint(reverse_sentence(sentence))\n# Output: sentence test a is This",
        "1551": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that computes and prints the sum of the even numbers in a given list.\n\n### Input:\n[2, 3, 6, 7, 13, 14]\n\n### Output:\ndef get_even_sum(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nnums = [2, 3, 6, 7, 13, 14]  \neven_sum = get_even_sum(nums)\nprint(even_sum)",
        "1552": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web-scraper in Python that obtains the price and description of a product from a website.\n\n### Input:\nA link to the product page on a website.\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Website URL\nurl = 'LINK'\n \n# Make a request and get the HTML content\nr = requests.get(url) \nhtml_content = r.text\n\n# Parse the HTML content\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Price\nprice_tag = soup.find(class_='price')\nprice = price_tag.text\n\n# Description\ndescription_tag = soup.find(class_='product-description')\ndescription = description_tag.text\n\nprint('Price:', price)\nprint('Description:', description)",
        "1553": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that downloads a list of news articles. The script should take a URL as an input and produce a list of articles from that page. Each article should have the URL, title, author and publication date.\n\n### Input:\nhttps:\/\/www.nytimes.com\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL to scrape\nurl = \"https:\/\/www.nytimes.com\/\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# News Section\nnews_Section = soup.find(\"div\", class_=\"css-1qwxefa esl82me1\")\n# print(news_Section)\n\n# News Articles\narticles = news_Section.find_all(\"h2\", class_=\"e1xfvim30\")\n# print(articles)\n\n# Empty list to store all news articles\nnews_list = []\n\n# Loop over each article\nfor article in articles:\n    # Extract the title of the article\n    title = article.find(\"a\").text\n\n    # Extract the author of the article\n    author = article.find(\"span\", class_=\"css-1n7hynb\").text\n    \n    # Extract the date the article was published\n    date = article.find(\"time\").text\n    \n    # Extract the URL of the article\n    link = article.find(\"a\")[\"href\"]\n    \n    # Store all the information in one dictionary\n    news_dict = {\n        \"title\": title,\n        \"author\": author,\n        \"date\": date,\n        \"link\": link\n    }\n    \n    # Append the dictionary to the list\n    news_list.append(news_dict)\n\n# Print the list\nprint(news_list)",
        "1554": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search for a given item in a list of strings.\n\n### Input:\n[\"hello\", \"world\", \"foo\", \"bar\"], \"bar\"\n\n### Output:\ndef search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False",
        "1555": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to parse a given list of URLs and extract the titles of the web pages.\n\n### Input:\n[\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\n### Output:\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\nurls = [\n\"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\",\n\"https:\/\/wikipedia.org\/wiki\/Deep_learning\",\n\"https:\/\/www.wikipedia.org\/wiki\/Cat\"\n]\n\nfor url in urls:\n html = urllib.request.urlopen(url).read()\n soup = BeautifulSoup(html)\n title = soup.title.string\n print(title)",
        "1556": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find and print all pairs of numbers from a given array of integers whose sum is equal to a given number.\n\n### Input:\n[3, 4, 2, 8, 5, 6], the number should be 10\n\n### Output:\narray = [3, 4, 2, 8, 5, 6]\nsum = 10\n\ndef find_pair(array,sum):\n for i in range (len(array)-1):\n  for j in range (i+1, len(array)):\n   if array[i] + array[j] == sum:\n    print(\"Pair found:\",array[i], array[j])\n\nfind_pair(array,sum)",
        "1557": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will take an array of integers as input and output a reversed version of the array.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)",
        "1558": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following JavaScript program into a Python program that does the same things:\n\nlet a = 5;\nlet b = 10;\nlet c = a + b;\n\n### Input:\nNot applicable\n\n### Output:\na = 5\nb = 10\nc = a + b\nprint(c)",
        "1559": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script using a language of your choice to validate a field for a given email after taking the input from the user.\n\n### Input:\n\n\n### Output:\n# Python script to validate an email address\n# Ask the user to enter an email address\nemail = input(\"Please enter your email address:\")\n\n# Define a regular expression to validate the email address\nvalid_email_regex = r\"^[\\w-]+@([\\w-]+\\.)+[\\w]+$\"\n# Check whether the given email address is valid\nif re.search(valid_email_regex, email):\n    # If valid display success message\n    print(\"The entered email address is valid\")\nelse:\n    # Otherwise display an error message\n    print(\"The entered email address is invalid!\")",
        "1560": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to generate a frequency table from a given list\n\n### Input:\na list of elements\n\n### Output:\n# Python3 program to find frequency table \nfrom collections import Counter \ndef freq_table(arr):\n    return dict(Counter(arr))",
        "1561": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a 'closest to zero' algorithm in Python, which returns the closest to 0 value from a given array.\n\n### Input:\n[-2, 4, -5, - 1]\n\n### Output:\ndef closest_to_zero(arr):\n    closest_val = 0\n    closest_diff = float('inf')\n    \n    for val in arr:\n        if abs(val) < abs(closest_diff):\n            closest_diff = val\n            closest_val = val\n\n    return closest_val\n\narr1 = [-2, 4, -5, -1]\nresult = closest_to_zero(arr1)\nprint(result)",
        "1562": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create a Fibonacci sequence up to n-th number.\n\n### Input:\nn=10\n\n### Output:\ndef FibonacciGenerator(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n \n# Driver Program \nprint(FibonacciGenerator(10))",
        "1563": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following JSON object to Python dictionary.\n\n### Input:\n{\"name\": \"John\", \"age\": \"25\"}\n\n### Output:\nimport json\n\ndef convert_json_to_dict(json_object):\n    return json.loads(json_object)",
        "1564": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI game in Python for the user to guess a number between 1 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")",
        "1565": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement webscraping with Python to extract content from a given website.\n\n### Input:\nA website URL\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the website content\nlink = \"https:\/\/example.com\"\ndata = requests.get(link)\n\n# Parse the HTML content\nsoup = BeautifulSoup(data.text, 'html.parser')\n\n# Extract all the <p> tags\ncontent = soup.find_all('p')\n\n# Print the content\nfor item in content:\n    print(item.text)",
        "1566": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python lambda expression that takes two parameters, a and b, and returns the average of them.\n\n### Input:\n\n\n### Output:\navg = lambda a,b : (a + b)\/2",
        "1567": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number in Python between 10 and 20 excluding 14.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(10, 20)\nwhile (number == 14):\n  number = random.randint(10, 20)\n\nprint(number)",
        "1568": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that normalizes a list of numbers by subtracting their average and dividing by the standard deviation.\n\n### Input:\n[4,2,7,8,2]\n\n### Output:\ndef normalize(numbers):\n avg = sum(numbers) \/ len(numbers)\n variance = sum((x - avg) ** 2 for x in numbers) \/ len(numbers)\n stdev = variance ** 0.5\n return [(x - avg) \/ stdev for x in numbers]",
        "1569": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to extract data from the given dataset.\n\n### Input:\n[\n{ \n\"name\": \"John\", \n\"age\": 20, \n\"hobby\": \"soccer\"\n},\n{ \n\"name\": \"Sarah\", \n\"age\": 19, \n\"hobby\": \"dancing\" \n},\n{ \n\"name\": \"Dave\", \n\"age\": 21, \n\"hobby\": \"painting\" \n}\n]\n\n### Output:\ndef extract_data(dataset):\n    name_list = []\n    age_list = []\n    hobby_list = []\n    \n    for entry in dataset:\n        name_list.append(entry[\"name\"])\n        age_list.append(entry[\"age\"])\n        hobby_list.append(entry[\"hobby\"])\n    \n    return name_list, age_list, hobby_list",
        "1570": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a text generator in Python that can generate poem based on a given input.\n\n### Input:\n\n\n### Output:\ndef generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem",
        "1571": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python comparative sorting algorithm\n\n### Input:\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n### Output:\ndef sort(list):\n    \"\"\"\n    Implements a comparison sorting algorithm using Python.\n    Sorts the given list in ascending order.\n    \"\"\"\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nif __name__ == '__main__':\n    list = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(sort(list))",
        "1572": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python's BeautifulSoup to scrape a list of titles and their corresponding URLs from a web page.\n\n### Input:\nURL: https:\/\/www.example.com\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nurl = \"https:\/\/www.example.com\/\"\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all links in the page\ntitles_list = soup.find_all(\"a\")\ntitles_urls = [(title.text, title[\"href\"]) for title in titles_list]\n\n# Print all titles and their corresponding links\nfor title, url in titles_urls:\n    print(\"Title:\", title)\n    print(\"URL:\", url)\n    print()",
        "1573": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python program that compares two lists and finds common elements?\n\n### Input:\nlist1 = [3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]\n\n### Output:\nlist1 = [3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6]\n\ncommon_elements = set(list1) & set(list2)\nprint(list(common_elements)) \n# Output: [3, 4, 5, 6]",
        "1574": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a virtual chatbot in Python that can handle simple conversations.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport spacy\nimport nltk\n\n# load the English language model\nnlp = spacy.load('en_core_web_sm')\n\n# define some sample conversations\nconversations = [ \n       ['Hello', 'Hi there'], \n       ['How are you?', 'I am doing great!'], \n       ['Bye', 'Goodbye!'], \n]\n\n# define an answer generator\ndef answer(text):\n    doc = nlp(text)\n    tokens = [token.text for token in doc]\n    for conversation in conversations:\n        if conversation[0] in tokens:\n            return random.choice(conversation[1:])\n    return ''\n\n# create a loop to run the chatbot\nwhile True:\n    text = input('You: ')\n    response = answer(text)\n    print('Bot: ', response)\n    if response == 'Goodbye!':\n        break",
        "1575": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear.\n\n### Input:\njson_string = '{\"fruit\": [\"apple\", \"banana\", \"cherry\"], \"vegetable\": [\"carrot\", \"potato\", \"onion\"]}'\n\n### Output:\nimport json\n \ndef reformat_json(json_string):\n    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)",
        "1576": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to remove duplicate elements in a given list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr",
        "1577": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to remove duplicates from an array.\n\n### Input:\n[1, 2, 3, 3, 3, 4, 5, 6]\n\n### Output:\n\"\"\"\nRemove duplicates from an array\n\"\"\"\n\ndef remove_duplicates(arr):\n    # Create a set \n    seen = set()\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        if arr[i] not in seen:\n            seen.add(arr[i])\n            \n    return seen\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 3, 3, 4, 5, 6]\n    print(remove_duplicates(arr))",
        "1578": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse an XML document and extract the title and description for each item in the document.\n\n### Input:\nNot applicable\n\n### Output:\nimport xml.etree.ElementTree as ET\n \n# Read the XML file\ntree = ET.parse('items.xml')\n \n# Get the root element\nroot = tree.getroot()\n \n# Iterate over each item\nfor item in root.findall('item'):\n # Get the title\n title = item.find('title').text\n # Get the description\n description = item.find('description').text\n \n print('Title: ', title)\n print('Description: ', description)",
        "1579": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to simulate an automatic grocery store checkout machine.\n\n### Input:\n\n\n### Output:\nimport collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price)",
        "1580": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a set of functions to encrypt a string in Python using the Advanced Encryption Standard (AES) with a given key and initialization vector (IV).\n\n### Input:\nKey: \"2b7e151628aed2a6abf7158809cf4f3c\"; IV: \"000102030405060708090a0b0c0d0e0f\"\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\ndef encrypt_string(plain_text, key, iv):\n # convert strings to bytes\n plain_text_bytestring = bytes(plain_text, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # encrypt the message using the cipher object\n encrypted_string = cipher.encrypt(plain_text_bytestring)\n\n # base64 encode the encrypted message\n base64_encrypted_string = base64.b64encode(encrypted_string)\n\n # return the base64 encoded message\n return base64_encrypted_string.decode('utf-8')\n\ndef decrypt_string(base64_encrypted_string, key, iv):\n # convert strings to bytes\n base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # decode the base encoded message\n encrypted_string = base64.b64decode(base64_encrypted_string)\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # decrypt the message using the cipher object\n decrypted_string = cipher.decrypt(encrypted_string)\n\n # return the decrypted message in string format\n return decrypted_string.decode('utf-8')",
        "1581": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints all prime numbers up to a given number n.\n\n### Input:\nNot applicable\n\n### Output:\ndef prime_numbers(n):\n for i in range(2,n+1):\n prime = True\n for j in range(2,i):\n if i % j == 0:\n prime = False\n if prime:\n print(i)\n \nprime_numbers(10) # Output: 2, 3, 5, 7",
        "1582": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a set of numbers, write a Python program to find the maximum number after performing arithmetic operations on the digits of the set of numbers.\n\n### Input:\nnums = [12, 198, 16]\n\n### Output:\ndef find_max(nums):\n    max_num = 0\n    for num in nums:\n        str_num = str(num)\n        mul_res = 1\n        for digit in str_num:\n            mul_res *= int(digit)\n        max_num = max(max_num, mul_res)\n    return max_num",
        "1583": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to classify data\n\n### Input:\nClassify the given dataset [5, 10, 25, 11, 14, 20] into two categories - numbers below 15 and numbers above 15.\n\n### Output:\ndef classify_number_data(data):\n    numbers_below_15 = []\n    numbers_above_15 = []\n\n    for number in data:\n        if number <= 15:\n            numbers_below_15.append(number)\n        else:\n            numbers_above_15.append(number)\n    \n    return numbers_below_15, numbers_above_15",
        "1584": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the sum of 1 to n numbers.\n\n### Input:\nn = 10\n\n### Output:\ndef sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))",
        "1585": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a given list of strings, and returns a dictionary of all the words paired with how many times they appear in the list.\n\n### Input:\n['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\n\n### Output:\ndef word_count(text_list):\n    result = {}\n    for word in text_list:\n        if word in result.keys():\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\ntext_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']\ncounts = word_count(text_list)\nprint(counts)  # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}",
        "1586": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an array of strings and returns a new array of strings with all the vowels removed from each string.\n\n### Input:\n[\"hello\", \"world\", \"how\"]\n\n### Output:\ndef remove_vowels(strings):\n vowels = ['a', 'e', 'i', 'o', 'u']\n result = []\n for string in strings:\n result.append(''.join(c for c in string if c not in vowels))\n return result",
        "1587": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python web-crawler that takes a URL as input and returns the number of words on the page.\n\n### Input:\nurl = http:\/\/example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \ndef get_page_word_count(url):\n  r = requests.get(url)\n  soup = BeautifulSoup(r.content, 'html.parser')\n  words = soup.find_all(text=True)\n  count = 0 \n  for w in words:\n    count += len(w.split())\n  return count\n  \nurl = \"http:\/\/example.com\"\nword_count = get_page_word_count(url)\nprint(\"word count = \", word_count)",
        "1588": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert a string to an integer.\n\n### Input:\n\n\n### Output:\ndef string_to_int(string):\n    num = 0 \n    for char in string:\n        num = num * 10 + (ord(char) - ord('0')) \n    return num",
        "1589": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a given Python program to optimize the time complexity.\n\n### Input:\ndef get_maximum_item(arr):\n    maximum_number = float('-infinity')\n\n    for item in arr:\n        if item > maximum_number:\n            maximum_number = item\n\n    return maximum_number\n\n### Output:\ndef get_maximum_item(arr):\n    if len(arr) == 0:\n        return float('-infinity')\n    \n    maximum_number = arr[0]\n\n    for item in arr[1:]:\n        if item > maximum_number:\n            maximum_number = item \n            \n    return maximum_number",
        "1590": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimized Python program to sort the elements of an array in ascending order.\n\n### Input:\narr = [5, 3, 2, 4, 1]\n\n### Output:\ndef bubbleSort(arr): \n    n = len(arr) \n  \n     # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 3, 2, 4, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "1591": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to convert a list of words into a dictionary that details the frequencies of each word.\n\n### Input:\n['word', 'word', 'words', 'python']\n\n### Output:\nword_dict = {}\n\n# Count frequency of each word\nfor word in input_list:\n if word in word_dict.keys():\n word_dict[word] += 1\n else:\n word_dict[word] = 1\n\nprint(word_dict)\n# Output: {'word': 2, 'words': 1, 'python': 1}",
        "1592": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python code snippet that sorts a list of integers in ascending order. The code should be optimized for speed and should not use any libraries.\n\n### Input:\nunsorted_list = [2, 4, 1, 5, 3]\n\n### Output:\ndef bubble_sort(lst):\n n = len(lst)\n    \n for i in range(n-1):\n for j in range(0, n-i-1):\n if lst[j] > lst[j+1]:\n lst[j], lst[j+1] = lst[j], lst[j+1]\n \n sorted_list = bubble_sort(unsorted_list)",
        "1593": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the input, create a Python program which prints out all the words inside the input in alphabetical order.\n\n### Input:\nI like cats and playing the piano\n\n### Output:\ndef print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word)",
        "1594": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraping script in Python that extracts all the users and their reviews from a page on TripAdvisor.\n\n### Input:\nThe URL of the page: https:\/\/www.tripadvisor.com\/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html\n\n### Output:\nfrom lxml import html\nimport requests\n\nurl = \"https:\/\/www.tripadvisor.com\/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html\"\npage = requests.get(url)\n\ntree = html.fromstring(page.content)\nuser_names = tree.xpath('\/\/a[@class=\"scrname\"]\/text()')\nreview_texts = tree.xpath('\/\/p[@class=\"partial_entry\"]\/text()')\n\n# print user names and comments\nfor user_name, review_text in zip(user_names, review_texts):\n print(user_name, '\\n', review_text, '\\n\\n')",
        "1595": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to implement Merge Sort\n\n### Input:\n\n\n### Output:\ndef mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)\/\/2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1",
        "1596": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that takes in a string and returns the reverse of the string.\n\n### Input:\n\"Hello World\"\n\n### Output:\ndef reverse_string(str):\n    \"\"\" Reverses a given string \"\"\"\n\n    rev_str = \"\"\n\n    for c in str:\n        rev_str = c + rev_str\n\n    return rev_str\n\nstr = \"Hello World\"\nrev_str = reverse_string(str)\n\nprint(rev_str)",
        "1597": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python statement to select unique values from a list.\n\n### Input:\nseq = [2, 3, 5, 3, 4, 9, 5]\n\n### Output:\nresult = set(seq)\nprint(result)",
        "1598": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that checks if a number is prime or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    '''\n    Function to check if the given number is a prime\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True",
        "1599": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a stack with basic push and pop operations.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a stack with basic push and pop operations\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        return self.stack.pop()\n    def peek(self):\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0",
        "1600": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the DFT of a signal using the Fast Fourier Transform (FFT) algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n \n# Number of sample points\nN = 600\n \n# sample spacing\nT = 1.0 \/ 800.0\nx = np.linspace(0.0, N*T, N)\ny = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\nyf = np.fft.fft(y)\nxf = np.fft.fftfreq(N, T)\n \nimport matplotlib.pyplot as plt\nplt.plot(xf, 2.0\/N * np.abs(yf[0:N\/\/2]))\nplt.grid()\nplt.show()",
        "1601": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a string in camel case format to snake case format\n\n### Input:\nmyNameIsRyan\n\n### Output:\nmy_name_is_ryan",
        "1602": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s and t, write a Python program to check if t is a substring of s.\n\n### Input:\ns = \"abcabc\"\nt = \"abc\"\n\n### Output:\ndef is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False",
        "1603": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to recognize the sentence 'Good morning' in Python.\n\n### Input:\n\n\n### Output:\nimport speech_recognition as sr\n\nr = sr.Recognizer()\n\nwith sr.Microphone() as source:\n    print(\"Say something!\")\n    audio = r.listen(source)\n\ntry:\n    print(\"You said: \" + r.recognize_google(audio))\n    if r.recognize_google(audio) == 'Good morning':\n        print('correct')\n    else:\n        print('incorrect')\nexcept:\n    pass",
        "1604": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse an HTML table and extract its contents.\n\n### Input:\n<table>\n <tr>\n  <td>Name<\/td>\n  <td>Email<\/td>\n <\/tr>\n <tr>\n  <td>John Doe<\/td>\n  <td>john@example.com<\/td>\n <\/tr>\n<\/table>\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Fetch HTML page\nresponse = requests.get('http:\/\/example.com\/table.html')\n\n# Create BeautifulSoup object\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract table\ntable = soup.find('table')\n\n# Extract columns\ncolumns = [col.text for col in table.find_all('td')]\n\n# Extract rows\nrows = [row.find_all('td') for row in table.find_all('tr')]\n\n# Iterate over each row and store data in a dict\ndata = []\nfor row in rows:\n     data.append([col.text for col in row])\n\n# Print the data\nprint(data)\n# [['Name', 'Email'], ['John Doe', 'john@example.com']]",
        "1605": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function named `time_in_words` that takes in input two integer variables, `hours` and `mins`. The function should return a phrase string corresponding to the time indicated by the inputs. For example, if `hours` is equal to `5` and `mins` is equal to `12`, the return value of the function should be `five twelve`.\n\n### Input:\n\n\n### Output:\ndef time_in_words(hours, mins):\n    # Create phrase string corresponding to time\n    phrase = \"\"\n    if hours == 0:\n        phrase += \"twelve\"\n    elif hours == 1:\n        phrase += \"one\"\n    elif hours == 2:\n        phrase += \"two\"\n    elif hours == 3:\n        phrase += \"three\"\n    elif hours == 4:\n        phrase += \"four\"\n    elif hours == 5:\n        phrase += \"five\"\n    elif hours == 6:\n        phrase += \"six\"\n    elif hours == 7:\n        phrase += \"seven\"\n    elif hours == 8:\n        phrase += \"eight\"\n    elif hours == 9:\n        phrase += \"nine\"\n    elif hours == 10:\n        phrase += \"ten\"\n    elif hours == 11:\n        phrase += \"eleven\"\n    elif hours == 12:\n        phrase += \"twelve\"\n        \n    if mins == 0:\n        phrase += \" o'clock\"\n    elif mins == 1:\n        phrase += \" o'one\"\n    elif mins == 2:\n        phrase += \" o'two\"\n    elif mins == 3:\n        phrase += \" o'three\"\n    elif mins == 4:\n        phrase += \" o'four\"\n    elif mins == 5:\n        phrase += \" o'five\"\n    elif mins == 6:\n        phrase += \" o'six\"\n    elif mins == 7:\n        phrase += \" o'seven\"\n    elif mins == 8:\n        phrase += \" o'eight\"\n    elif mins == 9:\n        phrase += \" o'nine\"\n    elif mins == 10:\n        phrase += \" ten\"\n    elif mins == 11:\n        phrase += \" eleven\"\n    elif mins == 12:\n        phrase += \" twelve\"\n    elif mins == 13:\n        phrase += \" thirteen\"\n    elif mins == 14:\n        phrase += \" fourteen\"\n    elif mins == 15:\n        phrase += \" fifteen\"\n    elif mins == 16:\n        phrase += \" sixteen\"\n    elif mins == 17:\n        phrase += \" seventeen\"\n    elif mins == 18:\n        phrase += \" eighteen\"\n    elif mins == 19:\n        phrase += \" nineteen\"\n    elif mins == 20:\n        phrase += \" twenty\"\n    elif mins == 30:\n        phrase += \" thirty\"\n    else:\n        tens = int(mins\/10)\n        ones = mins - tens * 10\n        phrase += \" \" + str(tens) + \"ty\"\n        phrase += \" \" + str(ones)\n        \n    return phrase",
        "1606": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python that predicts whether a person is a relative of the speaker.\n\n### Input:\nNo input\n\n### Output:\ndef relative_prediction_model():\n    # Variables\n    features = [\"age\", \"gender\", \"race\", \"income\", \"location\", \"origin\", \"religion\", \"political views\", \"marital status\", \"education level\", \"occupation\"]\n    target = \"relation\"\n    # Defining model, training and predicting\n    model = MLPClassifier()\n    model.fit(features, target)\n    return model",
        "1607": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a URL and checks for broken links.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef check_for_broken_links(url):\n    # Request webpage\n    response = requests.get(url)\n\n    # Parse webpage for all links\n    links = response.html.find_all('a')\n    \n    # Check response code of each link\n    for link in links:\n        link_url = link['href']\n        response = requests.get(link_url)\n        if not response.ok:\n            # Link is broken\n            print('Broken link found:', link_url)\n\ncheck_for_broken_links('http:\/\/example.com')",
        "1608": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a solution using the given resources. The end result should present the user with a search bar to query a database.\n\n### Input:\nFrontend: React\nBackend: Python\nDatabase: MongoDB\n\n### Output:\nCreate a React application that sends user queries to a Python backend, which runs the queries against a MongoDB database. The backend will communicate results back to the React application. The React application will then display the results to the user.",
        "1609": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that classifies an incoming sentence as either positive or negative.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentence(text):\n    sid = SentimentIntensityAnalyzer()\n    ss = sid.polarity_scores(text)\n    if ss['compound'] >= 0.05:\n        return 'positive'\n    elif ss['compound'] <= -0.05:\n        return 'negative'\n    else:\n        return 'neutral'",
        "1610": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that create a pandas dataframe from a dictionary column.\n\n### Input:\ndata_dict = {'name': ['Bob', 'Alice', 'John'],\n             'age': [18, 20, 19]}\n\n### Output:\nimport pandas as pd\n\ndf = pd.DataFrame(data_dict)",
        "1611": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven some code, identify the type of the code written.\n\n### Input:\ndef foo():\n    x = 0\n    y = 1\n    z = 2\n    if x == y:\n        z += 1\n\n### Output:\nThe code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.",
        "1612": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that parses a JSON string and complete the following tasks: (1) convert the string to an object, (2) sort the object by keys, and (3) print the object in a formatted way.\n\n### Input:\n{\"a\": 3, \"b\": 1, \"c\": 2}\n\n### Output:\nimport json \n\n# Convert the string to an object \ndata = json.loads('{\"a\": 3, \"b\": 1, \"c\": 2}')\n\n# Sort the object by keys \nsorted_data = {k: data[k] for k in sorted(data.keys())}\n\n# Print the object in a formatted way \nprint(json.dumps(sorted_data, indent=4))",
        "1613": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Java program to Python program.\n\n### Input:\npublic class GFG\n{\n  static void printPattern(int n)\n  {\n    int i, j;\n    for (i=0; i<n; i++)\n    {\n  for (j=0; j<=i; j++ )\n    System.out.print(\"* \");\n \n   System.out.println();\n }\n }\n \n public static void main(String args[])\n {\n   int n = 5;\n   printPattern(n);\n }\n}\n\n### Output:\ndef printPattern(n):\n    for i in range(0,n):\n        for j in range(0, i + 1): \n            print(\"* \", end=\"\") \n        print(\"\\r\")\n \nn = 5\nprintPattern(n)",
        "1614": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for classifying the sentiment of a text. The program should take a string argument and predict whether the sentiment is positive or negative.\n\n### Input:\nNot applicable\n\n### Output:\nimport textblob\n\ndef predict_sentiment(text):\n    sentiment = textblob.TextBlob(text).sentiment\n    sentiment_value = sentiment.polarity\n    sentiment_class = 'positive' if sentiment_value >= 0 else 'negative'\n    return sentiment_value, sentiment_class\n\nsentiment_value, sentiment_class = predict_sentiment('This is a great article!')\nprint(sentiment_value, sentiment_class)\n# Output: 0.8 positive",
        "1615": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert a list of strings to a dictionary.\n\n### Input:\n\n\n### Output:\ndef list_to_dict(lst):\n    res = {}\n    for item in lst:\n        res[item] = True\n    return res",
        "1616": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list comprehension in Python for the following operation.\n\n### Input:\nmulitply each element in (1, 2, 3, 4) by 3\n\n### Output:\n[x * 3 for x in (1, 2, 3, 4)]",
        "1617": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find all the prime numbers between 0 and a given number.\n\n### Input:\n\n\n### Output:\ndef find_prime_numbers(num):\n    prime_numbers = []\n \n    # Traverse through all numbers \n    for i in range(2, num + 1):\n        count = 0\n        for j in range(2, i \/\/ 2 + 1):\n            if (i % j == 0):\n                count += 1\n                break\n \n        # If the number is prime then print it \n        if (count == 0 and i != 1):\n            prime_numbers.append(i)\n            \n    return prime_numbers",
        "1618": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script written in Python for accessing the Reddit API and formulating a Sentiment Analysis on a given subreddit.\n\n### Input:\nSubreddit to analyze: r\/AskReddit\n\n### Output:\nimport requests\nimport praw\nfrom textblob import TextBlob\n\n# Initializing the Reddit instance\nreddit = praw.Reddit(client_id=YOUR_CLIENT_ID,\n client_secret=YOUR_CLIENT_SECRET,\n user_agent='YOUR_USER_AGENT')\n\n# Inputting the subreddit to analyze\nsubreddit = reddit.subreddit(\"AskReddit\")\n\n# Getting the 50 top posts\nposts = subreddit.top(limit=50)\n\n# Iterating over the posts\nfor post in posts:\n # Fetching the post data\n post_data = requests.get(url=post.url).json()\n \n # Calculating the sentiment \n sentiment = TextBlob(post_data['data']['title']).sentiment\n \n # Printing the sentiment\n print('Post Title: {0} --> Sentiment: {1}'.format(post_data['data']['title'], sentiment))",
        "1619": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to write a Python program for computing the factorial of a number.\n\n### Input:\n5\n\n### Output:\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))",
        "1620": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of 10 random numbers in Python between 0 and 1 (including 0, excluding 1).\n\n### Input:\n\n\n### Output:\nimport random\nrand_nums = [None] * 10\nfor i in range(10):\n rand_nums[i] = random.random()\nprint(rand_nums)",
        "1621": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a programmatic interface in Python to search for domain names. The interface should include a text field to enter a query string and a \u201cSearch\u201d button to initiate the search.\n\n### Input:\nquery string = \"example\"\n\n### Output:\nfrom tldextract import extract\nimport requests\n\nquery_string = input(\"Enter a query string: \")\n\n# Get the top-level domain from the query string\ntld = extract(query_string).suffix\n\n# Construct the API request URL\nurl = \"https:\/\/api.\" + tld + \"\/v1\/domains\"\n\n# Send the request and store the response\nresponse = requests.get(url, params={\n \"q\": query_string,\n \"fields\": \"domain_name\",\n})\n\n# Extract all the domain names from the response data\ndata = response.json()\ndomain_names = [d[\"domain_name\"] for d in data[\"domains\"]]\n\n# Print the list of domain names\nprint(domain_names)",
        "1622": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an algorithm to generate a string of random numbers.\n\n### Input:\n\n\n### Output:\nA simple algorithm to generate a string of random numbers is to use the Python standard library's random module to generate n number of random numbers in the range [0, 9]. The generated random numbers can then be appended to a string to form the desired string of random numbers.\n\ndef generateRandomNumberString(length):\n    # Generate a random string of length N\n    import random\n    string = ''\n    for i in range(0,length):\n        x = random.randint(0,9)\n        string += str(x)\n    return string",
        "1623": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a histogram from a given list of integers.\n\n### Input:\n\n\n### Output:\ndef print_histogram(nums):\n  for num in nums:\n    output = ''\n    times = num\n    while(times > 0):\n      output += '#'\n      times = times - 1\n    print(output)",
        "1624": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to retrieve the titles and scores of the top 10 movies rated by users from the IMDB database.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http:\/\/www.imdb.com\/search\/title?count=10&sort=user_rating,desc\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitle_list = soup.find_all('div', {'class': 'lister-item-content'})\nfor title in title_list:\n    # get title\n    movie_title = title.h3.a.get_text()\n    # get score\n    score = title.find('span', {'class': 'value'}).get_text()\n    print(movie_title + ': ' + score)",
        "1625": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code that takes in two sets of coordinates and prints the distance between them\n\n### Input:\n(2,3), (4,5)\n\n### Output:\ndef calculate_distance(p1, p2):\n  x1, y1 = p1\n  x2, y2 = p2\n  return ((x2 - x1)**2 + (y2 - y1)**2)**0.5",
        "1626": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a single line of code to display the current date and time in the format \"Month day year, Hour:Minute\u201d using the Python module datetime.\n\n### Input:\n\n\n### Output:\nprint(datetime.datetime.now().strftime('%b %d %Y, %H:%M'))",
        "1627": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that removes duplicates from a given array.\n\n### Input:\n[1,1,2,3,4,5,5,5]\n\n### Output:\ndef remove_duplicates(array):\n    new_array = []\n    for element in array:\n        if element not in new_array:\n            new_array.append(element)\n    return new_array",
        "1628": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that concatenates two lists in Python.\n\n### Input:\n\n\n### Output:\ndef concatenate_lists(list1, list2):\n    return list1 + list2",
        "1629": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text editor in Python using the PyQt5 library.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\n\nclass Editor(QDialog):\n    def __init__(self, parent=None):\n        super(Editor, self).__init__(parent)\n        self.text = QTextEdit()\n        self.initUI()\n\n    def initUI(self):\n        layout = QVBoxLayout()\n        layout.addWidget(self.text)\n        self.setLayout(layout)\n        self.setWindowTitle(\"Text Editor\")\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = Editor()\n    window.resize(350, 250)\n    window.show()\n    sys.exit(app.exec_())",
        "1630": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for computing the Levenshtein distance between two strings.\n\n### Input:\nTwo strings: \"kitten\" and \"sitting\"\n\n### Output:\ndef levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    \n    # Create a table for storing results \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # Fill d[][] in bottom-up manner \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If first string is empty, only option is to \n            # insert all characters of second string \n            if i == 0: \n                dp[i][j] = j    # Min. operations = j \n  \n            # If second string is empty, only option is to \n            # remove all characters of second string \n            elif j == 0: \n                dp[i][j] = i    # Min. operations = i \n  \n            # If characters in both strings are same, no operations required \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n  \n            # If characters are not same, consider all operations \n            # on \"left-hand\" side and pick minimum \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[m][n] \n  \n# Driver program \nstr1 = \"kitten\"\nstr2 = \"sitting\"\nprint(levenshteinDistance(str1, str2))",
        "1631": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which removes specified index from a list.\n\n### Input:\n\n\n### Output:\ndef remove_index(my_list, remove_index):\nmy_list.remove(my_list[remove_index])\nreturn my_list",
        "1632": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if the given number is divisible by 3 or not.\n\n### Input:\n12\n\n### Output:\ndef is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\nif is_divisible_by_3(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')",
        "1633": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a basic web crawler using Python language.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    # Fetch the page\n    res = requests.get(url)\n    # Parse the HTML\n    html_doc = res.text\n    soup = BeautifulSoup(html_doc, 'html.parser')\n    \n    # Extract all links from the page\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links",
        "1634": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in python\n\n### Input:\n#include <stdio.h>\nint main()\n{\n    int a[10], b[10], i, j;\n    for (i = 0; i < 10; ++i) {\n        a[i] = 0;\n        b[i] = 0;\n    }\n    for (j = 1; j <= 5; ++j) {\n        for (i = 0; i < 10; ++i) {\n            a[i] = a[i] + j;\n            b[i] = b[i] + b[i - 1] + a[i];\n        }\n    }\n    for (i = 0; i < 10; ++i) {\n        printf(\"%d \", b[i]);\n    }\n    return 0;\n}\n\n### Output:\na = [0] * 10\nb = [0] * 10\n\nfor j in range(1, 6):\n    for i in range(10):\n        a[i] = a[i] + j\n        b[i] = b[i] + b[i - 1] + a[i]\n\nfor i in range(10):\n    print(b[i], end=\" \")",
        "1635": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python to generate a random English word.\n\n### Input:\n\n\n### Output:\nimport random\n\nwords = [\"hello\", \"world\", \"hi\", \"moon\", \"sun\"]\n\nrandom_word = random.choice(words)\n\nprint(\"Random word: \" + random_word)",
        "1636": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that takes in data points in time-series and returns the average of the data points for the given period.\n\n### Input:\n[1, 3, 4, 5, 3, 9, 6]\n\n### Output:\ndef average_of_period(arr):\n    return sum(arr) \/ len(arr)\n\nresult = average_of_period([1, 3, 4, 5, 3, 9, 6])\nprint(result)",
        "1637": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an efficient heap sort algorithm for a Python list containing random numbers.\n\n### Input:\nlist = [2, 4, 5, 1, 7, 6, 0, 8]\n\n### Output:\ndef heapify(arr, n, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]  # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0) \n  \n# Driver code to test above \narr = [2, 4, 5, 1, 7, 6, 0, 8] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),",
        "1638": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that contains a method to format a given string, removing all non-alphanumeric characters and replacing spaces with underscores.\n\n### Input:\n\n\n### Output:\nclass StringFormatter():\n    def __init__(self, string):\n        self.string = string\n\n    def format_string(self):\n        new_string = \"\".join([c for c in self.string if (c.isalnum() or c == '_')])\n        return new_string.replace(\" \", \"_\")\n\nif __name__ == '__main__':\n    formatter = StringFormatter(\"Hello, World!\")\n    print(formatter.format_string())",
        "1639": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a program in python to solve a given Sudoku puzzle.\n\n### Input:\ngrid = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]\n\n### Output:\ndef solve(grid): \n  \n    \"\"\"solves a 9x9 sudoku grid   \n    \"\"\"\n    row = 0\n    col = 0\n  \n# Initially searching for an unassigned position \n    while row<9: \n        while col<9: \n            # If the entry is empty \n            if grid[row][col]==0: \n                for num in range(1,10): \n                    if check(grid, row, col, num): \n                        grid[row][col] = num     \n  \n                        # recursively checking \n                        if solve(grid):   \n                            return True\n                        else:\n                            grid[row][col]=0\n            # If the entry is not empty, go to the next position \n            col += 1  \n            if col >= 9: \n                col = 0 \n                row += 1 \n   \n# returning true when the whole grid is assigned with numbers\n    return True\n  \ndef check(grid, row, col, num): \n    # checking row and column \n    for i in range(0, 9): \n        # To check whether this num is  \n        # already present in the row \n        if grid[row][i] == num:  \n            return False\n  \n        # To check whether this num is \n        # already present in the column \n        if grid[i][col] == num: \n            return False\n  \n        \n    # now checking in its block (3x3) \n    r = row - row%3\n    c = col - col%3\n  \n    for i in range(3): \n        for j in range(3): \n            if grid[i+r][j+c] == num: \n                return False\n  \n    # If everything checks out, \n    # return true (num is not being used) \n    return True\n\n# Driver program to test above function \nif __name__ == '__main__': \n  \n    grid = [ \n        [7,8,0,4,0,0,1,2,0], \n        [6,0,0,0,7,5,0,0,9], \n        [0,0,0,6,0,1,0,7,8], \n        [0,0,7,0,4,0,2,6,0], \n        [0,0,1,0,5,0,9,3,0], \n        [9,0,4,0,6,0,0,0,5], \n        [0,7,0,3,0,0,0,1,2], \n        [1,2,0,0,0,7,4,0,0], \n        [0,4,9,2,0,6,0,0,7] \n    ]\n    if solve(grid):\n        for row in grid:\n            print (*row, sep=' ')\n    else: \n        print(\"No solution exists!\")",
        "1640": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the maximum possible sum of a route between two nodes in a tree.\n\n### Input:\nA tree with 3 nodes. Node A with a value of 8, Node B with a value of 11, and Node C with a value of 7.\n\n### Output:\ndef max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23",
        "1641": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to search for a given string in a list of strings.\n\n### Input:\nSearch String: \u201cexample\u201d  \nList of Strings: [\u201cexample1\u201d, \u201cexample2\u201d, \u201cexample3\u201d, \u201cother1\u201d, \u201cother2\u201d]\n\n### Output:\nimport re\n\ndef search_string(search, string_list):\n    \"\"\"Search for a given string in a list of strings.\"\"\"\n    matches = []\n    for s in string_list:\n        if re.search(search, s):\n            matches.append(s)\n    return matches\n\n# Usage Example\nstring_list = [\"example1\", \"example2\", \"example3\", \"other1\", \"other2\"]\nmatches = search_string(\"example\", string_list)\nprint(matches)  # ['example1', 'example2', 'example3']",
        "1642": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that sorts a roster of students by their grade.\n\n### Input:\nA roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]\n\n### Output:\ndef sort_by_grade(roster):\n    sorted_roster = sorted(roster, key=lambda x: x[1])\n    return sorted_roster\n\nif __name__ == \"__main__\":\n    roster = [(\"Person 1\", 75), (\"Person 2\", 82), (\"Person 3\", 95), (\"Person 4\", 76),\n              (\"Person 5\", 65), (\"Person 6\", 70), (\"Person 7\", 82), (\"Person 8\", 93),\n              (\"Person 9\", 68), (\"Person 10\",80)]\n    print(sort_by_grade(roster))",
        "1643": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to extract the 10th row from a table\n\n### Input:\n\n\n### Output:\nimport pandas as pd\n\n# read the table\ntable = pd.read_csv('table_name.csv')\n\n# Extract the 10th row\nrow = table.loc[9, :]\n\n# Print the row\nprint('The 10th row is: ', row)",
        "1644": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that will scrape Reddit for comments and store them in a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport praw\nimport sqlite3\n\nconn = sqlite3.connect('RedditScraper.db')\nc = conn.cursor()\n\nc.execute(\"\"\"CREATE TABLE comments (\n comment_id text,\n comment_body text\n)\"\"\") \n\nreddit = praw.Reddit(\n client_id='YOUR_CLIENT_ID',\n client_secret='YOUR_CLIENT_SECRET',\n user_agent='YOUR_USER_AGENT'\n)\n\nfor comment in reddit.subreddit('all').stream.comments():\n c.execute(\"INSERT INTO comments VALUES (?, ?)\",\n (comment.id, comment.body))\n conn.commit()\n\nconn.close()",
        "1645": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dictionary of objects in Python from a list of words given by the user.\n\n### Input:\nwords = [\"hello\", \"world\", \"foo\", \"bar\"]\n\n### Output:\nwords_dict = {\n \"hello\": {},\n \"world\": {},\n \"foo\": {},\n \"bar\": {}\n}",
        "1646": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python which predicts the house prices in a given area.\n\n### Input:\nA required dataset housing.csv which contains house information, such as square footage, location, number of bedrooms and bathrooms, etc.\n\n### Output:\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\n\n# Loading the data\ndata = pd.read_csv('housing.csv')\n\n# Feature selection & Data Splitting\nX = data[['square_feet', ' bedrooms', 'bathrooms', 'location']]\ny = data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model & Training\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Testing & Evaluating\ny_pred = model.predict(X_test)\n\n# Visualizing the results\nplt.scatter(y_test, y_pred)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.show()",
        "1647": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a sentence as an input and prints out the words in reverse order.\n\n### Input:\nInput sentence: \"This is a test sentence\"\n\n### Output:\ndef reverse_words(sentence):\n words = sentence.split()\n reversed_words = words[::-1]\n return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test sentence\"))\n\n# Output: \"sentence test a is This\"",
        "1648": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a classifier in Python using scikit-learn to identify the sentiment of a given movie review.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\nreviews = pd.read_csv('reviews.csv')\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(reviews.text)\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, reviews.sentiment, test_size=0.25, random_state=1)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))",
        "1649": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based chatbot using Python. The chatbot should have the ability to respond to \u201chello\u201d and give a warm welcome message.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nwhile True:\n user_message = input('User: ')\n \nif user_message == 'hello':\n response_options = ['Hi', 'Hi there', 'Hello, how are you?', 'Hey there']\n bot_response = random.choice(response_options)\n print(bot_response)\n \nelif user_message == 'exit':\n break",
        "1650": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write an algorithm in Python to check if a given variable is palindrome?\n\n### Input:\n\n\n### Output:\ndef is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False",
        "1651": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to remove duplicates in a list and return the modified list\n\n### Input:\nlist := [1, 2, 2, 3]\n\n### Output:\ndef remove_duplicates(items):\n  unique = []\n  for item in items:\n    if item not in unique:\n      unique.append(item)\n  return unique\n\nlist = [1, 2, 2, 3]\nresult = remove_duplicates(list)\nprint(result) # Output: [1, 2, 3]",
        "1652": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a n -by- n matrix of ones and zeros, with the ones in the diagonal and the rest set to zero.\n\n### Input:\n\n\n### Output:\ndef generate_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = [0] * n\n        for j in range(n):\n            if i == j:\n                row[j] = 1\n        matrix.append(row)\n    return matrix",
        "1653": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to extract the duplicate elements from an integer array.\n\n### Input:\n[1, 2, 3, 2, 4, 5, 5]\n\n### Output:\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result",
        "1654": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstablish an automated machine learning workflow in Python.\n\n### Input:\nNo input\n\n### Output:\n# Import Libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\nX_train, X_test, y_train, y_test = load_data()\n\n# Create a Machine Learning Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', LogisticRegression(solver='lbfgs', random_state=42))\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, y_train)\n\n# Evaluate the pipeline on the test data\npredicted = pipeline.predict(X_test)\nprint('Test Accuracy:', accuracy_score(predicted, y_test))",
        "1655": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a PostgreSQL query that returns the title and author of all blog posts with the keyword \"Python\".\n\n### Input:\ntitle (varchar), content (text), author (varchar)\n\n### Output:\nSELECT title, author\nFROM BlogPost\nWHERE content LIKE '%Python%';",
        "1656": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an integer n and returns an array of n random numbers between 0 and 9.\n\n### Input:\n10\n\n### Output:\ndef random_array(n):\n    import random\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0,9))\n    return arr\n    \narr = random_array(10)\nprint(arr)",
        "1657": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python code by reducing the running time to the minimum possible.\n\n### Input:\nn = 10\n\ndef func(n):\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            res = res + i + j\n    return res\n\nfunc(n)\n\n### Output:\nn = 10\n\ndef func(n):\n    # Use range to only loop through half of the values\n    res = 0\n    for i in range(n\/\/2 + 1):\n        for j in range(n):\n            res = res + i + j\n    # Double the result by multiplying with 2\n    return res*2\n\nfunc(n)",
        "1658": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python generator to yield all the permutations of a given list.\n\n### Input:\n\n\n### Output:\ndef permutations(items): \n    if len(items) <=1: \n        yield items \n    else: \n        for i in range(len(items)): \n            for p in permutations(items[:i] + items[i+1:]): \n                yield (items[i],)+p",
        "1659": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a basic web scraper that takes a given URL, downloads HTML content from it, and returns a list of all links found in the HTML.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the page\nurl = <provided_url>\nresponse = requests.get(url)\n\n# Parse the page content\nsoup = BeautifulSoup(response.text, \u2018html.parser\u2019)\n\n# Find all links\nlinks = []\nfor link in soup.find_all(\u2018a\u2019):\n    links.append(link.get(\u2018href\u2019))\n\n# Print out the list of links\nfor link in links:\n    print(link)",
        "1660": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of numbers as an input and sorts them in ascending order.\n\n### Input:\n[5, 1, 3, 9, 4, 2]\n\n### Output:\ndef sortAscending(arr):\n    \n    # loop through the array\n    for i in range(len(arr)): \n        # find the minimum value in the array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # swap the found minimum element with the first element       \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n  \n    return arr",
        "1661": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that creates a word cloud from a given text.\n\n### Input:\nText: The quick brown fox jumps over the lazy dog.\n\n### Output:\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n \n# Read the whole text.\ntext = 'The quick brown fox jumps over the lazy dog.'\n \n# Generate a word cloud image\nwordcloud = WordCloud().generate(text)\n \n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()",
        "1662": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that outputs the Fibonacci series up to the nth number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n):\n  \n  # Setting up the base cases\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  \n  # Calculating the Fibonacci sequence\n  num1, num2 = 0, 1\n  for i in range(2, n+1):\n    num1, num2 = num2, num1 + num2\n    \n  return num2\n\n# Driver Code\nn = 10\nprint(Fibonacci(n))",
        "1663": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to convert a given string to datetime format.\n\n### Input:\nInput Date: 10\/07\/2020\n\n### Output:\nimport datetime\n\ndef convert_to_date(input_date):\n    date_obj = datetime.datetime.strptime(input_date,\"%d\/%m\/%Y\")\n    return date_obj",
        "1664": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two numbers as inputs and prints out their sum.\n\n### Input:\nx = 5, y = 8\n\n### Output:\ndef sum_numbers(x, y):\n    return x + y\n  \nprint(sum_numbers(5, 8))",
        "1665": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given data into two classes using the KNN algorithm.\n\n### Input:\nData: \n[[4.4, 3.2, 1.3],\n[5.5, 2.3, 4.2],\n[6.7, 3.4, 2.4],\n[6.5, 3.2, 5.1]]\n\n### Output:\nimport numpy as np\ndef knn(data,x, k): \n    # calculate the Euclidean Distance of the x from the training data\n    distances = np.sqrt(-2 * np.dot(data, x) + np.sum(data**2, axis=1) + np.sum(x**2))\n    # get the k closest neighbours \n    ind = np.argpartition(distances, k)[:k]\n    labels = np.array([0, 0, 1, 1]).astype(float) \n    return np.argmax(np.bincount(labels[ind]))",
        "1666": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all combinations of 2 given lists.\n\n### Input:\n\n\n### Output:\ndef generate_combinations(list1, list2):\n    combinations = []\n    for x in list1:\n        for y in list2:\n            combination = (x, y)\n            combinations.append(combination)\n    return combinations",
        "1667": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this Python function to JavaScript.\n\n### Input:\ndef string_to_num_list(string):\n    numbers = []\n    for letter in string:\n        numbers.append(ord(letter))\n    return numbers\n\n### Output:\nfunction stringToNumList(string) {\n    let numbers = [];\n    for (let letter of string) {\n        numbers.push(letter.charCodeAt(0));\n    }\n    return numbers;\n}",
        "1668": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string of words and returns a list of the most frequent words in the string\n\n### Input:\nNot applicable\n\n### Output:\ndef most_frequent_words(s):\n    # Split string into list of words\n    words = s.split(' ')\n    # Create empty dictionary to store word frequencies\n    word_frequencies = {}\n    # Iterate through words in list\n    for word in words:\n        # If word is already in the dictionary, increment its frequency\n        if word in word_frequencies:\n            word_frequencies[word] += 1\n        # Otherwise, set frequency to 1\n        else:\n            word_frequencies[word] = 1\n    # Sort words by frequency\n    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)\n    # Return a list of the most frequent words\n    return [item[0] for item in sorted_words]",
        "1669": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate a Python program to calculate the length of the hypotenuse of a right triangle?\n\n### Input:\n\n\n### Output:\nimport math\n\ndef hypotenuse_length(a, b):\n    \"\"\" Calculates the hypotenuse of a right triangle given its side lengths \"\"\"\n    \n    return math.sqrt(a**2 + b**2)\n  \nlength = hypotenuse_length(3, 4)\nprint(length)",
        "1670": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect if a given docstring contains Tensorflow code.\n\n### Input:\n\"\"\"This is an example docstring.\n\nimport tensorflow as tf\n\nx = tf.constant(42)\ny = tf.constant(4)\n\ndef add():\n    return x + y\n\"\"\"\n\n### Output:\nimport re\n\ndef contains_tensorflow_code(docstring):\n    \"\"\"\n    Detects if the given docstring contains Tensorflow code\n    :param docstring: The docstring to check\n    :type docstring: string\n    \"\"\"\n    # check if there are any TensorFlow import statements\n    has_import_tf = False\n    lines = docstring.split('\\n')\n    for line in lines:\n        if re.search('^import\\s+tensorflow', line):\n            has_import_tf = True\n\n    # check for the presence of any TensorFlow related strings\n    has_tf_string = False\n    for line in lines:\n        if re.search('^tf.', line):\n            has_tf_string = True\n\n    return has_import_tf or has_tf_string",
        "1671": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of an arbitrary number of arguments.\n\n### Input:\n\n\n### Output:\ndef calc_sum(*args):\n    result = 0\n    for num in args:\n        result += num\n    return result\n\nresult = calc_sum(1, 2, 3, 4, 5)\nprint(result)",
        "1672": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to return the top 3 most frequent words in a given string.\n\n### Input:\nThis is a sample string\n\n### Output:\nfrom collections import Counter\n\ndef top_3_words(str):\n  word_list = list(str.split())\n  word_dict = Counter(word_list)\n  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)\n  top_3 = sorted_words[:3]\n  return [word for word, count in top_3]\n\ntop_3_words('This is a sample string')",
        "1673": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of digits as input and returns a 2D list of all the possible permutations of these digits.\n\n### Input:\n[1, 2]\n\n### Output:\ndef permutations(nums):\n permutations_list = []\n for permutation in itertools.permutations(nums):\n permutations_list.append(list(permutation))\n \n return permutations_list\n \n print(permutations([1, 2]))\n# Output: [[1, 2], [2, 1]]",
        "1674": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the words with a length equal to 5 in a sentence and replace them with a placeholder.\n\n### Input:\nThe sentence is \"The quick brown fox jumped over the lazy dog\"\n\n### Output:\nsentence = 'The quick brown fox jumped over the lazy dog'\nwords = sentence.split()\n\nfor i in range(len(words)):\n if len(words[i]) == 5:\n words[i] = '_____'\n\nmodified_sentence = ' '.join(words)\nprint(modified_sentence)\n# Output: The _____ brown _____ jumped over the _____ _____",
        "1675": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between 5 and 10 using Python.\n\n### Input:\n\n\n### Output:\nimport random\nrand_num = random.randint(5,10)\nprint(rand_num)",
        "1676": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an interface using Python and Tkinter to read data from an external source and show it in a canvas.\n\n### Input:\nNot applicable\n\n### Output:\nimport tkinter as tk\nfrom tkinter import Canvas\nimport requests\n\n# Window\nwindow = tk.Tk()\nwindow.title('Data Display')\nwindow.geometry('800x600')\n\n# Canvas and Frame\ncanvas = Canvas(window, bg='white')\ncanvas.pack()\n\n# Retrieve data\nresponse = requests.get('http:\/\/example.com\/data.json')\ndata = response.json()\n\n# Render data onto canvas\n# ...\n\nwindow.mainloop()",
        "1677": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a specific Python program to detect a cycle within a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to detect cycle in a graph \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def printList(self): \n        head_node = self.head \n        while head_node != None: \n            print(head_node.data) \n            head_node = head_node.next\n  \n    # Function to detect and remove loop \n    # in a LinkedList \n    def detectAndRemoveLoop(self): \n        # If list is empty or has only one node \n        # without loop \n        if self.head is None or self.head.next is None: \n            return\n  \n        slow_ptr = fast_ptr = self.head \n        while (fast_ptr and fast_ptr.next): \n            fast_ptr = fast_ptr.next.next\n            slow_ptr = slow_ptr.next\n  \n            if slow_ptr == fast_ptr: \n                self.removeLoop(slow_ptr) \n  \n    # Function to remove loop \n    def removeLoop(self, loop_ptr): \n        ptr1 = self.head \n        while (1): \n            ptr2 = loop_ptr\n            while (ptr2.next != loop_ptr and ptr2.next != ptr1): \n                ptr2 = ptr2.next\n  \n            # If ptr2 has found ptr1 then there is a  \n            # loop. So break the loop \n            if ptr2.next == ptr1: \n                break \n  \n            ptr1 = ptr1.next \n  \n        # If a loop is found then set the next  \n        # node of ptr2 to None \n        ptr2.next = None \n  \nif __name__ == '__main__': \n    # Driver program \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second \n    second.next = third \n  \n    # loop \n    llist.head.next.next.next = llist.head \n  \n    llist.detectAndRemoveLoop() \n  \n    print(\"Linked List after removing loop\") \n    llist.printList()",
        "1678": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that sorts an array using Merge Sort.\n\n### Input:\narray = [4, 2, 3, 6, 1]\n\n### Output:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        m = len(arr) \/\/ 2\n        L = arr[:m]\n        R = arr[m:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j] \n            j += 1\n            k += 1\n    return arr\n\narray = [4, 2, 3, 6, 1]\nresult = merge_sort(array)\nprint(result) # prints [1, 2, 3, 4, 6]",
        "1679": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to generate random numbers between a minimum and maximum value.\n\n### Input:\nNot applicable\n\n### Output:\n# Define the function \ndef random_number(min_val, max_val):\n # Generate a random number\n rnd = np.random.randint(min_val, max_val+1)\n \n return rnd\n\n# Call the function\nrandom_num = random_number(5, 10)\n\n# Print the random number\nprint('Random number between 5 and 10:', random_num)",
        "1680": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to predict the sentiment of user reviews using a Naive Bayes classifier.\n\n### Input:\nUser Reviews: \n\n1. 'The food was amazing!' \n2. 'I was not happy with the customer service.' \n3. 'The quality of the food was fantastic!'\n\n### Output:\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Define the training set\nreviews_train = [('The food was amazing!', 'positive'),\n ('I was not happy with the customer service.', 'negative'),\n ('The quality of the food was fantastic!', 'positive')]\n\n# Train Naive Bayes Classifier\nclassifier = NaiveBayesClassifier.train(reviews_train)\n\n# Make Predictions\nreviews_test = ['The food was not good.']\nprediction = classifier.classify(reviews_test)\n\nprint('Predicted sentiment is:', prediction)",
        "1681": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function that returns the sum of three numbers\n\n### Input:\nthree integers a, b, c\n\n### Output:\n# Python3 program to return the sum of three numbers\n\ndef sum_three(a,b,c): \n    return a + b + c",
        "1682": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate a random password of length n\n\n### Input:\n3\n\n### Output:\nimport string\nimport random\n\ndef gen_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = \"\"\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nresult = gen_password(3)\nprint(result)",
        "1683": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI program in Python to ask a user to input any text and display the output.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()",
        "1684": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the longest substring without repeating characters.\n\n### Input:\nString = \"codefortesting\"\n\n### Output:\ndef longestSubstringWithoutRepeatingCharacters(str):\n    maxLength = 0\n    hashMap = dict()\n    start = 0\n\n    for i in range(len(str)):\n        if str[i] in hashMap:\n            start = max(hashMap[str[i]], start)\n\n        maxLength = max(maxLength, i - start + 1)\n        hashMap[str[i]] = i + 1\n\n    return maxLength",
        "1685": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to print the multiplication table for given number.\n\n### Input:\nnumber = 5\n\n### Output:\nnumber = 5\nfor i in range(1, 11): \n    print(number, 'x', i, '=', number*i)",
        "1686": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse a JSON string and extract data from it.\n\n### Input:\nJSON String:\n{\n\"name\": \"John Smith\",\n\"age\": 33,\n\"address\": {\n \"street\": \"123 Main Street\",\n \"city\": \"New York\",\n \"state\": \"NY\",\n \"zip\": \"10001\"\n},\n\"phone_numbers\": [\n {\n \"type\": \"work\",\n \"number\": \"212 555-1234\"\n },\n {\n \"type\": \"cell\",\n \"number\": \"646 555-4567\"\n }\n]\n}\n\n### Output:\nimport json\n\n# Load the JSON string\njson_string = '{\"name\": \"John Smith\", \"age\": 33, \"address\": {\"street\": \"123 Main Street\", \"city\": \"New York\", \"state\": \"NY\", \"zip\": \"10001\"}, \"phone_numbers\": [{\"type\": \"work\", \"number\": \"212 555-1234\"}, {\"type\": \"cell\", \"number\": \"646 555-4567\"}]}'\n\n# Parse the JSON string\ndata = json.loads(json_string)\n\n# Extract data\nname = data[\"name\"]\nage = data[\"age\"]\nstreet = data[\"address\"][\"street\"]\ncity = data[\"address\"][\"city\"]\nstate = data[\"address\"][\"state\"]\nzip_code = data[\"address\"][\"zip\"]\nwork_phone_number = data[\"phone_numbers\"][0][\"number\"]\ncell_phone_number = data[\"phone_numbers\"][1][\"number\"]\n\nprint(f'Name: {name}')\nprint(f'Age: {age}')\nprint(f'Street: {street}')\nprint(f'City: {city}')\nprint(f'State: {state}')\nprint(f'Zip Code: {zip_code}')\nprint(f'Work Phone Number: {work_phone_number}')\nprint(f'Cell Phone Number: {cell_phone_number}')",
        "1687": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web crawler using Python Scrapy which starts from a URL and follows all the hyperlinks on the page until a given depth is reached.\n\n### Input:\nThe URL to start the crawl and a maximum depth of two levels.\n\n### Output:\nimport scrapy\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.linkextractors import LinkExtractor\n\nclass MySpider(CrawlSpider):\n name = 'crawler'\n allowed_domains = ['example.com']\n start_urls = ['http:\/\/example.com\/']\n \n rules = [\n Rule(LinkExtractor(allow=()), follow=True, callback='parse_item', process_links='filter_links', max_depth=2)\n ]\n\ndef filter_links(self, links):\n # Filter the links to follow\n filtered_links = []\n for link in links:\n if link.url not in self.visited_urls and link.url.startswith(self.domain):\n filtered_links.append(link)\n return filtered_links\n\ndef parse_item(self, response):\n # Parse the page\n pass",
        "1688": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to build a recursive tree structure with nodes in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n      self.right = None\n      self.data = val\n      self.left = None\n\ndef insert(node, data): \n  if node is None:\n    return Node(data)\n  else:\n    if data <= node.data:\n      node.left = insert(node.left, data)\n    else:\n      node.right = insert(node.right, data)\n  return node",
        "1689": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a biopython program which counts the number of occurrences of a given DNA sequence.\n\n### Input:\nATGGGCTAG\n\n### Output:\nfrom Bio.Seq import Seq\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)",
        "1690": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python function to tokenise a given sentence into basic components like words and punctuations.\n\n### Input:\n\n\n### Output:\n# Importing the essential library \nimport nltk\n \n# Defining a function to tokenize a sentence\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    tok_words = [tok for tok in tokens if tok.isalpha()]\n    tok_punct = [tok for tok in tokens if not tok.isalpha()]\n    return tok_words, tok_punct\n \nif __name__ == '__main__':\n    text = \"This is a sample sentence.\"\n    words, puncts = tokenize(text)\n    print(\"Words:\", words)\n    print(\"Punctuations:\", puncts)",
        "1691": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to create a user account with the given name and password.\n\n### Input:\nName: John\nPassword: J0hnP455w0rd\n\n### Output:\nimport bcrypt\n\nname = \"John\"\npassword = \"J0hnP455w0rd\"\npassword_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n# Create user account in the database\n# with the given name and hashed password\n# ----------\n# Code to store username and \n# hashed password in the database \n# ----------",
        "1692": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the program to use an interactive command line program using Python Argparse library.\n\n### Input:\nNot applicable\n\n### Output:\nimport argparse\nimport sys\n\ndef permutation(string):\n if len(string) == 1:\n return [string]\n \n result = []\n \n for i in range(len(string)):\n s = string[i]\n remString = string[:i] + string[i+1:]\n \n for p in permutation(remString):\n result.append(s + p)\n \n return result\n \nif __name__ == '__main__':\n parser = argparse.ArgumentParser()\n parser.add_argument('--string', default=None, help='string to permutate')\n args = parser.parse_args()\n\n if (args.string is None):\n print('Please provide a valid string as command line argument!')\n sys.exit(1)\n \n result = permutation(args.string)\n print(result)",
        "1693": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the factorial of the given argument.\n\n### Input:\n\n\n### Output:\ndef factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)",
        "1694": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python that finds the nth prime number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)",
        "1695": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and create a Python class named trie.\n\n### Input:\n\n\n### Output:\nclass Trie:\n    def __init__(self):\n        self.root = {}\n    \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie\n        \"\"\"\n        curr_node = self.root\n        for letter in word:\n            # if letter is not in the current branch\n            if letter not in curr_node:\n                # add letter to the branch\n                curr_node[letter] = {}\n            # move to the next branch\n            curr_node = curr_node[letter]\n        # when word is fully parsed, set node name to True\n        curr_node['name'] = True",
        "1696": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that prints the sentence \"Hello, World!\" n times.\n\n### Input:\n\n\n### Output:\ndef print_hello_world(n): \n    for i in range(n):\n        print(\"Hello, World!\")\n\nprint_hello_world(3)\n# Output:\nHello, World!\nHello, World!\nHello, World!",
        "1697": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a car. The class should include attributes for make, model, year, and color.\n\n### Input:\nNot applicable\n\n### Output:\nclass Car:\n def __init__(self, make, model, year, color):\n  self.make = make\n  self.model = model\n  self.year = year\n  self.color = color\n  \n def get_info(self):\n  return f'This car is a {self.color} {self.year} {self.make} {self.model}.'",
        "1698": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate an encryption key.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generateEncryptionKey():\n    key = \"\"\n    for _ in range(32):\n        key += str(random.randint(0,9))\n    return key",
        "1699": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following Python function into a list comprehension.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\nresult = []\nfor num in numbers:\n    result.append(num * 2)\n\n### Output:\nnumbers = [1, 2, 3, 4, 5]\nresult = [num * 2 for num in numbers]",
        "1700": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python to classify emails into spam and non-spam.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Initializing the model\nmodel = MultinomialNB()\n\n# Training the model\nmodel.fit(X_train,y_train)\n\n# Testing the model\ny_pred = model.predict(X_test)\n\n# Evaluating the model\naccuracy = model.score(X_test,y_test)",
        "1701": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that accepts a list of numbers and prints the 2nd largest and the 3rd smallest elements from the list.\n\n### Input:\n[3, 5, 2, 4, 9, 7]\n\n### Output:\ndef main():\n numbers = [3, 5, 2, 4, 9, 7]\n numbers.sort()\n \n print('The 2nd largest number is', numbers[-2])\n print('The 3rd smallest number is', numbers[2])\n \nif __name__ == '__main__':\n main()",
        "1702": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements a sorting algorithm of your choice to sort a given array of integers in ascending order.\n\n### Input:\nA = [9, 4, 5, 1, 3]\n\n### Output:\ndef sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    pivot = A[0]\n    left = [item for item in A if item < pivot]\n    right = [item for item in A if item > pivot]\n\n    return sort_array(left) + [pivot] + sort_array(right)",
        "1703": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimized Python program to generate the Fibonacci sequence up to n.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n fibonacci_list = [a]\n \n for _ in range(n):\n a, b = b, a + b\n fibonacci_list.append(b)\n \n return fibonacci_list\n\nprint(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
        "1704": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate Python code to group all emails with the same subject into one single email.\n\n### Input:\nNot applicable\n\n### Output:\nimport email\nfrom collections import defaultdict\n\n# function to group emails by their subject\ndef group_emails(emails):\n    # dictionary to store emails with same subject\n    grouped_emails = defaultdict(list)\n\n    # loop through emails\n    for email in emails:\n        # get subject\n        subject = email.get('Subject', '')\n        # add to dict\n        grouped_emails[subject].append(email)\n\n    # return grouped emails\n    return grouped_emails\n\n# function to merge emails with the same subject into one single email\ndef merge_emails(grouped_emails):\n    merged_emails = []\n\n    # loop through grouped emails\n    for subject, emails in grouped_emails.items():\n        # list to store all email bodies\n        email_bodies = []\n\n        # loop through emails in the group\n        for email in emails:\n            # get email body\n            body = email.get_body()\n            # add it to the list\n            email_bodies.append(body)\n\n        # combine the email bodies\n        combined_body = \"\\n\\n\".join(email_bodies)\n\n        # create new email\n        merged_email = email.Address.new_message(subject, combined_body)\n\n        # add the merged eail to the list\n        merged_emails.append(merged_email)\n\n    # return the merged emails\n    return merged_emails",
        "1705": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for finding the maximum and minimum numbers in an array of numbers.\n\n### Input:\n1, 10, 3, 8, 6\n\n### Output:\ndef find_min_max(numbers):\n \n min_num = float('inf')\n max_num = float('-inf')\n \n for num in numbers:\n  if num < min_num:\n   min_num = num\n  if num > max_num:\n   max_num = num\n \n return [min_num, max_num]\n\nnumbers = [1, 10, 3, 8, 6]\nprint(find_min_max(numbers))\n\n# Output: [1, 10]",
        "1706": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to search a text for a given string and returns the number of iterations found.\n\n### Input:\nstring= \"Hello World!\", search=\"l\"\n\n### Output:\ndef search_string(string, search):\n    count = 0 \n    for i in range(len(string)):\n        if string[i] == search:\n            count += 1\n    return count\n\nsearched_string = search_string(\"Hello World!\", \"l\") \nprint(searched_string)",
        "1707": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class in Python that will represent a shopping cart. The class should contain methods for making a purchase, adding products to the cart, and calculating the total price.\n\n### Input:\nproducts = [\n { 'name': 'Chocolate', 'price': 6.00 },\n { 'name': 'Milk', 'price': 3.00 },\n { 'name': 'Cheese', 'price': 12.00 },\n]\n\n### Output:\nclass ShoppingCart:\n def __init__(self, products):\n self.products = products\n self.total_price = 0\n\n def add_product(self, product):\n self.products.append(product)\n\n def calculate_total_price(self):\n self.total_price = 0\n for product in self.products:\n self.total_price += product['price']\n return self.total_price\n\n def make_purchase(self):\n self.total_price = self.calculate_total_price()\n print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price))",
        "1708": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that uses the Beautiful Soup library to find the top ten most frequent words on a given web page and prints them as a list.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = input(\"Enter the URL of the webpage:\")\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, \"html.parser\")\n\n# Get all the text\ntext = soup.get_text()\n\n# Split text into words\nwords = text.split()\n\n# Count words\nword_count = {}\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\n# Sort word counts\nsorted_words = sorted(word_count, key=word_count.get, reverse=True)\n\n# Print top ten words\nprint(sorted_words[:10])",
        "1709": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random password string with length 20 that contains all the characters in the string.\n\n### Input:\n\n\n### Output:\nimport random \n  \ndef generate_password(length): \n    password_str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\"\n    password =  \"\".join(random.sample(password_str,length )) \n    return password\n\n# Driver Code \nlength = 20\nprint(generate_password(length))",
        "1710": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to evaluate a mathematical expression?\n\n### Input:\nexpression = \"2 * (3 + 5)\"\n\n### Output:\ndef evaluate(expression):\n    return eval(expression)\n\nprint(evaluate(expression))\n\n# Output\n16",
        "1711": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the common items from two given lists.\n\n### Input:\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8]\n\n### Output:\ndef get_common_items(list_1, list_2):\n    common_items = []\n  \n    for i in list_1:\n        for j in list_2:\n            if i == j:\n                common_items.append(i)\n    return common_items\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8]\n\nprint(get_common_items(list_1, list_2))",
        "1712": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python program to run on Python 3.\n\n### Input:\nimport string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(letter+j)\n    return result\n\n### Output:\nimport string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(str(letter)+str(j))\n    return result",
        "1713": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of numbers and sorts them in descending order.\n\n### Input:\n[30, 10, 40, 20]\n\n### Output:\ndef sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)",
        "1714": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find out how long a given string is.\n\n### Input:\n\"Hello\"\n\n### Output:\ndef get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)",
        "1715": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in python that converts a given sequence of strings into a list\n\n### Input:\n\"This is a test\"\n\n### Output:\ndef convert_str_list(x):\n    return x.split()\n\nprint(convert_str_list(\"This is a test\"))",
        "1716": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the the largest and smallest in a list\n\n### Input:\nnumbers = [234, 534, 123, 42, 56, 1, 234]\n\n### Output:\ndef find_limits(numbers):\n    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return largest, smallest",
        "1717": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python Flask that takes in a query term and searches the Wikipedia API for the query and returns the result.\n\n### Input:\nQuery term: Paris\n\n### Output:\nfrom flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/wikipedia', methods=['GET'])\ndef search_wikipedia():\n query = request.args.get('query')\n response = requests.get(\n 'https:\/\/en.wikipedia.org\/w\/api.php',\n params={\n 'action': 'query',\n 'list': 'search',\n 'format': 'json',\n 'srsearch': query\n}).json()\n\n return response\n\nif __name__ == '__main__':\n app.run()",
        "1718": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the sum of all numbers from 0 to the input number.\n\n### Input:\n5\n\n### Output:\ndef sum_to(num):\n    sum = 0\n    for i in range(num+1):\n        sum += i\n    return sum\n \nnum = 5\nprint(sum_to(num))   # 15",
        "1719": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that computes the Hamming distance for two strings.\n\n### Input:\n\"Random String1\", \"This is a random string\"\n\n### Output:\ndef HammingDistance(str1,str2): \n    # find out the length of the longest string \n    l1 = len(str1) \n    l2 = len(str2) \n  \n    # create a matrix of size l1 x l2 \n    m = [[None]*(l2+1) for i in range(l1+1)] \n  \n    # initialize the first row of the matrix \n    for i in range(l2+1): \n        m[0][i] = i \n  \n    # initialize the first column \n    for i in range(l1+1): \n        m[i][0] = i \n  \n    # traverse the matrix row by row \n    for i in range(1,l1+1): \n        for j in range(1, l2+1):\n            if str1[i-1] == str2[j-1]: \n                m[i][j] = m[i-1][j-1] \n            else:\n                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) \n  \n    return m[l1][l2] \n  \n# Driver code \nstr1,str2 = \"Random String1\", \"This is a random string\"\nprint(HammingDistance(str1,str2))",
        "1720": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to find the max three numbers in a list.\n\n### Input:\n[7, 9, 15, 10, 11]\n\n### Output:\ndef max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr))",
        "1721": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the first 20 prime numbers.\n\n### Input:\n\n\n### Output:\nn = 20\nprimes = []\nfor num in range(2, n+1):\n    is_prime = True\n    for div in range(2, num):\n        if (num % div == 0):\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nprint(primes)",
        "1722": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that checks for a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    l = len(s)\n    for i in range(l \/\/ 2):\n        if s[i] != s[l-1-i]:\n            return False\n    return True",
        "1723": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the code for a Python function to calculate the factorial of a given integer?\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact",
        "1724": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ncreate a Python program to create a chart of the average temperatures in Celsius for the current year.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt\n \n# Create lists of data to plot\n# Current year's temperatures\ntemperatures = [10, 12, 14, 13, 14, 14, 15]\n \n# Create a chart of average temperatures\nplt.plot(temperatures)\n \n# Label the chart\nplt.title('Average Temperatures in Celcius')\nplt.xlabel('Month')\nplt.ylabel('Temperature (Celsius)')\n \n# Show the chart\nplt.show()",
        "1725": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a Python library for web scraping.\n\n### Input:\n\n\n### Output:\nBeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML\/XML parsers like html5lib, lxml and html.parser.",
        "1726": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI voice assistant in Python to read text from a website.\n\n### Input:\nexample.com\n\n### Output:\n# import the necessary packages\nimport pygame\nimport requests\nfrom gtts import gTTS\n\n# define an API call to scrape website text\nurl = 'example.com'\ncontent = requests.get(url).text\n\n# initialize the pygame module\npygame.mixer.init()\n\n# generate the text-to-speech audio\ntts = gTTS(content)\n\n# save the text-to-speech audio\ntts.save('text.mp3')\n\n# play the audio\npygame.mixer.music.load('text.mp3')\npygame.mixer.music.play()\n\n# wait for the audio to finish\nwhile pygame.mixer.music.get_busy(): \n    pygame.time.Clock().tick(10)",
        "1727": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to calculate the Euclidean distance between two points.\n\n### Input:\n\n\n### Output:\ndef euclidean_distance(point_a, point_b):\n    sum_squares = 0\n    for i in range(len(point_a)):\n        sum_squares += (point_a[i] - point_b[i]) ** 2\n    return (sum_squares ** 0.5)\n\npoint_a = (1, 2, 3)\npoint_b = (4, 5, 6)\n\ndistance = euclidean_distance(point_a, point_b)\nprint(\"Distance between points: {}\".format(distance)) #5.19615",
        "1728": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the cosine similarity between two lists of numbers.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\n\n### Output:\ndef cosine_similarity(list1, list2):\n sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0\n for i in range(len(list1)):\n sum1 += list1[i]\n sum2 += list2[i]\n sum_sq1 += list1[i]**2\n sum_sq2 += list2[i]**2\n p_sum += list1[i] * list2[i]\n num = p_sum - (sum1 * sum2 \/ len(list1))\n den = (sqrt(sum_sq1 - pow(sum1, 2) \/ len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) \/ len(list1))))\n if den == 0:\n return 0\n return num\/den",
        "1729": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to calculate the circumference of a circle.\n\n### Input:\n\n\n### Output:\ndef calculate_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\nif __name__ == '__main__':\n    radius = 10\n    circumference = calculate_circumference(radius)\n    print(circumference)",
        "1730": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that calculates the edit distance between two strings.\n\n### Input:\ns1 = 'cat'\ns2 = 'cot'\n\n### Output:\n# function to calculate edit distance\ndef edit_distance(s1, s2):\n  if len(s1) == 0:\n  return len(s2)\n  if len(s2) == 0:\n  return len(s1)\n  if s1[-1] == s2[-1]:\n  cost = 0\n  else:\n  cost = 1\n\n  res = min([edit_distance(s1[:-1], s2)+1,\n            edit_distance(s1, s2[:-1])+1,\n            edit_distance(s1[:-1], s2[:-1]) + cost])\n  return res\n\n# example\ns1 = 'cat'\ns2 = 'cot'\nprint(edit_distance(s1, s2))  # output: 1",
        "1731": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a list of numbers as input and returns the maximum of the numbers.\n\n### Input:\n[2, -1, 15, 8, 9, 10]\n\n### Output:\ndef findMax(l): \n    max = l[0] \n    for x in l: \n        if x > max: \n            max = x \n    return max \n  \n# Driver code \nl = [2, -1, 15, 8, 9, 10] \nprint(findMax(l))",
        "1732": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the factorial of a given number without using inbuilt functions like factorial().\n\n### Input:\nnum = 6\n\n### Output:\ndef factorial(num): \n    if num == 0: \n        return 1 \n  \n    return num * factorial(num - 1) \n  \nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num))",
        "1733": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an efficient algorithm in Python to convert a list of integers into a single integer representing the sum of the list elements.\n\n### Input:\nList of integers: [1, 3, 5, 8]\n\n### Output:\ndef list_sum(nums): \n total = 0\n \n for num in nums:\n   total += num\n \n return total\n\nlist_sum([1, 3, 5, 8]) # output: 17",
        "1734": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to parse a JSON string and return a Python dictionary.\n\n### Input:\n\n\n### Output:\ndef parse_json(json_string):\n    return json.loads(json_string)",
        "1735": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the average monthly temperature of a given city for the last 10 years.\n\n### Input:\nCity: Los Angeles, California\n10 year average temperature from 2010 to 2020\n\n### Output:\nimport csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result\/counter",
        "1736": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that contains a test suite for the interactivespaces module. To run the tests, execute the script. The tests cover various methods for interacting with the Interactive Spaces API, including getting collections of activities, live activities, live activity groups, spaces, controllers, and named scripts. There are also tests for creating a new live activity. The code uses the unittest module for testing and the mock module for creating mock objects to test against.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import MagicMock\nimport json\nimport urllib\nimport urllib2\nimport sys\nimport os\nsys.path.append(os.getcwd())\n\nimport interactivespaces\n\nTEST_ACTIVITY_DATA = {\n                      \"id\":\"53\",\n                      \"bundleContentHash\":\"hjkl\",\n                      \"identifyingName\":\"com.endpoint.lg.browser\",\n                      \"lastUploadDate\":1398288057444,\n                      \"description\":\"Browser Activity to present \\\"webui\\\" activties to the user\",\n                      \"name\":\"Browser Activity\",\n                      \"lastStartDate\":1401901320867,\n                      \"metadata\":{},\n                      \"version\":\"1.0.0.dev\"\n}\n\nTEST_LIVEACTIVITY_DATA = {\n                          \"lastDeployDate\":\"Mon May 05 12:50:36 PDT 2014\",\n                          \"outOfDate\":False,\n                          \"id\":\"110\",\n                          \"description\":\"\",\n                          \"name\":\"Evdev Demuxer on 42-a\",\n                          \"active\": {\n                            \"numberLiveActivityGroupRunning\":1,\n                            \"runtimeState\":\"ACTIVE\",\n                            \"deployState\":\"UNKNOWN\",\n                            \"lastStateUpdate\":\"Wed Jun 04 11:17:21 PDT 2014\",\n                            \"runtimeStateDescription\":\"space.activity.state.active\",\n                            \"directRunning\":False,\n                            \"directActivated\":False,\n                            \"numberLiveActivityGroupActivated\":1,\n                            \"deployStateDescription\":\"space.activity.state.unknown\",\n                            \"deployStateDetail\":None,\n                            \"runtimeStateDetail\":\"<p>foo<\/p>\"\n                          },\n                          \"controller\": {\n                            \"id\":\"2\",\n                            \"name\":\"ISCtlDispAScreen00\",\n                            \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\"\n                          },\n                          \"uuid\":\"88816d20-22f6-4f78-95ba-7843696c6bc5\",\n                          \"activity\": {\n                            \"id\":\"61\",\n                            \"bundleContentHash\":\"qwerty\",\n                            \"identifyingName\":\"com.endpoint.lg.evdev.demuxer\",\n                            \"lastUploadDate\":1398288062862,\n                            \"description\":\"Separates and aggregates different types of input events.\",\n                            \"name\":\"Event Device Demuxer\",\n                            \"lastStartDate\":1401905841864,\n                            \"metadata\":{},\n                            \"version\":\"1.0.0.dev\"\n                          },\n                          \"metadata\":{}\n}\n\nTEST_LIVEACTIVITYGROUP_DATA = {\n                               \"id\":\"301\",\n                               \"description\":\"\",\n                               \"name\":\"Google Earth\",\n                               \"metadata\":{}\n}\n\nTEST_SPACE_DATA = {\n                   \"id\":\"401\",\n                    \"description\":\"\",\n                    \"name\":\"LG Express\",\n                    \"metadata\":{}\n}\n\nTEST_CONTROLLER_DATA = {\n                        \"state\":\"RUNNING\",\n                        \"hostId\":\"ctldispascreen00\",\n                        \"mode\":\"ENABLED\",\n                        \"id\":\"2\",\n                        \"stateDescription\":\"space.controller.state.running\",\n                        \"modeDescription\":\"space.controller.mode.enabled\",\n                        \"description\":\"Controller for Screen 00 on Display Node A\",\n                        \"lastStateUpdateDate\":\"Wed Jun 04 12:25:57 PDT 2014\",\n                        \"name\":\"ISCtlDispAScreen00\",\n                        \"dataBundleStateDescription\":\"space.controller.dataBundle.state.none\",\n                        \"uuid\":\"372f0f95-6b48-487a-a1ac-383ba580fc1c\",\n                        \"dataBundleState\":\"NO_REQUEST\",\n                        \"lastDataBundleStateUpdateDate\":None,\n                        \"metadata\":{}\n}\n\nTEST_NAMEDSCRIPT_DATA = {\n                        \"id\":\"3\",\n                        \"name\":\"foo\",\n                        \"description\":\"bar\"\n}\n\nTEST_POST = {\"foo\":\"bar\"}\nTEST_QUERY = {\"zot\":\"zing\"}\nTEST_SESSION = 'e2s1'\n\nTEST_HOST = '1.2.3.4'\nTEST_PORT = 12345\n\ndef test_get_collection(data, method_to_test, expected_type, path_name):\n    \"\"\"Helper for testing collection getters.\"\"\"\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._api_get_json = MagicMock(return_value=[data])\n\n    result = method_to_test(master)\n    master._api_get_json.assert_called_once_with('{}\/all'.format(path_name))\n\n    return result\n\nclass MasterTests(unittest.TestCase):\n    def test_constructor(self):\n        \"\"\"Test construction with valid arguments.\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n        self.assertEqual(master.host, TEST_HOST)\n        self.assertEqual(master.port, TEST_PORT)\n\n    def test_api_get_json(self):\n        \"\"\"Test a valid call to Master._api_get_json().\"\"\"\n        class MockResponse(object):\n            def read():\n                return '{\"result\":\"success\",\"data\":{\"foo\":\"bar\"}}'\n            def getcode():\n                return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity\/all'\n    response = master._api_get_json(command)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.json'.format(TEST_HOST, TEST_PORT, command)\n    )\n    self.assertEqual('bar', response['foo'])\n\n    def test_api_get_html(self):\n        \"\"\"Test a valid call to Master._api_get_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    \n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'activity\/new'\n    response = master._api_get_html(command, {\"foo\":\"bar\"})\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      )\n    )\n    self.assertEqual('asdf', response.read())\n    self.assertEqual(200, response.getcode())\n\n    def test_api_post_json(self):\n        \"\"\"Test a valid call to Master._api_post_json().\"\"\"\n    \n\nclass MockResponse(object):\n    def read():\n        return '{\"result\":\"success\"}'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'liveactivity\/42\/configure'\n    master._api_post_json(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.json?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_api_post_html(self):\n        \"\"\"Test a valid call to Master._api_post_html().\"\"\"\n\nclass MockResponse(object):\n    def read():\n        return 'asdf'\n    def getcode():\n        return 200\n\n    master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n    master._urlopen = MagicMock(return_value=MockResponse())\n\n    command = 'namescript\/new'\n    master._api_post_html(command, TEST_QUERY, TEST_POST)\n\n    master._urlopen.assert_called_once_with(\n      'http:\/\/{}:{}\/{}.html?{}'.format(\n        TEST_HOST,\n        TEST_PORT,\n        command,\n        urllib.urlencode(TEST_QUERY)\n      ),\n      urllib.urlencode(TEST_POST)\n    )\n\n    def test_get_all_activities(self):\n        \"\"\"Test Master.get_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.Activity\n        result = test_get_collection(\n                                     data=TEST_ACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_activities,\n                                     expected_type=expected_type,\n                                     path_name='activity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activities(self):\n        \"\"\"Test Master.get_live_activities() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivity\n        result = test_get_collection(\n                                     data=TEST_LIVEACTIVITY_DATA,\n                                     method_to_test=interactivespaces.Master.get_live_activities,\n                                     expected_type=expected_type,\n                                     path_name='liveactivity'\n                                     )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_live_activity_groups(self):\n        \"\"\"Test Master.get_live_activity_groups() with no pattern.\"\"\"\n        expected_type = interactivespaces.LiveActivityGroup\n        test_get_collection(\n                            data=TEST_LIVEACTIVITYGROUP_DATA,\n                            method_to_test=interactivespaces.Master.get_live_activity_groups,\n                            expected_type=expected_type,\n                            path_name='liveactivitygroup'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_spaces(self):\n        \"\"\"Test Master.get_spaces() with no pattern.\"\"\"\n        expected_type = interactivespaces.Space\n        test_get_collection(\n                            data=TEST_SPACE_DATA,\n                            method_to_test=interactivespaces.Master.get_spaces,\n                            expected_type=expected_type,\n                            path_name='space'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_controllers(self):\n        \"\"\"Test Master.get_controllers() with no pattern.\"\"\"\n        expected_type = interactivespaces.Controller\n        test_get_collection(\n                            data=TEST_CONTROLLER_DATA,\n                            method_to_test=interactivespaces.Master.get_controllers,\n                            expected_type=expected_type,\n                            ath_name='spacecontroller'\n                            )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_get_named_scripts(self):\n        \"\"\"Test Master.get_named_scripts() with no pattern.\"\"\"\n        expected_type = interactivespaces.NamedScript\n        test_get_collection(\n                            data=TEST_NAMEDSCRIPT_DATA,\n                            method_to_test=interactivespaces.Master.get_named_scripts,\n                                expected_type=expected_type,\n                                path_name='namedscript'\n                                )\n        self.assertEqual(1, len(result))\n        self.assertIsInstance(result[0], expected_type)\n\n    def test_new_live_activity(self):\n        \"\"\"Test a valid call to Master.new_live_activity().\"\"\"\n        master = interactivespaces.Master(TEST_HOST, TEST_PORT)\n\nclass MockFirstResponse():\n    def getcode():\n        return 200\n    def geturl():\n        return 'http:\/\/{}:{}\/liveactivity\/new.html?execution={}'.format(\n                                                                        TEST_HOST,\n                                                                        TEST_PORT,\n                                                                        TEST_SESSION\n                                                                        )\n\nclass MockSecondResponse():\n    def getcode():\n        return 200\n\n    master._api_get_html = MagicMock(return_value=MockFirstResponse())\n    master._api_post_html = MagicMock(return_value=MockSecondResponse())\n\n\nclass MockActivity():\n    self.id = TEST_LIVEACTIVITY_DATA['activity']['id']\n\n\nclass MockController():\n    self.id = TEST_LIVEACTIVITY_DATA['controller']['id']\n\n    test_live_activity = master.new_live_activity(\n                                                  TEST_LIVEACTIVITY_DATA['name'],\n                                                  TEST_LIVEACTIVITY_DATA['description'],\n                                                  MockActivity(),\n                                                  MockController()\n                                                  )\n    master._api_get_html.assert_called_once_with(\n      'liveactivity\/new',\n      {\"mode\": \"embedded\"}\n    )\n    master._api_post_html.assert_called_once_with(\n      'liveactivity\/new',\n      {\"execution\": TEST_SESSION},\n      {\n        \"liveActivity.name\": TEST_LIVEACTIVITY_DATA['name'],\n        \"liveActivity.description\": TEST_LIVEACTIVITY_DATA['description'],\n        \"activityId\": TEST_LIVEACTIVITY_DATA['activity']['id'],\n        \"controllerId\": TEST_LIVEACTIVITY_DATA['controller']['id'],\n        \"_eventId_save\": \"Save\"\n      }\n    )\n\n    self.assertIsInstance(\n      test_live_activity,\n      interactivespaces.LiveActivity\n    )\n\ndef main():\n  unittest.main()\n\nif __name__ == '__main__':\n  main()\n",
        "1737": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to search for a particular string in a given text.\n\n### Input:\n\n\n### Output:\ndef search(query, text):\n  n = len(query)\n  result = []\n  # Loop through the text\n  for i in range(len(text)): \n    # Compare the current n characters of the text \n    # with the query string\n    if text[i: i + n] == query: \n      # If matches, append the current index of text to \n      # the result \n      result.append(i) \n  # Return the list of indices  \n  return result",
        "1738": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python 3 script to generate a list of integers from 0 to 100.\n\n### Input:\n\n\n### Output:\nlist_of_integers = [x for x in range(0, 101)]",
        "1739": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to filter out invalid names in a list of strings. The function should take as argument a list of strings. A valid name is a string that contains 3 to 20 alphabetic characters. Invalid names should be filtered out and the remaining names should be present in the output list.\n\n### Input:\n['Alex', 'Mark', 'John21', '12345']\n\n### Output:\ndef filter_names(names):\n valid_names = []\n for name in names:\n if re.match('[a-zA-Z]{3,20}', name):\n valid_names.append(name)\n return valid_names\n\nprint(filter_names(['Alex', 'Mark', 'John21', '12345']))\n# Output: ['Alex', 'Mark']",
        "1740": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python to store details of an employee.\n\n### Input:\n\n\n### Output:\n# Define the Employee class\nclass Employee:\n    def __init__(self, name, email, id, salary):\n        self.name = name \n        self.email = email\n        self.id = id\n        self.salary = salary\n# Create an empty dictionary to store employee details\nemployee_details = {}",
        "1741": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper written in Python using the requests and BeautifulSoup libraries. This scraper should be able to retrieve all of the links on a given web page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n links.append(link.get('href'))\n\nprint(links)",
        "1742": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that utilizes machine learning to predict the selling price of an item from its description.\n\n### Input:\n{\n  \u201cdescription\u201d: \u201cGently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!\u201d\n}\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data frame from input\ndf = pd.DataFrame([{\n \u201cdescription\u201d: \u201cGently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!\u201d\n}])\n\n# Create feature columns\ndf['Length'] = df['description'].apply(len)\n\n# Create target column\ndf['Sale Price'] = np.nan\n\n# Split data into X (features) and y (target)\nX = df[['Length']]\ny = df['Sale Price']\n\n# Create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make prediction\ndf.loc[0, 'Sale Price'] = model.predict(X)[0]\n\nprint('Predicted Sale Price:', df.loc[0, 'Sale Price'])",
        "1743": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a 2D array of a defined size and fill it with random numbers.\n\n### Input:\nSize of the array: 10x10\n\n### Output:\nimport random\n\n# define the size of the array\nx, y = 10, 10\n\n# create an empty array of the given size\narr = [[0 for j in range(x)] for i in range(y)]\n\n# fill the array with random numbers\nfor i in range(x):\n for j in range(y):\n arr[i][j] = random.randint(0, 9)\n\n# print the array\nfor i in range(x):\n print(arr[i])",
        "1744": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the elements that are common in two unsorted lists.\n\n### Input:\nlist1 = [12, 5, 7, 45, 32]\nlist2 = [7, 2, 45, 11, 32]\n\n### Output:\ndef common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements",
        "1745": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random list of numbers between 0 and 10 with a length of 25 using Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)",
        "1746": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for text summarization using Python.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text)",
        "1747": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the differences between a static method and a class method in Python\n\n### Input:\n\n\n### Output:\nA static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on.",
        "1748": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linear regression model in Python to predict the total monthly expenses from a person's monthly income.\n\n### Input:\nThe data set contains the following columns:\n\nMonthly Income:$2300,\nMonthly Expenses:$850\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the data\ndata = {'Monthly Income': [1900, 2300, 2800, 3500],\n        'Monthly Expenses': [750, 850, 950, 1250]}\ndf = pd.DataFrame(data)\n\n# Train the model\nx = df['Monthly Income'].values.reshape(-1, 1)\ny = df['Monthly Expenses'].values\nreg = LinearRegression().fit(x, y)\n\n# Create the prediction\nprediction = reg.predict([[2300]])\nprint('Predicted total monthly expenses: ', prediction)",
        "1749": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a while-loop in Python that prints all the even numbers between 0 and 20\n\n### Input:\n\n\n### Output:\ni = 0\n\nwhile i <= 20:\n    if i % 2 == 0:\n        print(i)\n    i += 1",
        "1750": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if an array has more than three duplicate elements.\n\n### Input:\narr = [4, 2, 8, 2, 1, 4, 19, 4]\n\n### Output:\ndef check_duplicate_in_array(arr):\n    result = False\n    for i in range(len(arr) - 2):\n        if arr[i] == arr[i + 1] == arr[i + 2]:\n            result = True\n            break\n    return result\n\narr = [4, 2, 8, 2, 1, 4, 19, 4]\nprint(check_duplicate_in_array(arr)) # Output: True",
        "1751": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a bank account, with appropriate methods and fields for holding the balance\n\n### Input:\nNo input.\n\n### Output:\nclass BankAccount:\n    def __init__(self):\n        self._balance = 0\n\n    def get_balance(self):\n        return self._balance\n\n    def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n\n        self._balance += amount\n\n    def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Amount must be greater than 0\")\n        if amount > self._balance:\n            raise ValueError(\"Insufficient funds\")\n\n        self._balance -= amount",
        "1752": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script for recognizing facial features using OpenCV and Haar features.\n\n### Input:\n<Sample_image.jpg>\n\n### Output:\n#Import necessary libraries\nimport cv2\nimport numpy as np\n\n#Load the classifier for frontal face detection\nhaar_face_cascade = cv2.CascadeClassifier(\"haarcascade_frontal_face.xml\")\n\n#Create a VideoCapture object\ncapture = cv2.VideoCapture(\"Sample_image.jpg\")\nimg = capture.read()\n\n#Convert the image into grayscale\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n#Detect facial features\nfaces = haar_face_cascade.detectMultiScale(gray, 1.3, 5)\n\n#Draw a rectangle around the faces\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,0), 2)\n\n#Write the image into a file\ncv2.imwrite('face_detect.jpg',img)",
        "1753": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the GCD (Greatest Common Divisor) of two positive integers.\n\n### Input:\n46, 24\n\n### Output:\ndef gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)",
        "1754": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out the duplicates in a list\n\n### Input:\nlist_a = [1, 2, 3, 2, 5, 2]\n\n### Output:\ndef remove_duplicates(list_a):\n    result = []\n    for a in list_a:\n        if a not in result:\n            result.append(a)\n    return result",
        "1755": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify a given set of data\n\n### Input:\nGiven a dataset containing information about temperature and humidity, classify whether the day is raining or not\n\n### Output:\ndef classify_rain(temp, humidity):\n    if temp < 70 and humidity > 0.7:\n        return 'raining'\n    else:\n        return 'not raining'",
        "1756": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to select the optimal solution from a given list of solutions using the greedy algorithm.\n\n### Input:\n\n\n### Output:\ndef greedy_algorithm(solutions):\n best_solution = None\n best_solution_value = float(\"-inf\")\n for solution in solutions:\n # calculate value of current solution\n    current_solution_value = calculate_solution_value(solution)\n # update best solution if current solution is better\n    if current_solution_value > best_solution_value:\n        best_solution = solution\n        best_solution_value = current_solution_value\n \n return best_solution",
        "1757": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Naive Bayes classification model in Python to analyse the sentiment of a given text.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport random\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import movie_reviews\n\n# Create a list of the tuples needed for training the model\ndocuments = []\n\nfor category in movie_reviews.categories():\n    for fileid in movie_reviews.fileids(category):\n        documents.append( (list(movie_reviews.words(fileid)), category) )\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Get all words in all documents\nall_words = []\n\nfor w in movie_reviews.words():\n    all_words.append(w.lower())\n\n# Get a frequency distribution of all words\nall_words = nltk.FreqDist(all_words)\n\n# Extract the 2000 most common words\nword_features = list(all_words.keys())[:2000]\n\n# Define a function to find the 2000 most common words in a document\ndef find_features(document):\n    words = set(document)\n    features = {}\n    for w in word_features:\n        features[w] = (w in words)\n\n    return features\n\n# Create a feature set \nfeaturesets = [(find_features(rev), category) for (rev, category) in documents]\n\n# Train the Naive Bayes model\ntraining_set = featuresets[:1900]\ntesting_set = featuresets[1900:]\n\nclassifier = NaiveBayesClassifier.train(training_set)\n\n# Check accuracy\nprint(\"Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set)) * 100)\nclassifier.show_most_informative_features(15)",
        "1758": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that searches for a given string in a database and displays the result.\n\n### Input:\nDatabase: {\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"age\": 26\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 32\n        },\n        {\n            \"name\": \"Alice\",\n            \"age\": 21\n        }\n    ]\n}\n\nSearch term: Alice\n\n### Output:\nimport json\n\nusers = {\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"age\": 26\n        },\n        {\n            \"name\": \"Mark\",\n            \"age\": 32\n        },\n        {\n            \"name\": \"Alice\",\n            \"age\": 21\n        }\n    ]\n}\n\nsearch_term = \"Alice\"\n\nfor user in users[\"users\"]:\n    if user[\"name\"] == search_term:\n        print(\"Found user with name '{}' and age {}\".format(user[\"name\"], user[\"age\"]))",
        "1759": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to normalize a list of words that contains upper and lowercase letters.\n\n### Input:\nList of words: [\"HeLlO\", \"wOrlD\"]\n\n### Output:\ndef normalize(lst):\n return [word.lower() for word in lst]",
        "1760": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a clustering algorithm in Python to identify patient segments based on a given disease state.\n\n### Input:\nPatient 1: Blood Pressure: 120mmHg, Blood Sugar: 250mg\/dL\nPatient 2: Blood Pressure: 110mmHg, Blood Sugar: 200mg\/dL\nPatient 3: Blood Pressure: 140mmHg, Blood Sugar: 300mg\/dL\n\n### Output:\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = [[120, 250], [110, 200], [140, 300]]\n\n# Convert data to a numpy array\ndata = np.array(data)\n\n# Train the KMeans model with the data\nkmeans = KMeans(n_clusters=2).fit(data)\n\n# Generate centroid coordinates\ncentroids = kmeans.cluster_centers_\n\n# Plot the centroids for the clusters\nplt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=3, c='r')\n\n# Plot all datapoints\nplt.scatter(data[:, 0], data[:, 1], marker='*', s=100)\n\nplt.show()",
        "1761": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n### Input:\nwords: \"dear\", \"read\"\n\n### Output:\ndef isAnagram(word1, word2): \n  \n    # Get lengths of both strings \n    n1 = len(word1) \n    n2 = len(word2) \n  \n    # If both strings have different lengths, they \n    # cannot be anagrams \n    if (n1 != n2): \n        return False\n  \n    # Sort both strings \n    word1 = sorted(word1) \n    word2 = sorted(word2) \n  \n    # Compare sorted strings \n    for i in range(n1): \n        if word1[i] != word2[i]: \n            return False\n  \n    return True\n  \n# Driver program \nwords = (\"dear\", \"read\")\n  \nif isAnagram(words[0], words[1]): \n    print(\"The word\", words[0], \"and\", words[1], \"are anagrams\") \nelse: \n    print(\"The word\", words[0], \"and\", words[1], \"are not anagrams\")",
        "1762": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most efficient way to sort a list of numbers with insertion sort.\n\n### Input:\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n### Output:\ndef insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are\n        # greater than key, to one position ahead\n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n##\n5. Instruction: Create a Python program to detect a cycle in a linked list.\n5. Input:\nNot applicable\n5. Output:\ndef detectLoop(head): \n    slowPtr = head \n    fastPtr = head \n  \n    while(slowPtr and fastPtr and fastPtr.next): \n        slowPtr = slowPtr.next\n        fastPtr = fastPtr.next.next\n  \n        if slowPtr == fastPtr: \n            return True\n  \n    return False ## No cycle detected",
        "1763": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that sends a request to a website and displays the response.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef send_request(url):\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        print(\"Success! The website responded with: \")\n        print(response.text)\n    else:\n        print(\"Error! The website responded with: \")\n        print(\"Status code: \", response.status_code)",
        "1764": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a string and replace all occurrences of the target word with a new word.\n\n### Input:\n\"Hello, how are you today? How is your day going?\", \"how\", \"what\"\n\n### Output:\ndef replace_words(string, target, new): \n    words = string.split(' ')\n    result = []\n\n    for word in words:\n        if word == target:\n            result.append(new)\n        else:\n            result.append(word)\n    \n  return \" \".join(result)\n\nresult = replace_words(\"Hello, how are you today? How is your day going?\", \"how\", \"what\")\nprint(result)",
        "1765": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to pre-process text data for sentiment analysis.\n\n### Input:\nThe product was good, but customer service was slow\n\n### Output:\nimport string\nimport nltk \nnltk.download('punkt')\n\n# remove punctuation and capitalization \ndef remove_punctuation_and_make_lowercase(data):\n  table = str.maketrans({key: None for key in string.punctuation})\n  data_without_punctuation = data.translate(table).lower()\n  return data_without_punctuation\n\ndata = \"The product was good, but customer service was slow\"\n\ndata_without_punctuation = remove_punctuation_and_make_lowercase(data)\nprint(data_without_punctuation)\n\n# tokenize\ndata_tokenized = nltk.word_tokenize(data_without_punctuation)\nprint(data_tokenized)",
        "1766": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes an integer as an input and calculates the sum of all the digits of the integer.\n\n### Input:\n123\n\n### Output:\n# take a number \nnumber = int(input(\"Please enter a number: \")) \n  \n#initialize sum\nsum = 0\n  \n#Find the sum of the digits of the number\ntemp = number\nwhile temp > 0: \n   digit = temp % 10\n   sum += digit \n   temp \/\/= 10\n  \n# print the output\nprint(\"The sum of the digits of the given number is\", sum)",
        "1767": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of items in a given list and multiply it by a given number.\n\n### Input:\n{'list': [1, 3, 5, 7], 'num': 3}\n\n### Output:\n#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)",
        "1768": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compare two given lists and return a list containing only the common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\n\n### Output:\ndef common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)",
        "1769": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model using Python and Scikit-Learn to predict a person\u2019s age based on height and weight.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Training data\nx = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])\ny = np.array([12, 18, 24, 30])\n\n# Create model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Predicted age for height 1.6m and weight 65kg\nmodel.predict([[1.6, 65]]) # output: [16.7]",
        "1770": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet written in Python. The code snippet should create a list of numbers from 0 to 10 that are divisible by 2.\n\n### Input:\narr = []\nfor i in range(10):\n if i % 2 == 0:\n arr.append(i)\n\n### Output:\narr = [i for i in range(11) if i % 2 == 0]",
        "1771": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify an object based on its features.\n\n### Input:\n[2.5, 4.5, 2.5], Classes: [\"apple\", \"orange\", \"pear\"]\n\n### Output:\ndef classify_object(features, classes):\n    max_feature = max(features)\n    index = features.index(max_feature)\n    return classes[index]\n\nprint(classify_object([2.5, 4.5, 2.5], [\"apple\", \"orange\", \"pear\"]))",
        "1772": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code which converts a given binary string to an integer.\n\n### Input:\nNot applicable\n\n### Output:\ndef bin_to_dec(binary_str):\n # Initialize the result\n result = 0\n \n # Iterate through the string and add each digit to the result\n for d in binary_str:\n  # Multiply the result by 2 for each digit of the string\n  result = result * 2\n  # Add the current digit to the result\n  result += int(d)\n \n # Return the result\n return result\n\nbinary_str = '10101'\nprint(bin_to_dec(binary_str))\n# Output: 21",
        "1773": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python that calculates the Fibonacci sequence numbers up to the n-th element.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n for _ in range(n):\n a, b = b, a + b\n return b\n \nprint(fibonacci(10))",
        "1774": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a calculator that performs basic operations\n\n### Input:\n\n\n### Output:\nclass Calculator(object):\n    def __init__(self):\n        pass\n    \n    def add(self, x, y):\n        return x + y\n   \n    def subtract(self, x, y):\n        return x - y\n    \n    def multiply(self, x, y):\n        return x * y\n    \n    def divide(self, x, y):\n        return x \/ y\n\n#Main Program\nc = Calculator()\nprint(c.add(4, 8))\nprint(c.subtract(4, 8))\nprint(c.multiply(4, 8))\nprint(c.divide(4, 8))",
        "1775": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the minimum element in a Python list called 'nums'\n\n### Input:\nnums = [2, 3, 4, 1, 7, 8, 5]\n\n### Output:\n\"\"\"\nFind the minimum element in a Python list called 'nums'\n\"\"\"\n\ndef find_min(nums):\n    min = nums[0]\n    for num in nums:\n        if num < min:\n            min = num\n    return min\n    \nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 7, 8, 5]\n    print(find_min(nums))",
        "1776": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to calculate the maximum profit that can be earned given a stock's price list for the day.\n\n### Input:\n`List of prices = [5, 7, 1, 3, 6, 8]`\n\n### Output:\ndef maxProfit(prices):\n maxProfit = 0\n minPrice = float('inf')\n\n for price in prices:\n minPrice = min(minPrice, price)\n maxProfit = max(maxProfit, price - minPrice)\n\n return maxProfit\n\n# example\nmaxProfit([5, 7, 1, 3, 6, 8]) # returns 7",
        "1777": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to calculate the median of an unsorted list of numbers.\n\n### Input:\n[3, 4, 1, 2, 5]\n\n### Output:\ndef median(lst):\n    lst = sorted(lst)\n    if len(lst) % 2 == 0:\n        mid = int(len(lst) \/ 2)\n        return (lst[mid] + lst[mid-1]) \/ 2\n    else:\n        mid = int(len(lst) \/ 2)\n        return lst[mid]\n\nmedian([3, 4, 1, 2, 5])",
        "1778": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that returns the fibonacci series until the 10th index.\n\n### Input:\n\n\n### Output:\ndef fibonacci_series(n): \n    # Creating an array to store fibonacci numbers till 10th index \n    fibonacci = [0, 1] \n      \n    # Append the next number in the series till 10th index \n    while(len(fibonacci) < n + 1): \n        fibonacci.append(fibonacci[-1] + fibonacci[-2]) \n      \n    # return the value at 10th index \n    return fibonacci[n]",
        "1779": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters: a list of numbers and an integer, and returns the list of numbers sorted such that any numbers divisible by the integer are placed at the beginning of the list.\n\n### Input:\nnumbers = [10, 7, 3, 9, 12, 15]\ninteger = 3\n\n### Output:\ndef sortByDivisible(numbers, integer):\n sortedList = []\n\n for num in numbers:\n if (num % integer == 0):\n sortedList.append(num)\n\n for num in numbers:\n if (num % integer != 0):\n sortedList.append(num)\n\n return sortedList\n\nnumbers = [10, 7, 3, 9, 12, 15]\ninteger = 3\n\nprint(sortByDivisible(numbers, integer))\n# Output: [9, 12, 3, 10, 7, 15]",
        "1780": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a function in Python for finding the sum of a given list of numbers.\n\n### Input:\n[4, 7, 6, 2]\n\n### Output:\ndef add_numbers(numbers):\n    \"\"\"\n    Find the sum of a given list of numbers.\n    Args:\n        numbers: a list of numbers.\n    Returns:\n        The sum of the numbers.\n    \"\"\"\n    sum = 0\n\n    # Iterate over numbers\n    for num in numbers:\n        # Add number to total\n        sum += num\n\n    return sum\n\ntotal = add_numbers([4, 7, 6, 2])\n\nprint(total)",
        "1781": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a dataframe as a parameter and calculates the number of values for each column.\n\n### Input:\nNot applicable\n\n### Output:\ndef countValues(dataframe):\n counts = {}\n for column in dataframe.columns:\n counts[column] = dataframe[column].count()\n return counts",
        "1782": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object, write a Python program to convert it into a dictionary.\n\n### Input:\nJSON object: { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }\n\n### Output:\nimport json\n\njson_object = { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }\n\ndict = json.loads(json.dumps(json_object))\n\nprint(dict)",
        "1783": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in python to count the occurences of a given word in a sentence.\n\n### Input:\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n### Output:\n#Defining the sentence and keyword\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n#Counting the occurences\ncount = sentence.count(keyword)\n\n#Printing the result\nprint(\"The keyword appears \" + str(count) + \" time(s) in the sentence.\")",
        "1784": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to check if an input string is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str",
        "1785": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the sum of two given numbers\n\n### Input:\n2, 3\n\n### Output:\ndef add_two_numbers(a, b):\n    return a + b",
        "1786": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Naive Bayes classifier in Python that can classify emails as either spam or ham.\n\n### Input:\nExample dataset of 10 emails with their respective labels (spam\/ham)\n\n### Output:\n# Naive Bayes Classifier\n\nimport numpy as np\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample data\n# Each item is a string of text\nX = [\"I am spam\", \"Help me now\", \"You won the lottery\", \"Buy this product now\", \n    \"Don't miss this great offer\", \"Open an account with us\", \"Get rich quick\",\n    \"This is not a scam\", \"Don't believe this offer\", \"Invest with us now\"]\n\n# Labels for the example data\n# 1: Spam, 0: Ham\ny = np.array([1,0,1,1,1,0,1,0,1,0])\n\n# Create the classifier\nclf = MultinomialNB()\n\n# Train the classifier\nclf.fit(X, y)\n\n# Test the classifier\ntest_example = \"Claim your prize now\"\ntest_example_label = clf.predict([test_example])\nprint(\"Test example classified as:\", test_example_label[0])",
        "1787": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that prints the fibonacci series upto a user provided limit.\n\n### Input:\n10\n\n### Output:\ndef Fibonacci(a): \n    if a<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif a==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif a==2: \n        return 1\n    else: \n        return Fibonacci(a-1)+Fibonacci(a-2) \n  \n# Driver Program \n\nlimit = int(input('Enter the limit of fibonacci series:'))\nfor i in range(1,limit+1): \n    print(Fibonacci(i))",
        "1788": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform basic cryptographic operations using a python code.\n\n### Input:\nMessage: \u201cThis is an example\u201d\n\n### Output:\n# import the required libraries \nimport base64 \nfrom cryptography.hazmat.backends import default_backend \nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC \n  \n# message to be encrypted \nmessage = \"This is an example\" \n  \n# encode the message in UTF-8 format \nencoded_message = message.encode('utf-8') \n  \n# generate a random salt \nsalt = os.urandom(16) \n  \n# derive an encryption key from the message, \n# salt and number of iterations \nkdf = PBKDF2HMAC( \n    algorithm=hashes.SHA256(), \n    length=32, \n    salt=salt, \n    iterations=100000, \n    backend=default_backend() \n) \nkey = base64.urlsafe_b64encode(kdf.derive(message)) \n  \n# encode the message \nencoded_message = base64.b64encode(message.encode('utf-8')) \n  \n# encrypt the message  \nencrypter = Cipher(algorithms.AES(key), modes.GCM(salt), backend=default_backend()).encryptor() \n  \n# finally calculate the encrypted message \nct = encrypter.update(encoded_message) + encrypter.finalize() \n\nprint(ct)",
        "1789": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to return all valid permutation of a given string\n\n### Input:\n\n\n### Output:\ndef find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res)",
        "1790": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a virtual environment in Python to manage project dependencies.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a virtual environment in Python to manage project dependencies\n\"\"\"\n\n# Create the virtual environment\npython3 -m venv env\n\n# Activate the virtual environment\nsource env\/bin\/activate\n\n# Install project requirements\npip install -r requirements.txt",
        "1791": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a symmetric matrix (with the same elements along the diagonal axis) from a given list of integers.\n\n### Input:\n[1,2,3]\n\n### Output:\ninput_list = [1,2,3]\n\nnum_elements = len(input_list)\n\ndef create_symmetric_matrix(input_list):\n    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]\n    \n    for i in range(num_elements):\n        for j in range(num_elements):\n            if i == j:\n                matrix[i][j] = input_list[i]\n            else:\n                matrix[i][j] = input_list[j]\n                \n    return matrix\n\nres = create_symmetric_matrix(input_list)\nprint(res)",
        "1792": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement K-means clustering algorithm.\n\n### Input:\n\n\n### Output:\nfrom sklearn.cluster import KMeans\n\n# create KMeans object\nkmeans = KMeans(n_clusters=3)\n\n# fit the data\nkmeans.fit(data)\n\n# predict the clusters\npredicted_clusters = kmeans.predict(data)",
        "1793": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to query a MySQL Server and display the results in a readable format\n\n### Input:\n\n\n### Output:\nimport mysql.connector\n\n# Connect to local MySQL Server\nconn = mysql.connector.connect(\n    user='root',\n    password='root',\n    host='localhost',\n    database='test'\n)\ncursor = conn.cursor()\n\n# Execute SQL Query\nsql = \"SELECT * FROM users\"\ncursor.execute(sql)\n\n# Fetch and print results\ndata = cursor.fetchall()\nfor record in data:\n    print(record)",
        "1794": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to take a natural input number and convert it to binary.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n# Get the input number\ninput_num = int(input(\"Enter a number: \"))\n\n# Convert to binary \nbinary_num = bin(input_num)\n\n# Print the result\nprint(\"The binary of {} is {}\".format(input_num, binary_num))",
        "1795": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program by reducing the running time.\n\n### Input:\ndef sum_of_numbers(n):\n   s = 0\n   for i in range(1,n+1):\n       s = s + i\n   return s\n\n### Output:\ndef sum_of_numbers(n):\n    return int(n * (n + 1) \/ 2)",
        "1796": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to calculate the mean, median and mode of a given array in Python.\n\n### Input:\n\n\n### Output:\ndef calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum \/ len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) \/ 2)] + arr[int(len(arr) \/ 2) - 1]) \/ 2\n else:\n median = arr[int(len(arr) \/ 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]",
        "1797": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to compare two strings and output the number of characters that are different.\n\n### Input:\n\n\n### Output:\ndef count_differences(str1, str2): \n    differences = 0 \n    for letter1, letter2 in zip(str1, str2): \n        if letter1 != letter2: \n            differences +=1 \n    return differences",
        "1798": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to implement bubble sort.\n\n### Input:\narr = [7,2,5,1,3]\n\n### Output:\ndef bubble_sort(arr): \n    # go through each element in the list\n    for elem in arr: \n        # compare one elem with each of the successive elements\n        for i in range(len(arr)-1): \n            if arr[i] > arr[i+1]: \n                temp = arr[i] \n                arr[i] = arr[i+1] \n                arr[i+1] = temp \n  \n    return arr \n  \narr = [7,2,5,1,3]\nsorted_arr = bubble_sort(arr)\nprint(\"Sorted array:\",sorted_arr)\n\nOutput: Sorted array: [1,2,3,5,7]",
        "1799": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input, generate a Python program that prints out the frequency of each item in the list.\n\n### Input:\n[\"apple\", \"banana\", \"apple\", \"banana\", \"orange\"]\n\n### Output:\ndef item_freq(list_input):\n    freq = {} \n  \n    for item in list_input: \n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n  \n    for key, value in freq.items(): \n        print (\"% s : % d\"%(key, value))",
        "1800": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to traverse a binary search tree in preorder traversal.\n\n### Input:\n10\n    5       15 \n  2   7   12    20\n\n### Output:\ndef preorder_traversal(root):\n    if root is None: \n        return\n    \n    print (root.data, end = ' ')\n    \n    preorder_traversal(root.left) \n    preorder_traversal(root.right)",
        "1801": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to predict whether a Iris flower is a setosa or not.\n\n### Input:\nsepal_length,sepal_width,petal_length,petal_width\n5.2,3.5,1.4,0.2\n\n### Output:\nimport sklearn\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nX_new = np.array([[5.2,3.5,1.4,0.2]])\nprediction = knn.predict(X_new)\n\nif int(prediction) == 0:\n print('The flower is a Setosa.')\nelif int(prediction) == 1:\n print('The flower is a Versicolor.')\nelse:\n print('The flower is a Virginica.')",
        "1802": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program that finds the number of even numbers in a given list.\n\n### Input:\nlist1 = [1, 4, 5, 6, 3, 2]\n\n### Output:\ndef count_even_numbers(list1):\n    count = 0\n    for item in list1:\n        if item % 2 == 0:\n            count += 1\n    return count\n\nprint(count_even_numbers(list1))",
        "1803": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python generator that generates the odd numbers between 0 and given n.\n\n### Input:\nn = 10\n\n### Output:\ndef oddNumbers(n):\n    for i in range(0, n + 1):\n        if i % 2 != 0:\n            yield i\n\nn = 10\nfor num in oddNumbers(n):\n    print(num)",
        "1804": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to pass command line arguments to a function.\n\n### Input:\n\n\n### Output:\n# Pass command line arguments to a function\n\nimport sys\n \ndef command_line_args():\n    args = []\n    # Loop over the command line arguments\n    for arg in sys.argv[1:]:\n        args.append(arg)\n    return args\n \nargs = command_line_args()\nprint(args)",
        "1805": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a name and age and prints a greeting like \"Hi, my name is <name> and I'm <age> years old.\"\n\n### Input:\n\"John\", 28\n\n### Output:\ndef greeting(name, age):\n \u00a0 \u00a0print(\"Hi, my name is \", name, \"and I'm\", age, \"years old.\")\n\ngreeting(\"John\", 28)",
        "1806": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in python which implements the following stack data type with all necessary methods.\n\n### Input:\nNot applicable\n\n### Output:\nclass Stack:\n def __init__(self):\n self.stack = []\n \n def push(self, item):\n self.stack.append(item)\n \n def pop(self):\n return self.stack.pop()\n \n def peek(self):\n return self.stack[-1]\n \n def is_empty(self):\n return self.stack == []\n \n def size(self):\n return len(self.stack)",
        "1807": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scramble a given word.\n\n### Input:\nlisten\n\n### Output:\nimport random \n  \n# Function to scramble a given word \ndef scramble(word):  \n    # Define all the possible chars in the word \n    chars = list(word)  \n  \n    # Get a random permutation of the characters \n    random.shuffle(chars) \n  \n    # Construct the scrambled word \n    scramble_word = ''.join(chars)  \n  \n    return scramble_word \n\n# Driver code \nword = 'listen'\nscrambled = scramble(word) \n  \nprint(word + \" scrambled becomes: \" + scrambled)",
        "1808": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse the following JSON and print out the values of the type and message keys.\n\n### Input:\n{\n  \"type\": \"error\",\n  \"message\": \"An error occurred\"\n}\n\n### Output:\nimport json\n\ndata = '{\"type\": \"error\", \"message\": \"An error occurred\"}'\n\njson_data = json.loads(data)\nprint(json_data[\"type\"]) # prints \"error\"\nprint(json_data[\"message\"]) # prints \"An error occurred\"",
        "1809": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dynamic query for creating a new table named \u201cemployees\u201d with 3 columns: \u201cid\u201d, \u201cname\u201d, and \u201csalary\u201d using a Python script.\n\n### Input:\n\n\n### Output:\nquery = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'",
        "1810": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake an iterative Binary Search algorithm using Python\n\n### Input:\n\n\n### Output:\ndef binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) \/\/2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1",
        "1811": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total number of bits required to store an integer.\n\n### Input:\n\n\n### Output:\ndef bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
        "1812": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a K-Means clustering algorithm in Python to cluster the given set of points into three clusters.\n\n### Input:\ndataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]\n\n### Output:\nimport numpy as np \nfrom sklearn.cluster import KMeans \n\ndataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]\n\nX = np.array(dataset) \n\nkmeans = KMeans(n_clusters=3, random_state=0).fit(X)\n\nlabels = kmeans.labels_\n\nfor i in range(len(X)):\n print(\"datapoint:\", X[i], \"belongs to cluster\", labels[i])",
        "1813": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a specific value in a large array of integers and return the index of the value if found.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\n\n### Output:\ndef search(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\nindex = search(arr, target)\nif index != -1:\n print(\"Found at index: \" + str(index))\nelse:\n print(\"Not Found\")",
        "1814": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to remove punctuations from an input text\n\n### Input:\nThis is a great world - let's start coding!\n\n### Output:\nimport string \n  \n# Remove punctuations from string \ndef remove_punctuations(s): \n    s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) \n    return s \n  \n# Driver Code \nif __name__ == \"__main__\" : \n  \n    text = \"This is a great world - let's start coding!\"\n    print(remove_punctuations(text))",
        "1815": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.\n\n### Input:\nString1 = \"Hello\" \nString2 = \"World\"\n\n### Output:\ndef combine_strings(s1, s2):\n if s1 < s2:\n print(s1+s2)\n else:\n print(s2+s1)\n\ncombine_strings(\"Hello\", \"World\")\n# Output: HelloWorld",
        "1816": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python that encodes a given string of text.\n\n### Input:\nencoding_string = \"Hello World\"\n\n### Output:\ndef encode_string(encoding_string):\n    encoded_string = \"\"\n    for char in encoding_string : \n        encoded_string += str(ord(char)) + \" \"\n    return encoded_string",
        "1817": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to predict the type of flower given a set of attributes.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))",
        "1818": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search an element in a list using Binary Search\n\n### Input:\n[2, 8, 10, 17, 19, 25, 28]\n\n### Output:\ndef binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n      \n    while low <= high: \n        mid = (high + low) \/\/ 2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \narr = [2, 8, 10, 17, 19, 25, 28]\nx = 19\nresult = binary_search(arr, x)\nprint(result)",
        "1819": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a report to recommend a good option without using any external library in Python.\n\n### Input:\n[\n    {\n        \"name\": \"A\",\n        \"cost\": 10,\n        \"rating\": 7\n    },\n    {\n        \"name\": \"B\",\n        \"cost\": 15,\n        \"rating\": 6\n    },\n    {\n        \"name\": \"C\",\n        \"cost\": 20,\n        \"rating\": 8\n    },\n]\n\n### Output:\ndef recommend_option(options):\n  best_option = {}\n\n  for option in options:\n    if (best_option == {}) or (option['cost']\/option['rating'] < best_option['cost']\/best_option['rating']):\n      best_option = option\n\n  return best_option['name']",
        "1820": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary of the elements in a list and their frequency count.\n\n### Input:\nlist = [3, 2, 3, 4, 5]\n\n### Output:\ndef frequency_dict(list):\n    counts = {}\n    for i in list:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n\nprint(frequency_dict(list))",
        "1821": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes two positive integers, a and b, and returns a random number between 1 and a^b.\n\n### Input:\n\n\n### Output:\ndef random_int(a, b):\n    random_number = random.randint(1, a**b)\n    return random_number",
        "1822": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for an object that can contain two strings.\n\n### Input:\n\n\n### Output:\nclass TwoStringObject:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2",
        "1823": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a sequence of numbers and removes numbers that occur more than twice.\n\n### Input:\n[1,2,1,3,4,2,2,2,3,1]\n\n### Output:\ndef remove_multiple_occurrences(arr):\n seen = set([]) # stores all the numbers we've seen before\n new_arr = [] # stores the numbers that occurred only once or twice\n\nfor num in arr:\n if num not in seen:\n  seen.add(num) # add to the numbers we've seen\n  new_arr.append(num)\n elif num in seen:\n  seen.remove(num) # remove from the \"seen\" set\n\nreturn new_arr\n\narr = [1,2,1,3,4,2,2,2,3,1]\nprint(remove_multiple_occurrences(arr))\n# Prints [4]",
        "1824": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the benefits of using classes instead of writing functions in Python?\n\n### Input:\n\n\n### Output:\nThe benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources.",
        "1825": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that could represent a book.\n\n### Input:\n\n\n### Output:\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    # other methods, such as get_title(), set_title(), get_author(), set_author(), etc. could go here",
        "1826": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random username using letter and numbers.\n\n### Input:\n[No input]\n\n### Output:\nimport string\nfrom random import *\n\ndef generate_username():\n    letters = string.ascii_letters\n    numbers = string.digits\n    username = \"\"\n    for _ in range(10):\n        username += choice(letters) + choice(numbers)\n    return username\n\nprint(generate_username())",
        "1827": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant in Python to generate a daily calendar with the user's tasks and appointments.\n\n### Input:\n\n\n### Output:\nimport datetime\n\ndef generate_calendar(tasks, appointments):\n    day = datetime.datetime.now().strftime('%A')\n    calendar = {day: {}}\n\n    for task in tasks:\n        calendar[day]['tasks'] = {'name': task['name'], 'time': task['time']}\n\n    for appointment in appointments:       \n        calendar[day]['appointments'] = {'name': appointment['name'], 'time': appointment['time']}  \n    return calendar\n\nif __name__ == '__main__':\n    tasks = [{'name': 'Write code', 'time': '8pm'}, {'name': 'Complete project', 'time': '9pm'}]\n    appointments = [{'name': 'Meeting with Bob', 'time': '2pm'}, {'name': 'Meeting with Alice', 'time': '4pm'}]\n    result = generate_calendar(tasks, appointments)\n    print(result)",
        "1828": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to find the list's maximum value.\n\n### Input:\n[1, 8, 2, 4, 10]\n\n### Output:\ndef find_max(nums):\n    max_value = nums[0] \n    for i in nums:\n        if i > max_value:\n            max_value = i\n    return max_value\n\nnums = [1, 8, 2, 4, 10]\nprint(find_max(nums))",
        "1829": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can identify a triangle using the 3 provided side lengths.\n\n### Input:\n3, 4, 5\n\n### Output:\n\"\"\"\nCreate a Python program that can identify a triangle using 3 provided side lengths.\n\"\"\"\n\ndef is_valid_triangle(side1, side2, side3): \n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): \n        return True \n    else: \n        return False\n\nif __name__ == '__main__':\n    side1 = 3\n    side2 = 4\n    side3 = 5\n    print(is_valid_triangle(side1, side2, side3))",
        "1830": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if two strings are anagrams of each other.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n    # Create lists of characters in each string\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # Compare the two lists \n    if list1 == list2:\n        return True\n    else:\n        return False",
        "1831": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random list of numbers in Python\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n \nnums = []\nfor i in range(10):\n nums.append(random.randint(1, 100))\n \nprint(nums)",
        "1832": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hash table in Python.\n\n### Input:\n<no input>\n\n### Output:\ntable = dict()\n\ntable['one'] = 1\ntable['two'] = 2\ntable['three'] = 3",
        "1833": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object, write a Python program to list out all the keys present in the object\n\n### Input:\njson_object = {\"Stud1\": {\"Roll No\": 1, \"Class\": 10}, \"Stud2\": {\"Roll No\": 2, \"Class\": 11}}\n\n### Output:\nkeys = [\"Stud1\", \"Roll No\", \"Class\", \"Stud2\"]",
        "1834": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string of text as the input and returns a dictionary containing count of each character in the text.\n\n### Input:\nNot applicable\n\n### Output:\ndef char_count(text):\n  chars = {}\n  for char in text:\n    if char in chars:\n      chars[char] += 1\n    else:\n      chars[char] = 1\n  return chars",
        "1835": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class to represent an Employee in Python.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n   def get_name(self):\n        return self.name\n\n   def get_age(self):\n        return self.age\n\n   def get_salary(self):\n        return self.salary",
        "1836": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words.\n\n### Input:\nNot applicable\n\n### Output:\nimport collections\nimport sys\n\ndef count_words(text):\n word_counts = collections.Counter(text.split())\n top_five = word_counts.most_common(5)\n for word, count in top_five:\n print(f'{word} occurred {count} times')\n\nif __name__ == '__main__':\n text = sys.stdin.read()\n count_words(text)",
        "1837": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that generates lyrics for a song.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# A list of words, that the program can use to generate lyrics\nwords = [\"Love\", \"Life\", \"Dreams\", \"Happiness\", \"Joy\", \"Home\",\n\"Friends\", \"Family\", \"Success\", \"Believe\", \"Magic\", \"Laughter\",\n\"Together\", \"Memories\", \"Adventure\", \"Appreciate\", \"Peace\",\n\"Passion\", \"Courage\", \"Forever\"]\n\n# Generate a song with 8 lines\nfor i in range(8):\n # Choose random words to form the line\n line = \"\"\n for j in range(4):\n line += random.choice(words) + \" \"\n # Capitalize the line and add punctuation\n line = line.capitalize() + \".\\n\"\n print(line)\n\n# Print the result\nprint(\"That is all I need to be complete.\")",
        "1838": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a boolean expression from an algebraic expression.\n\n### Input:\nexpression = \"x + (y - z) > 0\"\n\n### Output:\ndef convert_to_boolean(expression):\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    \n    tokens = expression.split(\"+\")\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].replace(\"-\",\"+-\")\n    \n    expression = \"\".join(tokens)\n    expression = expression.replace(\" > 0\", \"\")\n    expression = expression.split(\"+\")\n    \n    boolean_expression = \" \".join(expression)\n    boolean_expression = boolean_expression.replace(\" x\", \"True\")\n    boolean_expression = boolean_expression.replace(\"y\", \"True\")\n    boolean_expression = boolean_expression.replace(\"z\", \"False\")\n    \n    return boolean_expression",
        "1839": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript algorithm to check if a given string contains all the characters of another given string.\n\n### Input:\nstr1 = 'python' \nstr2 = 'ono',\n\n### Output:\nfunction checkStringContains(str1, str2) {\n  let occurs = 0;\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j <= str2.length; j++) {\n      if (str1[i] === str2[j]) {\n        occurs++;\n        break;\n      }\n    }\n  }\n  return occurs === str2.length;\n}\n\nconst result = checkStringContains('python', 'ono');\nconsole.log(result);",
        "1840": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for finding the most common element in a list.\n\n### Input:\n\n\n### Output:\ndef most_common(lst):\n  return max(set(lst), key=lst.count)",
        "1841": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a language (example: Python), write a function to convert a string (example: \"Hello World!) to a list.\n\n### Input:\nPython\n\n### Output:\ndef str_to_list(string):\n    return string.split(' ')",
        "1842": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate and print a Fibonacci series.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2, n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(9)) \n# 21",
        "1843": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of the first 10 whole numbers using python.\n\n### Input:\n\n\n### Output:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "1844": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect if a given string contains any of the given keywords.\n\n### Input:\nString: I love ice cream\nKeywords: [\"chocolate\", \"vanilla\"]\n\n### Output:\ndef keyword_detector(string, keywords):\n for i in keywords:\n if i in string:\n return True\n return False\n\nprint(keyword_detector(\"I love ice cream\", [\"chocolate\", \"vanilla\"]))",
        "1845": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python program that prints out the class average for a list of student grades.\n\n### Input:\n[80, 85, 90, 75, 95]\n\n### Output:\nnumbers = [80, 85, 90, 75, 95]\n\ntotal = 0\nfor number in numbers:\n total += number\n\nclass_average = total \/ len(numbers)\nprint(class_average)",
        "1846": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python routine that can simulate the backend of a website that has a shopping cart.\n\n### Input:\n\n\n### Output:\n# Initalize a shopping cart dictionary\nshopping_cart = {}\n\n# Function to add an item to the shopping cart\ndef add_item_to_cart(item, quantity):\n    if item in shopping_cart:\n        shopping_cart[item] += quantity\n    else:\n        shopping_cart[item] = quantity\n\n# Function to remove an item from the shopping cart\ndef remove_item_from_cart(item):\n    if item in shopping_cart:\n        del shopping_cart[item]\n\n# Function to calculate the total price\ndef calculate_total():\n    total = 0\n    for item, quantity in shopping_cart.items():\n        total += item.price * quantity\n        \n    return total\n\n# Function to clear the shopping cart\ndef clear_cart():\n    shopping_cart.clear()",
        "1847": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function using Python that reverses the order of the words in a given string.\n\n### Input:\nPlease reverse the order of the words.\n\n### Output:\ndef reverse_words(string): \n    words = string.split(' ') \n    reverse = words[::-1] \n    return ' '.join(reverse)",
        "1848": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the length of the hypotenuse of a right triangle.\n\n### Input:\nLength of sides: 3 and 4\n\n### Output:\ndef hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0",
        "1849": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract products from an e-commerce site.\n\n### Input:\nURL: https:\/\/www.example.com\/products\n\n### Output:\n# importing libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# making the request\nurl = \"https:\/\/www.example.com\/products\"\nr = requests.get(url)\n\n# extracting the data with BeautifulSoup\nsoup = BeautifulSoup(r.content)\nproducts = soup.find_all(\"div\", {\"class\": \"product\"})\n\nfor product in products:\n    product_name = product.find(\"h3\").text\n    product_price = product.find(\"span\", {\"class\": \"price\"}).text\n    print(\"Found product: %s %s\" % (product_name, product_price))",
        "1850": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilizing a language model, AutoML, and a database of sports data, generate a Python program that suggests the best team for a given player by querying the database.\n\n### Input:\nYadiel Rivera, shortstop\n\n### Output:\nimport pandas as pd\nfrom google.cloud import automl\n\n# Create an Automl Client\nclient = automl.TablesClient(project='PROJECT_ID', region='us-central1')\n\ndef predict_team(player_name, position):\n \"\"\"\n Generates a team recommendation using AutoML based on player's name and position.\n \"\"\"\n # Create tables client\n model_display_name = 'YOUR_MODEL_DISPLAY_NAME'\n table_spec_name = f'projects\/PROJECT_ID\/locations\/us-central1\/tables\/{model_display_name}'\n\n # Create the dataframe with player data\n data = {\n 'player_name': player_name,\n 'position': position\n }\n df = pd.DataFrame(data, index=[0])\n\n # Create a prediction object\n pred_bt = client.predict(\n model_display_name=model_display_name,\n inputs=df[['player_name', 'position']],\n table_spec_name=table_spec_name\n )\n\n # Format into team recommendation\n team_name = pred_bt.payload[0].tables.value.string_value\n return team_name\n\ntarget_player = 'Yadiel Rivera'\ntarget_position = 'Shortstop'\nresult = predict_team(target_player, target_position)\nprint(f'For player {target_player} playing {target_position}: {result}')",
        "1851": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the maximum value of two given numbers.\n\n### Input:\n12 and 15\n\n### Output:\ndef max_val(num1, num2):\n    # function to find the maximum value of two numbers\n    if(num1 > num2):\n        return num1\n    else:\n        return num2\n\n# get the input values from the user\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\n# call the max_val() function\nmax_val = max_val(a,b)\n\nprint(\"The maximum value is:\", max_val)",
        "1852": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N.\n\n### Input:\nN = 10\n\n### Output:\n\"\"\"\nA Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N\n\"\"\"\n\nN = 10\nmy_dict = {}\n\n# Generate the dictionary\nfor i in range(1, N+1):\n    my_dict[i] = i * i\n\n# Print the dictionary\nprint(my_dict)",
        "1853": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to print out the most frequent word in a given dictionary\n\n### Input:\nd = {'dog':3, 'cat':5, 'bird':4, 'horse':7}\n\n### Output:\n# Initialize a variable for the maximum count\nmax_count = 0\n\n# Initialize a variable for the most frequent word\nmost_frequent_word = \"\"\n\n# Loop the dictionary\nfor key, value in d.items():\n    if value > max_count:\n        max_count = value\n        most_frequent_word = key\n\n# Print the most frequent word\nprint(\"The most frequent word is '{}'\".format(most_frequent_word))",
        "1854": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to convert a given string to pig latin.\n\n### Input:\n\n\n### Output:\ndef pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)",
        "1855": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a string function in Python to convert all words in a string to uppercase.\n\n### Input:\nstring = \"this is a sample string\"\n\n### Output:\ndef to_upper(string):\n return string.upper()\n \nprint(to_upper(string))  # THIS IS A SAMPLE STRING",
        "1856": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code that generates the following output using looping concepts in Python.\n\n### Input:\n\n\n### Output:\nfor x in range(1, 10):\n    for y in range(1, 10):\n        print('{} x {} = {}'.format(x, y, x*y))",
        "1857": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python kernel for a Jupyter Notebook that supports control flow statements (if & for loops).\n\n### Input:\nNot applicable\n\n### Output:\nfrom IPython.core.magic import register_cell_magic\n\n@register_cell_magic\ndef if_(line, cell):\n    _, condition = line.split(\" \", 1)\n    result = f\"if {condition}:\"\n    return f\"{result}\\n    {cell}\"\n\n@register_cell_magic\ndef for_(line, cell):\n    _, condition = line.split(' ', 1)\n    result = f\"for {condition}:\"\n    return f\"{result}\\n    {cell}\"",
        "1858": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that extends the built-in list object.\n\n### Input:\n\n\n### Output:\nclass MyList(list):\n  def __init__(self):\n    super().__init__()\n  def some_method(self):\n    pass",
        "1859": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze a given code and suggest areas for improvement in functionality, resiliency or optimization.\n\n### Input:\n# A simple Python program to add two numbers\nnum1 = 1.5\nnum2 = 6.3\n\n# Add two numbers\nsum = float(num1) + float(num2)\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n\n### Output:\n# A simple Python program to add two numbers\na = 1.5\nb = 6.3\n\n# Use more descriptive variable names\nnum1 = a\nnum2 = b\n\n# Use the in-built sum() function\nsum = sum([a, b])\n\n# Use f-strings to reduce the amount of code\nprint(f'The sum of {a} and {b} is {sum}')",
        "1860": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an artificial neural network (ANN) architecture in Python for a given 3-class classification task.\n\n### Input:\nInput layer size = 50\nNumber of hidden layers = 2 \nNumber of output categories = 3\n\n### Output:\nimport torch.nn as nn\n\nclass ANN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Input layer\n        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer\n        self.relu1 = nn.ReLU()\n        # Hidden layer 1\n        self.fc2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        # Hidden layer 2\n        self.fc3 = nn.Linear(32, 16)\n        self.relu3 = nn.ReLU()\n        # Output layer\n        self.fc4 = nn.Linear(16, 3)\n        self.sigmoid = nn.Sigmoid()\n \n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu1(x)\n        x = self.fc2(x)\n        x = self.relu2(x)\n        x = self.fc3(x)\n        x = self.relu3(x)\n        x = self.fc4(x)\n        x = self.sigmoid(x)\n        return x"
    }
}